{"version":3,"file":"swap-dd1b8f34.js","sources":["../../src/composables/pools/usePoolFilters.ts","../../src/composables/swap/useSwapAssets.ts","../../src/components/cards/SwapCard/SwapRoute.vue","../../src/lib/utils/balancer/tokens.ts","../../src/composables/approvals/useTokenApproval.ts","../../src/lib/utils/balancer/wrapper.ts","../../src/components/modals/SwapPreviewModal.vue","../../src/composables/swap/useCowswap.ts","../../src/lib/utils/balancer/helpers/sor/sorManager.ts","../../src/composables/swap/useSor.ts","../../src/composables/swap/useJoinExit.ts","../../src/composables/swap/useSwapping.ts","../../src/composables/swap/useValidation.ts","../../src/components/cards/SwapCard/SwapPairToggle.vue","../../src/components/cards/SwapCard/SwapPairToggle.vue","../../src/components/cards/SwapCard/SwapPair.vue","../../src/components/cards/SwapCard/SwapCard.vue","../../src/components/cards/SwapCard/SwapCard.vue","../../src/pages/swap.vue"],"sourcesContent":["import { ref } from 'vue';\r\n\r\n// STATE\r\nconst selectedTokens = ref<string[]>([]);\r\n\r\nexport default function usePoolFilters() {\r\n  function setSelectedTokens(addresses: string[]): void {\r\n    selectedTokens.value = addresses;\r\n  }\r\n\r\n  function addSelectedToken(address: string): void {\r\n    selectedTokens.value.push(address);\r\n  }\r\n\r\n  function removeSelectedToken(address: string): void {\r\n    const tokenIndex = selectedTokens.value.indexOf(address);\r\n    selectedTokens.value.splice(tokenIndex, 1);\r\n  }\r\n\r\n  return {\r\n    // state\r\n    selectedTokens,\r\n    // methods\r\n    setSelectedTokens,\r\n    addSelectedToken,\r\n    removeSelectedToken,\r\n  };\r\n}\r\n","import { networkId } from '@/composables/useNetwork';\r\nimport initialTokens from '@/constants/initialTokens.json';\r\nimport { lsGet, lsSet } from '@/lib/utils';\r\n\r\nconst inputAsset = ref(\r\n  lsGet(`inputAsset.${networkId.value}`, initialTokens[networkId.value].input)\r\n);\r\nconst outputAsset = ref(\r\n  lsGet(`outputAsset.${networkId.value}`, initialTokens[networkId.value].output)\r\n);\r\n\r\nfunction setInputAsset(asset: string): void {\r\n  inputAsset.value = asset;\r\n  lsSet(`inputAsset.${networkId.value}`, asset);\r\n}\r\n\r\nfunction setOutputAsset(asset: string): void {\r\n  outputAsset.value = asset;\r\n  lsSet(`outputAsset.${networkId.value}`, asset);\r\n}\r\n\r\nexport function useSwapAssets() {\r\n  return {\r\n    inputAsset,\r\n    outputAsset,\r\n    setInputAsset,\r\n    setOutputAsset,\r\n  };\r\n}\r\n","<script setup lang=\"ts\">\r\nimport { SubgraphPoolBase, SwapV2 } from '@balancer-labs/sdk';\r\nimport { getAddress } from '@ethersproject/address';\r\nimport { AddressZero } from '@ethersproject/constants';\r\nimport BigNumber from 'bignumber.js';\r\n\r\nimport useNumbers, { FNumFormats } from '@/composables/useNumbers';\r\nimport { useTokens } from '@/providers/tokens.provider';\r\nimport { NATIVE_ASSET_ADDRESS } from '@/constants/tokens';\r\nimport { isSameAddress } from '@/lib/utils';\r\nimport { SorReturn } from '@/lib/utils/balancer/helpers/sor/sorManager';\r\nimport useWeb3 from '@/services/web3/useWeb3';\r\nimport { networkSlug } from '@/composables/useNetwork';\r\n\r\ninterface Props {\r\n  addressIn: string;\r\n  amountIn: string;\r\n  addressOut: string;\r\n  amountOut: string;\r\n  pools: SubgraphPoolBase[];\r\n  sorReturn: SorReturn;\r\n}\r\n\r\ninterface Route {\r\n  share: number;\r\n  hops: Hop[];\r\n}\r\n\r\ninterface Hop {\r\n  pool: {\r\n    address: string;\r\n    id: string;\r\n    tokens: Asset[];\r\n  };\r\n  tokenIn: string;\r\n  tokenOut: string;\r\n  amount: BigNumber;\r\n}\r\n\r\ninterface Asset {\r\n  address: string;\r\n  share: number;\r\n}\r\n\r\nconst props = defineProps<Props>();\r\n\r\nconst { fNum } = useNumbers();\r\n\r\nconst { appNetworkConfig } = useWeb3();\r\nconst { getToken } = useTokens();\r\n\r\nconst visible = ref(false);\r\n\r\nfunction toggleVisibility(): void {\r\n  visible.value = !visible.value;\r\n}\r\n\r\nconst input = computed(() => {\r\n  const symbol = getToken(props.addressIn).symbol;\r\n  return {\r\n    amount: props.amountIn,\r\n    address: props.addressIn,\r\n    symbol,\r\n  };\r\n});\r\n\r\nconst output = computed(() => {\r\n  const symbol = getToken(props.addressOut).symbol;\r\n  return {\r\n    amount: props.amountOut,\r\n    address: props.addressOut,\r\n    symbol,\r\n  };\r\n});\r\n\r\nconst routes = computed<Route[]>((): Route[] => {\r\n  const { sorReturn } = props;\r\n\r\n  if (!sorReturn.hasSwaps) {\r\n    return [];\r\n  }\r\n\r\n  const pools = props.pools as SubgraphPoolBase[];\r\n  const swaps = sorReturn.result.swaps;\r\n  const addresses = sorReturn.result.tokenAddresses;\r\n  const addressIn = props.addressIn as string;\r\n  const addressOut = props.addressOut as string;\r\n\r\n  return getV2Routes(addressIn, addressOut, pools, swaps, addresses);\r\n});\r\n// TODO: Fix types\r\nfunction getV2Routes(\r\n  addressIn: string,\r\n  addressOut: string,\r\n  pools: SubgraphPoolBase[],\r\n  swaps: SwapV2[],\r\n  addresses: string[]\r\n): Route[] {\r\n  // ) {\r\n  const { addresses: constants } = appNetworkConfig;\r\n\r\n  addressIn =\r\n    addressIn === NATIVE_ASSET_ADDRESS ? constants.weth : getAddress(addressIn);\r\n  addressOut =\r\n    addressOut === NATIVE_ASSET_ADDRESS\r\n      ? constants.weth\r\n      : getAddress(addressOut);\r\n\r\n  if (\r\n    !pools.length ||\r\n    !swaps.length ||\r\n    !addresses.length ||\r\n    addresses.length === 1\r\n  ) {\r\n    return [];\r\n  }\r\n\r\n  // To get total amount we can use all swaps because multihops have a value of 0\r\n  const totalSwapAmount = swaps.reduce((total, rawHops) => {\r\n    return total.plus(rawHops.amount || '0');\r\n  }, new BigNumber(0));\r\n\r\n  // Contains direct and multihops\r\n  const routes: Route[] = [];\r\n  // Contains every token > token hop\r\n  const allHops: Hop[] = [];\r\n  for (let i = 0; i < swaps.length; i++) {\r\n    const swap = swaps[i];\r\n    const rawPool = pools.find(pool => pool.id === swap.poolId);\r\n\r\n    if (rawPool) {\r\n      const tokenIn =\r\n        addresses[swap.assetInIndex] === AddressZero\r\n          ? constants.weth\r\n          : getAddress(addresses[swap.assetInIndex]);\r\n      const tokenOut =\r\n        addresses[swap.assetOutIndex] === AddressZero\r\n          ? constants.weth\r\n          : getAddress(addresses[swap.assetOutIndex]);\r\n\r\n      const isDirectSwap =\r\n        tokenIn === addressIn && tokenOut === addressOut ? true : false;\r\n\r\n      const pool = {\r\n        address: rawPool.address,\r\n        id: rawPool.id,\r\n        tokens: rawPool.tokens\r\n          .map(token => {\r\n            return {\r\n              address: getAddress(token.address),\r\n              share:\r\n                parseFloat(token.weight || '') || 1 / rawPool.tokens.length,\r\n            };\r\n          })\r\n          .sort((a, b) => {\r\n            if (\r\n              isSameAddress(a.address, tokenIn) ||\r\n              isSameAddress(b.address, tokenOut)\r\n            ) {\r\n              return -1;\r\n            }\r\n            if (\r\n              isSameAddress(a.address, tokenOut) ||\r\n              isSameAddress(b.address, tokenIn)\r\n            ) {\r\n              return 1;\r\n            }\r\n            return a.share - b.share;\r\n          })\r\n          .filter((_token, index, tokens) => {\r\n            // Show first 2 and last 2 tokens\r\n            return index < 2 || index > tokens.length - 3;\r\n          }),\r\n      };\r\n\r\n      const hop = {\r\n        pool,\r\n        tokenIn,\r\n        tokenOut,\r\n        amount: new BigNumber(swap.amount || '0'),\r\n      };\r\n\r\n      allHops.push(hop);\r\n\r\n      if (isDirectSwap) {\r\n        // Direct swaps are pushed to routes array immediately\r\n        const share = hop.amount.div(totalSwapAmount).toNumber();\r\n        const route = {\r\n          share,\r\n          hops: [hop],\r\n        } as Route;\r\n        routes.push(route);\r\n      } else {\r\n        // Only multihops that have a previous partner in sequence are pushed to routes\r\n        if (tokenOut === addressOut && swap.amount === '0') {\r\n          // TokenOut with amount of 0 for multihop means it's a swapExactIn and previous swap is partner of hop\r\n          const swapAmount = new BigNumber(allHops[i - 1].amount);\r\n          const share = swapAmount.div(totalSwapAmount).toNumber();\r\n          const route = {\r\n            share,\r\n            hops: [allHops[i - 1], hop],\r\n          } as Route;\r\n          routes.push(route);\r\n        } else if (tokenIn === addressIn && swap.amount === '0') {\r\n          // TokenIn with amount of 0 for multihop means it's a swapExactOut and previous swap is partner of hop\r\n          const swapAmount = new BigNumber(allHops[i - 1].amount);\r\n          const share = swapAmount.div(totalSwapAmount).toNumber();\r\n          const route = {\r\n            share,\r\n            hops: [hop, allHops[i - 1]],\r\n          } as Route;\r\n          routes.push(route);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return routes;\r\n}\r\n\r\nfunction formatShare(share: number): string {\r\n  return fNum(share, FNumFormats.percent);\r\n}\r\n</script>\r\n\r\n<template>\r\n  <BalCard v-if=\"routes.length > 0\" shadow=\"none\">\r\n    <div\r\n      class=\"flex items-center cursor-pointer text-secondary\"\r\n      @click=\"toggleVisibility\"\r\n    >\r\n      <div class=\"mr-2\">\r\n        {{ $t('swapRoute') }}\r\n      </div>\r\n      <BalIcon v-if=\"visible\" name=\"chevron-up\" size=\"sm\" />\r\n      <BalIcon v-else name=\"chevron-down\" size=\"sm\" />\r\n    </div>\r\n    <div v-if=\"visible\" class=\"mt-5\">\r\n      <div\r\n        v-if=\"routes.length === 0\"\r\n        class=\"mt-5 text-sm text-secondary\"\r\n        v-text=\"$t('noData')\"\r\n      />\r\n      <div v-else>\r\n        <div>\r\n          <div class=\"flex justify-between text-xs\">\r\n            <div>\r\n              <div class=\"font-semibold\">\r\n                {{ input.amount }}\r\n              </div>\r\n              <div>\r\n                {{ input.symbol }}\r\n              </div>\r\n            </div>\r\n            <div class=\"flex flex-col items-end\">\r\n              <div class=\"font-semibold\">\r\n                {{ output.amount }}\r\n              </div>\r\n              <div>\r\n                {{ output.symbol }}\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"relative mt-2\">\r\n            <div\r\n              class=\"absolute mx-9 h-1/2 border-b border-gray-500 border-dashed pair-line\"\r\n            />\r\n            <div class=\"flex relative z-10 justify-between\">\r\n              <BalAsset :address=\"input.address\" :size=\"36\" />\r\n              <BalAsset :address=\"output.address\" :size=\"36\" />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div\r\n          class=\"flex justify-between\"\r\n          :style=\"{ margin: `8px ${12 + routes.length}px` }\"\r\n        >\r\n          <BalIcon\r\n            name=\"triangle\"\r\n            size=\"xxs\"\r\n            :filled=\"true\"\r\n            class=\"rotate-180 text-secondary\"\r\n          />\r\n          <BalIcon\r\n            name=\"triangle\"\r\n            size=\"xxs\"\r\n            :filled=\"true\"\r\n            class=\"text-secondary\"\r\n          />\r\n        </div>\r\n        <div class=\"relative my-1.5 mx-4\">\r\n          <div\r\n            v-for=\"(route, index) in routes\"\r\n            :key=\"index\"\r\n            :style=\"{\r\n              height: `${18 + 70 * index}px`,\r\n              width: `calc(100% - ${4 * (routes.length - index - 1)}px + 1px)`,\r\n              margin: `0 ${2 * (routes.length - index - 1) - 1}px`,\r\n            }\"\r\n            class=\"absolute rounded-b-md border-r border-b border-l border-gray-500\"\r\n          />\r\n          <div class=\"relative z-10\">\r\n            <div\r\n              v-for=\"route in routes\"\r\n              :key=\"route.hops[0]?.pool?.address\"\r\n              class=\"flex justify-between mt-9 first:mt-0\"\r\n            >\r\n              <div class=\"flex items-center ml-4 w-4\">\r\n                <BalIcon\r\n                  name=\"triangle\"\r\n                  size=\"xxs\"\r\n                  :filled=\"true\"\r\n                  class=\"rotate-90 text-secondary\"\r\n                />\r\n              </div>\r\n              <div class=\"flex\">\r\n                <div\r\n                  v-for=\"hop in route.hops\"\r\n                  :key=\"hop?.pool?.address\"\r\n                  class=\"flex ml-4 first:ml-0 bg-white hover:bg-gray-50 dark:bg-gray-900 dark:hover:bg-gray-800 rounded-xl border border-gray-100 hover:border-gray-300 dark:border-gray-600 dark:hover:border-gray-400 shadow transition-colors\"\r\n                >\r\n                  <a\r\n                    class=\"flex p-1.5\"\r\n                    :href=\"`/${networkSlug}/pool/${hop.pool.id}`\"\r\n                    target=\"_blank\"\r\n                  >\r\n                    <BalAsset\r\n                      v-for=\"token in hop.pool.tokens\"\r\n                      :key=\"token.address\"\r\n                      class=\"ml-1.5 first:ml-0\"\r\n                      :address=\"token.address\"\r\n                      :size=\"20\"\r\n                    />\r\n                  </a>\r\n                </div>\r\n              </div>\r\n              <div class=\"mr-4 w-10 text-xs text-right text-secondary\">\r\n                {{ formatShare(route.share) }}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </BalCard>\r\n</template>\r\n\r\n\r\n\r\n<style scoped>\r\n.pair-line {\r\n  width: calc(100% - 72px);\r\n}\r\n</style>\r\n","import { MaxUint256 } from '@ethersproject/constants';\r\nimport { TransactionResponse } from '@ethersproject/providers';\r\nimport { WalletProvider } from '@/dependencies/wallets/Web3Provider';\r\n\r\nimport { default as abi } from '@/lib/abi/ERC20.json';\r\nimport { TransactionBuilder } from '@/services/web3/transactions/transaction.builder';\r\n\r\nexport async function approveToken(\r\n  web3: WalletProvider,\r\n  spender: string,\r\n  token: string\r\n): Promise<TransactionResponse> {\r\n  const txBuilder = new TransactionBuilder(web3.getSigner());\r\n  return await txBuilder.contract.sendTransaction({\r\n    contractAddress: token,\r\n    abi,\r\n    action: 'approve',\r\n    params: [spender, MaxUint256.toString()],\r\n  });\r\n}\r\n\r\nexport async function approveTokens(\r\n  web3: WalletProvider,\r\n  spender: string,\r\n  tokens: string[]\r\n): Promise<TransactionResponse[]> {\r\n  return await Promise.all(\r\n    tokens.map(token => approveToken(web3, spender, token))\r\n  );\r\n}\r\n","import { TransactionResponse } from '@ethersproject/providers';\r\nimport { computed, Ref, ref, watch } from 'vue';\r\nimport { useI18n } from 'vue-i18n';\r\n\r\nimport { isSameAddress } from '@/lib/utils';\r\nimport { approveTokens } from '@/lib/utils/balancer/tokens';\r\nimport { configService } from '@/services/config/config.service';\r\nimport useWeb3 from '@/services/web3/useWeb3';\r\nimport { TokenInfoMap } from '@/types/TokenList';\r\n\r\nimport useConfig from '../useConfig';\r\nimport useEthers from '../useEthers';\r\nimport { useTokens } from '@/providers/tokens.provider';\r\nimport useTransactions from '../useTransactions';\r\n\r\nexport default function useTokenApproval(\r\n  tokenInAddress: Ref<string>,\r\n  amount: Ref<string>,\r\n  tokens: Ref<TokenInfoMap>\r\n) {\r\n  /**\r\n   * STATE\r\n   */\r\n  const approving = ref(false);\r\n  const approved = ref(false);\r\n  const { addTransaction } = useTransactions();\r\n  const { t } = useI18n();\r\n\r\n  /**\r\n   * COMPOSABLES\r\n   */\r\n  const { getProvider } = useWeb3();\r\n  const { txListener } = useEthers();\r\n  const { networkConfig } = useConfig();\r\n  const { approvalRequired, dynamicDataLoading } = useTokens();\r\n\r\n  /**\r\n   * COMPUTED\r\n   */\r\n  const allowanceState = computed(() => {\r\n    if (\r\n      isSameAddress(tokenInAddress.value, networkConfig.nativeAsset.address)\r\n    ) {\r\n      return {\r\n        isUnlockedV2: true,\r\n        approvedSpenders: {},\r\n      };\r\n    }\r\n\r\n    if (!tokenInAddress.value || !amount.value || approved.value === true)\r\n      return {\r\n        isUnlockedV2: true,\r\n        approvedSpenders: {},\r\n      };\r\n\r\n    const v2ApprovalRequired = approvalRequired(\r\n      tokenInAddress.value,\r\n      amount.value\r\n    );\r\n\r\n    return {\r\n      isUnlockedV2: !v2ApprovalRequired,\r\n    };\r\n  });\r\n\r\n  const isUnlockedV2 = computed(() => allowanceState.value.isUnlockedV2);\r\n\r\n  /**\r\n   * METHODS\r\n   */\r\n  async function approveSpender(spender: string): Promise<TransactionResponse> {\r\n    approving.value = true;\r\n    try {\r\n      const [tx] = await approveTokens(getProvider(), spender, [\r\n        tokenInAddress.value,\r\n      ]);\r\n      txHandler(tx, spender);\r\n      return tx;\r\n    } catch (e) {\r\n      console.log(e);\r\n      approving.value = false;\r\n      return Promise.reject(e);\r\n    }\r\n  }\r\n\r\n  async function approveV2(): Promise<TransactionResponse> {\r\n    console.log('[TokenApproval] Unlock V2');\r\n    return approveSpender(configService.network.addresses.vault);\r\n  }\r\n\r\n  function txHandler(tx: TransactionResponse, spender: string): void {\r\n    addTransaction({\r\n      id: tx.hash,\r\n      type: 'tx',\r\n      action: 'approve',\r\n      summary: t('transactionSummary.approveForSwapping', [\r\n        tokens.value[tokenInAddress.value]?.symbol,\r\n      ]),\r\n      details: {\r\n        contractAddress: tokenInAddress.value,\r\n        spender,\r\n      },\r\n    });\r\n\r\n    txListener(tx, {\r\n      onTxConfirmed: () => {\r\n        approving.value = false;\r\n        approved.value = true;\r\n      },\r\n      onTxFailed: () => {\r\n        approving.value = false;\r\n      },\r\n    });\r\n  }\r\n\r\n  /**\r\n   * WATCHERS\r\n   */\r\n  watch(tokenInAddress, async () => {\r\n    if (\r\n      isSameAddress(tokenInAddress.value, networkConfig.nativeAsset.address)\r\n    ) {\r\n      approved.value = true;\r\n    } else {\r\n      approved.value = false;\r\n    }\r\n  });\r\n\r\n  return {\r\n    approved,\r\n    approving,\r\n    approveV2,\r\n    approveSpender,\r\n    allowanceState,\r\n    isUnlockedV2,\r\n    isLoading: dynamicDataLoading,\r\n  };\r\n}\r\n","import { TransactionResponse } from '@ethersproject/providers';\r\nimport { BigNumber } from 'ethers';\r\n\r\nimport configs from '@/lib/config';\r\nimport { configService } from '@/services/config/config.service';\r\n\r\nimport { convertStEthWrap } from './lido';\r\nimport { TransactionBuilder } from '@/services/web3/transactions/transaction.builder';\r\nimport { WalletProvider } from '@/dependencies/wallets/Web3Provider';\r\n\r\nexport enum WrapType {\r\n  NonWrap = 0,\r\n  Wrap,\r\n  Unwrap,\r\n}\r\n\r\nexport const isNativeAssetWrap = (\r\n  tokenIn: string,\r\n  tokenOut: string\r\n): boolean => {\r\n  const nativeAddress = configService.network.nativeAsset.address;\r\n  const { weth } = configService.network.addresses;\r\n  return tokenIn === nativeAddress && tokenOut === weth;\r\n};\r\n\r\nexport const getWrapAction = (tokenIn: string, tokenOut: string): WrapType => {\r\n  const nativeAddress = configService.network.nativeAsset.address;\r\n  const { weth, stETH, wstETH } = configService.network.addresses;\r\n\r\n  if (tokenIn === nativeAddress && tokenOut === weth) return WrapType.Wrap;\r\n  if (tokenIn === stETH && tokenOut === wstETH) return WrapType.Wrap;\r\n\r\n  if (tokenOut === nativeAddress && tokenIn === weth) return WrapType.Unwrap;\r\n  if (tokenOut === stETH && tokenIn === wstETH) return WrapType.Unwrap;\r\n\r\n  return WrapType.NonWrap;\r\n};\r\n\r\nexport const getWrapOutput = async (\r\n  wrapper: string,\r\n  wrapType: WrapType,\r\n  wrapAmount: BigNumber\r\n): Promise<BigNumber> => {\r\n  if (wrapType === WrapType.NonWrap) throw new Error('Invalid wrap type');\r\n  const { weth, wstETH } = configService.network.addresses;\r\n\r\n  if (wrapper === weth) return BigNumber.from(wrapAmount);\r\n  if (wrapper === wstETH) {\r\n    return convertStEthWrap({\r\n      amount: wrapAmount,\r\n      isWrap: wrapType === WrapType.Wrap,\r\n    });\r\n  }\r\n  throw new Error('Unknown wrapper');\r\n};\r\n\r\nexport async function wrap(\r\n  network: string,\r\n  web3: WalletProvider,\r\n  wrapper: string,\r\n  amount: BigNumber\r\n): Promise<TransactionResponse> {\r\n  try {\r\n    if (wrapper === configs[network].addresses.weth) {\r\n      return wrapNative(network, web3, amount);\r\n    } else if (wrapper === configs[network].addresses.wstETH) {\r\n      return wrapLido(network, web3, amount);\r\n    }\r\n    throw new Error('Unrecognised wrapper contract');\r\n  } catch (e) {\r\n    console.log('[Wrapper] Wrap error:', e);\r\n    return Promise.reject(e);\r\n  }\r\n}\r\n\r\nexport async function unwrap(\r\n  network: string,\r\n  web3: WalletProvider,\r\n  wrapper: string,\r\n  amount: BigNumber\r\n): Promise<TransactionResponse> {\r\n  try {\r\n    if (wrapper === configs[network].addresses.weth) {\r\n      return unwrapNative(network, web3, amount);\r\n    } else if (wrapper === configs[network].addresses.wstETH) {\r\n      return unwrapLido(network, web3, amount);\r\n    }\r\n    throw new Error('Unrecognised wrapper contract');\r\n  } catch (e) {\r\n    console.log('[Wrapper] Unwrap error:', e);\r\n    return Promise.reject(e);\r\n  }\r\n}\r\n\r\nconst wrapNative = async (\r\n  network: string,\r\n  web3: WalletProvider,\r\n  amount: BigNumber\r\n): Promise<TransactionResponse> => {\r\n  const txBuilder = new TransactionBuilder(web3.getSigner());\r\n  return await txBuilder.contract.sendTransaction({\r\n    contractAddress: configs[network].addresses.weth,\r\n    abi: ['function deposit() payable'],\r\n    action: 'deposit',\r\n    options: { value: amount },\r\n  });\r\n};\r\n\r\nconst unwrapNative = async (\r\n  network: string,\r\n  web3: WalletProvider,\r\n  amount: BigNumber\r\n): Promise<TransactionResponse> => {\r\n  const txBuilder = new TransactionBuilder(web3.getSigner());\r\n  return await txBuilder.contract.sendTransaction({\r\n    contractAddress: configs[network].addresses.weth,\r\n    abi: ['function withdraw(uint256 wad)'],\r\n    action: 'withdraw',\r\n    params: [amount],\r\n  });\r\n};\r\n\r\nconst wrapLido = async (\r\n  network: string,\r\n  web3: WalletProvider,\r\n  amount: BigNumber\r\n): Promise<TransactionResponse> => {\r\n  const txBuilder = new TransactionBuilder(web3.getSigner());\r\n  return await txBuilder.contract.sendTransaction({\r\n    contractAddress: configs[network].addresses.wstETH,\r\n    abi: ['function wrap(uint256 _stETHAmount) returns (uint256)'],\r\n    action: 'wrap',\r\n    params: [amount],\r\n  });\r\n};\r\n\r\nconst unwrapLido = async (\r\n  network: string,\r\n  web3: WalletProvider,\r\n  amount: BigNumber\r\n): Promise<TransactionResponse> => {\r\n  const txBuilder = new TransactionBuilder(web3.getSigner());\r\n  return await txBuilder.contract.sendTransaction({\r\n    contractAddress: configs[network].addresses.wstETH,\r\n    abi: ['function unwrap(uint256 _wstETHAmount) returns (uint256)'],\r\n    action: 'unwrap',\r\n    params: [amount],\r\n  });\r\n};\r\n","<script setup lang=\"ts\">\r\nimport { SubgraphPoolBase } from '@balancer-labs/sdk';\r\nimport { formatUnits } from '@ethersproject/units';\r\nimport { mapValues } from 'lodash';\r\nimport { computed, ref, watch } from 'vue';\r\nimport { useI18n } from 'vue-i18n';\r\n\r\nimport SwapRoute from '@/components/cards/SwapCard/SwapRoute.vue';\r\nimport { SwapQuote } from '@/composables/swap/types';\r\nimport useRelayerApproval, {\r\n  RelayerType,\r\n} from '@/composables/approvals/useRelayerApproval';\r\nimport useRelayerApprovalTx from '@/composables/approvals/useRelayerApprovalTx';\r\nimport useTokenApproval from '@/composables/approvals/useTokenApproval';\r\nimport { UseSwapping } from '@/composables/swap/useSwapping';\r\nimport useNumbers, { FNumFormats } from '@/composables/useNumbers';\r\nimport { useTokens } from '@/providers/tokens.provider';\r\nimport { useUserSettings } from '@/providers/user-settings.provider';\r\nimport { FiatCurrency } from '@/constants/currency';\r\nimport { bnum, bnumZero } from '@/lib/utils';\r\nimport { isStETH } from '@/lib/utils/balancer/lido';\r\nimport { getWrapAction, WrapType } from '@/lib/utils/balancer/wrapper';\r\nimport useWeb3 from '@/services/web3/useWeb3';\r\nimport { TransactionActionInfo } from '@/types/transactions';\r\nimport { TransactionResponse } from '@ethersproject/abstract-provider';\r\n\r\nconst PRICE_UPDATE_THRESHOLD = 0.02;\r\n\r\ntype Props = {\r\n  swapping: UseSwapping;\r\n  error?: any;\r\n  warning?: any;\r\n};\r\n\r\n/**\r\n * PROPS & EMITS\r\n */\r\n\r\nconst props = defineProps<Props>();\r\n\r\nconst emit = defineEmits(['swap', 'close']);\r\n// COMPOSABLES\r\nconst { t } = useI18n();\r\nconst { fNum, toFiat } = useNumbers();\r\nconst { tokens, balanceFor, approvalRequired } = useTokens();\r\nconst {\r\n  relayerSignature: batchRelayerSignature,\r\n  relayerApprovalAction: batchRelayerApprovalAction,\r\n} = useRelayerApproval(RelayerType.BATCH_V4);\r\nconst { isUnlocked: batchRelayerIsUnlocked } = useRelayerApprovalTx(\r\n  RelayerType.BATCH_V4\r\n);\r\nconst { blockNumber, account, startConnectWithInjectedProvider } = useWeb3();\r\nconst { slippage } = useUserSettings();\r\n\r\n// state\r\nconst lastQuote = ref<SwapQuote | null>(\r\n  props.swapping.isWrapUnwrapSwap.value ? null : props.swapping.getQuote()\r\n);\r\nconst priceUpdated = ref(false);\r\nconst priceUpdateAccepted = ref(false);\r\n\r\n// DATA\r\nconst showSummaryInFiat = ref(false);\r\n\r\n// COMPUTED\r\nconst slippageRatePercent = computed(() =>\r\n  fNum(slippage.value, FNumFormats.percent)\r\n);\r\n\r\nconst addressIn = computed(() => props.swapping.tokenIn.value.address);\r\n\r\nconst tokenInFiatValue = computed(() =>\r\n  fNum(\r\n    toFiat(\r\n      props.swapping.tokenInAmountInput.value,\r\n      props.swapping.tokenIn.value.address\r\n    ),\r\n    FNumFormats.fiat\r\n  )\r\n);\r\n\r\nconst tokenOutFiatValue = computed(() =>\r\n  fNum(\r\n    toFiat(\r\n      props.swapping.tokenOutAmountInput.value,\r\n      props.swapping.tokenOut.value.address\r\n    ),\r\n    FNumFormats.fiat\r\n  )\r\n);\r\n\r\nconst showSwapRoute = computed(() => props.swapping.isBalancerSwap.value);\r\n\r\nconst zeroFee = computed(() =>\r\n  showSummaryInFiat.value ? fNum('0', FNumFormats.fiat) : '0.0 ETH'\r\n);\r\n\r\nconst exceedsBalance = computed(() => {\r\n  return (\r\n    account.value &&\r\n    bnum(props.swapping.tokenInAmountInput.value).isGreaterThan(\r\n      balanceFor(props.swapping.tokenInAddressInput.value)\r\n    )\r\n  );\r\n});\r\n\r\nconst disableSubmitButton = computed(() => {\r\n  return !!exceedsBalance.value || !!props.error;\r\n});\r\n\r\nconst summary = computed(() => {\r\n  const summaryItems = {\r\n    amountBeforeFees: '',\r\n    swapFees: '',\r\n    totalWithoutSlippage: '',\r\n    totalWithSlippage: '',\r\n  };\r\n\r\n  const exactIn = props.swapping.exactIn.value;\r\n\r\n  const tokenIn = props.swapping.tokenIn.value;\r\n  const tokenOut = props.swapping.tokenOut.value;\r\n\r\n  const tokenInAmountInput = props.swapping.tokenInAmountInput.value;\r\n  const tokenOutAmountInput = props.swapping.tokenOutAmountInput.value;\r\n\r\n  if (props.swapping.isWrapUnwrapSwap.value) {\r\n    summaryItems.amountBeforeFees = tokenOutAmountInput;\r\n    summaryItems.swapFees = '0';\r\n    summaryItems.totalWithoutSlippage = tokenOutAmountInput;\r\n    summaryItems.totalWithSlippage = tokenOutAmountInput;\r\n  } else {\r\n    const quote = props.swapping.getQuote();\r\n\r\n    if (exactIn) {\r\n      summaryItems.amountBeforeFees = tokenOutAmountInput;\r\n      summaryItems.swapFees = formatUnits(\r\n        quote.feeAmountOutToken,\r\n        tokenOut.decimals\r\n      );\r\n      summaryItems.totalWithoutSlippage = bnum(summaryItems.amountBeforeFees)\r\n        .minus(summaryItems.swapFees)\r\n        .toString();\r\n      summaryItems.totalWithSlippage = formatUnits(\r\n        quote.minimumOutAmount,\r\n        tokenOut.decimals\r\n      );\r\n    } else {\r\n      summaryItems.amountBeforeFees = tokenInAmountInput;\r\n      summaryItems.swapFees = formatUnits(\r\n        quote.feeAmountInToken,\r\n        tokenIn.decimals\r\n      );\r\n      summaryItems.totalWithoutSlippage = bnum(summaryItems.amountBeforeFees)\r\n        .plus(summaryItems.swapFees)\r\n        .toString();\r\n      summaryItems.totalWithSlippage = formatUnits(\r\n        quote.maximumInAmount,\r\n        tokenIn.decimals\r\n      );\r\n    }\r\n  }\r\n\r\n  if (showSummaryInFiat.value) {\r\n    return mapValues(\r\n      summaryItems,\r\n      itemValue =>\r\n        `${fNum(\r\n          toFiat(itemValue, exactIn ? tokenOut.address : tokenIn.address),\r\n          FNumFormats.fiat\r\n        )}`\r\n    );\r\n  } else {\r\n    return mapValues(\r\n      summaryItems,\r\n      itemValue =>\r\n        `${fNum(itemValue, FNumFormats.token)} ${\r\n          exactIn || props.swapping.isWrapUnwrapSwap.value\r\n            ? tokenOut.symbol\r\n            : tokenIn.symbol\r\n        }`\r\n    );\r\n  }\r\n});\r\n\r\nconst labels = computed(() => {\r\n  if (props.swapping.isWrap.value) {\r\n    return {\r\n      modalTitle: t('previewWrap', [props.swapping.tokenIn.value.symbol]),\r\n      confirmSwap: t('confirmWrap', [props.swapping.tokenIn.value.symbol]),\r\n      swapSummary: {\r\n        title: t('swapSummary.wrap.title'),\r\n        swapFees: t('swapSummary.wrap.swapFees'),\r\n        totalBeforeFees: t('swapSummary.wrap.totalBeforeFees'),\r\n        totalAfterFees: t('swapSummary.wrap.totalAfterFees'),\r\n        totalWithSlippage: t('swapSummary.wrap.totalWithSlippage', [\r\n          props.swapping.tokenIn.value.symbol,\r\n        ]),\r\n      },\r\n    };\r\n  } else if (props.swapping.isUnwrap.value) {\r\n    return {\r\n      modalTitle: t('previewUnwrap', [props.swapping.tokenOut.value.symbol]),\r\n      confirmSwap: t('confirmUnwrap', [props.swapping.tokenOut.value.symbol]),\r\n      swapSummary: {\r\n        title: t('swapSummary.unwrap.title'),\r\n        swapFees: t('swapSummary.unwrap.swapFees'),\r\n        totalBeforeFees: t('swapSummary.unwrap.totalBeforeFees'),\r\n        totalAfterFees: t('swapSummary.unwrap.totalAfterFees'),\r\n        totalWithSlippage: t('swapSummary.unwrap.totalWithSlippage', [\r\n          props.swapping.tokenOut.value.symbol,\r\n        ]),\r\n      },\r\n    };\r\n  } else if (props.swapping.exactIn.value) {\r\n    return {\r\n      modalTitle: t('previewSwap'),\r\n      confirmSwap: t('confirmSwap'),\r\n      swapSummary: {\r\n        title: t('swapSummary.exactIn.title', [\r\n          props.swapping.tokenIn.value.symbol,\r\n        ]),\r\n        swapFees: t('swapSummary.exactIn.swapFees'),\r\n        totalBeforeFees: t('swapSummary.exactIn.totalBeforeFees'),\r\n        totalAfterFees: t('swapSummary.exactIn.totalAfterFees'),\r\n        totalWithSlippage: t('swapSummary.exactIn.totalWithSlippage', [\r\n          slippageRatePercent.value,\r\n        ]),\r\n      },\r\n    };\r\n  }\r\n  // exact out\r\n  return {\r\n    modalTitle: t('previewSwap'),\r\n    confirmSwap: t('confirmSwap'),\r\n    swapSummary: {\r\n      title: t('swapSummary.exactOut.title', [\r\n        props.swapping.tokenOut.value.symbol,\r\n      ]),\r\n      swapFees: t('swapSummary.exactOut.swapFees'),\r\n      totalBeforeFees: t('swapSummary.exactOut.totalBeforeFees'),\r\n      totalAfterFees: t('swapSummary.exactOut.totalAfterFees'),\r\n      totalWithSlippage: t('swapSummary.exactOut.totalWithSlippage', [\r\n        slippageRatePercent.value,\r\n      ]),\r\n    },\r\n  };\r\n});\r\n\r\nconst tokenApproval = useTokenApproval(\r\n  addressIn,\r\n  props.swapping.tokenInAmountInput,\r\n  tokens\r\n);\r\n\r\nconst cowswapRelayerApproval = useRelayerApprovalTx(\r\n  RelayerType.COWSWAP,\r\n  props.swapping.isCowswapSwap\r\n);\r\n\r\nconst pools = computed<SubgraphPoolBase[]>(() => {\r\n  return props.swapping.sor.pools.value;\r\n});\r\n\r\nconst wrapType = computed(() =>\r\n  getWrapAction(\r\n    props.swapping.tokenIn.value.address,\r\n    props.swapping.tokenOut.value.address\r\n  )\r\n);\r\n\r\nconst isStETHSwap = computed(\r\n  () =>\r\n    isStETH(addressIn.value, props.swapping.tokenOut.value.address) &&\r\n    wrapType.value === WrapType.NonWrap\r\n);\r\n\r\nconst lidoRelayerApproval = useRelayerApprovalTx(RelayerType.LIDO, isStETHSwap);\r\n\r\nconst requiresTokenApproval = computed(() => {\r\n  if (props.swapping.isWrap.value && !props.swapping.isEthSwap.value) {\r\n    return approvalRequired(\r\n      props.swapping.tokenIn.value.address,\r\n      props.swapping.tokenInAmountInput.value,\r\n      props.swapping.tokenOut.value.address\r\n    );\r\n  } else if (props.swapping.requiresTokenApproval.value) {\r\n    return !tokenApproval.isUnlockedV2.value;\r\n  }\r\n  return false;\r\n});\r\n\r\nconst requiresBatchRelayerApproval = computed(\r\n  () =>\r\n    props.swapping.isJoinExitSwap.value &&\r\n    !batchRelayerIsUnlocked.value &&\r\n    !batchRelayerSignature.value\r\n);\r\n\r\nconst requiresCowswapRelayerApproval = computed(\r\n  () =>\r\n    props.swapping.isCowswapSwap.value &&\r\n    props.swapping.requiresTokenApproval.value &&\r\n    !cowswapRelayerApproval.isUnlocked.value\r\n);\r\n\r\nconst requiresLidoRelayerApproval = computed(\r\n  () =>\r\n    props.swapping.isBalancerSwap.value && !lidoRelayerApproval.isUnlocked.value\r\n);\r\n\r\nconst showTokenApprovalStep = computed(\r\n  () =>\r\n    requiresTokenApproval.value ||\r\n    tokenApproval.approved.value ||\r\n    tokenApproval.approving.value\r\n);\r\n\r\nconst showBatchRelayerApprovalStep = computed(\r\n  () => props.swapping.isJoinExitSwap.value && !batchRelayerIsUnlocked.value\r\n);\r\n\r\nconst showCowswapRelayerApprovalStep = computed(\r\n  () =>\r\n    requiresCowswapRelayerApproval.value ||\r\n    cowswapRelayerApproval.init.value ||\r\n    cowswapRelayerApproval.approved.value ||\r\n    cowswapRelayerApproval.approving.value\r\n);\r\n\r\nconst showLidoRelayerApprovalStep = computed(\r\n  () =>\r\n    !props.swapping.isJoinExitSwap.value &&\r\n    (requiresLidoRelayerApproval.value ||\r\n      lidoRelayerApproval.init.value ||\r\n      lidoRelayerApproval.approved.value ||\r\n      lidoRelayerApproval.approving.value)\r\n);\r\n\r\nconst requiresApproval = computed(\r\n  () =>\r\n    requiresBatchRelayerApproval.value ||\r\n    requiresCowswapRelayerApproval.value ||\r\n    requiresLidoRelayerApproval.value ||\r\n    requiresTokenApproval.value\r\n);\r\n\r\nconst showPriceUpdateError = computed(\r\n  () =>\r\n    !requiresApproval.value && priceUpdated.value && !priceUpdateAccepted.value\r\n);\r\n\r\nconst actionStepsLoading = computed(\r\n  () =>\r\n    cowswapRelayerApproval.init.value ||\r\n    cowswapRelayerApproval.approving.value ||\r\n    lidoRelayerApproval.init.value ||\r\n    lidoRelayerApproval.approving.value ||\r\n    tokenApproval.approving.value ||\r\n    props.swapping.isConfirming.value\r\n);\r\n\r\nconst actionStepsLoadingLabel = computed(() =>\r\n  requiresCowswapRelayerApproval.value\r\n    ? `${t('approvingCowswapRelayer')}...`\r\n    : requiresLidoRelayerApproval.value\r\n    ? `${t('approvingLidoRelayer')}...`\r\n    : requiresBatchRelayerApproval.value\r\n    ? `${t('approvingBatchRelayer')}...`\r\n    : requiresTokenApproval.value\r\n    ? `${t('approving')} ${props.swapping.tokenIn.value.symbol}...`\r\n    : t('confirming')\r\n);\r\n\r\nconst actions = computed((): TransactionActionInfo[] => [\r\n  ...(showCowswapRelayerApprovalStep.value\r\n    ? [\r\n        {\r\n          label: t('approveCowswapRelayer'),\r\n          loadingLabel: t('approvingCowswapRelayer'),\r\n          confirmingLabel: t('approveCowswapRelayer'),\r\n          action: cowswapRelayerApproval.approve,\r\n          stepTooltip: t(\r\n            'swapSummary.transactionTypesTooltips.cowswapRelayerApproval.content'\r\n          ),\r\n        },\r\n      ]\r\n    : []),\r\n  ...(showLidoRelayerApprovalStep.value\r\n    ? [\r\n        {\r\n          label: t('approveLidoRelayer'),\r\n          loadingLabel: t('approvingLidoRelayer'),\r\n          confirmingLabel: t('approveLidoRelayer'),\r\n          action: lidoRelayerApproval.approve,\r\n          stepTooltip: t(\r\n            'swapSummary.transactionTypesTooltips.lidoRelayerApproval.content'\r\n          ),\r\n        },\r\n      ]\r\n    : []),\r\n  ...(showBatchRelayerApprovalStep.value\r\n    ? [batchRelayerApprovalAction.value]\r\n    : []),\r\n  ...(showTokenApprovalStep.value\r\n    ? [\r\n        {\r\n          label: `${t('approve')} ${props.swapping.tokenIn.value.symbol}`,\r\n          loadingLabel: `${t('approving')} ${\r\n            props.swapping.tokenIn.value.symbol\r\n          }...`,\r\n          confirmingLabel: `${t('confirming')} ${\r\n            props.swapping.tokenIn.value.symbol\r\n          }`,\r\n          action: approveToken,\r\n          stepTooltip: t(\r\n            'swapSummary.transactionTypesTooltips.tokenApproval.content'\r\n          ),\r\n        },\r\n      ]\r\n    : []),\r\n  {\r\n    label: labels.value.confirmSwap,\r\n    loadingLabel: `${t('approving')} ${props.swapping.tokenIn.value.symbol}...`,\r\n    confirmingLabel: t('confirming'),\r\n    action: swap as () => Promise<any>,\r\n    stepTooltip:\r\n      props.swapping.isCowswapSwap.value && !props.swapping.isJoinExitSwap\r\n        ? t('swapSummary.transactionTypesTooltips.sign.content')\r\n        : t('swapSummary.transactionTypesTooltips.swap.content'),\r\n  },\r\n]);\r\n\r\n// METHODS\r\nfunction swap() {\r\n  emit('swap');\r\n}\r\n\r\nfunction onClose() {\r\n  emit('close');\r\n}\r\n\r\nfunction cofirmPriceUpdate() {\r\n  priceUpdated.value = false;\r\n  priceUpdateAccepted.value = true;\r\n  lastQuote.value = props.swapping.getQuote();\r\n}\r\n\r\nfunction handlePriceUpdate() {\r\n  if (lastQuote.value != null) {\r\n    const newQuote = props.swapping.getQuote();\r\n\r\n    /**\r\n     * The bignumber returned via the quotes for some reason throw underflow\r\n     * errors when attempting to use the gt function with the threshold value.\r\n     * For that reason, the price difference has to be cast to our bignumber type.\r\n     */\r\n    if (props.swapping.exactIn.value) {\r\n      const lastQuoteMin = bnum(lastQuote.value.minimumOutAmount.toString());\r\n      const newQuoteMin = bnum(newQuote.minimumOutAmount.toString());\r\n      if (lastQuoteMin.eq(bnumZero)) {\r\n        if (newQuoteMin.eq(bnumZero)) {\r\n          priceUpdated.value = false;\r\n        } else {\r\n          priceUpdated.value = true;\r\n        }\r\n      } else {\r\n        const priceDiff = lastQuoteMin\r\n          .minus(newQuoteMin)\r\n          .abs()\r\n          .div(lastQuoteMin);\r\n\r\n        priceUpdated.value = priceDiff.gt(PRICE_UPDATE_THRESHOLD);\r\n      }\r\n    } else {\r\n      const lastQuoteMax = bnum(lastQuote.value.maximumInAmount.toString());\r\n      const newQuoteMax = bnum(newQuote.maximumInAmount.toString());\r\n      if (lastQuoteMax.eq(bnumZero)) {\r\n        if (newQuoteMax.eq(bnumZero)) {\r\n          priceUpdated.value = false;\r\n        } else {\r\n          priceUpdated.value = true;\r\n        }\r\n      } else {\r\n        const priceDiff = lastQuoteMax\r\n          .minus(newQuoteMax)\r\n          .abs()\r\n          .div(lastQuoteMax);\r\n\r\n        priceUpdated.value = priceDiff.gt(PRICE_UPDATE_THRESHOLD);\r\n      }\r\n    }\r\n\r\n    if (priceUpdated.value) {\r\n      priceUpdateAccepted.value = false;\r\n    }\r\n  }\r\n}\r\n\r\nasync function approveToken(): Promise<TransactionResponse> {\r\n  if (props.swapping.isWrap.value && !props.swapping.isEthSwap.value) {\r\n    // If we're wrapping a token other than native ETH\r\n    // we need to approve the underlying on the wrapper\r\n    return tokenApproval.approveSpender(props.swapping.tokenOut.value.address);\r\n  } else {\r\n    return tokenApproval.approveV2();\r\n  }\r\n}\r\n\r\n// WATCHERS\r\nwatch(blockNumber, () => {\r\n  handlePriceUpdate();\r\n});\r\n</script>\r\n\r\n<template>\r\n  <BalModal show @close=\"onClose\">\r\n    <div>\r\n      <BalStack horizontal align=\"center\" spacing=\"xs\" class=\"mb-4\">\r\n        <button class=\"flex text-blue-500 hover:text-blue-700\" @click=\"onClose\">\r\n          <BalIcon class=\"flex\" name=\"chevron-left\" />\r\n        </button>\r\n        <h4>\r\n          {{ labels.modalTitle }}\r\n        </h4>\r\n      </BalStack>\r\n      <BalCard noPad class=\"overflow-auto relative mb-6\">\r\n        <template #header>\r\n          <div class=\"w-full\">\r\n            <div>\r\n              <BalAlert\r\n                v-if=\"error\"\r\n                class=\"p-3 mb-2\"\r\n                type=\"error\"\r\n                size=\"sm\"\r\n                :title=\"error.header\"\r\n                :description=\"error.body\"\r\n                :actionLabel=\"error.label\"\r\n                block\r\n              />\r\n              <BalAlert\r\n                v-else-if=\"warning\"\r\n                class=\"p-3 mb-2\"\r\n                type=\"warning\"\r\n                size=\"sm\"\r\n                :title=\"warning.header\"\r\n                :description=\"warning.body\"\r\n                block\r\n              />\r\n            </div>\r\n            <div\r\n              class=\"p-3 w-full text-sm bg-gray-50 dark:bg-gray-800 rounded-t-lg border-b dark:border-gray-800\"\r\n            >\r\n              <span>\r\n                {{ $t('effectivePrice') }}\r\n                {{\r\n                  swapping.exactIn.value\r\n                    ? swapping.effectivePriceMessage.value.tokenIn\r\n                    : swapping.effectivePriceMessage.value.tokenOut\r\n                }}\r\n              </span>\r\n            </div>\r\n          </div>\r\n        </template>\r\n        <div>\r\n          <BalAlert\r\n            v-if=\"exceedsBalance\"\r\n            class=\"p-3\"\r\n            type=\"error\"\r\n            size=\"sm\"\r\n            :title=\"`${t('exceedsBalance')} ${fNum(\r\n              balanceFor(props.swapping.tokenInAddressInput.value),\r\n              FNumFormats.token\r\n            )} ${props.swapping.tokenIn.value.symbol}`\"\r\n            block\r\n            square\r\n          />\r\n          <div\r\n            class=\"relative p-3 border-b border-gray-100 dark:border-gray-900\"\r\n          >\r\n            <div class=\"flex items-center\">\r\n              <div class=\"mr-3\">\r\n                <BalAsset\r\n                  :address=\"swapping.tokenIn.value.address\"\r\n                  :size=\"36\"\r\n                />\r\n              </div>\r\n              <div>\r\n                <div class=\"font-medium\">\r\n                  {{\r\n                    fNum(swapping.tokenInAmountInput.value, FNumFormats.token)\r\n                  }}\r\n                  {{ swapping.tokenIn.value.symbol }}\r\n                </div>\r\n                <div class=\"text-sm text-secondary\">\r\n                  {{ tokenInFiatValue }}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"arrow-down\">\r\n            <ArrowDownIcon />\r\n          </div>\r\n          <div class=\"p-3\">\r\n            <div class=\"flex items-center\">\r\n              <div class=\"mr-3\">\r\n                <BalAsset\r\n                  :address=\"swapping.tokenOut.value.address\"\r\n                  :size=\"36\"\r\n                />\r\n              </div>\r\n              <div>\r\n                <div class=\"font-medium\">\r\n                  {{\r\n                    fNum(swapping.tokenOutAmountInput.value, FNumFormats.token)\r\n                  }}\r\n                  {{ swapping.tokenOut.value.symbol }}\r\n                </div>\r\n                <div class=\"text-sm text-secondary\">\r\n                  {{ tokenOutFiatValue }}\r\n                  <span\r\n                    v-if=\"\r\n                      swapping.isBalancerSwap.value ||\r\n                      swapping.isWrapUnwrapSwap.value\r\n                    \"\r\n                  >\r\n                    / {{ $t('priceImpact') }}:\r\n                    {{\r\n                      fNum(swapping.sor.priceImpact.value, FNumFormats.percent)\r\n                    }}\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </BalCard>\r\n      <BalCard noPad shadow=\"none\" class=\"mb-3\">\r\n        <template #header>\r\n          <div\r\n            class=\"flex justify-between items-center p-3 w-full border-b dark:border-gray-900\"\r\n          >\r\n            <div class=\"font-semibold\">\r\n              {{ labels.swapSummary.title }}\r\n            </div>\r\n            <div class=\"flex text-xs uppercase divide-x dark:divide-gray-500\">\r\n              <div\r\n                :class=\"[\r\n                  'pr-2 cursor-pointer font-medium',\r\n                  { 'text-blue-600': !showSummaryInFiat },\r\n                ]\"\r\n                @click=\"showSummaryInFiat = false\"\r\n              >\r\n                {{ $t('tokens') }}\r\n              </div>\r\n              <div\r\n                :class=\"[\r\n                  'pl-2 cursor-pointer font-medium uppercase',\r\n                  { 'text-blue-600': showSummaryInFiat },\r\n                ]\"\r\n                @click=\"showSummaryInFiat = true\"\r\n              >\r\n                {{ FiatCurrency.usd }}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </template>\r\n        <div v-if=\"swapping.isCowswapSwap.value\" class=\"p-3 text-sm\">\r\n          <div class=\"summary-item-row\">\r\n            <div>\r\n              {{ labels.swapSummary.totalBeforeFees }}\r\n            </div>\r\n            <div v-html=\"summary.amountBeforeFees\" />\r\n          </div>\r\n          <div class=\"summary-item-row\">\r\n            <div>{{ $t('swapSummary.gasCosts') }}</div>\r\n            <div class=\"text-green-400\">-{{ zeroFee }}</div>\r\n          </div>\r\n          <div class=\"summary-item-row\">\r\n            <div>{{ labels.swapSummary.swapFees }}</div>\r\n            <div\r\n              v-html=\"\r\n                swapping.isWrapUnwrapSwap.value\r\n                  ? zeroFee\r\n                  : swapping.exactIn.value\r\n                  ? `-${summary.swapFees}`\r\n                  : `+${summary.swapFees}`\r\n              \"\r\n            />\r\n          </div>\r\n        </div>\r\n        <template #footer>\r\n          <div\r\n            class=\"p-3 w-full text-sm bg-white dark:bg-gray-800 rounded-b-lg\"\r\n          >\r\n            <div class=\"font-medium summary-item-row\">\r\n              <div class=\"w-64\">\r\n                {{ labels.swapSummary.totalAfterFees }}\r\n              </div>\r\n              <div v-html=\"summary.totalWithoutSlippage\" />\r\n            </div>\r\n            <div class=\"summary-item-row text-secondary\">\r\n              <div class=\"w-64\">\r\n                {{ labels.swapSummary.totalWithSlippage }}\r\n              </div>\r\n              <div\r\n                v-html=\"\r\n                  swapping.isWrapUnwrapSwap.value\r\n                    ? ''\r\n                    : summary.totalWithSlippage\r\n                \"\r\n              />\r\n            </div>\r\n          </div>\r\n        </template>\r\n      </BalCard>\r\n      <BalAlert\r\n        v-if=\"showPriceUpdateError\"\r\n        class=\"p-3 mb-4\"\r\n        type=\"error\"\r\n        size=\"md\"\r\n        :title=\"$t('priceUpdatedAlert.title')\"\r\n        :description=\"\r\n          $t('priceUpdatedAlert.description', [\r\n            fNum(PRICE_UPDATE_THRESHOLD, FNumFormats.percent),\r\n          ])\r\n        \"\r\n        :actionLabel=\"$t('priceUpdatedAlert.actionLabel')\"\r\n        block\r\n        @action-click=\"cofirmPriceUpdate\"\r\n      />\r\n      <BalBtn\r\n        v-if=\"!account\"\r\n        color=\"gradient\"\r\n        block\r\n        @click.prevent=\"startConnectWithInjectedProvider\"\r\n      >\r\n        {{ $t('connectWallet') }}\r\n      </BalBtn>\r\n      <BalActionSteps\r\n        v-else\r\n        :actions=\"actions\"\r\n        :isLoading=\"actionStepsLoading\"\r\n        :loadingLabel=\"actionStepsLoadingLabel\"\r\n        :disabled=\"disableSubmitButton || showPriceUpdateError\"\r\n      />\r\n      <BalAlert\r\n        v-if=\"swapping.submissionError.value != null\"\r\n        class=\"p-3 mt-4\"\r\n        type=\"error\"\r\n        size=\"md\"\r\n        :title=\"$t('swapSubmissionError.title')\"\r\n        :description=\"swapping.submissionError.value\"\r\n        block\r\n        :actionLabel=\"$t('swapSubmissionError.actionLabel')\"\r\n        @action-click=\"swapping.resetSubmissionError\"\r\n      />\r\n      <BalAlert\r\n        v-if=\"swapping.isJoinExitSwap.value\"\r\n        class=\"p-3 mt-4\"\r\n        type=\"tip\"\r\n        size=\"md\"\r\n        :title=\"''\"\r\n        :description=\"\r\n          showBatchRelayerApprovalStep\r\n            ? $t('isJoinExitTipDescription.withApproval')\r\n            : $t('isJoinExitTipDescription.withoutApproval')\r\n        \"\r\n        block\r\n      />\r\n    </div>\r\n    <SwapRoute\r\n      v-if=\"showSwapRoute\"\r\n      :addressIn=\"swapping.tokenIn.value.address\"\r\n      :amountIn=\"swapping.tokenInAmountInput.value\"\r\n      :addressOut=\"swapping.tokenOut.value.address\"\r\n      :amountOut=\"swapping.tokenOutAmountInput.value\"\r\n      :pools=\"pools\"\r\n      :sorReturn=\"swapping.sor.sorReturn.value\"\r\n      class=\"mt-3\"\r\n    />\r\n  </BalModal>\r\n</template>\r\n\r\n<style scoped>\r\n.arrow-down {\r\n  @apply absolute right-0 rounded-full border border-gray-100 flex items-center h-8 w-8 justify-center bg-white mr-3\r\n    dark:border-gray-800 dark:bg-gray-800;\r\n\r\n  transform: translateY(-50%);\r\n}\r\n\r\n.summary-item-row {\r\n  @apply flex justify-between mb-1;\r\n}\r\n\r\n.step {\r\n  @apply rounded-full w-7 h-7 border border-gray-100 dark:border-gray-700 flex items-center\r\n    justify-center text-purple-500 relative;\r\n}\r\n\r\n.step-seperator {\r\n  @apply bg-gray-200 dark:bg-gray-700 h-px w-6;\r\n}\r\n\r\n.step-active {\r\n  @apply border-purple-500 dark:border-purple-500;\r\n}\r\n\r\n.step-approved {\r\n  @apply border-green-500 dark:border-green-500;\r\n}\r\n</style>\r\n","import { BigNumber, parseFixed } from '@ethersproject/bignumber';\r\nimport { WeiPerEther as ONE } from '@ethersproject/constants';\r\nimport { AddressZero } from '@ethersproject/constants';\r\nimport { formatUnits } from '@ethersproject/units';\r\nimport { OrderBalance, OrderKind } from '@cowprotocol/contracts';\r\nimport OldBigNumber from 'bignumber.js';\r\n\r\nimport { bnum } from '@/lib/utils';\r\nimport { ApiErrorCodes } from '@/services/cowswap/errors/OperatorError';\r\nimport { cowswapProtocolService } from '@/services/cowswap/cowswapProtocol.service';\r\nimport { signOrder, UnsignedOrder } from '@/services/cowswap/signing';\r\nimport { OrderMetaData, PriceQuoteParams } from '@/services/cowswap/types';\r\nimport { calculateValidTo } from '@/services/cowswap/utils';\r\nimport useWeb3 from '@/services/web3/useWeb3';\r\nimport { Token } from '@/types';\r\nimport { TokenInfo } from '@/types/TokenList';\r\n\r\nimport useNumbers, { FNumFormats } from '../useNumbers';\r\nimport { useTokens } from '@/providers/tokens.provider';\r\nimport useTransactions from '../useTransactions';\r\nimport { SwapQuote } from './types';\r\nimport { captureException } from '@sentry/browser';\r\nimport { Goals, trackGoal } from '../useFathom';\r\nimport useTranasactionErrors from '../useTransactionErrors';\r\nimport { useI18n } from 'vue-i18n';\r\nimport { useApp } from '@/composables/useApp';\r\n\r\nconst HIGH_FEE_THRESHOLD = parseFixed('0.2', 18);\r\nconst APP_DATA =\r\n  import.meta.env.VITE_GNOSIS_APP_DATA ??\r\n  '0xE9F29AE547955463ED535162AEFEE525D8D309571A2B18BC26086C8C35D781EB';\r\n\r\ntype State = {\r\n  warnings: {\r\n    highFees: boolean;\r\n  };\r\n  validationError: null | string;\r\n  submissionError: null | string;\r\n};\r\n\r\nconst state = reactive<State>({\r\n  warnings: {\r\n    highFees: false,\r\n  },\r\n  validationError: null,\r\n  submissionError: null,\r\n});\r\n\r\nexport type CowswapTransactionDetails = {\r\n  tokenIn: Token;\r\n  tokenOut: Token;\r\n  tokenInAddress: string;\r\n  tokenOutAddress: string;\r\n  tokenInAmount: string;\r\n  tokenOutAmount: string;\r\n  exactIn: boolean;\r\n  quote: SwapQuote;\r\n  slippageBufferRate: number;\r\n  order: {\r\n    validTo: OrderMetaData['validTo'];\r\n    partiallyFillable: OrderMetaData['partiallyFillable'];\r\n  };\r\n};\r\n\r\ntype Props = {\r\n  exactIn: Ref<boolean>;\r\n  tokenInAddressInput: Ref<string>;\r\n  tokenInAmountInput: Ref<string>;\r\n  tokenOutAddressInput: Ref<string>;\r\n  tokenOutAmountInput: Ref<string>;\r\n  tokenInAmountScaled: ComputedRef<BigNumber>;\r\n  tokenOutAmountScaled: ComputedRef<BigNumber>;\r\n  tokenIn: ComputedRef<TokenInfo>;\r\n  tokenOut: ComputedRef<TokenInfo>;\r\n  slippageBufferRate: ComputedRef<number>;\r\n};\r\n\r\nexport default function useCowswap({\r\n  exactIn,\r\n  tokenInAddressInput,\r\n  tokenInAmountInput,\r\n  tokenOutAddressInput,\r\n  tokenOutAmountInput,\r\n  tokenInAmountScaled,\r\n  tokenOutAmountScaled,\r\n  tokenIn,\r\n  tokenOut,\r\n  slippageBufferRate,\r\n}: Props) {\r\n  // COMPOSABLES\r\n  const { transactionDeadline } = useApp();\r\n  const { account, getSigner } = useWeb3();\r\n  const { addTransaction } = useTransactions();\r\n  const { fNum } = useNumbers();\r\n  const { balanceFor } = useTokens();\r\n  const { isUserRejected } = useTranasactionErrors();\r\n  const { t } = useI18n();\r\n\r\n  // DATA\r\n  const updatingQuotes = ref(false);\r\n  const confirming = ref(false);\r\n  const feeQuote = ref<string | null>(null);\r\n  const latestQuoteIdx = ref<number>(0);\r\n\r\n  // COMPUTED\r\n  const hasValidationError = computed(() => state.validationError != null);\r\n\r\n  // METHODS\r\n  function getFeeAmount() {\r\n    const feeAmountInToken = feeQuote.value ?? '0';\r\n    const feeAmountOutToken = tokenInAmountScaled.value.isZero()\r\n      ? '0'\r\n      : tokenOutAmountScaled.value\r\n          .mul(feeAmountInToken)\r\n          .div(tokenInAmountScaled.value)\r\n          .toString();\r\n\r\n    return {\r\n      feeAmountInToken,\r\n      feeAmountOutToken,\r\n    };\r\n  }\r\n\r\n  function getQuote(): SwapQuote {\r\n    const { feeAmountInToken, feeAmountOutToken } = getFeeAmount();\r\n\r\n    const maximumInAmount = tokenInAmountScaled.value\r\n      .add(feeAmountInToken)\r\n      .mul(parseFixed(String(1 + slippageBufferRate.value), 18))\r\n      .div(ONE);\r\n\r\n    const minimumOutAmount = tokenOutAmountScaled.value\r\n      .sub(feeAmountOutToken)\r\n      .mul(ONE)\r\n      .div(parseFixed(String(1 + slippageBufferRate.value), 18));\r\n\r\n    return {\r\n      feeAmountInToken,\r\n      feeAmountOutToken,\r\n      maximumInAmount,\r\n      minimumOutAmount,\r\n    };\r\n  }\r\n\r\n  async function swap(successCallback?: () => void) {\r\n    try {\r\n      confirming.value = true;\r\n      state.submissionError = null;\r\n\r\n      const quote = getQuote();\r\n\r\n      const unsignedOrder: UnsignedOrder = {\r\n        sellToken: tokenInAddressInput.value,\r\n        buyToken: tokenOutAddressInput.value,\r\n        sellAmount: (exactIn.value\r\n          ? tokenInAmountScaled.value\r\n          : quote.maximumInAmount\r\n        )\r\n          .sub(quote.feeAmountInToken)\r\n          .toString(),\r\n        buyAmount: exactIn.value\r\n          ? quote.minimumOutAmount.toString()\r\n          : tokenOutAmountScaled.value.toString(),\r\n        validTo: calculateValidTo(transactionDeadline.value),\r\n        appData: APP_DATA,\r\n        feeAmount: quote.feeAmountInToken,\r\n        kind: exactIn.value ? OrderKind.SELL : OrderKind.BUY,\r\n        receiver: account.value,\r\n        partiallyFillable: false, // Always fill or kill,\r\n        sellTokenBalance: OrderBalance.EXTERNAL,\r\n      };\r\n\r\n      const { signature, signingScheme } = await signOrder(\r\n        unsignedOrder,\r\n        getSigner()\r\n      );\r\n\r\n      const orderId = await cowswapProtocolService.sendSignedOrder({\r\n        order: {\r\n          ...unsignedOrder,\r\n          signature,\r\n          receiver: account.value,\r\n          signingScheme,\r\n        },\r\n        owner: account.value,\r\n      });\r\n\r\n      const sellAmount = exactIn.value\r\n        ? tokenInAmountInput.value\r\n        : formatUnits(quote.maximumInAmount, tokenIn.value.decimals).toString();\r\n\r\n      const buyAmount = exactIn.value\r\n        ? formatUnits(\r\n            quote.minimumOutAmount,\r\n            tokenOut.value.decimals\r\n          ).toString()\r\n        : tokenOutAmountInput.value;\r\n\r\n      const tokenInAmountEst = exactIn.value ? '' : '~';\r\n      const tokenOutAmountEst = exactIn.value ? '~' : '';\r\n\r\n      const summary = `${tokenInAmountEst}${fNum(\r\n        sellAmount,\r\n        FNumFormats.token\r\n      )} ${tokenIn.value.symbol} -> ${tokenOutAmountEst}${fNum(\r\n        buyAmount,\r\n        FNumFormats.token\r\n      )} ${tokenOut.value.symbol}`;\r\n\r\n      const { validTo, partiallyFillable } = unsignedOrder;\r\n\r\n      addTransaction({\r\n        id: orderId,\r\n        type: 'order',\r\n        action: 'swap',\r\n        summary,\r\n        details: {\r\n          tokenIn: tokenIn.value,\r\n          tokenOut: tokenOut.value,\r\n          tokenInAddress: tokenInAddressInput.value,\r\n          tokenOutAddress: tokenOutAddressInput.value,\r\n          tokenInAmount: tokenInAmountInput.value,\r\n          tokenOutAmount: tokenOutAmountInput.value,\r\n          exactIn: exactIn.value,\r\n          quote,\r\n          slippageBufferRate: slippageBufferRate.value,\r\n          order: {\r\n            validTo,\r\n            partiallyFillable,\r\n          },\r\n        },\r\n      });\r\n\r\n      if (successCallback != null) {\r\n        successCallback();\r\n      }\r\n      confirming.value = false;\r\n      trackGoal(Goals.CowswapSwap);\r\n    } catch (error) {\r\n      if (!isUserRejected(error)) {\r\n        console.trace(error);\r\n        state.submissionError = t('swapException', ['Cowswap']);\r\n        captureException(new Error(state.submissionError, { cause: error }));\r\n      }\r\n      confirming.value = false;\r\n    }\r\n  }\r\n\r\n  function resetState(shouldResetFees = true) {\r\n    state.warnings.highFees = false;\r\n    state.validationError = null;\r\n    state.submissionError = null;\r\n\r\n    if (shouldResetFees) {\r\n      feeQuote.value = null;\r\n    }\r\n  }\r\n\r\n  async function handleAmountChange() {\r\n    // Prevent quering undefined input amounts\r\n    if (\r\n      (exactIn.value && !tokenInAmountInput.value) ||\r\n      (!exactIn.value && !tokenOutAmountInput.value)\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    const amountToExchange = exactIn.value\r\n      ? tokenInAmountScaled.value\r\n      : tokenOutAmountScaled.value;\r\n\r\n    if (amountToExchange === undefined) {\r\n      return;\r\n    }\r\n\r\n    if (amountToExchange.isZero()) {\r\n      exactIn.value\r\n        ? (tokenOutAmountInput.value = '0')\r\n        : (tokenInAmountInput.value = '0');\r\n      return;\r\n    }\r\n    updatingQuotes.value = true;\r\n    state.validationError = null;\r\n    latestQuoteIdx.value += 1;\r\n    const currentQuoteIdx = latestQuoteIdx.value;\r\n\r\n    try {\r\n      const priceQuoteParams: PriceQuoteParams = {\r\n        sellToken: tokenInAddressInput.value,\r\n        buyToken: tokenOutAddressInput.value,\r\n        kind: exactIn.value ? OrderKind.SELL : OrderKind.BUY,\r\n        fromDecimals: tokenIn.value.decimals,\r\n        toDecimals: tokenOut.value.decimals,\r\n        from: account.value || AddressZero,\r\n        receiver: account.value || AddressZero,\r\n        [exactIn.value ? 'sellAmountAfterFee' : 'buyAmountAfterFee']:\r\n          amountToExchange.toString(),\r\n        partiallyFillable: false, // Always fill or kill,\r\n      };\r\n\r\n      const priceQuote = await cowswapProtocolService.getPriceQuote(\r\n        priceQuoteParams\r\n      );\r\n\r\n      // When user clears the input while fee is fetching we won't be able to get the quote\r\n      if (\r\n        (exactIn.value && !tokenInAmountInput.value) ||\r\n        (!exactIn.value && !tokenOutAmountInput.value)\r\n      ) {\r\n        updatingQuotes.value = false;\r\n        return;\r\n      }\r\n\r\n      // If there are multiple requests in flight, only use the last one\r\n      if (priceQuote && currentQuoteIdx === latestQuoteIdx.value) {\r\n        feeQuote.value = priceQuote.feeAmount;\r\n\r\n        if (exactIn.value) {\r\n          tokenOutAmountInput.value = bnum(\r\n            formatUnits(priceQuote.buyAmount ?? '0', tokenOut.value.decimals)\r\n          ).toFixed(6, OldBigNumber.ROUND_DOWN);\r\n\r\n          const { feeAmountInToken } = getQuote();\r\n\r\n          state.warnings.highFees = BigNumber.from(feeAmountInToken).gt(\r\n            amountToExchange.mul(HIGH_FEE_THRESHOLD).div(ONE)\r\n          );\r\n        } else {\r\n          tokenInAmountInput.value = bnum(\r\n            formatUnits(priceQuote.sellAmount ?? '0', tokenIn.value.decimals)\r\n          ).toFixed(6, OldBigNumber.ROUND_DOWN);\r\n\r\n          const { feeAmountOutToken, maximumInAmount } = getQuote();\r\n\r\n          state.warnings.highFees = BigNumber.from(feeAmountOutToken).gt(\r\n            amountToExchange.mul(HIGH_FEE_THRESHOLD).div(ONE)\r\n          );\r\n\r\n          if (account.value) {\r\n            const priceExceedsBalance = bnum(\r\n              formatUnits(maximumInAmount, tokenIn.value.decimals)\r\n            ).gt(balanceFor(tokenIn.value.address));\r\n\r\n            if (priceExceedsBalance) {\r\n              state.validationError = ApiErrorCodes.PriceExceedsBalance;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    } catch (e) {\r\n      console.log('[CoWswap Quotes] Failed to update quotes', e);\r\n    }\r\n\r\n    updatingQuotes.value = false;\r\n  }\r\n\r\n  return {\r\n    // methods\r\n    swap,\r\n    handleAmountChange,\r\n    resetState,\r\n\r\n    // computed\r\n    ...toRefs(state),\r\n    feeQuote,\r\n    updatingQuotes,\r\n    hasValidationError,\r\n    confirming,\r\n    getQuote,\r\n  };\r\n}\r\n","import {\r\n  PoolFilter,\r\n  SOR as SORV2,\r\n  SubgraphPoolBase,\r\n  SwapInfo,\r\n  SwapOptions,\r\n  SwapTypes,\r\n} from '@balancer-labs/sdk';\r\nimport { BigNumber } from '@ethersproject/bignumber';\r\nimport { AddressZero } from '@ethersproject/constants';\r\nimport { Provider } from '@ethersproject/providers';\r\n\r\nimport { NATIVE_ASSET_ADDRESS } from '@/constants/tokens';\r\nimport { getBalancer } from '@/dependencies/balancer-sdk';\r\n\r\nconst SWAP_COST = import.meta.env.VITE_SWAP_COST || '100000';\r\n\r\nexport interface SorReturn {\r\n  tokenIn: string;\r\n  tokenOut: string;\r\n  returnDecimals: number;\r\n  hasSwaps: boolean;\r\n  returnAmount: BigNumber;\r\n  marketSpNormalised: string;\r\n  result: SwapInfo;\r\n}\r\n\r\ninterface FetchStatus {\r\n  v2finishedFetch: boolean;\r\n  v2success: boolean;\r\n}\r\n\r\n/*\r\nAims to manage liquidity using SOR.\r\n*/\r\nexport class SorManager {\r\n  private sorV2: SORV2;\r\n  private weth: string;\r\n  private fetchStatus: FetchStatus = {\r\n    v2finishedFetch: false,\r\n    v2success: false,\r\n  };\r\n  private isFetching: boolean;\r\n  maxPools: number;\r\n  gasPrice: BigNumber;\r\n  selectedPools: SubgraphPoolBase[] = [];\r\n\r\n  constructor(\r\n    provider: Provider,\r\n    gasPrice: BigNumber,\r\n    maxPools: number,\r\n    chainId: number,\r\n    weth: string\r\n  ) {\r\n    this.sorV2 = getBalancer().sor;\r\n    this.weth = weth;\r\n    this.gasPrice = gasPrice;\r\n    this.maxPools = maxPools;\r\n    this.isFetching = false;\r\n  }\r\n\r\n  // Uses SOR V2 to retrieve the cost\r\n  // If previously called the cached value will be used.\r\n  async setCostOutputToken(\r\n    tokenAddr: string,\r\n    tokenDecimals: number,\r\n    manualCost: string | null = null\r\n  ): Promise<BigNumber> {\r\n    tokenAddr = tokenAddr === NATIVE_ASSET_ADDRESS ? this.weth : tokenAddr;\r\n\r\n    if (manualCost) {\r\n      await this.sorV2.swapCostCalculator.setNativeAssetPriceInToken(\r\n        tokenAddr,\r\n        manualCost\r\n      );\r\n    }\r\n\r\n    const cost = await this.sorV2.getCostOfSwapInToken(\r\n      tokenAddr,\r\n      tokenDecimals,\r\n      this.gasPrice,\r\n      BigNumber.from(SWAP_COST)\r\n    );\r\n\r\n    console.log(`[SorManager] Cost for token ${tokenAddr}: ${cost.toString()}`);\r\n\r\n    return cost;\r\n  }\r\n\r\n  // This fetches ALL pool with onchain info.\r\n  async fetchPools(): Promise<void> {\r\n    if (this.isFetching) {\r\n      return;\r\n    }\r\n    this.isFetching = true;\r\n\r\n    // This will catch any error fetching Subgraph or onChain data with V2\r\n    console.time('[SorManager] fetchPools');\r\n    try {\r\n      // Fetch of all pools from V2 subgraph and pull onchain data\r\n      const v2result = await this.sorV2.fetchPools();\r\n      this.fetchStatus.v2finishedFetch = true;\r\n      this.fetchStatus.v2success = v2result;\r\n    } catch (err) {\r\n      console.log(\r\n        `[SorManager] V2 fetchPools issue: ${(err as Error).message}`\r\n      );\r\n      this.fetchStatus.v2finishedFetch = true;\r\n      this.fetchStatus.v2success = false;\r\n    }\r\n    console.log(\r\n      `[SorManager] V2 fetchPools result: ${this.fetchStatus.v2success}`\r\n    );\r\n    console.timeEnd(`[SorManager] V2 fetchPools`);\r\n\r\n    this.selectedPools = this.sorV2.getPools();\r\n    this.isFetching = false;\r\n  }\r\n  // Format best swap result\r\n  async getBestSwap(\r\n    tokenIn: string,\r\n    tokenOut: string,\r\n    tokenInDecimals: number,\r\n    tokenOutDecimals: number,\r\n    swapType: SwapTypes,\r\n    amountScaled: BigNumber\r\n  ): Promise<SorReturn> {\r\n    const v2TokenIn = tokenIn === NATIVE_ASSET_ADDRESS ? AddressZero : tokenIn;\r\n    const v2TokenOut =\r\n      tokenOut === NATIVE_ASSET_ADDRESS ? AddressZero : tokenOut;\r\n\r\n    const timestampSeconds = Math.floor(Date.now() / 1000);\r\n\r\n    // The poolTypeFilter can be used to filter to different pool types. Useful for debug/testing.\r\n    const swapOptions: SwapOptions = {\r\n      maxPools: this.maxPools,\r\n      gasPrice: this.gasPrice,\r\n      swapGas: BigNumber.from(SWAP_COST),\r\n      poolTypeFilter: PoolFilter.All,\r\n      timestamp: timestampSeconds,\r\n      forceRefresh: true,\r\n    };\r\n\r\n    const swapInfoV2: SwapInfo = await this.sorV2.getSwaps(\r\n      v2TokenIn.toLowerCase(),\r\n      v2TokenOut.toLowerCase(),\r\n      swapType,\r\n      amountScaled,\r\n      swapOptions\r\n    );\r\n\r\n    // Both are scaled amounts\r\n    console.log(\r\n      `[SorManager] ${swapInfoV2.returnAmount.toString()}: V2 return amount`\r\n    );\r\n    console.log(\r\n      `[SorManager] ${swapInfoV2.returnAmountConsideringFees.toString()}: V2 return amount with fees`\r\n    );\r\n\r\n    return {\r\n      tokenIn,\r\n      tokenOut,\r\n      returnDecimals:\r\n        swapType === SwapTypes.SwapExactIn ? tokenOutDecimals : tokenInDecimals,\r\n      hasSwaps: swapInfoV2.swaps.length > 0,\r\n      returnAmount: swapInfoV2.returnAmount,\r\n      result: swapInfoV2,\r\n      marketSpNormalised: swapInfoV2.marketSp,\r\n    };\r\n  }\r\n\r\n  // Check if pool info fetch\r\n  hasPoolData(): boolean {\r\n    if (this.fetchStatus.v2finishedFetch) {\r\n      // TO DO - This could be used to provide more info to UI?\r\n      if (this.fetchStatus.v2success === false) {\r\n        console.log(\r\n          `[SorManager] Error Fetching V2 Pools - No Liquidity Sources.`\r\n        );\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    } else {\r\n      console.log(`[SorManager] Not finished fetching pools.`);\r\n      return false;\r\n    }\r\n  }\r\n}\r\n","import { SubgraphPoolBase, SwapType, SwapTypes } from '@balancer-labs/sdk';\r\nimport { BigNumber, formatFixed, parseFixed } from '@ethersproject/bignumber';\r\nimport {\r\n  AddressZero,\r\n  WeiPerEther as ONE,\r\n  Zero,\r\n} from '@ethersproject/constants';\r\nimport { TransactionResponse } from '@ethersproject/providers';\r\nimport { formatUnits, parseUnits } from '@ethersproject/units';\r\nimport {\r\n  computed,\r\n  ComputedRef,\r\n  onMounted,\r\n  reactive,\r\n  Ref,\r\n  ref,\r\n  toRefs,\r\n} from 'vue';\r\nimport { useI18n } from 'vue-i18n';\r\n\r\nimport { NATIVE_ASSET_ADDRESS } from '@/constants/tokens';\r\nimport { getBalancer } from '@/dependencies/balancer-sdk';\r\nimport { bnum, isSameAddress } from '@/lib/utils';\r\nimport {\r\n  SorManager,\r\n  SorReturn,\r\n} from '@/lib/utils/balancer/helpers/sor/sorManager';\r\nimport { convertStEthWrap, isStEthAddress } from '@/lib/utils/balancer/lido';\r\nimport { swapIn, swapOut } from '@/lib/utils/balancer/swapper';\r\nimport {\r\n  getWrapOutput,\r\n  unwrap,\r\n  wrap,\r\n  WrapType,\r\n} from '@/lib/utils/balancer/wrapper';\r\nimport { configService } from '@/services/config/config.service';\r\nimport { rpcProviderService } from '@/services/rpc-provider/rpc-provider.service';\r\nimport useWeb3 from '@/services/web3/useWeb3';\r\nimport { TokenInfo } from '@/types/TokenList';\r\n\r\nimport useEthers from '../useEthers';\r\nimport useFathom from '../useFathom';\r\nimport useNumbers, { FNumFormats } from '../useNumbers';\r\nimport { isMainnet } from '../useNetwork';\r\nimport { useTokens } from '@/providers/tokens.provider';\r\nimport useTransactions, { TransactionAction } from '../useTransactions';\r\nimport { SwapQuote } from './types';\r\nimport { captureException } from '@sentry/browser';\r\nimport { overflowProtected } from '@/components/_global/BalTextInput/helpers';\r\nimport useTranasactionErrors from '../useTransactionErrors';\r\n\r\ntype SorState = {\r\n  validationErrors: {\r\n    highPriceImpact: boolean;\r\n    noSwaps: boolean;\r\n  };\r\n  submissionError: string | null;\r\n};\r\n\r\nconst GAS_PRICE = import.meta.env.VITE_GAS_PRICE || '100000000000';\r\nconst MAX_POOLS = import.meta.env.VITE_MAX_POOLS || '4';\r\nconst MIN_PRICE_IMPACT = 0.0001;\r\nconst HIGH_PRICE_IMPACT_THRESHOLD = 0.05;\r\nconst state = reactive<SorState>({\r\n  validationErrors: {\r\n    highPriceImpact: false,\r\n    noSwaps: false,\r\n  },\r\n  submissionError: null,\r\n});\r\n\r\ntype Props = {\r\n  exactIn: Ref<boolean>;\r\n  tokenInAddressInput: Ref<string>;\r\n  tokenInAmountInput: Ref<string>;\r\n  tokenOutAddressInput: Ref<string>;\r\n  tokenOutAmountInput: Ref<string>;\r\n  wrapType: Ref<WrapType>;\r\n  tokenInAmountScaled?: ComputedRef<BigNumber>;\r\n  tokenOutAmountScaled?: ComputedRef<BigNumber>;\r\n  sorConfig?: {\r\n    handleAmountsOnFetchPools: boolean;\r\n  };\r\n  tokenIn: ComputedRef<TokenInfo>;\r\n  tokenOut: ComputedRef<TokenInfo>;\r\n  slippageBufferRate: ComputedRef<number>;\r\n  isCowswapSwap: ComputedRef<boolean>;\r\n};\r\n\r\nexport type UseSor = ReturnType<typeof useSor>;\r\n\r\nexport default function useSor({\r\n  exactIn,\r\n  tokenInAddressInput,\r\n  tokenInAmountInput,\r\n  tokenOutAddressInput,\r\n  tokenOutAmountInput,\r\n  wrapType,\r\n  tokenInAmountScaled,\r\n  tokenOutAmountScaled,\r\n  sorConfig = {\r\n    handleAmountsOnFetchPools: true,\r\n  },\r\n  tokenIn,\r\n  tokenOut,\r\n  slippageBufferRate,\r\n  isCowswapSwap,\r\n}: Props) {\r\n  let sorManager: SorManager | undefined = undefined;\r\n  const pools = ref<SubgraphPoolBase[]>([]);\r\n  const sorReturn = ref<SorReturn>({\r\n    hasSwaps: false,\r\n    tokenIn: '',\r\n    tokenOut: '',\r\n    returnDecimals: 18,\r\n    returnAmount: Zero,\r\n    marketSpNormalised: '0',\r\n    result: {\r\n      tokenAddresses: [],\r\n      swaps: [],\r\n      swapAmount: Zero,\r\n      returnAmount: Zero,\r\n      returnAmountConsideringFees: Zero,\r\n      tokenIn: '',\r\n      tokenOut: '',\r\n      marketSp: '0',\r\n      swapAmountForSwaps: Zero,\r\n      returnAmountFromSwaps: Zero,\r\n    },\r\n  });\r\n  const swapping = ref(false);\r\n  const confirming = ref(false);\r\n  const priceImpact = ref(0);\r\n  const latestTxHash = ref('');\r\n  const poolsLoading = ref(true);\r\n\r\n  // COMPOSABLES\r\n  const { getProvider: getWeb3Provider, appNetworkConfig } = useWeb3();\r\n  const provider = computed(() => getWeb3Provider());\r\n  const { trackGoal, Goals } = useFathom();\r\n  const { txListener } = useEthers();\r\n  const { addTransaction } = useTransactions();\r\n  const { fNum, toFiat } = useNumbers();\r\n  const { t } = useI18n();\r\n  const { injectTokens, priceFor, getToken } = useTokens();\r\n  const { isUserRejected } = useTranasactionErrors();\r\n\r\n  onMounted(async () => {\r\n    const unknownAssets: string[] = [];\r\n    if (tokenInAddressInput.value && !getToken(tokenInAddressInput.value)) {\r\n      unknownAssets.push(tokenInAddressInput.value);\r\n    }\r\n    if (tokenOutAddressInput.value && !getToken(tokenOutAddressInput.value)) {\r\n      unknownAssets.push(tokenOutAddressInput.value);\r\n    }\r\n    await injectTokens(unknownAssets);\r\n    await initSor();\r\n    await handleAmountChange();\r\n  });\r\n\r\n  function resetState() {\r\n    state.validationErrors.highPriceImpact = false;\r\n    state.validationErrors.noSwaps = false;\r\n\r\n    state.submissionError = null;\r\n  }\r\n\r\n  async function initSor(): Promise<void> {\r\n    sorManager = new SorManager(\r\n      rpcProviderService.jsonProvider,\r\n      BigNumber.from(GAS_PRICE),\r\n      Number(MAX_POOLS),\r\n      configService.network.chainId,\r\n      configService.network.addresses.weth\r\n    );\r\n\r\n    fetchPools();\r\n  }\r\n\r\n  async function fetchPools(): Promise<void> {\r\n    if (!sorManager) {\r\n      return;\r\n    }\r\n\r\n    console.time('[SOR] fetchPools');\r\n    await sorManager.fetchPools();\r\n    console.timeEnd('[SOR] fetchPools');\r\n    poolsLoading.value = false;\r\n    // Updates any swaps with up to date pools/balances\r\n    if (sorConfig.handleAmountsOnFetchPools) {\r\n      handleAmountChange();\r\n    }\r\n  }\r\n\r\n  function trackSwapEvent() {\r\n    trackGoal(Goals.BalancerSwap);\r\n    if (isMainnet.value) trackGoal(Goals.BalancerSwapMainnet);\r\n  }\r\n\r\n  async function updateSwapAmounts(): Promise<void> {\r\n    if (!sorManager) {\r\n      return;\r\n    }\r\n    if (sorReturn.value.hasSwaps && !confirming.value) {\r\n      const { result } = sorReturn.value;\r\n\r\n      const swapType: SwapType = exactIn.value\r\n        ? SwapType.SwapExactIn\r\n        : SwapType.SwapExactOut;\r\n\r\n      const deltas = await getBalancer().swaps.queryBatchSwap({\r\n        kind: swapType,\r\n        swaps: result.swaps,\r\n        assets: result.tokenAddresses,\r\n      });\r\n\r\n      if (result !== sorReturn.value.result) {\r\n        // sorReturn was updated while we were querying, abort to not show stale data.\r\n        return;\r\n      }\r\n\r\n      if (deltas.length >= 2) {\r\n        const tokenInDecimals = getTokenDecimals(tokenInAddressInput.value);\r\n        const tokenOutDecimals = getTokenDecimals(tokenOutAddressInput.value);\r\n\r\n        let tokenInAddress =\r\n          tokenInAddressInput.value === NATIVE_ASSET_ADDRESS\r\n            ? AddressZero\r\n            : tokenInAddressInput.value;\r\n        let tokenOutAddress =\r\n          tokenOutAddressInput.value === NATIVE_ASSET_ADDRESS\r\n            ? AddressZero\r\n            : tokenOutAddressInput.value;\r\n\r\n        // If the token in/out is stETH then finding the token position\r\n        // below doesn't work because result.tokenAddresses only includes\r\n        // wstETH. This is a crude hack to replace token in/out address\r\n        // with wstETH so the index mapping works.\r\n        if (isStEthAddress(tokenInAddressInput.value))\r\n          tokenInAddress = configService.network.addresses.wstETH;\r\n        if (isStEthAddress(tokenOutAddressInput.value))\r\n          tokenOutAddress = configService.network.addresses.wstETH;\r\n\r\n        const tokenInPosition = result.tokenAddresses.indexOf(\r\n          tokenInAddress.toLowerCase()\r\n        );\r\n        const tokenOutPosition = result.tokenAddresses.indexOf(\r\n          tokenOutAddress.toLowerCase()\r\n        );\r\n\r\n        let tokenInAmount = BigNumber.from(deltas[tokenInPosition]).abs();\r\n        let tokenOutAmount = BigNumber.from(deltas[tokenOutPosition]).abs();\r\n\r\n        if (swapType === SwapType.SwapExactOut) {\r\n          tokenInAmount = await mutateAmount({\r\n            amount: tokenInAmount,\r\n            address: tokenInAddressInput.value,\r\n            isInputToken: false,\r\n          });\r\n\r\n          tokenInAmountInput.value = tokenInAmount.gt(0)\r\n            ? formatAmount(formatUnits(tokenInAmount, tokenInDecimals))\r\n            : '';\r\n        }\r\n\r\n        if (swapType === SwapType.SwapExactIn) {\r\n          tokenOutAmount = await mutateAmount({\r\n            amount: tokenOutAmount,\r\n            address: tokenOutAddressInput.value,\r\n            isInputToken: false,\r\n          });\r\n\r\n          tokenOutAmountInput.value = tokenOutAmount.gt(0)\r\n            ? formatAmount(formatUnits(tokenOutAmount, tokenOutDecimals))\r\n            : '';\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  function resetInputAmounts(amount: string): void {\r\n    tokenInAmountInput.value = amount;\r\n    tokenOutAmountInput.value = amount;\r\n    priceImpact.value = 0;\r\n    sorReturn.value.hasSwaps = false;\r\n    sorReturn.value.returnAmount = Zero;\r\n  }\r\n\r\n  async function handleAmountChange(): Promise<void> {\r\n    if (isCowswapSwap.value) {\r\n      return;\r\n    }\r\n\r\n    let amount = exactIn.value\r\n      ? tokenInAmountInput.value\r\n      : tokenOutAmountInput.value;\r\n    // Avoid using SOR if querying a zero value or (un)wrapping swap\r\n    const zeroValueSwap = amount === '' || amount === '0';\r\n    if (zeroValueSwap) {\r\n      resetInputAmounts(amount);\r\n      return;\r\n    }\r\n\r\n    const tokenInAddress = tokenInAddressInput.value;\r\n    const tokenOutAddress = tokenOutAddressInput.value;\r\n\r\n    if (!tokenInAddress || !tokenOutAddress) {\r\n      if (exactIn.value) tokenOutAmountInput.value = '';\r\n      else tokenInAmountInput.value = '';\r\n      return;\r\n    }\r\n\r\n    const tokenInDecimals = getTokenDecimals(tokenInAddressInput.value);\r\n    const tokenOutDecimals = getTokenDecimals(tokenOutAddressInput.value);\r\n\r\n    const inputAmountDecimals = exactIn.value\r\n      ? tokenInDecimals\r\n      : tokenOutDecimals;\r\n    amount = overflowProtected(amount, inputAmountDecimals);\r\n\r\n    if (wrapType.value !== WrapType.NonWrap) {\r\n      const wrapper =\r\n        wrapType.value === WrapType.Wrap ? tokenOutAddress : tokenInAddress;\r\n\r\n      if (exactIn.value) {\r\n        tokenInAmountInput.value = amount;\r\n\r\n        const outputAmount = await getWrapOutput(\r\n          wrapper,\r\n          wrapType.value,\r\n          parseFixed(amount, tokenInDecimals)\r\n        );\r\n        tokenOutAmountInput.value = formatFixed(outputAmount, tokenInDecimals);\r\n      } else {\r\n        tokenOutAmountInput.value = amount;\r\n\r\n        const inputAmount = await getWrapOutput(\r\n          wrapper,\r\n          wrapType.value === WrapType.Wrap ? WrapType.Unwrap : WrapType.Wrap,\r\n          parseFixed(amount, tokenOutDecimals)\r\n        );\r\n        tokenInAmountInput.value = formatFixed(inputAmount, tokenOutDecimals);\r\n      }\r\n\r\n      sorReturn.value.hasSwaps = false;\r\n      priceImpact.value = 0;\r\n      return;\r\n    }\r\n\r\n    if (!sorManager || !sorManager.hasPoolData()) {\r\n      if (exactIn.value) tokenOutAmountInput.value = '';\r\n      else tokenInAmountInput.value = '';\r\n      return;\r\n    }\r\n\r\n    if (exactIn.value) {\r\n      await setSwapCost(\r\n        tokenOutAddressInput.value,\r\n        tokenOutDecimals,\r\n        sorManager\r\n      );\r\n\r\n      let tokenInAmountScaled = parseUnits(amount, tokenInDecimals);\r\n\r\n      console.log('[SOR Manager] swapExactIn');\r\n\r\n      const swapReturn: SorReturn = await sorManager.getBestSwap(\r\n        tokenInAddress,\r\n        tokenOutAddress,\r\n        tokenInDecimals,\r\n        tokenOutDecimals,\r\n        SwapTypes.SwapExactIn,\r\n        tokenInAmountScaled\r\n      );\r\n\r\n      sorReturn.value = swapReturn;\r\n      let tokenOutAmount = swapReturn.returnAmount;\r\n\r\n      tokenOutAmountInput.value = tokenOutAmount.gt(0)\r\n        ? formatAmount(formatUnits(tokenOutAmount, tokenOutDecimals))\r\n        : '';\r\n\r\n      if (!sorReturn.value.hasSwaps) {\r\n        priceImpact.value = 0;\r\n        state.validationErrors.noSwaps = true;\r\n      } else {\r\n        // If either in/out address is stETH we should mutate the value for the\r\n        // priceImpact calculation.\r\n        tokenInAmountScaled = await mutateAmount({\r\n          amount: tokenInAmountScaled,\r\n          address: tokenInAddress,\r\n          isInputToken: true,\r\n        });\r\n        tokenOutAmount = await mutateAmount({\r\n          amount: tokenOutAmount,\r\n          address: tokenOutAddress,\r\n          isInputToken: false,\r\n        });\r\n        const priceImpactCalc = calcPriceImpact(\r\n          tokenOutDecimals,\r\n          tokenOutAmount,\r\n          tokenInAmountScaled,\r\n          swapReturn\r\n        );\r\n\r\n        priceImpact.value = Math.max(\r\n          Number(formatUnits(priceImpactCalc)),\r\n          MIN_PRICE_IMPACT\r\n        );\r\n      }\r\n    } else {\r\n      // Notice that outputToken is tokenOut if swapType == 'swapExactIn' and tokenIn if swapType == 'swapExactOut'\r\n      await setSwapCost(tokenInAddressInput.value, tokenInDecimals, sorManager);\r\n\r\n      let tokenOutAmountScaled = parseUnits(amount, tokenOutDecimals);\r\n\r\n      console.log('[SOR Manager] swapExactOut');\r\n\r\n      const swapReturn: SorReturn = await sorManager.getBestSwap(\r\n        tokenInAddress,\r\n        tokenOutAddress,\r\n        tokenInDecimals,\r\n        tokenOutDecimals,\r\n        SwapTypes.SwapExactOut,\r\n        tokenOutAmountScaled\r\n      );\r\n\r\n      sorReturn.value = swapReturn; // TO DO - is it needed?\r\n\r\n      let tokenInAmount = swapReturn.returnAmount;\r\n      tokenInAmountInput.value = tokenInAmount.gt(0)\r\n        ? formatAmount(formatUnits(tokenInAmount, tokenInDecimals))\r\n        : '';\r\n\r\n      if (!sorReturn.value.hasSwaps) {\r\n        priceImpact.value = 0;\r\n        state.validationErrors.noSwaps = true;\r\n      } else {\r\n        // If either in/out address is stETH we should mutate the value for the\r\n        // priceImpact calculation.\r\n        tokenOutAmountScaled = await mutateAmount({\r\n          amount: tokenOutAmountScaled,\r\n          address: tokenOutAddress,\r\n          isInputToken: true,\r\n        });\r\n        tokenInAmount = await mutateAmount({\r\n          amount: tokenInAmount,\r\n          address: tokenInAddress,\r\n          isInputToken: false,\r\n        });\r\n        const priceImpactCalc = calcPriceImpact(\r\n          tokenInDecimals,\r\n          tokenInAmount,\r\n          tokenOutAmountScaled,\r\n          swapReturn\r\n        );\r\n\r\n        priceImpact.value = Math.max(\r\n          Number(formatUnits(priceImpactCalc)),\r\n          MIN_PRICE_IMPACT\r\n        );\r\n      }\r\n    }\r\n\r\n    pools.value = sorManager.selectedPools;\r\n\r\n    state.validationErrors.highPriceImpact =\r\n      priceImpact.value >= HIGH_PRICE_IMPACT_THRESHOLD;\r\n  }\r\n\r\n  function calcPriceImpact(\r\n    tokenDecimals: number,\r\n    tokenAmount: BigNumber,\r\n    tokenAmountScaled: BigNumber,\r\n    swapReturn: SorReturn\r\n  ): BigNumber {\r\n    const divScale = BigNumber.from(10).pow(tokenDecimals);\r\n    const wadScale = BigNumber.from(10).pow(18);\r\n    const effectivePrice = tokenAmountScaled.mul(divScale).div(tokenAmount);\r\n    return effectivePrice\r\n      .mul(wadScale)\r\n      .div(parseUnits(Number(swapReturn.marketSpNormalised).toFixed(18)))\r\n      .sub(ONE);\r\n  }\r\n\r\n  function txHandler(tx: TransactionResponse, action: TransactionAction): void {\r\n    confirming.value = false;\r\n\r\n    let summary = '';\r\n    const tokenInAmountFormatted = fNum(tokenInAmountInput.value, {\r\n      ...FNumFormats.token,\r\n      maximumSignificantDigits: 6,\r\n    });\r\n    const tokenOutAmountFormatted = fNum(tokenOutAmountInput.value, {\r\n      ...FNumFormats.token,\r\n      maximumSignificantDigits: 6,\r\n    });\r\n\r\n    const tokenInSymbol = tokenIn.value.symbol;\r\n    const tokenOutSymbol = tokenOut.value.symbol;\r\n\r\n    if (['wrap', 'unwrap'].includes(action)) {\r\n      summary = t('transactionSummary.wrapUnwrap', [\r\n        tokenInAmountFormatted,\r\n        tokenInSymbol,\r\n        tokenOutSymbol,\r\n      ]);\r\n    } else {\r\n      summary = `${tokenInAmountFormatted} ${tokenInSymbol} -> ${tokenOutAmountFormatted} ${tokenOutSymbol}`;\r\n    }\r\n\r\n    addTransaction({\r\n      id: tx.hash,\r\n      type: 'tx',\r\n      action,\r\n      summary,\r\n      details: {\r\n        tokenIn: tokenIn.value,\r\n        tokenOut: tokenOut.value,\r\n        tokenInAddress: tokenInAddressInput.value,\r\n        tokenOutAddress: tokenOutAddressInput.value,\r\n        tokenInAmount: tokenInAmountInput.value,\r\n        tokenOutAmount: tokenOutAmountInput.value,\r\n        exactIn: exactIn.value,\r\n        quote: getQuote(),\r\n        priceImpact: priceImpact.value,\r\n        slippageBufferRate: slippageBufferRate.value,\r\n      },\r\n    });\r\n\r\n    const swapUSDValue =\r\n      toFiat(tokenInAmountInput.value, tokenInAddressInput.value) || '0';\r\n\r\n    txListener(tx, {\r\n      onTxConfirmed: () => {\r\n        trackGoal(Goals.Swapped, bnum(swapUSDValue).times(100).toNumber() || 0);\r\n        swapping.value = false;\r\n        latestTxHash.value = tx.hash;\r\n      },\r\n      onTxFailed: () => {\r\n        swapping.value = false;\r\n      },\r\n    });\r\n  }\r\n\r\n  async function swap(successCallback?: () => void) {\r\n    trackGoal(Goals.ClickSwap);\r\n    swapping.value = true;\r\n    confirming.value = true;\r\n    state.submissionError = null;\r\n\r\n    const tokenInAddress = tokenInAddressInput.value;\r\n    const tokenOutAddress = tokenOutAddressInput.value;\r\n    const tokenInDecimals = getToken(tokenInAddress).decimals;\r\n    const tokenOutDecimals = getToken(tokenOutAddress).decimals;\r\n    const tokenInAmountScaled = parseFixed(\r\n      tokenInAmountInput.value,\r\n      tokenInDecimals\r\n    );\r\n\r\n    if (wrapType.value == WrapType.Wrap) {\r\n      try {\r\n        const tx = await wrap(\r\n          appNetworkConfig.key,\r\n          provider.value as any,\r\n          tokenOutAddress,\r\n          tokenInAmountScaled\r\n        );\r\n        console.log('Wrap tx', tx);\r\n\r\n        txHandler(tx, 'wrap');\r\n\r\n        if (successCallback != null) {\r\n          successCallback();\r\n        }\r\n        trackSwapEvent();\r\n      } catch (error) {\r\n        handleSwapException(error as Error);\r\n      }\r\n      return;\r\n    } else if (wrapType.value == WrapType.Unwrap) {\r\n      try {\r\n        const tx = await unwrap(\r\n          appNetworkConfig.key,\r\n          provider.value as any,\r\n          tokenInAddress,\r\n          tokenInAmountScaled\r\n        );\r\n        console.log('Unwrap tx', tx);\r\n\r\n        txHandler(tx, 'unwrap');\r\n\r\n        if (successCallback != null) {\r\n          successCallback();\r\n        }\r\n        trackSwapEvent();\r\n      } catch (error) {\r\n        handleSwapException(error as Error);\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (exactIn.value) {\r\n      const tokenOutAmount = parseFixed(\r\n        tokenOutAmountInput.value,\r\n        tokenOutDecimals\r\n      );\r\n      const minAmount = getMinOut(tokenOutAmount);\r\n      const sr: SorReturn = sorReturn.value as SorReturn;\r\n\r\n      try {\r\n        const tx = await swapIn(sr, tokenInAmountScaled, minAmount);\r\n        console.log('Swap in tx', tx);\r\n\r\n        txHandler(tx, 'swap');\r\n\r\n        if (successCallback != null) {\r\n          successCallback();\r\n        }\r\n        trackSwapEvent();\r\n      } catch (error) {\r\n        handleSwapException(error as Error);\r\n      }\r\n    } else {\r\n      const tokenInAmountMax = getMaxIn(tokenInAmountScaled);\r\n      const sr: SorReturn = sorReturn.value as SorReturn;\r\n      const tokenOutAmountScaled = parseFixed(\r\n        tokenOutAmountInput.value,\r\n        tokenOutDecimals\r\n      );\r\n\r\n      try {\r\n        const tx = await swapOut(sr, tokenInAmountMax, tokenOutAmountScaled);\r\n        console.log('Swap out tx', tx);\r\n\r\n        txHandler(tx, 'swap');\r\n\r\n        if (successCallback != null) {\r\n          successCallback();\r\n        }\r\n        trackSwapEvent();\r\n      } catch (error) {\r\n        handleSwapException(error as Error);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Uses stored market prices to calculate price of native asset in terms of token\r\n  function calculateEthPriceInToken(tokenAddress: string): number {\r\n    const ethPriceFiat = priceFor(appNetworkConfig.nativeAsset.address);\r\n    const tokenPriceFiat = priceFor(tokenAddress);\r\n    if (tokenPriceFiat === 0) return 0;\r\n    const ethPriceToken = ethPriceFiat / tokenPriceFiat;\r\n    return ethPriceToken;\r\n  }\r\n\r\n  // Sets SOR swap cost for more efficient routing\r\n  async function setSwapCost(\r\n    tokenAddress: string,\r\n    tokenDecimals: number,\r\n    sorManager: SorManager\r\n  ): Promise<void> {\r\n    await sorManager.setCostOutputToken(\r\n      tokenAddress,\r\n      tokenDecimals,\r\n      calculateEthPriceInToken(tokenAddress).toString()\r\n    );\r\n  }\r\n\r\n  function getMaxIn(amount: BigNumber) {\r\n    return amount\r\n      .mul(parseFixed(String(1 + slippageBufferRate.value), 18))\r\n      .div(ONE);\r\n  }\r\n\r\n  function getMinOut(amount: BigNumber) {\r\n    return amount\r\n      .mul(ONE)\r\n      .div(parseFixed(String(1 + slippageBufferRate.value), 18));\r\n  }\r\n\r\n  function getQuote(): SwapQuote {\r\n    const maximumInAmount =\r\n      tokenInAmountScaled != null ? getMaxIn(tokenInAmountScaled.value) : Zero;\r\n\r\n    const minimumOutAmount =\r\n      tokenOutAmountScaled != null\r\n        ? getMinOut(tokenOutAmountScaled.value)\r\n        : Zero;\r\n\r\n    return {\r\n      feeAmountInToken: '0',\r\n      feeAmountOutToken: '0',\r\n      maximumInAmount,\r\n      minimumOutAmount,\r\n    };\r\n  }\r\n\r\n  function formatAmount(amount: string) {\r\n    return fNum(amount, {\r\n      maximumSignificantDigits: 6,\r\n      useGrouping: false,\r\n      fixedFormat: true,\r\n    });\r\n  }\r\n\r\n  function getTokenDecimals(tokenAddress: string) {\r\n    return getToken(tokenAddress)?.decimals;\r\n  }\r\n\r\n  /**\r\n   * mutateAmount\r\n   *\r\n   * Handles any conditions where the token in or out needs to be mutated for\r\n   * display purposes. The only case we have so far is if the token in or out\r\n   * is stETH, the actual return amount from the SOR is wstETH. So we need to\r\n   * convert the wstETH amount to stETH using the exchange rate.\r\n   *\r\n   * @param {BigNumber} amount - Amount to parse (could be tokenIn or tokenOut amount).\r\n   * @param {string} address - Token address for amount.\r\n   * @param {boolean} isInputToken - Is this the token being specified?\r\n   * @returns {BigNumber} A new amount if conditions are met or the same amount\r\n   * as passed in.\r\n   */\r\n  async function mutateAmount({\r\n    amount,\r\n    address,\r\n    isInputToken,\r\n  }: {\r\n    amount: BigNumber;\r\n    address: string;\r\n    isInputToken: boolean;\r\n  }): Promise<BigNumber> {\r\n    if (\r\n      isSameAddress(address, appNetworkConfig.addresses.stETH) &&\r\n      isMainnet.value\r\n    ) {\r\n      return convertStEthWrap({ amount, isWrap: isInputToken });\r\n    }\r\n    return amount;\r\n  }\r\n\r\n  function handleSwapException(error: Error) {\r\n    if (!isUserRejected(error)) {\r\n      console.trace(error);\r\n      state.submissionError = t('swapException', ['Balancer']);\r\n      captureException(new Error(state.submissionError, { cause: error }));\r\n    }\r\n    swapping.value = false;\r\n    confirming.value = false;\r\n  }\r\n\r\n  return {\r\n    ...toRefs(state),\r\n    sorManager,\r\n    sorReturn,\r\n    pools,\r\n    initSor,\r\n    handleAmountChange,\r\n    exactIn,\r\n    swap,\r\n    swapping,\r\n    priceImpact,\r\n    latestTxHash,\r\n    fetchPools,\r\n    poolsLoading,\r\n    getQuote,\r\n    resetState,\r\n    confirming,\r\n    updateSwapAmounts,\r\n    resetInputAmounts,\r\n    // For Tests\r\n    setSwapCost,\r\n  };\r\n}\r\n","import {\r\n  buildRelayerCalls,\r\n  SubgraphPoolBase,\r\n  SwapInfo,\r\n  SwapTypes,\r\n} from '@balancer-labs/sdk';\r\nimport { BigNumber, parseFixed } from '@ethersproject/bignumber';\r\nimport OldBigNumber from 'bignumber.js';\r\nimport { formatUnits } from '@ethersproject/units';\r\nimport { WeiPerEther as ONE, Zero } from '@ethersproject/constants';\r\nimport { captureException } from '@sentry/browser';\r\nimport { bnum } from '@/lib/utils';\r\n\r\nimport {\r\n  computed,\r\n  ComputedRef,\r\n  onMounted,\r\n  reactive,\r\n  Ref,\r\n  ref,\r\n  toRefs,\r\n  watch,\r\n} from 'vue';\r\n\r\nimport { getBalancer } from '@/dependencies/balancer-sdk';\r\nimport useWeb3 from '@/services/web3/useWeb3';\r\nimport { TokenInfo } from '@/types/TokenList';\r\n\r\nimport { useTokens } from '@/providers/tokens.provider';\r\nimport useTransactions from '../useTransactions';\r\nimport useRelayerApproval, {\r\n  RelayerType,\r\n} from '@/composables/approvals/useRelayerApproval';\r\nimport { configService } from '@/services/config/config.service';\r\n\r\nimport { SwapQuote } from './types';\r\nimport useNumbers, { FNumFormats } from '../useNumbers';\r\nimport useEthers from '../useEthers';\r\nimport useRelayerApprovalQuery from '@/composables/queries/useRelayerApprovalQuery';\r\nimport { TransactionBuilder } from '@/services/web3/transactions/transaction.builder';\r\nimport BatchRelayerAbi from '@/lib/abi/BatchRelayer.json';\r\nimport useTranasactionErrors from '../useTransactionErrors';\r\nimport { useI18n } from 'vue-i18n';\r\n\r\ntype JoinExitState = {\r\n  validationErrors: {\r\n    highPriceImpact: boolean;\r\n  };\r\n  submissionError: string | null;\r\n};\r\n\r\nconst state = reactive<JoinExitState>({\r\n  validationErrors: {\r\n    highPriceImpact: false,\r\n  },\r\n  submissionError: null,\r\n});\r\n\r\ntype Props = {\r\n  exactIn: Ref<boolean>;\r\n  tokenInAddressInput: Ref<string>;\r\n  tokenInAmountInput: Ref<string>;\r\n  tokenOutAddressInput: Ref<string>;\r\n  tokenOutAmountInput: Ref<string>;\r\n  tokenInAmountScaled: ComputedRef<BigNumber>;\r\n  tokenOutAmountScaled: ComputedRef<BigNumber>;\r\n  tokenIn: ComputedRef<TokenInfo>;\r\n  tokenOut: ComputedRef<TokenInfo>;\r\n  slippageBufferRate: ComputedRef<number>;\r\n  pools: Ref<SubgraphPoolBase[]>;\r\n};\r\n\r\nexport type useJoinExit = ReturnType<typeof useJoinExit>;\r\n\r\nexport default function useJoinExit({\r\n  exactIn,\r\n  tokenInAddressInput,\r\n  tokenInAmountInput,\r\n  tokenOutAddressInput,\r\n  tokenOutAmountInput,\r\n  tokenInAmountScaled,\r\n  tokenOutAmountScaled,\r\n  tokenIn,\r\n  tokenOut,\r\n  slippageBufferRate,\r\n  pools,\r\n}: Props) {\r\n  const swapInfo = ref<SwapInfo | null>(null);\r\n  const swapping = ref(false);\r\n  const confirming = ref(false);\r\n  const priceImpact = ref(0);\r\n  const latestTxHash = ref('');\r\n  const swapInfoLoading = ref(false);\r\n\r\n  // COMPOSABLES\r\n  const { account, getSigner } = useWeb3();\r\n  const { injectTokens, getToken } = useTokens();\r\n  const { relayerSignature } = useRelayerApproval(RelayerType.BATCH_V4);\r\n  const relayerApprovalQuery = useRelayerApprovalQuery(\r\n    ref(configService.network.addresses.batchRelayerV4)\r\n  );\r\n  const { addTransaction } = useTransactions();\r\n  const { txListener } = useEthers();\r\n  const { fNum } = useNumbers();\r\n  const { isUserRejected } = useTranasactionErrors();\r\n  const { t } = useI18n();\r\n\r\n  const hasValidationError = computed(\r\n    () => state.validationErrors.highPriceImpact != false\r\n  );\r\n\r\n  function resetState() {\r\n    state.validationErrors.highPriceImpact = false;\r\n\r\n    state.submissionError = null;\r\n  }\r\n\r\n  function resetInputAmounts(amount: string): void {\r\n    tokenInAmountInput.value = amount;\r\n    tokenOutAmountInput.value = amount;\r\n    priceImpact.value = 0;\r\n  }\r\n\r\n  async function getSwapInfo(): Promise<void> {\r\n    swapInfoLoading.value = true;\r\n    swapInfo.value = await getBalancer().sor.getSwaps(\r\n      tokenInAddressInput.value,\r\n      tokenOutAddressInput.value,\r\n      exactIn.value ? SwapTypes.SwapExactIn : SwapTypes.SwapExactOut,\r\n      parseFixed(\r\n        tokenInAmountInput.value || tokenOutAmountInput.value || '0',\r\n        18\r\n      ),\r\n      undefined,\r\n      true\r\n    );\r\n    swapInfoLoading.value = false;\r\n  }\r\n\r\n  async function handleAmountChange(): Promise<void> {\r\n    // Prevent quering undefined input amounts\r\n    if (\r\n      (exactIn.value && !tokenInAmountInput.value) ||\r\n      (!exactIn.value && !tokenOutAmountInput.value)\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    if (pools.value.length === 0) return;\r\n\r\n    const amountToExchange = exactIn.value\r\n      ? tokenInAmountScaled.value\r\n      : tokenOutAmountScaled.value;\r\n\r\n    if (amountToExchange === undefined) {\r\n      return;\r\n    }\r\n\r\n    if (amountToExchange.isZero()) {\r\n      tokenInAmountInput.value = '0';\r\n      tokenOutAmountInput.value = '0';\r\n      return;\r\n    }\r\n\r\n    await getSwapInfo();\r\n\r\n    const tokenInDecimals = getTokenDecimals(tokenInAddressInput.value);\r\n    const tokenOutDecimals = getTokenDecimals(tokenOutAddressInput.value);\r\n\r\n    const returnAmount = swapInfo.value?.returnAmount || BigNumber.from('0');\r\n\r\n    if (returnAmount.isZero()) return;\r\n\r\n    if (exactIn.value) {\r\n      tokenOutAmountInput.value = bnum(\r\n        formatUnits(returnAmount, tokenOutDecimals)\r\n      ).toFixed(6, OldBigNumber.ROUND_DOWN);\r\n    } else {\r\n      tokenInAmountInput.value = bnum(\r\n        formatUnits(returnAmount, tokenInDecimals)\r\n      ).toFixed(6, OldBigNumber.ROUND_DOWN);\r\n    }\r\n  }\r\n\r\n  async function swap(successCallback?: () => void) {\r\n    const balancer = getBalancer();\r\n    try {\r\n      confirming.value = true;\r\n      state.submissionError = null;\r\n\r\n      if (!swapInfo.value) {\r\n        return;\r\n      }\r\n\r\n      const relayerCallData = buildRelayerCalls(\r\n        swapInfo.value,\r\n        pools.value,\r\n        account.value,\r\n        balancer.contracts.relayerV4?.address ?? '',\r\n        balancer.networkConfig.addresses.tokens.wrappedNativeAsset,\r\n        String(slippageBufferRate.value * 1e4),\r\n        relayerSignature.value || undefined\r\n      );\r\n\r\n      const txBuilder = new TransactionBuilder(getSigner());\r\n      const tx = await txBuilder.contract.sendTransaction({\r\n        contractAddress: balancer.contracts.relayerV4?.address ?? '',\r\n        abi: BatchRelayerAbi,\r\n        action: 'multicall',\r\n        params: [relayerCallData.rawCalls],\r\n      });\r\n      console.log(tx);\r\n\r\n      const tokenInAmountFormatted = fNum(tokenInAmountInput.value, {\r\n        ...FNumFormats.token,\r\n        maximumSignificantDigits: 6,\r\n      });\r\n      const tokenOutAmountFormatted = fNum(tokenOutAmountInput.value, {\r\n        ...FNumFormats.token,\r\n        maximumSignificantDigits: 6,\r\n      });\r\n\r\n      addTransaction({\r\n        id: tx.hash,\r\n        type: 'tx',\r\n        action: 'swap',\r\n        summary: `${tokenInAmountFormatted} ${tokenIn.value.symbol} -> ${tokenOutAmountFormatted} ${tokenOut.value.symbol}`,\r\n        details: {\r\n          tokenIn: tokenIn.value,\r\n          tokenOut: tokenOut.value,\r\n          tokenInAddress: tokenInAddressInput.value,\r\n          tokenOutAddress: tokenOutAddressInput.value,\r\n          tokenInAmount: tokenInAmountInput.value,\r\n          tokenOutAmount: tokenOutAmountInput.value,\r\n          exactIn: exactIn.value,\r\n          quote: getQuote(),\r\n          priceImpact: priceImpact.value,\r\n          slippageBufferRate: slippageBufferRate.value,\r\n        },\r\n      });\r\n\r\n      if (successCallback != null) {\r\n        successCallback();\r\n      }\r\n\r\n      await txListener(tx, {\r\n        onTxConfirmed: () => {\r\n          confirming.value = false;\r\n          relayerApprovalQuery.refetch();\r\n        },\r\n        onTxFailed: () => {\r\n          confirming.value = false;\r\n        },\r\n      });\r\n    } catch (error) {\r\n      if (!isUserRejected(error)) {\r\n        console.trace(error);\r\n        state.submissionError = t('swapException', ['Relayer']);\r\n        captureException(new Error(state.submissionError, { cause: error }));\r\n      }\r\n      swapping.value = false;\r\n      confirming.value = false;\r\n    }\r\n  }\r\n\r\n  function getMaxIn(amount: BigNumber) {\r\n    return amount\r\n      .mul(parseFixed(String(1 + slippageBufferRate.value), 18))\r\n      .div(ONE);\r\n  }\r\n\r\n  function getMinOut(amount: BigNumber) {\r\n    return amount\r\n      .mul(ONE)\r\n      .div(parseFixed(String(1 + slippageBufferRate.value), 18));\r\n  }\r\n\r\n  function getQuote(): SwapQuote {\r\n    const maximumInAmount =\r\n      tokenInAmountScaled != null ? getMaxIn(tokenInAmountScaled.value) : Zero;\r\n\r\n    const minimumOutAmount =\r\n      tokenOutAmountScaled != null\r\n        ? getMinOut(tokenOutAmountScaled.value)\r\n        : Zero;\r\n\r\n    return {\r\n      feeAmountInToken: '0',\r\n      feeAmountOutToken: '0',\r\n      maximumInAmount,\r\n      minimumOutAmount,\r\n    };\r\n  }\r\n\r\n  function getTokenDecimals(tokenAddress: string) {\r\n    return getToken(tokenAddress)?.decimals;\r\n  }\r\n\r\n  // LIFECYCLE\r\n  onMounted(async () => {\r\n    const unknownAssets: string[] = [];\r\n    if (tokenInAddressInput.value && !getToken(tokenInAddressInput.value)) {\r\n      unknownAssets.push(tokenInAddressInput.value);\r\n    }\r\n    if (tokenOutAddressInput.value && !getToken(tokenOutAddressInput.value)) {\r\n      unknownAssets.push(tokenOutAddressInput.value);\r\n    }\r\n    await injectTokens(unknownAssets);\r\n  });\r\n\r\n  watch(pools, () => {\r\n    handleAmountChange();\r\n  });\r\n\r\n  return {\r\n    ...toRefs(state),\r\n    pools,\r\n    hasValidationError,\r\n    handleAmountChange,\r\n    exactIn,\r\n    swap,\r\n    swapInfo,\r\n    swapping,\r\n    priceImpact,\r\n    latestTxHash,\r\n    getQuote,\r\n    resetState,\r\n    confirming,\r\n    swapInfoLoading,\r\n    resetInputAmounts,\r\n  };\r\n}\r\n","import { useSwapAssets } from '@/composables/swap/useSwapAssets';\r\nimport { parseFixed } from '@ethersproject/bignumber';\r\n\r\nimport LS_KEYS from '@/constants/local-storage.keys';\r\nimport { NATIVE_ASSET_ADDRESS } from '@/constants/tokens';\r\nimport { bnum, lsGet, lsSet } from '@/lib/utils';\r\nimport { getWrapAction, WrapType } from '@/lib/utils/balancer/wrapper';\r\nimport { COW_SUPPORTED_NETWORKS } from '@/services/cowswap/constants';\r\nimport {\r\n  canUseJoinExit,\r\n  someJoinExit,\r\n  SubgraphPoolBase,\r\n  SwapTypes,\r\n} from '@balancer-labs/sdk';\r\n\r\nimport useWeb3 from '@/services/web3/useWeb3';\r\nimport { networkId } from '../useNetwork';\r\nimport useNumbers, { FNumFormats } from '../useNumbers';\r\nimport { useTokens } from '@/providers/tokens.provider';\r\nimport { useUserSettings } from '@/providers/user-settings.provider';\r\nimport useCowswap from './useCowswap';\r\nimport useSor from './useSor';\r\nimport useJoinExit from './useJoinExit';\r\n\r\nexport type SwapRoute = 'wrapUnwrap' | 'balancer' | 'cowswap' | 'joinExit';\r\n\r\nexport type UseSwapping = ReturnType<typeof useSwapping>;\r\n\r\nexport const swapGasless = ref<boolean>(\r\n  lsGet<boolean>(LS_KEYS.Swap.Gasless, true)\r\n);\r\n\r\nexport default function useSwapping(\r\n  exactIn: Ref<boolean>,\r\n  tokenInAddressInput: Ref<string>,\r\n  tokenInAmountInput: Ref<string>,\r\n  tokenOutAddressInput: Ref<string>,\r\n  tokenOutAmountInput: Ref<string>\r\n) {\r\n  // COMPOSABLES\r\n  const { fNum } = useNumbers();\r\n  const { getToken, tokens } = useTokens();\r\n  const { blockNumber } = useWeb3();\r\n  const { slippage } = useUserSettings();\r\n  const { setInputAsset, setOutputAsset } = useSwapAssets();\r\n\r\n  // COMPUTED\r\n  const slippageBufferRate = computed(() => parseFloat(slippage.value));\r\n\r\n  const wrapType = computed(() =>\r\n    getWrapAction(tokenInAddressInput.value, tokenOutAddressInput.value)\r\n  );\r\n  const isWrap = computed(() => wrapType.value === WrapType.Wrap);\r\n  const isUnwrap = computed(() => wrapType.value === WrapType.Unwrap);\r\n\r\n  const tokenIn = computed(() => getToken(tokenInAddressInput.value));\r\n\r\n  const tokenOut = computed(() => getToken(tokenOutAddressInput.value));\r\n\r\n  const isEthSwap = computed(\r\n    () => tokenInAddressInput.value === NATIVE_ASSET_ADDRESS\r\n  );\r\n\r\n  const tokenInAmountScaled = computed(() =>\r\n    parseFixed(tokenInAmountInput.value || '0', tokenIn.value.decimals)\r\n  );\r\n\r\n  const tokenOutAmountScaled = computed(() =>\r\n    parseFixed(tokenOutAmountInput.value || '0', tokenOut.value.decimals)\r\n  );\r\n\r\n  const requiresTokenApproval = computed(() => {\r\n    if (wrapType.value === WrapType.Unwrap || isEthSwap.value) {\r\n      return false;\r\n    }\r\n    return true;\r\n  });\r\n\r\n  const effectivePriceMessage = computed(() => {\r\n    const tokenInAmount = parseFloat(tokenInAmountInput.value);\r\n    const tokenOutAmount = parseFloat(tokenOutAmountInput.value);\r\n\r\n    if (tokenInAmount > 0 && tokenOutAmount > 0) {\r\n      return {\r\n        tokenIn: `1 ${tokenIn.value?.symbol} = ${fNum(\r\n          bnum(tokenOutAmount).div(tokenInAmount).toString(),\r\n          FNumFormats.token\r\n        )} ${tokenOut.value?.symbol}`,\r\n        tokenOut: `1 ${tokenOut.value?.symbol} = ${fNum(\r\n          bnum(tokenInAmount).div(tokenOutAmount).toString(),\r\n          FNumFormats.token\r\n        )} ${tokenIn.value?.symbol}`,\r\n      };\r\n    }\r\n    return {\r\n      tokenIn: '',\r\n      tokenOut: '',\r\n    };\r\n  });\r\n\r\n  const isCowswapSupportedOnNetwork = computed(() =>\r\n    COW_SUPPORTED_NETWORKS.includes(networkId.value)\r\n  );\r\n\r\n  const swapRoute = computed<SwapRoute>(() => {\r\n    if (wrapType.value !== WrapType.NonWrap) {\r\n      return 'wrapUnwrap';\r\n    } else if (isEthSwap.value) {\r\n      return 'balancer';\r\n    }\r\n\r\n    if (swapGasless.value && isCowswapSupportedOnNetwork.value) {\r\n      return 'cowswap';\r\n    } else {\r\n      const swapInfoAvailable =\r\n        joinExit.swapInfo.value?.returnAmount &&\r\n        !joinExit.swapInfo.value?.returnAmount.isZero();\r\n\r\n      const joinExitSwapAvailable = swapInfoAvailable\r\n        ? canUseJoinExit(\r\n            exactIn.value ? SwapTypes.SwapExactIn : SwapTypes.SwapExactOut,\r\n            tokenInAddressInput.value,\r\n            tokenOutAddressInput.value\r\n          )\r\n        : false;\r\n\r\n      const joinExitSwapPresent = joinExitSwapAvailable\r\n        ? someJoinExit(\r\n            sor.pools.value as SubgraphPoolBase[],\r\n            joinExit.swapInfo.value?.swaps ?? [],\r\n            joinExit.swapInfo.value?.tokenAddresses ?? []\r\n          )\r\n        : false;\r\n      // Currently joinExit swap is only suitable for ExactIn and non-eth swaps\r\n      return joinExitSwapPresent ? 'joinExit' : 'balancer';\r\n    }\r\n  });\r\n\r\n  const isCowswapSwap = computed(() => swapRoute.value === 'cowswap');\r\n\r\n  const isBalancerSwap = computed(() => swapRoute.value === 'balancer');\r\n\r\n  const isJoinExitSwap = computed(() => swapRoute.value === 'joinExit');\r\n\r\n  const isWrapUnwrapSwap = computed(() => swapRoute.value === 'wrapUnwrap');\r\n\r\n  const isGaslessSwappingDisabled = computed(\r\n    () => isEthSwap.value || isWrapUnwrapSwap.value\r\n  );\r\n\r\n  const hasSwapQuote = computed(\r\n    () =>\r\n      parseFloat(tokenInAmountInput.value) > 0 &&\r\n      parseFloat(tokenOutAmountInput.value) > 0\r\n  );\r\n\r\n  const sor = useSor({\r\n    exactIn,\r\n    tokenInAddressInput,\r\n    tokenInAmountInput,\r\n    tokenOutAddressInput,\r\n    tokenOutAmountInput,\r\n    wrapType,\r\n    tokenInAmountScaled,\r\n    tokenOutAmountScaled,\r\n    sorConfig: {\r\n      handleAmountsOnFetchPools: true,\r\n    },\r\n    tokenIn,\r\n    tokenOut,\r\n    slippageBufferRate,\r\n    isCowswapSwap,\r\n  });\r\n\r\n  const cowswap = useCowswap({\r\n    exactIn,\r\n    tokenInAddressInput,\r\n    tokenInAmountInput,\r\n    tokenOutAddressInput,\r\n    tokenOutAmountInput,\r\n    tokenInAmountScaled,\r\n    tokenOutAmountScaled,\r\n    tokenIn,\r\n    tokenOut,\r\n    slippageBufferRate,\r\n  });\r\n\r\n  const joinExit = useJoinExit({\r\n    exactIn,\r\n    tokenInAddressInput,\r\n    tokenInAmountInput,\r\n    tokenOutAddressInput,\r\n    tokenOutAmountInput,\r\n    tokenInAmountScaled,\r\n    tokenOutAmountScaled,\r\n    tokenIn,\r\n    tokenOut,\r\n    slippageBufferRate,\r\n    pools: sor.pools as Ref<SubgraphPoolBase[]>,\r\n  });\r\n\r\n  const isLoading = computed(() => {\r\n    if (hasSwapQuote.value || isWrapUnwrapSwap.value) {\r\n      return false;\r\n    }\r\n\r\n    if (isCowswapSwap.value) {\r\n      return cowswap.updatingQuotes.value;\r\n    }\r\n\r\n    return joinExit.swapInfoLoading.value || sor.poolsLoading.value;\r\n  });\r\n\r\n  const isConfirming = computed(\r\n    () =>\r\n      sor.confirming.value ||\r\n      cowswap.confirming.value ||\r\n      joinExit.confirming.value\r\n  );\r\n\r\n  const submissionError = computed(\r\n    () =>\r\n      sor.submissionError.value ||\r\n      cowswap.submissionError.value ||\r\n      joinExit.submissionError.value\r\n  );\r\n\r\n  // METHODS\r\n  function swap(successCallback?: () => void) {\r\n    if (isCowswapSwap.value) {\r\n      return cowswap.swap(() => {\r\n        if (successCallback) {\r\n          successCallback();\r\n        }\r\n\r\n        cowswap.resetState();\r\n      });\r\n    } else if (isJoinExitSwap.value) {\r\n      return joinExit.swap(() => {\r\n        if (successCallback) {\r\n          successCallback();\r\n        }\r\n\r\n        joinExit.resetState();\r\n      });\r\n    } else {\r\n      // handles both Balancer and Wrap/Unwrap swaps\r\n      return sor.swap(() => {\r\n        if (successCallback) {\r\n          successCallback();\r\n        }\r\n\r\n        sor.resetState();\r\n      });\r\n    }\r\n  }\r\n\r\n  function resetSubmissionError() {\r\n    sor.submissionError.value = null;\r\n    cowswap.submissionError.value = null;\r\n    joinExit.submissionError.value = null;\r\n  }\r\n\r\n  function setSwapGasless(flag: boolean) {\r\n    swapGasless.value = flag;\r\n\r\n    lsSet(LS_KEYS.Swap.Gasless, swapGasless.value);\r\n  }\r\n\r\n  function toggleSwapGasless() {\r\n    setSwapGasless(!swapGasless.value);\r\n\r\n    handleAmountChange();\r\n  }\r\n\r\n  function getQuote() {\r\n    if (isCowswapSwap.value) {\r\n      return cowswap.getQuote();\r\n    }\r\n    if (isJoinExitSwap.value) {\r\n      return joinExit.getQuote();\r\n    }\r\n    return sor.getQuote();\r\n  }\r\n\r\n  function resetAmounts() {\r\n    sor.resetInputAmounts('');\r\n  }\r\n\r\n  async function handleAmountChange() {\r\n    if (exactIn.value) {\r\n      tokenOutAmountInput.value = '';\r\n    } else {\r\n      tokenInAmountInput.value = '';\r\n    }\r\n\r\n    cowswap.resetState(false);\r\n    sor.resetState();\r\n    joinExit.resetState();\r\n\r\n    if (isCowswapSwap.value) {\r\n      cowswap.handleAmountChange();\r\n    } else {\r\n      await sor.handleAmountChange();\r\n      await joinExit.handleAmountChange();\r\n    }\r\n  }\r\n\r\n  // WATCHERS\r\n  watch(tokenInAddressInput, async () => {\r\n    setInputAsset(tokenInAddressInput.value);\r\n\r\n    handleAmountChange();\r\n  });\r\n\r\n  watch(tokenOutAddressInput, () => {\r\n    setOutputAsset(tokenOutAddressInput.value);\r\n\r\n    handleAmountChange();\r\n  });\r\n\r\n  onMounted(() => {\r\n    const gaslessDisabled = window.location.href.includes('gasless=false');\r\n\r\n    if (gaslessDisabled) {\r\n      setSwapGasless(false);\r\n    }\r\n  });\r\n\r\n  watch(blockNumber, () => {\r\n    if (isCowswapSwap.value) {\r\n      if (!cowswap.hasValidationError.value) {\r\n        cowswap.handleAmountChange();\r\n      }\r\n    } else if (isJoinExitSwap.value) {\r\n      if (!joinExit.hasValidationError.value) {\r\n        joinExit.handleAmountChange();\r\n      }\r\n    } else if (isBalancerSwap.value) {\r\n      sor.updateSwapAmounts();\r\n    }\r\n  });\r\n\r\n  watch(slippageBufferRate, () => {\r\n    handleAmountChange();\r\n  });\r\n\r\n  return {\r\n    // computed\r\n    isWrap,\r\n    isUnwrap,\r\n    isEthSwap,\r\n    tokenIn,\r\n    tokenOut,\r\n    tokenInAmountScaled,\r\n    tokenOutAmountScaled,\r\n    tokens,\r\n    requiresTokenApproval,\r\n    effectivePriceMessage,\r\n    swapRoute,\r\n    exactIn,\r\n    isLoading,\r\n    cowswap,\r\n    sor,\r\n    joinExit,\r\n    isCowswapSwap,\r\n    isBalancerSwap,\r\n    isJoinExitSwap,\r\n    wrapType,\r\n    isWrapUnwrapSwap,\r\n    tokenInAddressInput,\r\n    tokenInAmountInput,\r\n    tokenOutAddressInput,\r\n    tokenOutAmountInput,\r\n    slippageBufferRate,\r\n    isConfirming,\r\n    submissionError,\r\n    resetSubmissionError,\r\n    swapGasless,\r\n    toggleSwapGasless,\r\n    isGaslessSwappingDisabled,\r\n    isCowswapSupportedOnNetwork,\r\n    resetAmounts,\r\n    // methods\r\n    getQuote,\r\n    swap,\r\n    handleAmountChange,\r\n  };\r\n}\r\n","import { computed, Ref } from 'vue';\r\n\r\nimport { bnum } from '@/lib/utils';\r\nimport useWeb3 from '@/services/web3/useWeb3';\r\n\r\nimport { useTokens } from '@/providers/tokens.provider';\r\n\r\nexport enum SwapValidation {\r\n  VALID,\r\n  NO_ACCOUNT,\r\n  EMPTY,\r\n  NO_NATIVE_ASSET,\r\n  NO_BALANCE,\r\n  NO_LIQUIDITY,\r\n}\r\n\r\nexport default function useValidation(\r\n  tokenInAddress: Ref<string>,\r\n  tokenInAmount: Ref<string>,\r\n  tokenOutAddress: Ref<string>,\r\n  tokenOutAmount: Ref<string>\r\n) {\r\n  const { isWalletReady } = useWeb3();\r\n  const { balances } = useTokens();\r\n\r\n  const noAmounts = computed(\r\n    () =>\r\n      !isValidTokenAmount(tokenInAmount.value) &&\r\n      !isValidTokenAmount(tokenOutAmount.value)\r\n  );\r\n\r\n  const missingToken = computed(\r\n    () => !tokenInAddress.value || !tokenOutAddress.value\r\n  );\r\n\r\n  const exceedsBalance = computed(\r\n    () =>\r\n      !balances.value[tokenInAddress.value] ||\r\n      bnum(balances.value[tokenInAddress.value]).lt(tokenInAmount.value)\r\n  );\r\n\r\n  const validationStatus = computed(() => {\r\n    if (noAmounts.value || missingToken.value) return SwapValidation.EMPTY;\r\n\r\n    if (isWalletReady.value && exceedsBalance.value)\r\n      return SwapValidation.NO_BALANCE;\r\n\r\n    return SwapValidation.VALID;\r\n  });\r\n\r\n  function isValidTokenAmount(tokenAmount: string) {\r\n    return bnum(tokenAmount).gt(0) && tokenAmount.trim() !== '';\r\n  }\r\n\r\n  const errorMessage = computed(() => validationStatus.value);\r\n\r\n  return {\r\n    validationStatus,\r\n    errorMessage,\r\n    isValidTokenAmount,\r\n  };\r\n}\r\n","<template>\r\n  <div\r\n    class=\"group flex justify-center items-center w-9 h-9 bg-gray-50 dark:bg-gray-900 rounded-full shadow cursor-pointer toggle-btn\"\r\n    @click=\"toggle\"\r\n    style=\"background-color: #1d5264;background: #07394a;\r\n    border-radius: 50%;\r\n    height: 38px;\r\n    z-index: 1;\"\r\n  >\r\n    <div class=\"duration-300 ease-in-out\" :class=\"{ 'rotate-180': isRotated }\">\r\n      <svg\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        viewBox=\"0 0 21 18\"\r\n        class=\"w-5 h-3 icon-swap-toggle\"\r\n      >\r\n        <path\r\n          d=\"M6.26693 16.2421L6.26693 3.5252L8.70412 5.96238C9.03943 6.29801 9.58349 6.29801 9.91943 5.96238C10.2554 5.62676 10.2551 5.08301 9.91943 4.74707L6.01537 0.843008C5.97568 0.80332 5.93193 0.767695 5.88537 0.736133C5.87349 0.728633 5.86037 0.72332 5.84849 0.716445C5.81287 0.694883 5.77693 0.67332 5.73787 0.657383C5.72005 0.650195 5.70099 0.646758 5.68287 0.640195C5.64818 0.628633 5.6138 0.615508 5.57724 0.608008C5.52162 0.596758 5.46505 0.59082 5.40724 0.59082C5.34943 0.59082 5.29287 0.596758 5.23724 0.608008C5.20068 0.615195 5.1663 0.62832 5.13162 0.640195C5.11349 0.646758 5.09443 0.649883 5.07662 0.657383C5.03787 0.673633 5.00193 0.694883 4.96599 0.716445C4.95412 0.72332 4.94099 0.728633 4.92912 0.736133C4.88255 0.767695 4.8388 0.80332 4.79912 0.843008L0.895679 4.74645C0.727866 4.91426 0.643804 5.13395 0.643804 5.35395C0.643804 5.57395 0.727866 5.79363 0.895679 5.96145C1.23099 6.29707 1.77505 6.29707 2.11099 5.96145L4.54787 3.52488L4.54787 16.2418C4.54787 16.7164 4.93255 17.1011 5.40724 17.1011C5.88193 17.1011 6.26693 16.7168 6.26693 16.2421Z\"\r\n          class=\"fill-current text-secondary\"\r\n        />\r\n        <path\r\n          d=\"M15.7625 17.2669C15.7987 17.2597 15.8328 17.2469 15.8672 17.235C15.8856 17.2284 15.905 17.2253 15.9231 17.2175C15.9612 17.2013 15.9966 17.1806 16.0322 17.1591C16.0447 17.1519 16.0584 17.1462 16.0706 17.1384C16.1172 17.1069 16.1609 17.0713 16.2006 17.0316L20.1037 13.1284C20.4394 12.7928 20.4394 12.2491 20.1037 11.9131C19.7684 11.5775 19.2244 11.5775 18.8884 11.9131L16.4516 14.3497V1.63281C16.4516 1.15813 16.0669 0.773438 15.5922 0.773438C15.1175 0.773438 14.7328 1.15813 14.7328 1.63281V14.3497L12.2956 11.9125C11.9603 11.5769 11.4163 11.5769 11.0803 11.9125C10.9125 12.0803 10.8284 12.3 10.8284 12.52C10.8284 12.74 10.9125 12.9597 11.0803 13.1275L14.9841 17.0316C15.0238 17.0713 15.0675 17.1069 15.1141 17.1384C15.1262 17.1462 15.14 17.1519 15.1525 17.1591C15.1878 17.1803 15.2234 17.2013 15.2616 17.2175C15.2797 17.225 15.2991 17.2284 15.3175 17.235C15.3519 17.2466 15.3859 17.2594 15.4222 17.2669C15.4778 17.2778 15.5344 17.2841 15.5922 17.2841C15.65 17.2841 15.7069 17.2778 15.7625 17.2669Z\"\r\n          class=\"text-blue-600 group-hover:text-pink-500 dark:text-blue-400 dark:group-hover:text-yellow-500 dark:group-focus:text-yellow-500 fill-current\"\r\n        />\r\n      </svg>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nexport default defineComponent({\r\n  emits: ['toggle'],\r\n  setup(_props, { emit }) {\r\n    const isRotated = ref(false);\r\n\r\n    function toggle(): void {\r\n      isRotated.value = !isRotated.value;\r\n      emit('toggle');\r\n    }\r\n\r\n    return {\r\n      isRotated,\r\n      toggle,\r\n    };\r\n  },\r\n});\r\n</script>\r\n<style scoped>\r\n.icon-swap-toggle {\r\n  @apply transition-transform ease-out duration-200;\r\n}\r\n\r\n.toggle-btn:hover .icon-swap-toggle {\r\n  transform: scale(1.2);\r\n}\r\n</style>\r\n","<template>\r\n  <div\r\n    class=\"group flex justify-center items-center w-9 h-9 bg-gray-50 dark:bg-gray-900 rounded-full shadow cursor-pointer toggle-btn\"\r\n    @click=\"toggle\"\r\n    style=\"background-color: #1d5264;background: #07394a;\r\n    border-radius: 50%;\r\n    height: 38px;\r\n    z-index: 1;\"\r\n  >\r\n    <div class=\"duration-300 ease-in-out\" :class=\"{ 'rotate-180': isRotated }\">\r\n      <svg\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        viewBox=\"0 0 21 18\"\r\n        class=\"w-5 h-3 icon-swap-toggle\"\r\n      >\r\n        <path\r\n          d=\"M6.26693 16.2421L6.26693 3.5252L8.70412 5.96238C9.03943 6.29801 9.58349 6.29801 9.91943 5.96238C10.2554 5.62676 10.2551 5.08301 9.91943 4.74707L6.01537 0.843008C5.97568 0.80332 5.93193 0.767695 5.88537 0.736133C5.87349 0.728633 5.86037 0.72332 5.84849 0.716445C5.81287 0.694883 5.77693 0.67332 5.73787 0.657383C5.72005 0.650195 5.70099 0.646758 5.68287 0.640195C5.64818 0.628633 5.6138 0.615508 5.57724 0.608008C5.52162 0.596758 5.46505 0.59082 5.40724 0.59082C5.34943 0.59082 5.29287 0.596758 5.23724 0.608008C5.20068 0.615195 5.1663 0.62832 5.13162 0.640195C5.11349 0.646758 5.09443 0.649883 5.07662 0.657383C5.03787 0.673633 5.00193 0.694883 4.96599 0.716445C4.95412 0.72332 4.94099 0.728633 4.92912 0.736133C4.88255 0.767695 4.8388 0.80332 4.79912 0.843008L0.895679 4.74645C0.727866 4.91426 0.643804 5.13395 0.643804 5.35395C0.643804 5.57395 0.727866 5.79363 0.895679 5.96145C1.23099 6.29707 1.77505 6.29707 2.11099 5.96145L4.54787 3.52488L4.54787 16.2418C4.54787 16.7164 4.93255 17.1011 5.40724 17.1011C5.88193 17.1011 6.26693 16.7168 6.26693 16.2421Z\"\r\n          class=\"fill-current text-secondary\"\r\n        />\r\n        <path\r\n          d=\"M15.7625 17.2669C15.7987 17.2597 15.8328 17.2469 15.8672 17.235C15.8856 17.2284 15.905 17.2253 15.9231 17.2175C15.9612 17.2013 15.9966 17.1806 16.0322 17.1591C16.0447 17.1519 16.0584 17.1462 16.0706 17.1384C16.1172 17.1069 16.1609 17.0713 16.2006 17.0316L20.1037 13.1284C20.4394 12.7928 20.4394 12.2491 20.1037 11.9131C19.7684 11.5775 19.2244 11.5775 18.8884 11.9131L16.4516 14.3497V1.63281C16.4516 1.15813 16.0669 0.773438 15.5922 0.773438C15.1175 0.773438 14.7328 1.15813 14.7328 1.63281V14.3497L12.2956 11.9125C11.9603 11.5769 11.4163 11.5769 11.0803 11.9125C10.9125 12.0803 10.8284 12.3 10.8284 12.52C10.8284 12.74 10.9125 12.9597 11.0803 13.1275L14.9841 17.0316C15.0238 17.0713 15.0675 17.1069 15.1141 17.1384C15.1262 17.1462 15.14 17.1519 15.1525 17.1591C15.1878 17.1803 15.2234 17.2013 15.2616 17.2175C15.2797 17.225 15.2991 17.2284 15.3175 17.235C15.3519 17.2466 15.3859 17.2594 15.4222 17.2669C15.4778 17.2778 15.5344 17.2841 15.5922 17.2841C15.65 17.2841 15.7069 17.2778 15.7625 17.2669Z\"\r\n          class=\"text-blue-600 group-hover:text-pink-500 dark:text-blue-400 dark:group-hover:text-yellow-500 dark:group-focus:text-yellow-500 fill-current\"\r\n        />\r\n      </svg>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nexport default defineComponent({\r\n  emits: ['toggle'],\r\n  setup(_props, { emit }) {\r\n    const isRotated = ref(false);\r\n\r\n    function toggle(): void {\r\n      isRotated.value = !isRotated.value;\r\n      emit('toggle');\r\n    }\r\n\r\n    return {\r\n      isRotated,\r\n      toggle,\r\n    };\r\n  },\r\n});\r\n</script>\r\n<style scoped>\r\n.icon-swap-toggle {\r\n  @apply transition-transform ease-out duration-200;\r\n}\r\n\r\n.toggle-btn:hover .icon-swap-toggle {\r\n  transform: scale(1.2);\r\n}\r\n</style>\r\n","<script setup lang=\"ts\">\r\nimport TokenInput from '@/components/inputs/TokenInput/TokenInput.vue';\r\nimport { UseSwapping } from '@/composables/swap/useSwapping';\r\nimport useNumbers, { FNumFormats } from '@/composables/useNumbers';\r\nimport { useTokens } from '@/providers/tokens.provider';\r\nimport useVeBal from '@/composables/useVeBAL';\r\nimport { bnum } from '@/lib/utils';\r\n\r\nimport SwapPairToggle from './SwapPairToggle.vue';\r\n\r\n/**\r\n * TYPES\r\n */\r\ntype Props = {\r\n  tokenInAmount: string;\r\n  tokenInAddress: string;\r\n  tokenOutAmount: string;\r\n  tokenOutAddress: string;\r\n  exactIn: boolean;\r\n  priceImpact?: number;\r\n  effectivePriceMessage?: UseSwapping['effectivePriceMessage'];\r\n  swapLoading?: boolean;\r\n};\r\n\r\n/**\r\n * PROPS & EMITS\r\n */\r\nconst props = defineProps<Props>();\r\n\r\nconst emit = defineEmits<{\r\n  (e: 'update:tokenInAmount', value: string): void;\r\n  (e: 'update:tokenInAddress', value: string): void;\r\n  (e: 'update:tokenOutAmount', value: string): void;\r\n  (e: 'update:tokenOutAddress', value: string): void;\r\n  (e: 'update:exactIn', value: boolean): void;\r\n  (e: 'amountChange'): void;\r\n}>();\r\n\r\n/**\r\n * COMPOSABLES\r\n */\r\nconst { fNum } = useNumbers();\r\nconst { getToken } = useTokens();\r\nconst { veBalTokenInfo } = useVeBal();\r\n\r\n/**\r\n * STATE\r\n */\r\nconst _tokenInAmount = ref<string>('');\r\nconst _tokenInAddress = ref<string>('');\r\nconst _tokenOutAmount = ref<string>('');\r\nconst _tokenOutAddress = ref<string>('');\r\n\r\nconst isInRate = ref<boolean>(true);\r\n\r\nconst typingTimeout = ref<any>(undefined);\r\n\r\n/**\r\n * COMPUTED\r\n */\r\nconst missingToken = computed(\r\n  () => !_tokenInAddress.value || !_tokenOutAddress.value\r\n);\r\n\r\nconst missingAmount = computed(\r\n  () => !_tokenInAmount.value || !_tokenOutAmount.value\r\n);\r\n\r\nconst tokenIn = computed(() => getToken(_tokenInAddress.value));\r\nconst tokenOut = computed(() => getToken(_tokenOutAddress.value));\r\n\r\nconst rateLabel = computed(() => {\r\n  if (missingToken.value || missingAmount.value) return '';\r\n\r\n  if (props.effectivePriceMessage)\r\n    return isInRate.value\r\n      ? props.effectivePriceMessage.value.tokenIn\r\n      : props.effectivePriceMessage.value.tokenOut;\r\n\r\n  let rate, inSymbol, outSymbol;\r\n\r\n  if (isInRate.value) {\r\n    rate = bnum(_tokenOutAmount.value).div(_tokenInAmount.value).toString();\r\n    inSymbol = tokenIn.value.symbol;\r\n    outSymbol = tokenOut.value.symbol;\r\n  } else {\r\n    rate = bnum(_tokenInAmount.value).div(_tokenOutAmount.value).toString();\r\n    inSymbol = tokenOut.value.symbol;\r\n    outSymbol = tokenIn.value.symbol;\r\n  }\r\n\r\n  return `1 ${inSymbol} = ${fNum(rate, FNumFormats.token)} ${outSymbol}`;\r\n});\r\n\r\n/**\r\n * METHODS\r\n */\r\nfunction preventUpdatesOnTyping(callback: () => void) {\r\n  if (typingTimeout.value) {\r\n    clearTimeout(typingTimeout.value);\r\n  }\r\n  typingTimeout.value = setTimeout(() => {\r\n    callback();\r\n  }, 300);\r\n}\r\n\r\nfunction handleInAmountChange(value: string): void {\r\n  emit('update:tokenInAmount', value);\r\n  preventUpdatesOnTyping(() => {\r\n    emit('amountChange');\r\n  });\r\n}\r\n\r\nfunction handleOutAmountChange(value: string): void {\r\n  emit('update:tokenOutAmount', value);\r\n  preventUpdatesOnTyping(() => {\r\n    emit('amountChange');\r\n  });\r\n}\r\n\r\nfunction handleTokenSwitch(): void {\r\n  emit('update:exactIn', !props.exactIn);\r\n  emit('update:tokenInAmount', _tokenOutAmount.value);\r\n  emit('update:tokenInAddress', _tokenOutAddress.value);\r\n  emit('update:tokenOutAmount', _tokenInAmount.value);\r\n  emit('update:tokenOutAddress', _tokenInAddress.value);\r\n  emit('amountChange');\r\n}\r\n\r\nasync function handleInputTokenChange(newTokenIn: string) {\r\n  if (newTokenIn === _tokenOutAddress.value) {\r\n    handleTokenSwitch();\r\n    return;\r\n  }\r\n  emit('update:tokenInAddress', newTokenIn);\r\n}\r\n\r\nasync function handleOutputTokenChange(newTokenOut: string) {\r\n  if (newTokenOut === _tokenInAddress.value) {\r\n    handleTokenSwitch();\r\n    return;\r\n  }\r\n  emit('update:tokenOutAddress', newTokenOut);\r\n}\r\n\r\n/**\r\n * CALLBACKS\r\n */\r\nwatchEffect(() => {\r\n  _tokenInAmount.value = props.tokenInAmount;\r\n  _tokenInAddress.value = props.tokenInAddress;\r\n  _tokenOutAmount.value = props.tokenOutAmount;\r\n  _tokenOutAddress.value = props.tokenOutAddress;\r\n});\r\nonMounted(() => {\r\n  // populates initial tokenOutAmount\r\n  if (props.tokenOutAmount) {\r\n    handleOutAmountChange(props.tokenOutAmount);\r\n  }\r\n});\r\n</script>\r\n\r\n<template>\r\n  <div>\r\n    <TokenInput\r\n      :amount=\"_tokenInAmount\"\r\n      :address=\"_tokenInAddress\"\r\n      name=\"tokenIn\"\r\n      :excludedTokens=\"[veBalTokenInfo?.address]\"\r\n      :ignoreWalletBalance=\"swapLoading\"\r\n      autoFocus\r\n      @update:amount=\"handleInAmountChange\"\r\n      @update:address=\"handleInputTokenChange\"\r\n      @input=\"emit('update:exactIn', true)\"\r\n      @set-max=\"emit('update:exactIn', true)\"\r\n    />\r\n\r\n    <div class=\"flex items-center my-2\">\r\n      \r\n      <div class=\"mx-2 h-px bg-gray-100 dark:bg-gray-700 grow\" style=\"background-color: #ffffff00;\"/>\r\n      <SwapPairToggle @toggle=\"handleTokenSwitch\" />\r\n      <div class=\"mx-2 h-px bg-gray-100 dark:bg-gray-700 grow\" style=\"background-color: #ffffff00;\"/>\r\n      <div\r\n        v-if=\"rateLabel\"\r\n        class=\"flex items-center text-xs text-gray-600 dark:text-gray-400 cursor-pointer\"\r\n        @click=\"isInRate = !isInRate\"\r\n        v-html=\"rateLabel\"\r\n      />\r\n    </div>\r\n\r\n    <TokenInput\r\n      :amount=\"_tokenOutAmount\"\r\n      :address=\"_tokenOutAddress\"\r\n      name=\"tokenOut\"\r\n      :priceImpact=\"priceImpact\"\r\n      noRules\r\n      noMax\r\n      disableNativeAssetBuffer\r\n      :excludedTokens=\"[veBalTokenInfo?.address]\"\r\n      @update:amount=\"handleOutAmountChange\"\r\n      @update:address=\"handleOutputTokenChange\"\r\n      @input=\"emit('update:exactIn', false)\"\r\n    />\r\n  </div>\r\n</template>\r\n","<template>\r\n  <BalCard class=\"relative card-container\" :shadow=\"swapCardShadow\" noBorder>\r\n    <!-- <template #header>\r\n      <div class=\"flex justify-between items-center w-full\">\r\n        <h4 style=\"color:white\">{{ title }}</h4>\r\n        <SwapSettingsPopover\r\n          :context=\"SwapSettingsContext.swap\"\r\n          :isGasless=\"swapping.swapGasless.value\"\r\n        />\r\n      </div>\r\n    </template> -->\r\n    <div style=\"padding-top: 20px;\">\r\n      <SwapPair\r\n        v-model:tokenInAmount=\"tokenInAmount\"\r\n        v-model:tokenInAddress=\"tokenInAddress\"\r\n        v-model:tokenOutAmount=\"tokenOutAmount\"\r\n        v-model:tokenOutAddress=\"tokenOutAddress\"\r\n        v-model:exactIn=\"exactIn\"\r\n        :swapLoading=\"\r\n          swapping.isBalancerSwap.value ? swapping.isLoading.value : false\r\n        \"\r\n        :effectivePriceMessage=\"swapping.effectivePriceMessage\"\r\n        class=\"mb-4\"\r\n        @amount-change=\"swapping.handleAmountChange\"\r\n      />\r\n      <BalAlert\r\n        v-if=\"error\"\r\n        class=\"p-3 mb-4\"\r\n        type=\"error\"\r\n        size=\"sm\"\r\n        :title=\"error.header\"\r\n        :description=\"error.body\"\r\n        :actionLabel=\"error.label\"\r\n        block\r\n        @action-click=\"handleErrorButtonClick\"\r\n      />\r\n      <BalAlert\r\n        v-else-if=\"warning\"\r\n        class=\"p-3 mb-4\"\r\n        type=\"warning\"\r\n        size=\"sm\"\r\n        :title=\"warning.header\"\r\n        :description=\"warning.body\"\r\n        block\r\n      />\r\n      <BalBtn\r\n        v-if=\"swapping.isLoading.value\"\r\n        loading\r\n        disabled\r\n        :loadingLabel=\"\r\n          swapping.isCowswapSwap.value ? $t('loadingBestPrice') : $t('loading')\r\n        \"\r\n        block\r\n      />\r\n      <BalBtn\r\n        v-else\r\n        :label=\"$t('preview')\"\r\n        :disabled=\"swapDisabled\"\r\n        color=\"gradient\"\r\n        block\r\n        @click.prevent=\"handlePreviewButton\"\r\n      />\r\n      <!-- <div\r\n        v-if=\"swapping.isCowswapSupportedOnNetwork.value\"\r\n        class=\"flex items-center mt-5 h-8 text-sm\"\r\n      >\r\n        <Transition name=\"fade\" mode=\"out-in\">\r\n          <div\r\n            v-if=\"swapping.isGaslessSwappingDisabled.value\"\r\n            class=\"text-secondary\"\r\n          >\r\n            <div class=\"flex gap-2 items-center\">\r\n              <span class=\"text-lg\">⛽</span>\r\n              <Transition name=\"fade\" mode=\"out-in\">\r\n                <p v-if=\"swapping.isWrap.value\">\r\n                  {{ $t('swapToggle.wrapEth') }}\r\n                </p>\r\n                <p v-else-if=\"swapping.isUnwrap.value\">\r\n                  {{ $t('swapToggle.unwrapEth') }}\r\n                </p>\r\n                <p v-else style=\"color:white\">\r\n                  {{ $t('swapToggle.fromEth') }}\r\n                </p>\r\n              </Transition>\r\n            </div>\r\n          </div>\r\n\r\n          <div v-else>\r\n            <div class=\"flex items-center swap-gasless\">\r\n              <BalTooltip\r\n                width=\"64\"\r\n                :disabled=\"!swapping.isGaslessSwappingDisabled.value\"\r\n              >\r\n                <template #activator>\r\n                  <BalToggle\r\n                    name=\"swapGasless\"\r\n                    :checked=\"swapping.swapGasless.value\"\r\n                    :disabled=\"swapping.isGaslessSwappingDisabled.value\"\r\n                    @toggle=\"swapping.toggleSwapGasless\"\r\n                  />\r\n                </template>\r\n                <div\r\n                  v-text=\"\r\n                    swapping.isWrapUnwrapSwap.value\r\n                      ? $t('swapGaslessToggle.disabledTooltip.wrapUnwrap')\r\n                      : $t('swapGaslessToggle.disabledTooltip.eth')\r\n                  \"\r\n                />\r\n              </BalTooltip>\r\n              <Transition name=\"fade\" mode=\"out-in\">\r\n                <span\r\n                  v-if=\"swapping.swapGasless.value\"\r\n                  class=\"pl-2 text-sm text-gray-600 dark:text-gray-400\"\r\n                  >{{ $t('swapToggle.swapGasless') }}</span\r\n                >\r\n                <span\r\n                  v-else\r\n                  class=\"pl-2 text-sm text-gray-600 dark:text-gray-400\"\r\n                  >{{ $t('swapToggle.swapWithGas') }}</span\r\n                >\r\n              </Transition>\r\n              <BalTooltip width=\"64\">\r\n                <template #activator>\r\n                  <BalIcon\r\n                    name=\"info\"\r\n                    size=\"xs\"\r\n                    class=\"flex ml-1 text-gray-400\"\r\n                  />\r\n                </template>\r\n                <div v-html=\"$t('swapGaslessToggle.tooltip')\" />\r\n              </BalTooltip>\r\n            </div>\r\n          </div>\r\n        </Transition>\r\n      </div> -->\r\n      <SwapRoute\r\n        v-if=\"alwaysShowRoutes\"\r\n        :addressIn=\"swapping.tokenIn.value.address\"\r\n        :amountIn=\"swapping.tokenInAmountInput.value\"\r\n        :addressOut=\"swapping.tokenOut.value.address\"\r\n        :amountOut=\"swapping.tokenOutAmountInput.value\"\r\n        :pools=\"pools\"\r\n        :sorReturn=\"swapping.sor.sorReturn.value\"\r\n        class=\"mt-4\"\r\n      />\r\n    </div>\r\n  </BalCard>\r\n  <teleport to=\"#modal\">\r\n    <SwapPreviewModal\r\n      v-if=\"modalSwapPreviewIsOpen\"\r\n      :swapping=\"swapping\"\r\n      :error=\"error\"\r\n      :warning=\"warning\"\r\n      @swap=\"swap\"\r\n      @close=\"handlePreviewModalClose\"\r\n    />\r\n  </teleport>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { SubgraphPoolBase } from '@balancer-labs/sdk';\r\nimport { getAddress, isAddress } from '@ethersproject/address';\r\nimport { formatUnits } from '@ethersproject/units';\r\nimport { useI18n } from 'vue-i18n';\r\nimport { useRouter } from 'vue-router';\r\nimport { useSwapAssets } from '@/composables/swap/useSwapAssets';\r\nimport SwapPreviewModal from '@/components/modals/SwapPreviewModal.vue';\r\nimport SwapSettingsPopover, {\r\n  SwapSettingsContext,\r\n} from '@/components/popovers/SwapSettingsPopover.vue';\r\nimport { useSwapState } from '@/composables/swap/useSwapState';\r\nimport useSwapping from '@/composables/swap/useSwapping';\r\nimport useValidation from '@/composables/swap/useValidation';\r\nimport useBreakpoints from '@/composables/useBreakpoints';\r\nimport useNumbers, { FNumFormats } from '@/composables/useNumbers';\r\nimport { useTokens } from '@/providers/tokens.provider';\r\nimport { TOKENS } from '@/constants/tokens';\r\nimport { lsGet } from '@/lib/utils';\r\nimport { WrapType } from '@/lib/utils/balancer/wrapper';\r\nimport { isRequired } from '@/lib/utils/validations';\r\nimport { ApiErrorCodes } from '@/services/cowswap/errors/OperatorError';\r\nimport useWeb3 from '@/services/web3/useWeb3';\r\nimport SwapPair from './SwapPair.vue';\r\nimport SwapRoute from './SwapRoute.vue';\r\n\r\nexport default defineComponent({\r\n  components: {\r\n    SwapPair,\r\n    SwapPreviewModal,\r\n    SwapRoute,\r\n    SwapSettingsPopover,\r\n  },\r\n  setup() {\r\n    // COMPOSABLES\r\n    const { inputAsset, outputAsset } = useSwapAssets();\r\n    const router = useRouter();\r\n    const { t } = useI18n();\r\n    const { bp } = useBreakpoints();\r\n    const { fNum } = useNumbers();\r\n    const { appNetworkConfig, isMismatchedNetwork } = useWeb3();\r\n    const { nativeAsset } = useTokens();\r\n    const {\r\n      tokenInAddress,\r\n      tokenOutAddress,\r\n      tokenInAmount,\r\n      tokenOutAmount,\r\n      setTokenInAddress,\r\n      setTokenOutAddress,\r\n      setTokenInAmount,\r\n      setTokenOutAmount,\r\n      setInitialized,\r\n    } = useSwapState();\r\n    // DATA\r\n    const exactIn = ref(true);\r\n    const modalSwapPreviewIsOpen = ref(false);\r\n    const dismissedErrors = ref({\r\n      highPriceImpact: false,\r\n    });\r\n    const alwaysShowRoutes = lsGet('alwaysShowRoutes', false);\r\n    const swapCardShadow = computed(() => {\r\n      switch (bp.value) {\r\n        case 'xs':\r\n          return 'none';\r\n        case 'sm':\r\n          return 'lg';\r\n        default:\r\n          return 'xl';\r\n      }\r\n    });\r\n    const swapping = useSwapping(\r\n      exactIn,\r\n      tokenInAddress,\r\n      tokenInAmount,\r\n      tokenOutAddress,\r\n      tokenOutAmount\r\n    );\r\n    const { errorMessage } = useValidation(\r\n      tokenInAddress,\r\n      tokenInAmount,\r\n      tokenOutAddress,\r\n      tokenOutAmount\r\n    );\r\n    // COMPUTED\r\n    const isHighPriceImpact = computed(\r\n      () =>\r\n        swapping.sor.validationErrors.value.highPriceImpact &&\r\n        !dismissedErrors.value.highPriceImpact\r\n    );\r\n    const swapDisabled = computed(() => {\r\n      const hasMismatchedNetwork = isMismatchedNetwork.value;\r\n      const hasAmountsError = !tokenInAmount.value || !tokenOutAmount.value;\r\n      const hasCowswapErrors =\r\n        swapping.isCowswapSwap.value &&\r\n        swapping.cowswap.hasValidationError.value;\r\n      const hasBalancerErrors =\r\n        swapping.isBalancerSwap.value && isHighPriceImpact.value;\r\n      return (\r\n        hasAmountsError ||\r\n        hasCowswapErrors ||\r\n        hasBalancerErrors ||\r\n        hasMismatchedNetwork\r\n      );\r\n    });\r\n    const title = computed(() => {\r\n      if (swapping.wrapType.value === WrapType.Wrap) {\r\n        return `${t('wrap')} ${swapping.tokenIn.value.symbol}`;\r\n      }\r\n      if (swapping.wrapType.value === WrapType.Unwrap) {\r\n        return `${t('unwrap')} ${swapping.tokenOut.value.symbol}`;\r\n      }\r\n      return t('Swap');\r\n    });\r\n    const pools = computed<SubgraphPoolBase[]>(\r\n      // @ts-ignore-next-line -- Fix types incompatibility error. Related to BigNumber?\r\n      () => {\r\n        return swapping.sor.pools.value;\r\n      }\r\n    );\r\n    const error = computed(() => {\r\n      if (isMismatchedNetwork.value) {\r\n        return {\r\n          header: t('switchNetwork'),\r\n          body: t('networkMismatch', [appNetworkConfig.name]),\r\n        };\r\n      }\r\n      if (swapping.isBalancerSwap.value && !swapping.isLoading.value) {\r\n        if (swapping.sor.validationErrors.value.noSwaps) {\r\n          return {\r\n            header: t('insufficientLiquidity'),\r\n            body: t('insufficientLiquidityDetailed'),\r\n          };\r\n        }\r\n      }\r\n      if (swapping.isCowswapSwap.value) {\r\n        if (swapping.cowswap.validationError.value != null) {\r\n          const validationError = swapping.cowswap.validationError.value;\r\n          if (validationError === ApiErrorCodes.SellAmountDoesNotCoverFee) {\r\n            return {\r\n              header: t('cowswapErrors.lowAmount.header'),\r\n              body: t('cowswapErrors.lowAmount.body'),\r\n            };\r\n          } else if (validationError === ApiErrorCodes.PriceExceedsBalance) {\r\n            return {\r\n              header: t('cowswapErrors.lowBalance.header', [\r\n                swapping.tokenIn.value.symbol,\r\n              ]),\r\n              body: t('cowswapErrors.lowBalance.body', [\r\n                swapping.tokenIn.value.symbol,\r\n                fNum(\r\n                  formatUnits(\r\n                    swapping.getQuote().maximumInAmount,\r\n                    swapping.tokenIn.value.decimals\r\n                  ),\r\n                  FNumFormats.token\r\n                ),\r\n                fNum(swapping.slippageBufferRate.value, FNumFormats.percent),\r\n              ]),\r\n            };\r\n          } else if (validationError === ApiErrorCodes.NoLiquidity) {\r\n            return {\r\n              header: t('cowswapErrors.noLiquidity.header', [\r\n                swapping.tokenIn.value.symbol,\r\n              ]),\r\n              body: t('cowswapErrors.noLiquidity.body'),\r\n            };\r\n          } else {\r\n            return {\r\n              header: t('cowswapErrors.genericError.header'),\r\n              body: swapping.cowswap.validationError.value,\r\n            };\r\n          }\r\n        }\r\n      } else if (swapping.isBalancerSwap.value) {\r\n        if (isHighPriceImpact.value) {\r\n          return {\r\n            header: t('highPriceImpact'),\r\n            body: t('highPriceImpactDetailed'),\r\n            label: t('accept'),\r\n          };\r\n        }\r\n      }\r\n      return undefined;\r\n    });\r\n    const warning = computed(() => {\r\n      if (swapping.isCowswapSwap.value) {\r\n        if (swapping.cowswap.warnings.value.highFees) {\r\n          return {\r\n            header: t('cowswapWarnings.highFees.header'),\r\n            body: t('cowswapWarnings.highFees.body'),\r\n          };\r\n        }\r\n      }\r\n      return undefined;\r\n    });\r\n\r\n    // METHODS\r\n    function swap() {\r\n      swapping.swap(() => {\r\n        swapping.resetAmounts();\r\n        modalSwapPreviewIsOpen.value = false;\r\n      });\r\n    }\r\n\r\n    function handleErrorButtonClick() {\r\n      if (swapping.sor.validationErrors.value.highPriceImpact) {\r\n        dismissedErrors.value.highPriceImpact = true;\r\n      }\r\n    }\r\n\r\n    function isNativeAssetIdentifier(assetParam: string | undefined): boolean {\r\n      return (\r\n        assetParam?.toLowerCase() === nativeAsset.deeplinkId?.toLowerCase() ||\r\n        assetParam?.toLowerCase() === nativeAsset.symbol?.toLowerCase()\r\n      );\r\n    }\r\n\r\n    async function populateInitialTokens(): Promise<void> {\r\n      let assetIn = router.currentRoute.value.params.assetIn as string;\r\n      if (isNativeAssetIdentifier(assetIn)) {\r\n        assetIn = nativeAsset.address;\r\n      } else if (isAddress(assetIn)) {\r\n        assetIn = getAddress(assetIn);\r\n      }\r\n      let assetOut = router.currentRoute.value.params.assetOut as string;\r\n      if (isNativeAssetIdentifier(assetOut)) {\r\n        assetOut = nativeAsset.address;\r\n      } else if (isAddress(assetOut)) {\r\n        assetOut = getAddress(assetOut);\r\n      }\r\n      setTokenInAddress(assetIn || inputAsset);\r\n      setTokenOutAddress(assetOut || outputAsset);\r\n\r\n      let assetInAmount = router.currentRoute.value.query?.inAmount as string;\r\n      let assetOutAmount = router.currentRoute.value.query?.outAmount as string;\r\n      if (assetInAmount) {\r\n        setTokenInAmount(assetInAmount);\r\n      }\r\n      if (!assetInAmount && assetOutAmount) {\r\n        setTokenOutAmount(assetOutAmount);\r\n      }\r\n    }\r\n    function switchToWETH() {\r\n      tokenInAddress.value = appNetworkConfig.addresses.weth;\r\n    }\r\n    function handlePreviewButton() {\r\n      swapping.resetSubmissionError();\r\n      modalSwapPreviewIsOpen.value = true;\r\n    }\r\n    function handlePreviewModalClose() {\r\n      swapping.resetSubmissionError();\r\n      modalSwapPreviewIsOpen.value = false;\r\n    }\r\n    // INIT\r\n    onBeforeMount(() => {\r\n      populateInitialTokens();\r\n      setInitialized(true);\r\n    });\r\n    return {\r\n      // constants\r\n      TOKENS,\r\n      // context\r\n      SwapSettingsContext,\r\n      // data\r\n      tokenInAddress,\r\n      tokenInAmount,\r\n      tokenOutAddress,\r\n      tokenOutAmount,\r\n      modalSwapPreviewIsOpen,\r\n      alwaysShowRoutes,\r\n      exactIn,\r\n      swapping,\r\n      // computed\r\n      pools,\r\n      title,\r\n      error,\r\n      warning,\r\n      errorMessage,\r\n      isRequired,\r\n      swapDisabled,\r\n      swapCardShadow,\r\n      handlePreviewButton,\r\n      handlePreviewModalClose,\r\n      // methods\r\n      swap,\r\n      switchToWETH,\r\n      handleErrorButtonClick,\r\n    };\r\n  },\r\n});\r\n</script>\r\n<style scoped>\r\n/* This is needed because the swap settings popover overflows */\r\n.card-container {\r\n  overflow: unset;\r\n}\r\n\r\n.swap-gasless :deep(.bal-toggle) {\r\n  width: 3rem;\r\n}\r\n\r\n.gas-symbol {\r\n  @apply h-8 w-8 rounded-full flex items-center justify-center text-lg bg-gray-50 dark:bg-gray-800;\r\n}\r\n\r\n.gas-symbol::before {\r\n  content: '⛽';\r\n}\r\n\r\n.signature-symbol::before {\r\n  content: '✍️';\r\n}\r\n</style>\r\n","<template>\r\n  <BalCard class=\"relative card-container\" :shadow=\"swapCardShadow\" noBorder>\r\n    <!-- <template #header>\r\n      <div class=\"flex justify-between items-center w-full\">\r\n        <h4 style=\"color:white\">{{ title }}</h4>\r\n        <SwapSettingsPopover\r\n          :context=\"SwapSettingsContext.swap\"\r\n          :isGasless=\"swapping.swapGasless.value\"\r\n        />\r\n      </div>\r\n    </template> -->\r\n    <div style=\"padding-top: 20px;\">\r\n      <SwapPair\r\n        v-model:tokenInAmount=\"tokenInAmount\"\r\n        v-model:tokenInAddress=\"tokenInAddress\"\r\n        v-model:tokenOutAmount=\"tokenOutAmount\"\r\n        v-model:tokenOutAddress=\"tokenOutAddress\"\r\n        v-model:exactIn=\"exactIn\"\r\n        :swapLoading=\"\r\n          swapping.isBalancerSwap.value ? swapping.isLoading.value : false\r\n        \"\r\n        :effectivePriceMessage=\"swapping.effectivePriceMessage\"\r\n        class=\"mb-4\"\r\n        @amount-change=\"swapping.handleAmountChange\"\r\n      />\r\n      <BalAlert\r\n        v-if=\"error\"\r\n        class=\"p-3 mb-4\"\r\n        type=\"error\"\r\n        size=\"sm\"\r\n        :title=\"error.header\"\r\n        :description=\"error.body\"\r\n        :actionLabel=\"error.label\"\r\n        block\r\n        @action-click=\"handleErrorButtonClick\"\r\n      />\r\n      <BalAlert\r\n        v-else-if=\"warning\"\r\n        class=\"p-3 mb-4\"\r\n        type=\"warning\"\r\n        size=\"sm\"\r\n        :title=\"warning.header\"\r\n        :description=\"warning.body\"\r\n        block\r\n      />\r\n      <BalBtn\r\n        v-if=\"swapping.isLoading.value\"\r\n        loading\r\n        disabled\r\n        :loadingLabel=\"\r\n          swapping.isCowswapSwap.value ? $t('loadingBestPrice') : $t('loading')\r\n        \"\r\n        block\r\n      />\r\n      <BalBtn\r\n        v-else\r\n        :label=\"$t('preview')\"\r\n        :disabled=\"swapDisabled\"\r\n        color=\"gradient\"\r\n        block\r\n        @click.prevent=\"handlePreviewButton\"\r\n      />\r\n      <!-- <div\r\n        v-if=\"swapping.isCowswapSupportedOnNetwork.value\"\r\n        class=\"flex items-center mt-5 h-8 text-sm\"\r\n      >\r\n        <Transition name=\"fade\" mode=\"out-in\">\r\n          <div\r\n            v-if=\"swapping.isGaslessSwappingDisabled.value\"\r\n            class=\"text-secondary\"\r\n          >\r\n            <div class=\"flex gap-2 items-center\">\r\n              <span class=\"text-lg\">⛽</span>\r\n              <Transition name=\"fade\" mode=\"out-in\">\r\n                <p v-if=\"swapping.isWrap.value\">\r\n                  {{ $t('swapToggle.wrapEth') }}\r\n                </p>\r\n                <p v-else-if=\"swapping.isUnwrap.value\">\r\n                  {{ $t('swapToggle.unwrapEth') }}\r\n                </p>\r\n                <p v-else style=\"color:white\">\r\n                  {{ $t('swapToggle.fromEth') }}\r\n                </p>\r\n              </Transition>\r\n            </div>\r\n          </div>\r\n\r\n          <div v-else>\r\n            <div class=\"flex items-center swap-gasless\">\r\n              <BalTooltip\r\n                width=\"64\"\r\n                :disabled=\"!swapping.isGaslessSwappingDisabled.value\"\r\n              >\r\n                <template #activator>\r\n                  <BalToggle\r\n                    name=\"swapGasless\"\r\n                    :checked=\"swapping.swapGasless.value\"\r\n                    :disabled=\"swapping.isGaslessSwappingDisabled.value\"\r\n                    @toggle=\"swapping.toggleSwapGasless\"\r\n                  />\r\n                </template>\r\n                <div\r\n                  v-text=\"\r\n                    swapping.isWrapUnwrapSwap.value\r\n                      ? $t('swapGaslessToggle.disabledTooltip.wrapUnwrap')\r\n                      : $t('swapGaslessToggle.disabledTooltip.eth')\r\n                  \"\r\n                />\r\n              </BalTooltip>\r\n              <Transition name=\"fade\" mode=\"out-in\">\r\n                <span\r\n                  v-if=\"swapping.swapGasless.value\"\r\n                  class=\"pl-2 text-sm text-gray-600 dark:text-gray-400\"\r\n                  >{{ $t('swapToggle.swapGasless') }}</span\r\n                >\r\n                <span\r\n                  v-else\r\n                  class=\"pl-2 text-sm text-gray-600 dark:text-gray-400\"\r\n                  >{{ $t('swapToggle.swapWithGas') }}</span\r\n                >\r\n              </Transition>\r\n              <BalTooltip width=\"64\">\r\n                <template #activator>\r\n                  <BalIcon\r\n                    name=\"info\"\r\n                    size=\"xs\"\r\n                    class=\"flex ml-1 text-gray-400\"\r\n                  />\r\n                </template>\r\n                <div v-html=\"$t('swapGaslessToggle.tooltip')\" />\r\n              </BalTooltip>\r\n            </div>\r\n          </div>\r\n        </Transition>\r\n      </div> -->\r\n      <SwapRoute\r\n        v-if=\"alwaysShowRoutes\"\r\n        :addressIn=\"swapping.tokenIn.value.address\"\r\n        :amountIn=\"swapping.tokenInAmountInput.value\"\r\n        :addressOut=\"swapping.tokenOut.value.address\"\r\n        :amountOut=\"swapping.tokenOutAmountInput.value\"\r\n        :pools=\"pools\"\r\n        :sorReturn=\"swapping.sor.sorReturn.value\"\r\n        class=\"mt-4\"\r\n      />\r\n    </div>\r\n  </BalCard>\r\n  <teleport to=\"#modal\">\r\n    <SwapPreviewModal\r\n      v-if=\"modalSwapPreviewIsOpen\"\r\n      :swapping=\"swapping\"\r\n      :error=\"error\"\r\n      :warning=\"warning\"\r\n      @swap=\"swap\"\r\n      @close=\"handlePreviewModalClose\"\r\n    />\r\n  </teleport>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { SubgraphPoolBase } from '@balancer-labs/sdk';\r\nimport { getAddress, isAddress } from '@ethersproject/address';\r\nimport { formatUnits } from '@ethersproject/units';\r\nimport { useI18n } from 'vue-i18n';\r\nimport { useRouter } from 'vue-router';\r\nimport { useSwapAssets } from '@/composables/swap/useSwapAssets';\r\nimport SwapPreviewModal from '@/components/modals/SwapPreviewModal.vue';\r\nimport SwapSettingsPopover, {\r\n  SwapSettingsContext,\r\n} from '@/components/popovers/SwapSettingsPopover.vue';\r\nimport { useSwapState } from '@/composables/swap/useSwapState';\r\nimport useSwapping from '@/composables/swap/useSwapping';\r\nimport useValidation from '@/composables/swap/useValidation';\r\nimport useBreakpoints from '@/composables/useBreakpoints';\r\nimport useNumbers, { FNumFormats } from '@/composables/useNumbers';\r\nimport { useTokens } from '@/providers/tokens.provider';\r\nimport { TOKENS } from '@/constants/tokens';\r\nimport { lsGet } from '@/lib/utils';\r\nimport { WrapType } from '@/lib/utils/balancer/wrapper';\r\nimport { isRequired } from '@/lib/utils/validations';\r\nimport { ApiErrorCodes } from '@/services/cowswap/errors/OperatorError';\r\nimport useWeb3 from '@/services/web3/useWeb3';\r\nimport SwapPair from './SwapPair.vue';\r\nimport SwapRoute from './SwapRoute.vue';\r\n\r\nexport default defineComponent({\r\n  components: {\r\n    SwapPair,\r\n    SwapPreviewModal,\r\n    SwapRoute,\r\n    SwapSettingsPopover,\r\n  },\r\n  setup() {\r\n    // COMPOSABLES\r\n    const { inputAsset, outputAsset } = useSwapAssets();\r\n    const router = useRouter();\r\n    const { t } = useI18n();\r\n    const { bp } = useBreakpoints();\r\n    const { fNum } = useNumbers();\r\n    const { appNetworkConfig, isMismatchedNetwork } = useWeb3();\r\n    const { nativeAsset } = useTokens();\r\n    const {\r\n      tokenInAddress,\r\n      tokenOutAddress,\r\n      tokenInAmount,\r\n      tokenOutAmount,\r\n      setTokenInAddress,\r\n      setTokenOutAddress,\r\n      setTokenInAmount,\r\n      setTokenOutAmount,\r\n      setInitialized,\r\n    } = useSwapState();\r\n    // DATA\r\n    const exactIn = ref(true);\r\n    const modalSwapPreviewIsOpen = ref(false);\r\n    const dismissedErrors = ref({\r\n      highPriceImpact: false,\r\n    });\r\n    const alwaysShowRoutes = lsGet('alwaysShowRoutes', false);\r\n    const swapCardShadow = computed(() => {\r\n      switch (bp.value) {\r\n        case 'xs':\r\n          return 'none';\r\n        case 'sm':\r\n          return 'lg';\r\n        default:\r\n          return 'xl';\r\n      }\r\n    });\r\n    const swapping = useSwapping(\r\n      exactIn,\r\n      tokenInAddress,\r\n      tokenInAmount,\r\n      tokenOutAddress,\r\n      tokenOutAmount\r\n    );\r\n    const { errorMessage } = useValidation(\r\n      tokenInAddress,\r\n      tokenInAmount,\r\n      tokenOutAddress,\r\n      tokenOutAmount\r\n    );\r\n    // COMPUTED\r\n    const isHighPriceImpact = computed(\r\n      () =>\r\n        swapping.sor.validationErrors.value.highPriceImpact &&\r\n        !dismissedErrors.value.highPriceImpact\r\n    );\r\n    const swapDisabled = computed(() => {\r\n      const hasMismatchedNetwork = isMismatchedNetwork.value;\r\n      const hasAmountsError = !tokenInAmount.value || !tokenOutAmount.value;\r\n      const hasCowswapErrors =\r\n        swapping.isCowswapSwap.value &&\r\n        swapping.cowswap.hasValidationError.value;\r\n      const hasBalancerErrors =\r\n        swapping.isBalancerSwap.value && isHighPriceImpact.value;\r\n      return (\r\n        hasAmountsError ||\r\n        hasCowswapErrors ||\r\n        hasBalancerErrors ||\r\n        hasMismatchedNetwork\r\n      );\r\n    });\r\n    const title = computed(() => {\r\n      if (swapping.wrapType.value === WrapType.Wrap) {\r\n        return `${t('wrap')} ${swapping.tokenIn.value.symbol}`;\r\n      }\r\n      if (swapping.wrapType.value === WrapType.Unwrap) {\r\n        return `${t('unwrap')} ${swapping.tokenOut.value.symbol}`;\r\n      }\r\n      return t('Swap');\r\n    });\r\n    const pools = computed<SubgraphPoolBase[]>(\r\n      // @ts-ignore-next-line -- Fix types incompatibility error. Related to BigNumber?\r\n      () => {\r\n        return swapping.sor.pools.value;\r\n      }\r\n    );\r\n    const error = computed(() => {\r\n      if (isMismatchedNetwork.value) {\r\n        return {\r\n          header: t('switchNetwork'),\r\n          body: t('networkMismatch', [appNetworkConfig.name]),\r\n        };\r\n      }\r\n      if (swapping.isBalancerSwap.value && !swapping.isLoading.value) {\r\n        if (swapping.sor.validationErrors.value.noSwaps) {\r\n          return {\r\n            header: t('insufficientLiquidity'),\r\n            body: t('insufficientLiquidityDetailed'),\r\n          };\r\n        }\r\n      }\r\n      if (swapping.isCowswapSwap.value) {\r\n        if (swapping.cowswap.validationError.value != null) {\r\n          const validationError = swapping.cowswap.validationError.value;\r\n          if (validationError === ApiErrorCodes.SellAmountDoesNotCoverFee) {\r\n            return {\r\n              header: t('cowswapErrors.lowAmount.header'),\r\n              body: t('cowswapErrors.lowAmount.body'),\r\n            };\r\n          } else if (validationError === ApiErrorCodes.PriceExceedsBalance) {\r\n            return {\r\n              header: t('cowswapErrors.lowBalance.header', [\r\n                swapping.tokenIn.value.symbol,\r\n              ]),\r\n              body: t('cowswapErrors.lowBalance.body', [\r\n                swapping.tokenIn.value.symbol,\r\n                fNum(\r\n                  formatUnits(\r\n                    swapping.getQuote().maximumInAmount,\r\n                    swapping.tokenIn.value.decimals\r\n                  ),\r\n                  FNumFormats.token\r\n                ),\r\n                fNum(swapping.slippageBufferRate.value, FNumFormats.percent),\r\n              ]),\r\n            };\r\n          } else if (validationError === ApiErrorCodes.NoLiquidity) {\r\n            return {\r\n              header: t('cowswapErrors.noLiquidity.header', [\r\n                swapping.tokenIn.value.symbol,\r\n              ]),\r\n              body: t('cowswapErrors.noLiquidity.body'),\r\n            };\r\n          } else {\r\n            return {\r\n              header: t('cowswapErrors.genericError.header'),\r\n              body: swapping.cowswap.validationError.value,\r\n            };\r\n          }\r\n        }\r\n      } else if (swapping.isBalancerSwap.value) {\r\n        if (isHighPriceImpact.value) {\r\n          return {\r\n            header: t('highPriceImpact'),\r\n            body: t('highPriceImpactDetailed'),\r\n            label: t('accept'),\r\n          };\r\n        }\r\n      }\r\n      return undefined;\r\n    });\r\n    const warning = computed(() => {\r\n      if (swapping.isCowswapSwap.value) {\r\n        if (swapping.cowswap.warnings.value.highFees) {\r\n          return {\r\n            header: t('cowswapWarnings.highFees.header'),\r\n            body: t('cowswapWarnings.highFees.body'),\r\n          };\r\n        }\r\n      }\r\n      return undefined;\r\n    });\r\n\r\n    // METHODS\r\n    function swap() {\r\n      swapping.swap(() => {\r\n        swapping.resetAmounts();\r\n        modalSwapPreviewIsOpen.value = false;\r\n      });\r\n    }\r\n\r\n    function handleErrorButtonClick() {\r\n      if (swapping.sor.validationErrors.value.highPriceImpact) {\r\n        dismissedErrors.value.highPriceImpact = true;\r\n      }\r\n    }\r\n\r\n    function isNativeAssetIdentifier(assetParam: string | undefined): boolean {\r\n      return (\r\n        assetParam?.toLowerCase() === nativeAsset.deeplinkId?.toLowerCase() ||\r\n        assetParam?.toLowerCase() === nativeAsset.symbol?.toLowerCase()\r\n      );\r\n    }\r\n\r\n    async function populateInitialTokens(): Promise<void> {\r\n      let assetIn = router.currentRoute.value.params.assetIn as string;\r\n      if (isNativeAssetIdentifier(assetIn)) {\r\n        assetIn = nativeAsset.address;\r\n      } else if (isAddress(assetIn)) {\r\n        assetIn = getAddress(assetIn);\r\n      }\r\n      let assetOut = router.currentRoute.value.params.assetOut as string;\r\n      if (isNativeAssetIdentifier(assetOut)) {\r\n        assetOut = nativeAsset.address;\r\n      } else if (isAddress(assetOut)) {\r\n        assetOut = getAddress(assetOut);\r\n      }\r\n      setTokenInAddress(assetIn || inputAsset);\r\n      setTokenOutAddress(assetOut || outputAsset);\r\n\r\n      let assetInAmount = router.currentRoute.value.query?.inAmount as string;\r\n      let assetOutAmount = router.currentRoute.value.query?.outAmount as string;\r\n      if (assetInAmount) {\r\n        setTokenInAmount(assetInAmount);\r\n      }\r\n      if (!assetInAmount && assetOutAmount) {\r\n        setTokenOutAmount(assetOutAmount);\r\n      }\r\n    }\r\n    function switchToWETH() {\r\n      tokenInAddress.value = appNetworkConfig.addresses.weth;\r\n    }\r\n    function handlePreviewButton() {\r\n      swapping.resetSubmissionError();\r\n      modalSwapPreviewIsOpen.value = true;\r\n    }\r\n    function handlePreviewModalClose() {\r\n      swapping.resetSubmissionError();\r\n      modalSwapPreviewIsOpen.value = false;\r\n    }\r\n    // INIT\r\n    onBeforeMount(() => {\r\n      populateInitialTokens();\r\n      setInitialized(true);\r\n    });\r\n    return {\r\n      // constants\r\n      TOKENS,\r\n      // context\r\n      SwapSettingsContext,\r\n      // data\r\n      tokenInAddress,\r\n      tokenInAmount,\r\n      tokenOutAddress,\r\n      tokenOutAmount,\r\n      modalSwapPreviewIsOpen,\r\n      alwaysShowRoutes,\r\n      exactIn,\r\n      swapping,\r\n      // computed\r\n      pools,\r\n      title,\r\n      error,\r\n      warning,\r\n      errorMessage,\r\n      isRequired,\r\n      swapDisabled,\r\n      swapCardShadow,\r\n      handlePreviewButton,\r\n      handlePreviewModalClose,\r\n      // methods\r\n      swap,\r\n      switchToWETH,\r\n      handleErrorButtonClick,\r\n    };\r\n  },\r\n});\r\n</script>\r\n<style scoped>\r\n/* This is needed because the swap settings popover overflows */\r\n.card-container {\r\n  overflow: unset;\r\n}\r\n\r\n.swap-gasless :deep(.bal-toggle) {\r\n  width: 3rem;\r\n}\r\n\r\n.gas-symbol {\r\n  @apply h-8 w-8 rounded-full flex items-center justify-center text-lg bg-gray-50 dark:bg-gray-800;\r\n}\r\n\r\n.gas-symbol::before {\r\n  content: '⛽';\r\n}\r\n\r\n.signature-symbol::before {\r\n  content: '✍️';\r\n}\r\n</style>\r\n","<script setup lang=\"ts\">\r\nimport { computed, onMounted } from 'vue';\r\nimport SwapCard from '@/components/cards/SwapCard/SwapCard.vue';\r\nimport Col3Layout from '@/components/layouts/Col3Layout.vue';\r\nimport usePoolFilters from '@/composables/pools/usePoolFilters';\r\n// import useBreakpoints from '@/composables/useBreakpoints';\r\n// import { isL2 } from '@/composables/useNetwork';\r\n// import PairPriceGraph from '@/components/cards/PairPriceGraph/PairPriceGraph.vue';\r\n// import MyWallet from '@/components/cards/MyWallet/MyWallet.vue';\r\n// import BridgeLink from '@/components/links/BridgeLink.vue';\r\n\r\n/**\r\n * COMPOSABLES\r\n */\r\nconst { setSelectedTokens } = usePoolFilters();\r\n// const { upToLargeBreakpoint } = useBreakpoints();\r\n\r\n/**\r\n * COMPUTED\r\n */\r\n// const sections = computed(() => {\r\n//   const sections = [\r\n//     { title: 'My wallet', id: 'my-wallet' },\r\n//     { title: 'Price chart', id: 'price-chart' },\r\n//   ];\r\n//   if (isL2.value) sections.push({ title: 'Bridge assets', id: 'bridge' });\r\n//   return sections;\r\n// });\r\n\r\n/**\r\n * CALLBACKS\r\n */\r\nonMounted(() => {\r\n  // selectedPoolTokens are only persisted between the Home/Pool pages\r\n  setSelectedTokens([]);\r\n});\r\n</script>\r\n\r\n<template>\r\n  <div>\r\n    <Col3Layout offsetGutters mobileHideGutters class=\"mt-8\">\r\n      <!-- <template #gutterLeft>\r\n        <MyWallet />\r\n      </template> -->\r\n\r\n      <SwapCard />\r\n      <!-- <div class=\"p-4 sm:p-0 lg:p-0 mt-8\">\r\n        <BalAccordion\r\n          v-if=\"upToLargeBreakpoint\"\r\n          class=\"w-full\"\r\n          :sections=\"sections\"\r\n        >\r\n          <template #my-wallet>\r\n            <MyWallet />\r\n          </template>\r\n          <template #price-chart>\r\n            <PairPriceGraph />\r\n          </template>\r\n          <template v-if=\"isL2\" #bridge>\r\n            <BridgeLink />\r\n          </template>\r\n        </BalAccordion>\r\n      </div> -->\r\n\r\n      <!-- <template #gutterRight>\r\n        <PairPriceGraph />\r\n        <BridgeLink v-if=\"isL2\" class=\"mt-4\" />\r\n      </template> -->\r\n    </Col3Layout>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.graph-modal {\r\n  height: 450px;\r\n}\r\n</style>\r\n"],"names":["selectedTokens","ref","usePoolFilters","setSelectedTokens","addresses","addSelectedToken","address","removeSelectedToken","tokenIndex","inputAsset","lsGet","networkId","initialTokens","outputAsset","setInputAsset","asset","lsSet","setOutputAsset","useSwapAssets","fNum","useNumbers","appNetworkConfig","useWeb3","getToken","useTokens","visible","toggleVisibility","input","computed","symbol","props","output","routes","sorReturn","pools","swaps","addressIn","addressOut","getV2Routes","constants","NATIVE_ASSET_ADDRESS","getAddress","totalSwapAmount","total","rawHops","BigNumber","routes2","allHops","i","swap","rawPool","pool","tokenIn","AddressZero","tokenOut","isDirectSwap","hop","token","a","b","isSameAddress","_token","index","tokens","route","formatShare","share","FNumFormats","approveToken","web3","spender","TransactionBuilder","abi","MaxUint256","approveTokens","useTokenApproval","tokenInAddress","amount","approving","approved","addTransaction","useTransactions","t","useI18n","getProvider","txListener","useEthers","networkConfig","useConfig","approvalRequired","dynamicDataLoading","allowanceState","isUnlockedV2","approveSpender","tx","txHandler","e","approveV2","configService","_a","watch","WrapType","WrapType2","getWrapAction","nativeAddress","weth","stETH","wstETH","getWrapOutput","wrapper","wrapType","wrapAmount","convertStEthWrap","wrap","network","configs","wrapNative","wrapLido","unwrap","unwrapNative","unwrapLido","PRICE_UPDATE_THRESHOLD","toFiat","balanceFor","batchRelayerSignature","batchRelayerApprovalAction","useRelayerApproval","RelayerType","batchRelayerIsUnlocked","useRelayerApprovalTx","blockNumber","account","startConnectWithInjectedProvider","slippage","useUserSettings","lastQuote","priceUpdated","priceUpdateAccepted","showSummaryInFiat","slippageRatePercent","tokenInFiatValue","tokenOutFiatValue","showSwapRoute","zeroFee","exceedsBalance","bnum","disableSubmitButton","summary","summaryItems","exactIn","tokenInAmountInput","tokenOutAmountInput","quote","formatUnits","mapValues","itemValue","labels","tokenApproval","cowswapRelayerApproval","isStETHSwap","isStETH","lidoRelayerApproval","requiresTokenApproval","requiresBatchRelayerApproval","requiresCowswapRelayerApproval","requiresLidoRelayerApproval","showTokenApprovalStep","showBatchRelayerApprovalStep","showCowswapRelayerApprovalStep","showLidoRelayerApprovalStep","requiresApproval","showPriceUpdateError","actionStepsLoading","actionStepsLoadingLabel","actions","emit","onClose","cofirmPriceUpdate","handlePriceUpdate","newQuote","lastQuoteMin","newQuoteMin","bnumZero","priceDiff","lastQuoteMax","newQuoteMax","HIGH_FEE_THRESHOLD","parseFixed","APP_DATA","state","reactive","useCowswap","tokenInAddressInput","tokenOutAddressInput","tokenInAmountScaled","tokenOutAmountScaled","slippageBufferRate","transactionDeadline","useApp","getSigner","isUserRejected","useTranasactionErrors","updatingQuotes","confirming","feeQuote","latestQuoteIdx","hasValidationError","getFeeAmount","feeAmountInToken","feeAmountOutToken","getQuote","maximumInAmount","ONE","minimumOutAmount","successCallback","unsignedOrder","calculateValidTo","OrderKind","OrderBalance","signature","signingScheme","signOrder","orderId","cowswapProtocolService","sellAmount","buyAmount","tokenInAmountEst","tokenOutAmountEst","validTo","partiallyFillable","trackGoal","Goals","error","captureException","resetState","shouldResetFees","handleAmountChange","amountToExchange","currentQuoteIdx","priceQuoteParams","priceQuote","OldBigNumber","ApiErrorCodes","toRefs","SWAP_COST","SorManager","provider","gasPrice","maxPools","chainId","__publicField","getBalancer","tokenAddr","tokenDecimals","manualCost","cost","v2result","err","tokenInDecimals","tokenOutDecimals","swapType","amountScaled","v2TokenIn","v2TokenOut","timestampSeconds","swapOptions","PoolFilter","swapInfoV2","SwapTypes","GAS_PRICE","MAX_POOLS","MIN_PRICE_IMPACT","HIGH_PRICE_IMPACT_THRESHOLD","useSor","sorConfig","isCowswapSwap","sorManager","Zero","swapping","priceImpact","latestTxHash","poolsLoading","getWeb3Provider","useFathom","injectTokens","priceFor","onMounted","unknownAssets","initSor","rpcProviderService","fetchPools","trackSwapEvent","isMainnet","updateSwapAmounts","result","SwapType","deltas","getTokenDecimals","tokenOutAddress","isStEthAddress","tokenInPosition","tokenOutPosition","tokenInAmount","tokenOutAmount","mutateAmount","formatAmount","resetInputAmounts","inputAmountDecimals","overflowProtected","outputAmount","formatFixed","inputAmount","setSwapCost","parseUnits","swapReturn","priceImpactCalc","calcPriceImpact","tokenAmount","tokenAmountScaled","divScale","wadScale","action","tokenInAmountFormatted","tokenOutAmountFormatted","tokenInSymbol","tokenOutSymbol","swapUSDValue","handleSwapException","minAmount","getMinOut","sr","swapIn","tokenInAmountMax","getMaxIn","swapOut","calculateEthPriceInToken","tokenAddress","ethPriceFiat","tokenPriceFiat","isInputToken","useJoinExit","swapInfo","swapInfoLoading","relayerSignature","relayerApprovalQuery","useRelayerApprovalQuery","getSwapInfo","returnAmount","balancer","relayerCallData","buildRelayerCalls","_b","BatchRelayerAbi","swapGasless","LS_KEYS","useSwapping","isWrap","isUnwrap","isEthSwap","effectivePriceMessage","_c","_d","isCowswapSupportedOnNetwork","COW_SUPPORTED_NETWORKS","swapRoute","joinExit","canUseJoinExit","someJoinExit","sor","isBalancerSwap","isJoinExitSwap","isWrapUnwrapSwap","isGaslessSwappingDisabled","hasSwapQuote","cowswap","isLoading","isConfirming","submissionError","resetSubmissionError","setSwapGasless","flag","toggleSwapGasless","resetAmounts","useValidation","isWalletReady","balances","noAmounts","isValidTokenAmount","missingToken","validationStatus","errorMessage","_sfc_main$3","defineComponent","_props","isRotated","toggle","_withScopeId","n","_pushScopeId","_popScopeId","_createElementVNode","_cache","args","_ctx","veBalTokenInfo","useVeBal","_tokenInAmount","_tokenInAddress","_tokenOutAmount","_tokenOutAddress","isInRate","typingTimeout","missingAmount","rateLabel","rate","inSymbol","outSymbol","preventUpdatesOnTyping","callback","handleInAmountChange","value","handleOutAmountChange","handleTokenSwitch","handleInputTokenChange","newTokenIn","handleOutputTokenChange","newTokenOut","watchEffect","_sfc_main$1","SwapPair","SwapPreviewModal","SwapRoute","SwapSettingsPopover","router","useRouter","bp","useBreakpoints","isMismatchedNetwork","nativeAsset","setTokenInAddress","setTokenOutAddress","setTokenInAmount","setTokenOutAmount","setInitialized","useSwapState","modalSwapPreviewIsOpen","dismissedErrors","alwaysShowRoutes","swapCardShadow","isHighPriceImpact","swapDisabled","hasMismatchedNetwork","hasAmountsError","hasCowswapErrors","hasBalancerErrors","title","validationError","warning","handleErrorButtonClick","isNativeAssetIdentifier","assetParam","populateInitialTokens","assetIn","isAddress","assetOut","assetInAmount","assetOutAmount","switchToWETH","handlePreviewButton","handlePreviewModalClose","onBeforeMount","TOKENS","SwapSettingsContext","isRequired","_openBlock","_createElementBlock","_Fragment","_createVNode","_component_BalCard","_hoisted_1","_component_SwapPair","$event","_createBlock","_component_BalAlert","_component_BalBtn","_component_SwapRoute","_Teleport","_component_SwapPreviewModal"],"mappings":"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"}