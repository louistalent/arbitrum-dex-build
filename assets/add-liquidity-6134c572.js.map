{"version":3,"file":"add-liquidity-6134c572.js","sources":["../../src/components/forms/pool_actions/InvestForm/composables/useInvestState.ts","../../src/components/cards/MyWallet/MyWalletSubheader.vue","../../src/composables/useNativeBalance.ts","../../src/composables/useMyWalletTokens.ts","../../src/components/cards/MyWallet/MyWallet.vue","../../src/composables/pools/useInvestPageTabs.ts","../../src/services/balancer/pools/joins/handlers/swap-join.handler.ts","../../src/services/balancer/pools/joins/handlers/generalised-join.handler.ts","../../src/services/balancer/pools/joins/join-pool.service.ts","../../src/providers/local/join-pool.provider.ts","../../src/components/contextual/pages/pool/invest/InvestPageMyWallet.vue","../../src/components/contextual/pages/pool/invest/InvestPageAccordion.vue","../../src/components/contextual/pages/pool/invest/WrapStEthLink.vue","../../src/components/forms/pool_actions/InvestForm/components/InvestFormTotals.vue","../../src/components/forms/pool_actions/InvestForm/components/InvestPreviewModal/components/InvestActions.vue","../../src/components/forms/pool_actions/InvestForm/components/InvestPreviewModal/components/InvestSummary.vue","../../src/components/forms/pool_actions/InvestForm/components/InvestPreviewModal/InvestPreviewModal.vue","../../src/components/forms/pool_actions/InvestForm/composables/useInvestMath.ts","../../src/components/forms/pool_actions/InvestForm/InvestForm.vue","../../src/components/forms/pool_actions/InvestForm/components/InvestPreviewModal/components/InvestActionsV2.vue","../../src/components/forms/pool_actions/InvestForm/components/InvestPreviewModal/InvestPreviewModalV2.vue","../../src/components/forms/pool_actions/InvestForm/components/InvestFormTotalsV2.vue","../../src/components/forms/pool_actions/InvestForm/components/MissingPoolTokensAlert.vue","../../src/components/forms/pool_actions/InvestForm/InvestFormV2.vue","../../src/components/contextual/pages/pool/invest/InvestPageInvestBlock.vue","../../src/components/contextual/pages/pool/invest/InvestPage.vue","../../src/pages/pool/add-liquidity.vue"],"sourcesContent":["import { reactive, toRefs } from 'vue';\r\n\r\nimport { getBalancer } from '@/dependencies/balancer-sdk';\r\n\r\ntype InvestState = {\r\n  amounts: string[];\r\n  tokenAddresses: string[];\r\n  propAmounts: string[];\r\n  validInputs: boolean[];\r\n  highPriceImpactAccepted: boolean;\r\n  submitting: boolean;\r\n  sorReady: boolean;\r\n};\r\n\r\n/**\r\n * STATE\r\n */\r\nconst state = reactive<InvestState>({\r\n  amounts: [],\r\n  tokenAddresses: [],\r\n  propAmounts: [],\r\n  validInputs: [],\r\n  highPriceImpactAccepted: false,\r\n  submitting: false,\r\n  sorReady: false,\r\n});\r\n\r\nconst sor = getBalancer().sor;\r\n\r\n/**\r\n * METHODS\r\n */\r\nfunction resetAmounts(): void {\r\n  state.amounts = [];\r\n}\r\n\r\nexport default function useInvestState() {\r\n  return {\r\n    ...toRefs(state),\r\n    sor,\r\n    resetAmounts,\r\n  };\r\n}\r\n","<script setup lang=\"ts\">\r\n\r\n</script>\r\n\r\n<template>\r\n  <div class=\"my-wallet-subheader\">\r\n    <slot></slot>\r\n  </div>\r\n</template>\r\n\r\n\r\n<style scoped>\r\n.my-wallet-subheader {\r\n  @apply py-2 px-3 -mx-3  dark:bg-gray-800 border-gray-200 dark:border-0;\r\n}\r\n</style>\r\n","import { configService } from '@/services/config/config.service';\r\nimport useWeb3 from '@/services/web3/useWeb3';\r\nimport { computed } from 'vue';\r\nimport { useTokens } from '@/providers/tokens.provider';\r\n\r\nexport default function useNativeBalance() {\r\n  const { hasBalance, nativeAsset, balanceFor } = useTokens();\r\n  const nativeCurrency = configService.network.nativeAsset.symbol;\r\n\r\n  const { appNetworkConfig, isWalletReady } = useWeb3();\r\n\r\n  const nativeBalance = computed(() => {\r\n    if (!isWalletReady.value) return '-';\r\n    return Number(balanceFor(appNetworkConfig.nativeAsset.address)).toFixed(4);\r\n  });\r\n\r\n  const hasNativeBalance = computed(() => hasBalance(nativeAsset.address));\r\n\r\n  return {\r\n    hasNativeBalance,\r\n    nativeBalance,\r\n    nativeCurrency,\r\n  };\r\n}\r\n","import { take } from 'lodash';\r\nimport { computed } from 'vue';\r\nimport { useTokens } from '@/providers/tokens.provider';\r\nimport { isSameAddress, includesAddress, removeAddress } from '@/lib/utils';\r\nimport useWeb3 from '@/services/web3/useWeb3';\r\nimport { Address } from '@/types';\r\nimport { AnyPool } from '@/services/pool/types';\r\nimport { tokenTreeNodes, usePool } from '@/composables/usePool';\r\n\r\ntype Props = {\r\n  excludedTokens?: string[];\r\n  // If pool prop is provided, Tokens are grouped into:\r\n  // 'Pool tokens in wallet' or 'Other tokens in wallet'\r\n  pool?: AnyPool;\r\n  includeNativeAsset?: boolean;\r\n};\r\n\r\nexport default function useMyWalletTokens({\r\n  excludedTokens = [],\r\n  pool,\r\n  includeNativeAsset = false,\r\n}: Props) {\r\n  const { appNetworkConfig } = useWeb3();\r\n\r\n  const {\r\n    balances,\r\n    balanceQueryLoading: isLoadingBalances,\r\n    nativeAsset,\r\n  } = useTokens();\r\n\r\n  const poolRef = computed(() => pool);\r\n\r\n  const { isWethPool, isDeepPool } = usePool(poolRef);\r\n\r\n  function isExcludedToken(tokenAddress: Address) {\r\n    return excludedTokens.some(excludedAddress =>\r\n      isSameAddress(excludedAddress, tokenAddress)\r\n    );\r\n  }\r\n\r\n  const tokensWithBalance = computed((): string[] => {\r\n    return take(\r\n      Object.keys(balances.value).filter(tokenAddress => {\r\n        const _includeNativeAsset = includeNativeAsset\r\n          ? true\r\n          : !isSameAddress(tokenAddress, appNetworkConfig.nativeAsset.address);\r\n        return (\r\n          Number(balances.value[tokenAddress]) > 0 &&\r\n          _includeNativeAsset &&\r\n          !isSameAddress(tokenAddress, appNetworkConfig.addresses.veBAL) &&\r\n          !isExcludedToken(tokenAddress)\r\n        );\r\n      }),\r\n      21\r\n    );\r\n  });\r\n\r\n  const poolTokenAddresses = computed((): string[] => {\r\n    if (isDeepPool.value && pool?.tokens) {\r\n      const nodes = tokenTreeNodes(pool.tokens);\r\n\r\n      // Remove BPT from token list\r\n      return removeAddress(pool.address, nodes);\r\n    }\r\n\r\n    const tokensList = pool?.tokensList || [];\r\n    if (isWethPool.value) {\r\n      return [nativeAsset.address, ...tokensList];\r\n    }\r\n    return tokensList;\r\n  });\r\n\r\n  const poolTokensWithBalance = computed((): string[] => {\r\n    return tokensWithBalance.value.filter(token =>\r\n      includesAddress(poolTokenAddresses.value, token)\r\n    );\r\n  });\r\n\r\n  const poolTokensWithoutBalance = computed((): string[] => {\r\n    return (\r\n      poolTokenAddresses.value.filter(\r\n        poolToken => !includesAddress(tokensWithBalance.value, poolToken)\r\n      ) || []\r\n    );\r\n  });\r\n  const notPoolTokensWithBalance = computed((): string[] => {\r\n    if (!poolTokenAddresses.value.length) return tokensWithBalance.value;\r\n    return (\r\n      tokensWithBalance.value.filter(\r\n        token => !includesAddress(poolTokenAddresses.value, token)\r\n      ) || []\r\n    );\r\n  });\r\n\r\n  return {\r\n    isLoadingBalances,\r\n    tokensWithBalance,\r\n    poolTokenAddresses,\r\n    poolTokensWithBalance,\r\n    poolTokensWithoutBalance,\r\n    notPoolTokensWithBalance,\r\n  };\r\n}\r\n","<script setup lang=\"ts\">\r\nimport { useI18n } from 'vue-i18n';\r\n\r\nimport useBreakpoints from '@/composables/useBreakpoints';\r\nimport { isMainnet } from '@/composables/useNetwork';\r\nimport { configService } from '@/services/config/config.service';\r\nimport useWeb3 from '@/services/web3/useWeb3';\r\nimport { AnyPool } from '@/services/pool/types';\r\nimport MyWalletSubheader from './MyWalletSubheader.vue';\r\nimport useNativeBalance from '@/composables/useNativeBalance';\r\nimport { usePool } from '@/composables/usePool';\r\nimport useMyWalletTokens from '@/composables/useMyWalletTokens';\r\nimport { useSwapState } from '@/composables/swap/useSwapState';\r\nimport { includesAddress } from '@/lib/utils';\r\n\r\ntype Props = {\r\n  excludedTokens?: string[];\r\n  // If pool prop is provided, Tokens are grouped into:\r\n  // 'Pool tokens in wallet' and 'Other tokens in wallet'\r\n  pool?: AnyPool;\r\n  includeNativeAsset?: boolean;\r\n};\r\n\r\nconst props = withDefaults(defineProps<Props>(), {\r\n  excludedTokens: () => [],\r\n  pool: undefined,\r\n  includeNativeAsset: false,\r\n});\r\n\r\nconst { isWalletReady, startConnectWithInjectedProvider } = useWeb3();\r\nconst { upToLargeBreakpoint } = useBreakpoints();\r\nconst { setTokenInAddress } = useSwapState();\r\n\r\nconst networkName = configService.network.name;\r\nconst { t } = useI18n();\r\nconst { isDeepPool, isPreMintedBptPool } = usePool(toRef(props, 'pool'));\r\n\r\nconst {\r\n  tokensWithBalance,\r\n  poolTokenAddresses,\r\n  poolTokensWithBalance,\r\n  poolTokensWithoutBalance,\r\n  notPoolTokensWithBalance,\r\n  isLoadingBalances,\r\n} = useMyWalletTokens(props);\r\n\r\nconst noNativeCurrencyMessage = computed(() => {\r\n  return t('noNativeCurrency', [nativeCurrency, networkName]);\r\n});\r\n\r\nconst noNativeCurrencyMessageEthereum = computed(() => {\r\n  return t('noNativeCurrencyEthereum', [nativeCurrency, networkName]);\r\n});\r\n\r\nconst noTokensMessage = computed(() => {\r\n  return t('noTokensInWallet', [networkName]);\r\n});\r\n\r\nconst { hasNativeBalance, nativeBalance, nativeCurrency } = useNativeBalance();\r\n\r\nfunction handleAssetClick(tokenAddress) {\r\n  setTokenInAddress(tokenAddress);\r\n  const isPoolToken = includesAddress(poolTokenAddresses.value, tokenAddress);\r\n  emit('click:asset', tokenAddress, isPoolToken);\r\n}\r\n\r\nconst emit = defineEmits<{\r\n  (e: 'click:asset', tokenAddress: string, isPoolToken: boolean): void;\r\n}>();\r\n</script>\r\n\r\n<template>\r\n  <BalCard\r\n    :square=\"upToLargeBreakpoint\"\r\n    noPad\r\n    :noBorder=\"upToLargeBreakpoint\"\r\n    growContent\r\n    :hFull=\"upToLargeBreakpoint\"\r\n    shadow=\"none\"\r\n  >\r\n    <div class=\"flex flex-col w-full h-full bg-transparent\">\r\n      <div\r\n        v-if=\"!upToLargeBreakpoint\"\r\n        class=\"flex lg:justify-between p-3 pb-0 lg:pb-3 lg:border-b dark:border-gray-900\"\r\n      >\r\n        <h6>\r\n          {{ $t('myWallet2') }}\r\n        </h6>\r\n        <div\r\n          v-if=\"!isLoadingBalances\"\r\n          class=\"ml-1 lg:ml-0 font-semibold lg:font-normal\"\r\n        >\r\n          <div\r\n            v-if=\"!hasNativeBalance\"\r\n            class=\"mr-0.5 text-red-500 hover:text-red-700 dark:hover:text-red-400 transition-colors\"\r\n          >\r\n            {{ nativeBalance }} {{ nativeCurrency }}\r\n            <BalTooltip\r\n              v-if=\"isWalletReady\"\r\n              :text=\"\r\n                isMainnet\r\n                  ? noNativeCurrencyMessageEthereum\r\n                  : noNativeCurrencyMessage\r\n              \"\r\n              iconSize=\"sm\"\r\n              :iconName=\"'alert-triangle'\"\r\n              :iconClass=\"'text-red-500 hover:text-red-700 dark:hover:text-red-400 transition-colors'\"\r\n              width=\"72\"\r\n              class=\"relative top-0.5\"\r\n            />\r\n          </div>\r\n          <div v-else>{{ nativeBalance }} {{ nativeCurrency }}</div>\r\n        </div>\r\n        <BalLoadingBlock v-else class=\"w-12 h-8\" />\r\n      </div>\r\n      <div class=\"z-0 px-3 pb-3 h-full my-wallet\">\r\n        <BalLoadingBlock v-if=\"isLoadingBalances\" class=\"h-8\" />\r\n        <div v-else-if=\"isWalletReady\">\r\n          <template v-if=\"pool\">\r\n            <MyWalletSubheader\r\n              v-if=\"isDeepPool\"\r\n              class=\"text-sm border-b text-secondary\"\r\n            >\r\n              {{ t('myWalletCard.title.poolTokens') }}\r\n            </MyWalletSubheader>\r\n            <div class=\"mt-5\">\r\n              <BalAssetSet\r\n                :balAssetProps=\"{ button: true }\"\r\n                :width=\"275\"\r\n                wrap\r\n                :size=\"30\"\r\n                :addresses=\"[\r\n                  ...poolTokensWithBalance,\r\n                  ...poolTokensWithoutBalance,\r\n                ]\"\r\n                :disabledAddresses=\"poolTokensWithoutBalance\"\r\n                :maxAssetsPerLine=\"7\"\r\n                @click=\"handleAssetClick\"\r\n              />\r\n            </div>\r\n            <template\r\n              v-if=\"\r\n                isDeepPool &&\r\n                isPreMintedBptPool &&\r\n                notPoolTokensWithBalance.length\r\n              \"\r\n            >\r\n              <MyWalletSubheader\r\n                class=\"my-5 text-sm border-t border-b text-secondary\"\r\n              >\r\n                {{ t('myWalletCard.title.otherTokens') }}\r\n              </MyWalletSubheader>\r\n              <BalAssetSet\r\n                :balAssetProps=\"{ button: true }\"\r\n                :width=\"275\"\r\n                wrap\r\n                :size=\"30\"\r\n                :addresses=\"notPoolTokensWithBalance\"\r\n                :maxAssetsPerLine=\"7\"\r\n                @click=\"handleAssetClick\"\r\n              />\r\n            </template>\r\n          </template>\r\n          <div v-else class=\"mt-3\">\r\n            <BalAssetSet\r\n              :balAssetProps=\"{ button: true }\"\r\n              :width=\"275\"\r\n              wrap\r\n              :size=\"30\"\r\n              :addresses=\"tokensWithBalance\"\r\n              :maxAssetsPerLine=\"7\"\r\n              @click=\"handleAssetClick\"\r\n            />\r\n          </div>\r\n\r\n          <p\r\n            v-if=\"tokensWithBalance.length === 0\"\r\n            class=\"text-sm opacity-0 text-secondary fade-in\"\r\n          >\r\n            {{ noTokensMessage }}.\r\n          </p>\r\n        </div>\r\n        <div v-else class=\"flex mt-4 w-full font-medium\">\r\n          <BalLink @click=\"startConnectWithInjectedProvider\">\r\n            {{ t('connectYourWallet') }}\r\n          </BalLink>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </BalCard>\r\n</template>\r\n","import { ref } from 'vue';\r\nimport i18n from '@/plugins/i18n';\r\n\r\nexport enum Tab {\r\n  PoolTokens,\r\n  SingleToken,\r\n}\r\n\r\nexport const tabs = [\r\n  { value: Tab.PoolTokens, label: i18n.global.t('investment.tabs.poolTokens') },\r\n  {\r\n    value: Tab.SingleToken,\r\n    label: i18n.global.t('investment.tabs.singleToken'),\r\n  },\r\n];\r\n\r\nconst activeTab = ref(tabs[0].value);\r\n\r\nfunction resetTabs() {\r\n  activeTab.value = tabs[0].value;\r\n}\r\n\r\nexport default function useInvestPageTabs() {\r\n  return { activeTab, resetTabs };\r\n}\r\n","import { overflowProtected } from '@/components/_global/BalTextInput/helpers';\r\nimport { getTimestampSecondsFromNow } from '@/composables/useTime';\r\nimport { POOLS } from '@/constants/pools';\r\nimport { NATIVE_ASSET_ADDRESS } from '@/constants/tokens';\r\nimport { fetchPoolsForSor, hasFetchedPoolsForSor } from '@/lib/balancer.sdk';\r\nimport { bnum, isSameAddress } from '@/lib/utils';\r\nimport { AmountIn } from '@/providers/local/join-pool.provider';\r\nimport { vaultService } from '@/services/contracts/vault.service';\r\nimport { GasPriceService } from '@/services/gas-price/gas-price.service';\r\nimport { Pool } from '@/services/pool/types';\r\nimport { BalancerSDK, BatchSwap, SwapInfo } from '@balancer-labs/sdk';\r\nimport {\r\n  TransactionRequest,\r\n  TransactionResponse,\r\n} from '@ethersproject/abstract-provider';\r\nimport { BigNumber, formatFixed, parseFixed } from '@ethersproject/bignumber';\r\nimport { JsonRpcSigner } from '@ethersproject/providers';\r\nimport { parseUnits } from '@ethersproject/units';\r\nimport { Ref } from 'vue';\r\nimport { JoinParams, JoinPoolHandler, QueryOutput } from './join-pool.handler';\r\n\r\n/**\r\n * Handles joins for single asset flows where we need to use a BatchSwap to join\r\n * the pool.\r\n */\r\nexport class SwapJoinHandler implements JoinPoolHandler {\r\n  private lastSwapRoute?: SwapInfo;\r\n\r\n  constructor(\r\n    public readonly pool: Ref<Pool>,\r\n    public readonly sdk: BalancerSDK,\r\n    public readonly gasPriceService: GasPriceService\r\n  ) {}\r\n\r\n  async join(params: JoinParams): Promise<TransactionResponse> {\r\n    const { signer, slippageBsp } = params;\r\n    const userAddress = await signer.getAddress();\r\n    await this.queryJoin(params);\r\n    if (!this.lastSwapRoute)\r\n      throw new Error('Could not fetch swap route for join.');\r\n\r\n    const swap = this.getSwapAttributes(\r\n      this.lastSwapRoute,\r\n      slippageBsp,\r\n      userAddress\r\n    );\r\n    const options = this.getSwapOptions(params.amountsIn[0]);\r\n\r\n    const { kind, swaps, assets, funds, limits } = swap.attributes as BatchSwap;\r\n    return vaultService.batchSwap(\r\n      kind,\r\n      swaps,\r\n      assets,\r\n      funds,\r\n      limits as string[],\r\n      params.transactionDeadline,\r\n      options\r\n    );\r\n  }\r\n\r\n  async queryJoin({\r\n    amountsIn,\r\n    tokensIn,\r\n    signer,\r\n  }: JoinParams): Promise<QueryOutput> {\r\n    if (amountsIn.length === 0)\r\n      throw new Error('Missing amounts to join with.');\r\n\r\n    const amountIn = amountsIn[0];\r\n    const tokenIn = tokensIn[amountIn.address];\r\n    if (!tokenIn) throw new Error('Missing critical token metadata.');\r\n    if (!amountIn.value || bnum(amountIn.value).eq(0))\r\n      return { bptOut: '0', priceImpact: 0 };\r\n\r\n    if (!hasFetchedPoolsForSor.value) await fetchPoolsForSor();\r\n\r\n    const safeAmount = overflowProtected(amountIn.value, tokenIn.decimals);\r\n    const bnumAmount = parseFixed(safeAmount, tokenIn.decimals);\r\n    const gasPrice = await this.getGasPrice(signer);\r\n\r\n    this.lastSwapRoute = await this.sdk.swaps.findRouteGivenIn({\r\n      tokenIn: this.formatAddressForSor(amountIn.address),\r\n      tokenOut: this.pool.value.address,\r\n      amount: bnumAmount,\r\n      gasPrice,\r\n      maxPools: 4,\r\n    });\r\n\r\n    const bptOut = formatFixed(\r\n      this.lastSwapRoute.returnAmount,\r\n      this.pool.value.onchain?.decimals || 18\r\n    );\r\n    if (bnum(bptOut).eq(0)) throw new Error('Not enough liquidity.');\r\n\r\n    const priceImpact = this.calcPriceImpact(\r\n      amountIn.value,\r\n      bptOut,\r\n      this.lastSwapRoute.marketSp\r\n    );\r\n\r\n    return { bptOut, priceImpact };\r\n  }\r\n\r\n  /**\r\n   * PRIVATE\r\n   */\r\n  private calcPriceImpact(\r\n    amountIn: string,\r\n    amountOut: string,\r\n    marketSp: string\r\n  ): number {\r\n    const effectivePrice = bnum(amountIn).div(amountOut);\r\n    const priceImpact = effectivePrice.div(marketSp).minus(1) || 1; // If fails to calculate return error value of 100%\r\n\r\n    // Don't return negative price impact\r\n    return Math.max(0, priceImpact.toNumber());\r\n  }\r\n\r\n  private async getGasPrice(signer: JsonRpcSigner): Promise<BigNumber> {\r\n    let price: number;\r\n\r\n    const gasPriceParams = await this.gasPriceService.getGasPrice();\r\n    if (gasPriceParams) {\r\n      price = gasPriceParams.price;\r\n    } else {\r\n      price = (await signer.getGasPrice()).toNumber();\r\n    }\r\n\r\n    if (!price) throw new Error('Failed to fetch gas price.');\r\n\r\n    return BigNumber.from(price);\r\n  }\r\n\r\n  private getSwapAttributes(\r\n    swapInfo: SwapInfo,\r\n    maxSlippage: number,\r\n    userAddress: string\r\n  ) {\r\n    const deadline = BigNumber.from(getTimestampSecondsFromNow(60)); // 60 seconds from now\r\n    return this.sdk.swaps.buildSwap({\r\n      userAddress,\r\n      swapInfo,\r\n      kind: 0,\r\n      deadline,\r\n      maxSlippage,\r\n    });\r\n  }\r\n\r\n  private getSwapOptions(amountIn: AmountIn): TransactionRequest {\r\n    const options: TransactionRequest = {};\r\n\r\n    if (isSameAddress(amountIn.address, NATIVE_ASSET_ADDRESS))\r\n      options.value = parseUnits(amountIn.value).toString();\r\n\r\n    return options;\r\n  }\r\n\r\n  private formatAddressForSor(address: string): string {\r\n    return isSameAddress(address, NATIVE_ASSET_ADDRESS)\r\n      ? POOLS.ZeroAddress\r\n      : address;\r\n  }\r\n}\r\n","import { GasPriceService } from '@/services/gas-price/gas-price.service';\r\nimport { Pool } from '@/services/pool/types';\r\nimport { BalancerSDK, SimulationType } from '@balancer-labs/sdk';\r\nimport { TransactionResponse } from '@ethersproject/abstract-provider';\r\nimport { Ref } from 'vue';\r\nimport { JoinParams, JoinPoolHandler, QueryOutput } from './join-pool.handler';\r\nimport { formatFixed, parseFixed } from '@ethersproject/bignumber';\r\nimport { bnum, selectByAddress } from '@/lib/utils';\r\nimport { TransactionBuilder } from '@/services/web3/transactions/transaction.builder';\r\n\r\ntype JoinResponse = Awaited<\r\n  ReturnType<BalancerSDK['pools']['generalisedJoin']>\r\n>;\r\n\r\n/**\r\n * Handles generalized joins for deep pools using SDK functions.\r\n */\r\nexport class GeneralisedJoinHandler implements JoinPoolHandler {\r\n  private lastJoinRes?: JoinResponse;\r\n\r\n  constructor(\r\n    public readonly pool: Ref<Pool>,\r\n    public readonly sdk: BalancerSDK,\r\n    public readonly gasPriceService: GasPriceService\r\n  ) {}\r\n\r\n  async join(params: JoinParams): Promise<TransactionResponse> {\r\n    await this.queryJoin(params);\r\n\r\n    if (!this.lastJoinRes) {\r\n      throw new Error('Could not query generalised join');\r\n    }\r\n\r\n    const txBuilder = new TransactionBuilder(params.signer);\r\n    const { to, encodedCall } = this.lastJoinRes;\r\n\r\n    return txBuilder.raw.sendTransaction({ to, data: encodedCall });\r\n  }\r\n\r\n  async queryJoin({\r\n    amountsIn,\r\n    tokensIn,\r\n    signer,\r\n    slippageBsp,\r\n    relayerSignature,\r\n    approvalActions,\r\n  }: JoinParams): Promise<QueryOutput> {\r\n    const evmAmountsIn: string[] = amountsIn.map(({ address, value }) => {\r\n      const token = selectByAddress(tokensIn, address);\r\n\r\n      if (!token || !token.decimals)\r\n        throw new Error(`Token metadata missing for: ${address}`);\r\n\r\n      return parseFixed(value || '0', token.decimals).toString();\r\n    });\r\n\r\n    const tokenAddresses: string[] = amountsIn.map(({ address }) => address);\r\n    const signerAddress = await signer.getAddress();\r\n    const slippage = slippageBsp.toString();\r\n    const poolId = this.pool.value.id;\r\n    const hasInvalidAmounts = amountsIn.some(item => !item.valid);\r\n\r\n    // Static call simulation is more accurate than VaultModel, but requires relayer approval,\r\n    // token approvals, and account to have enought token balance.\r\n    const simulationType: SimulationType =\r\n      !hasInvalidAmounts && !approvalActions.length\r\n        ? SimulationType.Static\r\n        : SimulationType.VaultModel;\r\n\r\n    console.log({ simulationType });\r\n\r\n    this.lastJoinRes = await this.sdk.pools.generalisedJoin(\r\n      poolId,\r\n      tokenAddresses,\r\n      evmAmountsIn,\r\n      signerAddress,\r\n      slippage,\r\n      signer,\r\n      simulationType,\r\n      relayerSignature\r\n    );\r\n\r\n    if (!this.lastJoinRes) {\r\n      throw new Error('Failed to fetch expected output.');\r\n    }\r\n\r\n    const bptOut = formatFixed(\r\n      this.lastJoinRes.expectedOut,\r\n      this.pool.value.onchain?.decimals || 18\r\n    );\r\n    const priceImpact: number = bnum(\r\n      formatFixed(this.lastJoinRes.priceImpact, 18)\r\n    ).toNumber();\r\n\r\n    if (bnum(bptOut).eq(0)) throw new Error('Not enough liquidity.');\r\n    return {\r\n      bptOut,\r\n      priceImpact,\r\n    };\r\n  }\r\n}\r\n","import { isDeep } from '@/composables/usePool';\r\nimport { getBalancer } from '@/dependencies/balancer-sdk';\r\nimport { gasPriceService } from '@/services/gas-price/gas-price.service';\r\nimport { Pool } from '@/services/pool/types';\r\nimport { TransactionResponse } from '@ethersproject/abstract-provider';\r\nimport { Ref } from 'vue';\r\nimport { SwapJoinHandler } from './handlers/swap-join.handler';\r\nimport {\r\n  JoinParams,\r\n  JoinPoolHandler,\r\n  QueryOutput,\r\n} from './handlers/join-pool.handler';\r\nimport { GeneralisedJoinHandler } from './handlers/generalised-join.handler';\r\n\r\n/**\r\n * JoinPoolService acts as an adapter to underlying handlers based on the pool\r\n * type or other criteria. It wraps calls to the functions defined in the\r\n * JoinPoolHandler interface.\r\n */\r\nexport class JoinPoolService {\r\n  // The join pool handler class to call join pool interface functions.\r\n  public joinHandler: JoinPoolHandler;\r\n\r\n  /**\r\n   * Initialize the JoinPoolService\r\n   *\r\n   * @param {Pool} pool - The pool you want to join.\r\n   * @param {BalancerSDK} sdk - Balancers SDK.\r\n   * @param {GasPriceService} gasPriceServ - Gas price service for fetching gas price.\r\n   */\r\n  constructor(\r\n    public readonly pool: Ref<Pool>,\r\n    public readonly sdk = getBalancer(),\r\n    public readonly gasPriceServ = gasPriceService\r\n  ) {\r\n    this.joinHandler = this.setJoinHandler();\r\n  }\r\n\r\n  /**\r\n   * Sets JoinHandler class on instance.\r\n   *\r\n   * @param {boolean} [swapJoin=false] - Flag to ensure SwapJoinHandler is used for joining.\r\n   * @returns {JoinPoolHandler} The JoinPoolHandler class to be used.\r\n   */\r\n  setJoinHandler(swapJoin = false): JoinPoolHandler {\r\n    const { pool, sdk, gasPriceServ } = this;\r\n\r\n    if (swapJoin) {\r\n      return (this.joinHandler = new SwapJoinHandler(pool, sdk, gasPriceServ));\r\n    } else if (isDeep(pool.value)) {\r\n      return (this.joinHandler = new GeneralisedJoinHandler(\r\n        pool,\r\n        sdk,\r\n        gasPriceServ\r\n      ));\r\n    } else {\r\n      throw new Error(`Pool type not handled: ${pool.value.poolType}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Executes a join pool transaction.\r\n   *\r\n   * @param {AmountIn[]} params.amountsIn - Array of token addresses and amounts\r\n   * to join with.\r\n   * @param {TokenInfoMap} params.tokensIn - Meta data for token addresses in amountsIn.\r\n   * @param {TokenPrices} params.prices - Fiat prices for tokens in amountsIn.\r\n   * @param {Signer} params.signer - Ethers Signer for executing the transaction.\r\n   * @param {number} params.slippageBsp - User's slippage setting in basis points.\r\n   * @returns {TransactionResponse} The ethers transaction response object.\r\n   */\r\n  async join(params: JoinParams): Promise<TransactionResponse> {\r\n    return this.joinHandler.join(params);\r\n  }\r\n\r\n  /**\r\n   * Performs a query join to fetch the expected output from a join transaction.\r\n   *\r\n   * @param {AmountIn[]} amountsIn - Array of token addresses and amounts\r\n   * to join with.\r\n   * @param {TokenInfoMap} tokensIn - Meta data for token addresses in amountsIn.\r\n   * @param {TokenPrices} prices - Fiat prices for tokens in amountsIn.\r\n   * @param {Signer} params.signer - Ethers Signer for executing the transaction.\r\n   * @param {number} params.slippageBsp - User's slippage setting in basis points.\r\n   * @returns {QueryOutput} Query output object.\r\n   */\r\n  async queryJoin(params: JoinParams): Promise<QueryOutput> {\r\n    return this.joinHandler.queryJoin(params);\r\n  }\r\n}\r\n","import useRelayerApproval, {\r\n  RelayerType,\r\n} from '@/composables/approvals/useRelayerApproval';\r\nimport useRelayerApprovalTx from '@/composables/approvals/useRelayerApprovalTx';\r\nimport useNumbers from '@/composables/useNumbers';\r\nimport { fiatValueOf, isDeep, tokenTreeNodes } from '@/composables/usePool';\r\nimport { useTxState } from '@/composables/useTxState';\r\nimport {\r\n  HIGH_PRICE_IMPACT,\r\n  REKT_PRICE_IMPACT,\r\n} from '@/constants/poolLiquidity';\r\nimport QUERY_KEYS from '@/constants/queryKeys';\r\nimport symbolKeys from '@/constants/symbol.keys';\r\nimport { hasFetchedPoolsForSor } from '@/lib/balancer.sdk';\r\nimport { bnSum, bnum, removeAddress } from '@/lib/utils';\r\nimport { safeInject } from '@/providers/inject';\r\nimport { useTokens } from '@/providers/tokens.provider';\r\nimport { JoinPoolService } from '@/services/balancer/pools/joins/join-pool.service';\r\nimport { Pool } from '@/services/pool/types';\r\nimport useWeb3 from '@/services/web3/useWeb3';\r\nimport { TokenInfoMap } from '@/types/TokenList';\r\nimport { TransactionActionInfo } from '@/types/transactions';\r\nimport { TransactionResponse } from '@ethersproject/abstract-provider';\r\nimport { captureException } from '@sentry/browser';\r\nimport debounce from 'debounce-promise';\r\nimport {\r\n  computed,\r\n  InjectionKey,\r\n  onBeforeMount,\r\n  onMounted,\r\n  provide,\r\n  reactive,\r\n  readonly,\r\n  Ref,\r\n  ref,\r\n  watch,\r\n} from 'vue';\r\nimport { useUserSettings } from '../user-settings.provider';\r\nimport { useQuery } from '@tanstack/vue-query';\r\nimport useTokenApprovalActions from '@/composables/approvals/useTokenApprovalActions';\r\nimport { useApp } from '@/composables/useApp';\r\n\r\n/**\r\n * TYPES\r\n */\r\nexport type AmountIn = {\r\n  address: string;\r\n  value: string;\r\n  valid: boolean;\r\n};\r\n\r\n/**\r\n *\r\n * Handles pool joining state and transaction execution.\r\n */\r\nexport const joinPoolProvider = (pool: Ref<Pool>) => {\r\n  /**\r\n   * STATE\r\n   */\r\n  const isMounted = ref(false);\r\n  const amountsIn = ref<AmountIn[]>([]);\r\n  const bptOut = ref<string>('0');\r\n  const priceImpact = ref<number>(0);\r\n  const highPriceImpactAccepted = ref<boolean>(false);\r\n  const txError = ref<string>('');\r\n  const approvalActions = ref<TransactionActionInfo[]>([]);\r\n  const isSingleAssetJoin = ref<boolean>(false);\r\n\r\n  const debounceQueryJoin = debounce(queryJoin, 1000);\r\n\r\n  const queryEnabled = computed(\r\n    (): boolean => isMounted.value && !txInProgress.value\r\n  );\r\n  const queryJoinQuery = useQuery<\r\n    Awaited<ReturnType<typeof debounceQueryJoin>>,\r\n    Error\r\n  >(\r\n    QUERY_KEYS.Pools.Joins.QueryJoin(\r\n      // If amountsIn change we should call queryJoin to get expected output.\r\n      amountsIn,\r\n      // If the global pool fetching for the SOR changes it's been set to true. In\r\n      // this case we should re-trigger queryJoin to fetch the expected output for\r\n      // any existing input.\r\n      hasFetchedPoolsForSor,\r\n      isSingleAssetJoin\r\n    ),\r\n    debounceQueryJoin,\r\n    reactive({ enabled: queryEnabled, refetchOnWindowFocus: false })\r\n  );\r\n\r\n  /**\r\n   * SERVICES\r\n   */\r\n  const joinPoolService = new JoinPoolService(pool);\r\n\r\n  /**\r\n   * COMPOSABLES\r\n   */\r\n  const { getTokens, prices, injectTokens, priceFor } = useTokens();\r\n  const { toFiat } = useNumbers();\r\n  const { slippageBsp } = useUserSettings();\r\n  const { getSigner } = useWeb3();\r\n  const { transactionDeadline } = useApp();\r\n  const { txState, txInProgress, resetTxState } = useTxState();\r\n  const relayerApproval = useRelayerApprovalTx(RelayerType.BATCH_V4);\r\n  const { relayerSignature, relayerApprovalAction } = useRelayerApproval(\r\n    RelayerType.BATCH_V4\r\n  );\r\n\r\n  /**\r\n   * COMPUTED\r\n   */\r\n  const isDeepPool = computed((): boolean => isDeep(pool.value));\r\n\r\n  // All tokens in the pool token tree that can be used in join functions.\r\n  const joinTokens = computed((): string[] => {\r\n    let addresses: string[] = [];\r\n\r\n    addresses = isDeepPool.value\r\n      ? tokenTreeNodes(pool.value.tokens)\r\n      : pool.value.tokensList;\r\n\r\n    return removeAddress(pool.value.address, addresses);\r\n  });\r\n\r\n  // Token meta data for amountsIn tokens.\r\n  const tokensIn = computed((): TokenInfoMap => {\r\n    return getTokens(amountsIn.value.map(a => a.address));\r\n  });\r\n\r\n  // High price impact if value greater than 1%.\r\n  const highPriceImpact = computed((): boolean => {\r\n    return bnum(priceImpact.value).isGreaterThanOrEqualTo(HIGH_PRICE_IMPACT);\r\n  });\r\n\r\n  // rekt price impact if value greater than 20%.\r\n  const rektPriceImpact = computed((): boolean => {\r\n    return bnum(priceImpact.value).isGreaterThanOrEqualTo(REKT_PRICE_IMPACT);\r\n  });\r\n\r\n  // If price impact is high (> 1%), user has checked acceptance checkbox.\r\n  const hasAcceptedHighPriceImpact = computed((): boolean =>\r\n    highPriceImpact.value ? highPriceImpactAccepted.value : true\r\n  );\r\n\r\n  // Checks if all amountsIn are valid inputs.\r\n  const hasValidInputs = computed(\r\n    (): boolean =>\r\n      amountsIn.value.every(amountIn => amountIn.valid === true) &&\r\n      hasAcceptedHighPriceImpact.value\r\n  );\r\n\r\n  // Checks if amountsIn has any values > 0.\r\n  const hasAmountsIn = computed(() =>\r\n    amountsIn.value.some(amountIn => bnum(amountIn.value).gt(0))\r\n  );\r\n\r\n  // amountsIn with value greater than 0.\r\n  const amountsInWithValue = computed((): AmountIn[] =>\r\n    amountsIn.value.filter(amountIn => bnum(amountIn.value).gt(0))\r\n  );\r\n\r\n  // If we don't have price for an amountIn that has a value greater than 0.\r\n  const missingPricesIn = computed(\r\n    (): boolean =>\r\n      !amountsInWithValue.value.every(amountIn =>\r\n        bnum(priceFor(amountIn.address)).gt(0)\r\n      )\r\n  );\r\n\r\n  // Calculates total fiat value in for all amountsIn with Coingecko prices.\r\n  const fiatValueIn = computed((): string => {\r\n    const fiatValuesIn = amountsIn.value.map(amountIn =>\r\n      toFiat(amountIn.value || 0, amountIn.address)\r\n    );\r\n    return bnSum(fiatValuesIn).toString();\r\n  });\r\n\r\n  // Calculates estimated fiatValueOut using pool's totalLiquity.\r\n  // Could be inaccurate if total liquidity has come from subgraph.\r\n  const fiatValueOut = computed((): string =>\r\n    fiatValueOf(pool.value, bptOut.value)\r\n  );\r\n\r\n  const shouldSignRelayer = computed(\r\n    (): boolean =>\r\n      isDeepPool.value &&\r\n      !isSingleAssetJoin.value &&\r\n      // Check if Batch Relayer is either approved, or signed\r\n      !(relayerApproval.isUnlocked.value || relayerSignature.value)\r\n  );\r\n\r\n  const tokensToApprove = computed(() => {\r\n    return amountsIn.value.map(amountIn => amountIn.address);\r\n  });\r\n  const amountsToApprove = computed(() => {\r\n    return amountsIn.value.map(amountIn => amountIn.value);\r\n  });\r\n  const { getTokenApprovalActions } = useTokenApprovalActions(\r\n    tokensToApprove,\r\n    amountsToApprove\r\n  );\r\n\r\n  const isLoadingQuery = computed(\r\n    (): boolean => queryJoinQuery.isFetching.value\r\n  );\r\n\r\n  const queryError = computed(\r\n    (): string | undefined => queryJoinQuery.error.value?.message\r\n  );\r\n\r\n  /**\r\n   * METHODS\r\n   */\r\n\r\n  /**\r\n   * Sets full amountsIn state.\r\n   *\r\n   * @param {AmountIn[]} _amountsIn - Array of amounts in: token address, value\r\n   * & input validity.\r\n   */\r\n  function setAmountsIn(_amountsIn: AmountIn[]) {\r\n    amountsIn.value = _amountsIn;\r\n  }\r\n\r\n  /**\r\n   * Adds amountsIn with no value for array of token addresses.\r\n   *\r\n   * @param {string[]} tokensIn - Array of token addresses.\r\n   */\r\n  function addTokensIn(tokensIn: string[]) {\r\n    tokensIn.forEach(address =>\r\n      amountsIn.value.push({ address, value: '', valid: true })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Resets all amounts in amountsIn state to have no value.\r\n   */\r\n  function resetAmounts() {\r\n    amountsIn.value.forEach((_, i) => {\r\n      amountsIn.value[i].value = '';\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Resets previous joinQuery results\r\n   */\r\n  function resetQueryJoinState() {\r\n    bptOut.value = '0';\r\n    priceImpact.value = 0;\r\n    queryJoinQuery.remove();\r\n  }\r\n\r\n  // Updates the approval actions like relayer approval and token approvals.\r\n  function setApprovalActions() {\r\n    const tokenApprovalActions = getTokenApprovalActions();\r\n    approvalActions.value = shouldSignRelayer.value\r\n      ? [relayerApprovalAction.value, ...tokenApprovalActions]\r\n      : tokenApprovalActions;\r\n  }\r\n\r\n  /**\r\n   * Simulate join transaction to get expected output and calculate price impact.\r\n   */\r\n  async function queryJoin() {\r\n    // If form is empty or inputs are not valid, clear the price impact and\r\n    // return early\r\n    if (!hasAmountsIn.value) {\r\n      priceImpact.value = 0;\r\n      return null;\r\n    }\r\n\r\n    try {\r\n      joinPoolService.setJoinHandler(isSingleAssetJoin.value);\r\n      setApprovalActions();\r\n\r\n      const output = await joinPoolService.queryJoin({\r\n        amountsIn: amountsInWithValue.value,\r\n        tokensIn: tokensIn.value,\r\n        prices: prices.value,\r\n        signer: getSigner(),\r\n        slippageBsp: slippageBsp.value,\r\n        relayerSignature: relayerSignature.value,\r\n        approvalActions: approvalActions.value,\r\n        transactionDeadline,\r\n      });\r\n\r\n      bptOut.value = output.bptOut;\r\n      priceImpact.value = output.priceImpact;\r\n\r\n      return output;\r\n    } catch (error) {\r\n      captureException(error);\r\n      throw new Error('Failed to construct join.', { cause: error });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Executes join transaction.\r\n   */\r\n  async function join(): Promise<TransactionResponse> {\r\n    try {\r\n      txError.value = '';\r\n      joinPoolService.setJoinHandler(isSingleAssetJoin.value);\r\n      setApprovalActions();\r\n\r\n      return joinPoolService.join({\r\n        amountsIn: amountsInWithValue.value,\r\n        tokensIn: tokensIn.value,\r\n        prices: prices.value,\r\n        signer: getSigner(),\r\n        slippageBsp: slippageBsp.value,\r\n        relayerSignature: relayerSignature.value,\r\n        approvalActions: approvalActions.value,\r\n        transactionDeadline,\r\n      });\r\n    } catch (error) {\r\n      txError.value = (error as Error).message;\r\n      throw new Error('Failed to submit join transaction.', { cause: error });\r\n    }\r\n  }\r\n\r\n  function setIsSingleAssetJoin(value: boolean) {\r\n    isSingleAssetJoin.value = value;\r\n  }\r\n\r\n  /**\r\n   * WATCHERS\r\n   */\r\n\r\n  // If singleAssetJoin is toggled we need to reset previous query state. queryJoin\r\n  // will be re-triggered by the amountsIn state change. We also need to call\r\n  // setJoinHandler on the joinPoolService to update the join handler.\r\n  watch(isSingleAssetJoin, newVal => {\r\n    resetQueryJoinState();\r\n    joinPoolService.setJoinHandler(newVal);\r\n  });\r\n\r\n  /**\r\n   * LIFECYCLE\r\n   */\r\n  onBeforeMount(() => {\r\n    // Ensure prices are fetched for token tree. When pool architecture is\r\n    // refactoted probably won't be required.\r\n    injectTokens(joinTokens.value);\r\n  });\r\n\r\n  onMounted(() => (isMounted.value = true));\r\n\r\n  return {\r\n    // State\r\n    amountsIn,\r\n    highPriceImpactAccepted,\r\n    txState,\r\n    pool: readonly(pool),\r\n    isSingleAssetJoin: readonly(isSingleAssetJoin),\r\n    bptOut: readonly(bptOut),\r\n    priceImpact: readonly(priceImpact),\r\n    txError: readonly(txError),\r\n\r\n    //  Computed\r\n    isLoadingQuery,\r\n    queryError,\r\n    joinTokens,\r\n    highPriceImpact,\r\n    rektPriceImpact,\r\n    hasAcceptedHighPriceImpact,\r\n    hasValidInputs,\r\n    hasAmountsIn,\r\n    fiatValueIn,\r\n    fiatValueOut,\r\n    txInProgress,\r\n    approvalActions,\r\n    missingPricesIn,\r\n\r\n    // Methods\r\n    setAmountsIn,\r\n    addTokensIn,\r\n    resetAmounts,\r\n    join,\r\n    resetTxState,\r\n    setIsSingleAssetJoin,\r\n\r\n    // queries\r\n    queryJoinQuery,\r\n  };\r\n};\r\n\r\nexport type JoinPoolProviderResponse = ReturnType<typeof joinPoolProvider>;\r\nexport const JoinPoolProviderSymbol: InjectionKey<JoinPoolProviderResponse> =\r\n  Symbol(symbolKeys.Providers.JoinPool);\r\n\r\nexport function provideJoinPool(pool: Ref<Pool>) {\r\n  const joinPoolResponse = isDeep(pool.value) ? joinPoolProvider(pool) : {};\r\n  provide(JoinPoolProviderSymbol, joinPoolResponse);\r\n  return joinPoolResponse;\r\n}\r\n\r\nexport const useJoinPool = (): JoinPoolProviderResponse => {\r\n  return safeInject(JoinPoolProviderSymbol);\r\n};\r\n","<script setup lang=\"ts\">\r\nimport { computed, nextTick } from 'vue';\r\nimport useInvestState from '@/components/forms/pool_actions/InvestForm/composables/useInvestState';\r\nimport usePoolTransfers from '@/composables/contextual/pool-transfers/usePoolTransfers';\r\nimport { usePool } from '@/composables/usePool';\r\nimport { isSameAddress, indexOfAddress } from '@/lib/utils';\r\nimport MyWallet from '@/components/cards/MyWallet/MyWallet.vue';\r\nimport { useTokens } from '@/providers/tokens.provider';\r\nimport useInvestPageTabs, {\r\n  Tab,\r\n  tabs,\r\n} from '@/composables/pools/useInvestPageTabs';\r\nimport { useJoinPool } from '@/providers/local/join-pool.provider';\r\nimport { Pool } from '@balancer-labs/sdk';\r\n\r\ntype Props = {\r\n  pool: Pool;\r\n};\r\n\r\n/**\r\n * PROPS & EMITS\r\n */\r\nconst props = defineProps<Props>();\r\n\r\n/**\r\n * COMPUTED\r\n */\r\nconst pool = computed(() => props.pool);\r\nconst excludedTokens = computed<string[]>(() => {\r\n  return pool.value?.address ? [pool.value.address] : [];\r\n});\r\n\r\n/**\r\n * COMPOSABLES\r\n */\r\nconst { useNativeAsset } = usePoolTransfers();\r\nconst { isWethPool, isDeepPool } = usePool(pool);\r\nconst { tokenAddresses, amounts } = useInvestState();\r\nconst { setAmountsIn, isSingleAssetJoin, amountsIn } = useJoinPool();\r\nconst { nativeAsset, wrappedNativeAsset, getMaxBalanceFor } = useTokens();\r\nconst { activeTab } = useInvestPageTabs();\r\n\r\n/**\r\n * METHODS\r\n */\r\n\r\nfunction setMaxAmount(tokenAddress: string, maxBalance: string) {\r\n  if (isSingleAssetJoin.value) {\r\n    // Set the new Token address, and set the input value to max token balance\r\n    setAmountsIn([\r\n      {\r\n        address: tokenAddress,\r\n        value: maxBalance,\r\n        valid: true,\r\n      },\r\n    ]);\r\n  } else {\r\n    const amountIn = amountsIn.value.find(item =>\r\n      isSameAddress(tokenAddress, item.address)\r\n    );\r\n    if (amountIn) {\r\n      amountIn.address = tokenAddress;\r\n      amountIn.valid = true;\r\n      amountIn.value = maxBalance;\r\n    }\r\n  }\r\n}\r\n\r\n// Set the input value to max token balance for lecacy invest state\r\nfunction setMaxAmountForLegacyInvestState(\r\n  tokenAddress: string,\r\n  maxBalance: string\r\n) {\r\n  const indexOfAsset = indexOfAddress(tokenAddresses.value, tokenAddress);\r\n\r\n  if (indexOfAsset >= 0) {\r\n    amounts.value[indexOfAsset] = maxBalance;\r\n  }\r\n}\r\n\r\nfunction handleMyWalletTokenClick(tokenAddress: string, isPoolToken: boolean) {\r\n  const maxBalance = getMaxBalanceFor(tokenAddress);\r\n\r\n  if (isDeepPool.value) {\r\n    if (isPoolToken) {\r\n      setMaxAmount(tokenAddress, maxBalance);\r\n    } else {\r\n      // If non pool token is clicked, switch to Single Token tab\r\n      activeTab.value = tabs[Tab.SingleToken].value;\r\n      // Wait for the tab to update, the set the max amount\r\n      nextTick(() => {\r\n        setMaxAmount(tokenAddress, maxBalance);\r\n      });\r\n    }\r\n  } else if (isWethPool.value) {\r\n    const isNativeAsset = isSameAddress(tokenAddress, nativeAsset.address);\r\n    const isWrappedNativeAsset = isSameAddress(\r\n      tokenAddress,\r\n      wrappedNativeAsset.value?.address\r\n    );\r\n    if (isNativeAsset || isWrappedNativeAsset) {\r\n      // Swap input token between Native and Wrapped Native assets\r\n      useNativeAsset.value = isNativeAsset;\r\n    }\r\n\r\n    // SetTimeout hack.\r\n    // Race condition when switching between 'native'/'wrapped native' assets,\r\n    // and then setting the new input value\r\n    setTimeout(() => {\r\n      setMaxAmountForLegacyInvestState(tokenAddress, maxBalance);\r\n    }, 50);\r\n  } else {\r\n    setMaxAmountForLegacyInvestState(tokenAddress, maxBalance);\r\n  }\r\n}\r\n</script>\r\n\r\n<template>\r\n  <MyWallet\r\n    includeNativeAsset\r\n    :excludedTokens=\"excludedTokens\"\r\n    :pool=\"pool\"\r\n    @click:asset=\"handleMyWalletTokenClick\"\r\n  />\r\n</template>\r\n\r\n\r\n","<script setup lang=\"ts\">\r\nimport { computed } from 'vue';\r\nimport BalAccordion from '@/components/_global/BalAccordion/BalAccordion.vue';\r\nimport useNativeBalance from '@/composables/useNativeBalance';\r\nimport InvestPageMyWallet from './InvestPageMyWallet.vue';\r\nimport { useI18n } from 'vue-i18n';\r\nimport { usePool } from '@/composables/usePool';\r\nimport { Pool } from '@balancer-labs/sdk';\r\n\r\ntype Props = {\r\n  pool: Pool;\r\n};\r\n\r\n/**\r\n * PROPS & EMITS\r\n */\r\nconst props = defineProps<Props>();\r\n\r\n/**\r\n * COMPUTED\r\n */\r\nconst pool = computed(() => props.pool);\r\n\r\n/**\r\n * COMPOSABLES\r\n */\r\nconst { hasNativeBalance, nativeBalance, nativeCurrency } = useNativeBalance();\r\nconst { t } = useI18n();\r\nconst { isDeepPool } = usePool(pool);\r\n\r\n/**\r\n * COMPUTED\r\n */\r\nconst nativeBalanceText = computed<string>(() =>\r\n  hasNativeBalance ? `${nativeBalance.value} ${nativeCurrency}` : ''\r\n);\r\n\r\nconst sectionTitle = computed<string>(() =>\r\n  isDeepPool.value\r\n    ? `${t('myWallet2')} ${nativeBalanceText.value}`\r\n    : t('poolTransfer.myWalletTokensCard.title')\r\n);\r\n</script>\r\n\r\n<template>\r\n  <BalAccordion\r\n    :sections=\"[\r\n      {\r\n        title: sectionTitle,\r\n        id: 'myWalletTokens',\r\n      },\r\n    ]\"\r\n  >\r\n    <template #myWalletTokens>\r\n      <InvestPageMyWallet :pool=\"pool\" />\r\n    </template>\r\n  </BalAccordion>\r\n</template>\r\n\r\n","<script setup lang=\"ts\">\r\nimport { computed, toRef } from 'vue';\r\n\r\nimport useConfig from '@/composables/useConfig';\r\nimport { usePool } from '@/composables/usePool';\r\nimport { useTokens } from '@/providers/tokens.provider';\r\nimport useNetwork from '@/composables/useNetwork';\r\nimport { Pool } from '@/services/pool/types';\r\n\r\n/**\r\n * TYPES\r\n */\r\ntype Props = {\r\n  pool: Pool;\r\n};\r\n\r\n/**\r\n * PROPS\r\n */\r\nconst props = defineProps<Props>();\r\n\r\n/**\r\n * COMPOSABLES\r\n */\r\nconst { isMainnetWstETHPool } = usePool(toRef(props, 'pool'));\r\nconst { networkConfig } = useConfig();\r\nconst { getToken } = useTokens();\r\nconst { networkSlug } = useNetwork();\r\n\r\n/**\r\n * COMPUTED\r\n */\r\nconst stETH = computed(() => getToken(networkConfig.addresses.stETH));\r\nconst wstETH = computed(() => getToken(networkConfig.addresses.wstETH));\r\n</script>\r\n\r\n<template>\r\n  <div v-if=\"isMainnetWstETHPool\" class=\"flex items-center mb-4\">\r\n    <router-link\r\n      :to=\"{\r\n        name: 'swap',\r\n        params: {\r\n          networkSlug,\r\n          assetIn: stETH.address,\r\n          assetOut: wstETH.address,\r\n        },\r\n      }\"\r\n      class=\"text-xs underline text-secondary\"\r\n    >\r\n      {{ $t('wrapInstruction', [stETH.symbol, wstETH.symbol]) }}\r\n    </router-link>\r\n    <BalTooltip>\r\n      <template #activator>\r\n        <BalIcon\r\n          name=\"info\"\r\n          size=\"xs\"\r\n          class=\"ml-2 text-gray-400 dark:text-gray-500\"\r\n        />\r\n      </template>\r\n      <div v-html=\"$t('wrapStEthTooltip')\" />\r\n    </BalTooltip>\r\n  </div>\r\n</template>\r\n","<script setup lang=\"ts\">\r\nimport { computed, reactive, toRefs } from 'vue';\r\n\r\nimport useNumbers, { FNumFormats } from '@/composables/useNumbers';\r\nimport useWeb3 from '@/services/web3/useWeb3';\r\n\r\nimport { InvestMathResponse } from '../composables/useInvestMath';\r\n\r\n/**\r\n * TYPES\r\n */\r\ntype Props = {\r\n  math: InvestMathResponse;\r\n};\r\n\r\n/**\r\n * Props\r\n */\r\nconst props = defineProps<Props>();\r\n\r\nconst emit = defineEmits<{\r\n  (e: 'maximize'): void;\r\n  (e: 'optimize'): void;\r\n}>();\r\n\r\n/**\r\n * COMPOSABLES\r\n */\r\nconst { fNum } = useNumbers();\r\nconst { isWalletReady } = useWeb3();\r\n\r\nconst {\r\n  fiatTotal,\r\n  hasNoBalances,\r\n  hasAllTokens,\r\n  priceImpact,\r\n  highPriceImpact,\r\n  maximized,\r\n  optimized,\r\n  loadingData,\r\n  supportsPropotionalOptimization,\r\n} = toRefs(reactive(props.math));\r\n\r\n/**\r\n * COMPUTED\r\n */\r\nconst priceImpactClasses = computed(() => ({\r\n  'dark:bg-gray-800': !highPriceImpact.value,\r\n  'bg-red-500 dark:bg-red-500 text-white divide-red-400': highPriceImpact.value,\r\n}));\r\n\r\nconst optimizeBtnClasses = computed(() => ({\r\n  'text-gradient': !highPriceImpact.value,\r\n  'text-red-500 px-2 py-1 bg-white rounded-lg': highPriceImpact.value,\r\n}));\r\n</script>\r\n\r\n<template>\r\n  <div class=\"data-table\">\r\n    <div class=\"data-table-row total-row\">\r\n      <div class=\"p-2\">\r\n        {{ $t('total') }}\r\n      </div>\r\n      <div class=\"data-table-number-col\">\r\n        {{ fNum(fiatTotal, FNumFormats.fiat) }}\r\n        <div v-if=\"isWalletReady && !hasNoBalances\" class=\"text-sm\">\r\n          <span v-if=\"maximized\" class=\"text-gray-400 dark:text-gray-600\">\r\n            {{ $t('maxed') }}\r\n          </span>\r\n          <span\r\n            v-else\r\n            class=\"text-blue-500 cursor-pointer\"\r\n            @click=\"emit('maximize')\"\r\n          >\r\n            {{ $t('max') }}\r\n          </span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div :class=\"['data-table-row price-impact-row', priceImpactClasses]\">\r\n      <div class=\"p-2\">\r\n        {{ $t('priceImpact') }}\r\n      </div>\r\n      <div class=\"data-table-number-col\">\r\n        <div class=\"flex\">\r\n          <span v-if=\"!loadingData\">\r\n            {{ fNum(priceImpact, FNumFormats.percent) }}\r\n          </span>\r\n          <BalLoadingBlock v-else class=\"w-10\" />\r\n\r\n          <BalTooltip :text=\"$t('customAmountsTip')\">\r\n            <template #activator>\r\n              <BalIcon\r\n                v-if=\"highPriceImpact\"\r\n                name=\"alert-triangle\"\r\n                size=\"xs\"\r\n                class=\"-mb-px ml-1\"\r\n              />\r\n              <BalIcon\r\n                v-else\r\n                name=\"info\"\r\n                size=\"xs\"\r\n                class=\"-mb-px ml-1 text-gray-400\"\r\n              />\r\n            </template>\r\n          </BalTooltip>\r\n        </div>\r\n\r\n        <div\r\n          v-if=\"\r\n            isWalletReady && hasAllTokens && supportsPropotionalOptimization\r\n          \"\r\n          class=\"text-sm font-semibold\"\r\n        >\r\n          <span v-if=\"optimized\" class=\"text-gray-400 dark:text-gray-600\">\r\n            {{ $t('optimized') }}\r\n          </span>\r\n          <div\r\n            v-else\r\n            :class=\"['cursor-pointer', optimizeBtnClasses]\"\r\n            @click=\"emit('optimize')\"\r\n          >\r\n            {{ $t('optimize') }}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.data-table {\r\n  @apply border dark:border-gray-900 rounded-lg divide-y dark:divide-gray-900;\r\n}\r\n\r\n.data-table-row {\r\n  @apply grid grid-cols-4 items-center;\r\n  @apply divide-x dark:divide-gray-900;\r\n}\r\n\r\n.data-table-number-col {\r\n  @apply col-span-3 p-2 flex items-center justify-between;\r\n}\r\n\r\n.total-row {\r\n  @apply text-lg font-semibold rounded-t-lg dark:bg-gray-800;\r\n}\r\n\r\n.price-impact-row {\r\n  @apply text-sm rounded-b-lg;\r\n}\r\n</style>\r\n  ","<script setup lang=\"ts\">\r\nimport {\r\n  TransactionReceipt,\r\n  TransactionResponse,\r\n} from '@ethersproject/abstract-provider';\r\nimport { formatUnits } from '@ethersproject/units';\r\nimport { BigNumber } from 'ethers';\r\nimport { computed, reactive, toRef, toRefs, watch } from 'vue';\r\nimport { useI18n } from 'vue-i18n';\r\n\r\nimport BalActionSteps from '@/components/_global/BalActionSteps/BalActionSteps.vue';\r\nimport ConfirmationIndicator from '@/components/web3/ConfirmationIndicator.vue';\r\nimport useEthers from '@/composables/useEthers';\r\nimport { usePool } from '@/composables/usePool';\r\nimport { dateTimeLabelFor } from '@/composables/useTime';\r\nimport useTokenApprovalActions from '@/composables/approvals/useTokenApprovalActions';\r\nimport useTransactions from '@/composables/useTransactions';\r\nimport useVeBal from '@/composables/useVeBAL';\r\nimport useNetwork from '@/composables/useNetwork';\r\nimport { boostedJoinBatchSwap } from '@/lib/utils/balancer/swapper';\r\nimport PoolExchange from '@/services/pool/exchange/exchange.service';\r\n// Types\r\nimport { Pool } from '@/services/pool/types';\r\n// Composables\r\nimport useWeb3 from '@/services/web3/useWeb3';\r\nimport { TransactionActionInfo } from '@/types/transactions';\r\n\r\nimport { InvestMathResponse } from '../../../composables/useInvestMath';\r\nimport { Goals, trackGoal } from '@/composables/useFathom';\r\nimport { bnum } from '@/lib/utils';\r\nimport { useTokens } from '@/providers/tokens.provider';\r\nimport { usePoolStaking } from '@/providers/local/pool-staking.provider';\r\n\r\n/**\r\n * TYPES\r\n */\r\ntype Props = {\r\n  pool: Pool;\r\n  math: InvestMathResponse;\r\n  tokenAddresses: string[];\r\n  disabled: boolean;\r\n};\r\n\r\ntype InvestmentState = {\r\n  init: boolean;\r\n  confirming: boolean;\r\n  confirmed: boolean;\r\n  confirmedAt: string;\r\n  receipt?: TransactionReceipt;\r\n};\r\n\r\n/**\r\n * PROPS & EMITS\r\n */\r\nconst props = defineProps<Props>();\r\n\r\nconst emit = defineEmits<{\r\n  (e: 'success', value: TransactionReceipt): void;\r\n  (e: 'showStakeModal'): void;\r\n}>();\r\n\r\n/**\r\n * STATE\r\n */\r\nconst investmentState = reactive<InvestmentState>({\r\n  init: false,\r\n  confirming: false,\r\n  confirmed: false,\r\n  confirmedAt: '',\r\n});\r\n\r\n/**\r\n * COMPOSABLES\r\n */\r\nconst { t } = useI18n();\r\nconst { getSigner, blockNumber } = useWeb3();\r\nconst { addTransaction } = useTransactions();\r\nconst { txListener, getTxConfirmedAt } = useEthers();\r\nconst { lockablePoolId } = useVeBal();\r\nconst { isStakablePool } = usePoolStaking();\r\nconst { networkSlug } = useNetwork();\r\nconst { refetchBalances } = useTokens();\r\n\r\nconst { poolWeightsLabel } = usePool(toRef(props, 'pool'));\r\nconst tokenAddresses = computed(() => props.tokenAddresses);\r\nconst {\r\n  fullAmounts,\r\n  batchSwapAmountMap,\r\n  bptOut,\r\n  fiatTotalLabel,\r\n  fiatTotal,\r\n  batchSwap,\r\n  shouldFetchBatchSwap,\r\n} = toRefs(props.math);\r\n\r\nconst { tokenApprovalActions } = useTokenApprovalActions(\r\n  tokenAddresses,\r\n  fullAmounts\r\n);\r\n\r\n/**\r\n * SERVICES\r\n */\r\nconst poolExchange = new PoolExchange(toRef(props, 'pool'));\r\n\r\n/**\r\n * COMPUTED\r\n */\r\nconst actions = computed((): TransactionActionInfo[] => [\r\n  ...tokenApprovalActions,\r\n  {\r\n    label: t('addLiquidity'),\r\n    loadingLabel: t('investment.preview.loadingLabel.investment'),\r\n    confirmingLabel: t('confirming'),\r\n    action: submit,\r\n    stepTooltip: t('investmentTooltip'),\r\n  },\r\n]);\r\n\r\nconst transactionInProgress = computed(\r\n  (): boolean =>\r\n    investmentState.init ||\r\n    investmentState.confirming ||\r\n    investmentState.confirmed\r\n);\r\n\r\nconst normalizedBptOut = computed((): string => {\r\n  return formatUnits(bptOut.value, props.pool?.onchain?.decimals || 18);\r\n});\r\n\r\n/**\r\n * METHODS\r\n */\r\n\r\nasync function handleTransaction(tx): Promise<void> {\r\n  addTransaction({\r\n    id: tx.hash,\r\n    type: 'tx',\r\n    action: 'invest',\r\n    summary: t('transactionSummary.investInPool', [\r\n      fiatTotalLabel.value,\r\n      poolWeightsLabel(props.pool),\r\n    ]),\r\n    details: {\r\n      total: fiatTotalLabel.value,\r\n      pool: props.pool,\r\n    },\r\n  });\r\n\r\n  await txListener(tx, {\r\n    onTxConfirmed: async (receipt: TransactionReceipt) => {\r\n      emit('success', receipt);\r\n      investmentState.receipt = receipt;\r\n\r\n      const confirmedAt = await getTxConfirmedAt(receipt);\r\n      investmentState.confirmedAt = dateTimeLabelFor(confirmedAt);\r\n      investmentState.confirmed = true;\r\n      investmentState.confirming = false;\r\n      trackGoal(\r\n        Goals.LiquidityAdded,\r\n        bnum(fiatTotal.value).times(100).toNumber() || 0\r\n      );\r\n      await refetchBalances();\r\n    },\r\n    onTxFailed: () => {\r\n      console.error('Add liquidity failed');\r\n      investmentState.confirming = false;\r\n    },\r\n  });\r\n}\r\n\r\nasync function submit(): Promise<TransactionResponse> {\r\n  try {\r\n    let tx;\r\n    investmentState.init = true;\r\n\r\n    if (batchSwap.value) {\r\n      tx = await boostedJoinBatchSwap(\r\n        batchSwap.value.swaps,\r\n        batchSwap.value.assets,\r\n        props.pool.address,\r\n        batchSwapAmountMap.value,\r\n        BigNumber.from(bptOut.value)\r\n      );\r\n    } else {\r\n      tx = await poolExchange.join(\r\n        getSigner(),\r\n        fullAmounts.value,\r\n        props.tokenAddresses,\r\n        normalizedBptOut.value\r\n      );\r\n    }\r\n\r\n    investmentState.init = false;\r\n    investmentState.confirming = true;\r\n\r\n    console.log('Receipt', tx);\r\n\r\n    handleTransaction(tx);\r\n    return tx;\r\n  } catch (error) {\r\n    console.error(error);\r\n    throw new Error('Failed to submit transaction.', {\r\n      cause: error,\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * WATCHERS\r\n */\r\nwatch(blockNumber, async () => {\r\n  if (shouldFetchBatchSwap.value && !transactionInProgress.value) {\r\n    await props.math.getBatchSwap();\r\n  }\r\n});\r\n</script>\r\n\r\n<template>\r\n  <transition>\r\n    <BalActionSteps\r\n      v-if=\"!investmentState.confirmed || !investmentState.receipt\"\r\n      :actions=\"actions\"\r\n      :disabled=\"disabled\"\r\n    />\r\n    <div v-else>\r\n      <ConfirmationIndicator :txReceipt=\"investmentState.receipt\" />\r\n      <BalBtn\r\n        v-if=\"lockablePoolId === pool.id\"\r\n        tag=\"router-link\"\r\n        :to=\"{ name: 'get-vebal', params: { networkSlug } }\"\r\n        color=\"gradient\"\r\n        block\r\n        class=\"flex mt-2\"\r\n      >\r\n        <StarsIcon class=\"mr-2 h-5 text-orange-300\" />{{ $t('lockToGetVeBAL') }}\r\n      </BalBtn>\r\n      <BalBtn\r\n        v-else-if=\"isStakablePool\"\r\n        color=\"gradient\"\r\n        block\r\n        class=\"flex mt-2\"\r\n        @click=\"emit('showStakeModal')\"\r\n      >\r\n        <StarsIcon class=\"mr-2 h-5 text-orange-300\" />{{\r\n          $t('stakeToGetExtra')\r\n        }}\r\n      </BalBtn>\r\n\r\n      <BalBtn\r\n        tag=\"router-link\"\r\n        :to=\"{\r\n          name: 'pool',\r\n          params: { networkSlug, id: pool.id },\r\n        }\"\r\n        color=\"gray\"\r\n        outline\r\n        block\r\n        class=\"mt-2\"\r\n      >\r\n        {{ $t('returnToPool') }}\r\n      </BalBtn>\r\n    </div>\r\n  </transition>\r\n</template>\r\n","<script setup lang=\"ts\">\r\nimport useNumbers, { FNumFormats } from '@/composables/useNumbers';\r\nimport { useUserSettings } from '@/providers/user-settings.provider';\r\nimport { Pool } from '@/services/pool/types';\r\n\r\n/**\r\n * TYPES\r\n */\r\ntype Props = {\r\n  pool: Pool;\r\n  fiatTotal: string;\r\n  priceImpact: number;\r\n  isLoadingPriceImpact?: boolean;\r\n  highPriceImpact?: boolean;\r\n  summaryTitle?: string | undefined;\r\n};\r\n\r\n/**\r\n * PROPS & EMITS\r\n */\r\nwithDefaults(defineProps<Props>(), {\r\n  isLoadingPriceImpact: false,\r\n  highPriceImpact: false,\r\n  summaryTitle: undefined,\r\n});\r\n\r\n/**\r\n * COMPOSABLES\r\n */\r\nconst { fNum } = useNumbers();\r\nconst { currency } = useUserSettings();\r\n</script>\r\n\r\n<template>\r\n  <BalDataList :title=\"$t('summary')\">\r\n    <BalDataListRow :label=\"$t('investment.preview.summary.total')\">\r\n      <template #value>\r\n        {{ fNum(fiatTotal, FNumFormats.fiat) }}\r\n        <BalTooltip\r\n          :text=\"$t('tooltips.addLiquidity.total', [currency.toUpperCase()])\"\r\n          iconSize=\"sm\"\r\n          class=\"ml-2\"\r\n        />\r\n      </template>\r\n    </BalDataListRow>\r\n    <BalDataListRow\r\n      :label=\"$t('priceImpact')\"\r\n      :class=\"{\r\n        'bg-red-50 dark:bg-red-500 text-red-500 dark:text-white':\r\n          highPriceImpact,\r\n      }\"\r\n    >\r\n      <template #value>\r\n        <BalLoadingBlock v-if=\"isLoadingPriceImpact\" class=\"w-10 h-6\" />\r\n        <template v-else>\r\n          {{ fNum(priceImpact, FNumFormats.percent) }}\r\n          <BalTooltip\r\n            :text=\"$t('tooltips.addLiquidity.priceImpact')\"\r\n            iconSize=\"sm\"\r\n            :iconName=\"highPriceImpact ? 'alert-triangle' : 'info'\"\r\n            :iconClass=\"\r\n              highPriceImpact ? 'text-red-500 dark:text-white' : 'text-gray-300'\r\n            \"\r\n            width=\"72\"\r\n            class=\"ml-2\"\r\n          />\r\n        </template>\r\n      </template>\r\n    </BalDataListRow>\r\n  </BalDataList>\r\n</template>\r\n","<script setup lang=\"ts\">\r\nimport { computed, ref, toRefs, watch } from 'vue';\r\nimport { useI18n } from 'vue-i18n';\r\n\r\nimport useNumbers from '@/composables/useNumbers';\r\nimport { useTokens } from '@/providers/tokens.provider';\r\nimport { bnum } from '@/lib/utils';\r\nimport { Pool } from '@/services/pool/types';\r\nimport { TokenInfoMap } from '@/types/TokenList';\r\n\r\nimport { InvestMathResponse } from '../../composables/useInvestMath';\r\nimport useInvestState from '../../composables/useInvestState';\r\nimport InvestActions from './components/InvestActions.vue';\r\nimport InvestSummary from './components/InvestSummary.vue';\r\nimport TokenAmounts from '@/components/forms/pool_actions/shared/TokenAmounts.vue';\r\nimport useWeb3 from '@/services/web3/useWeb3';\r\n\r\n/**\r\n * TYPES\r\n */\r\ntype Props = {\r\n  pool: Pool;\r\n  math: InvestMathResponse;\r\n  tokenAddresses: string[];\r\n};\r\n\r\ntype AmountMap = {\r\n  [address: string]: string;\r\n};\r\n\r\n/**\r\n * PROPS & EMITS\r\n */\r\nconst props = withDefaults(defineProps<Props>(), {});\r\n\r\nconst emit = defineEmits<{\r\n  (e: 'close'): void;\r\n  (e: 'showStakeModal'): void;\r\n}>();\r\n\r\n/**\r\n * STATE\r\n */\r\nconst investmentConfirmed = ref(false);\r\n\r\n/**\r\n * COMPOSABLES\r\n */\r\nconst { t } = useI18n();\r\nconst { getToken } = useTokens();\r\nconst { toFiat } = useNumbers();\r\nconst { fullAmounts, priceImpact, highPriceImpact, rektPriceImpact } = toRefs(\r\n  props.math\r\n);\r\nconst { resetAmounts } = useInvestState();\r\nconst { account } = useWeb3();\r\n\r\n/**\r\n * COMPUTED\r\n */\r\nconst title = computed((): string =>\r\n  investmentConfirmed.value\r\n    ? t('investment.preview.titles.confirmed')\r\n    : t('investment.preview.titles.default')\r\n);\r\n\r\nconst amountMap = computed((): AmountMap => {\r\n  const amountMap = {};\r\n  fullAmounts.value.forEach((amount, i) => {\r\n    amountMap[props.tokenAddresses[i]] = amount;\r\n  });\r\n  return amountMap;\r\n});\r\n\r\nconst tokenMap = computed((): TokenInfoMap => {\r\n  const tokenMap = {};\r\n  Object.keys(amountMap.value).forEach(address => {\r\n    tokenMap[address] = getToken(address);\r\n  });\r\n  return tokenMap;\r\n});\r\n\r\nconst fiatAmountMap = computed((): AmountMap => {\r\n  const fiatAmountMap = {};\r\n  Object.keys(amountMap.value).forEach(address => {\r\n    fiatAmountMap[address] = toFiat(amountMap.value[address], address);\r\n  });\r\n  return fiatAmountMap;\r\n});\r\n\r\nconst fiatTotal = computed((): string =>\r\n  Object.values(fiatAmountMap.value).reduce(\r\n    (total, amount) => bnum(total).plus(amount).toString(),\r\n    '0'\r\n  )\r\n);\r\n\r\n/**\r\n * METHODS\r\n */\r\nfunction handleClose(): void {\r\n  if (investmentConfirmed.value) {\r\n    resetAmounts();\r\n  }\r\n  emit('close');\r\n}\r\n\r\nfunction handleShowStakeModal() {\r\n  handleClose();\r\n  emit('showStakeModal');\r\n}\r\n\r\n/**\r\n * WATCHERS\r\n */\r\nwatch(account, () => emit('close'));\r\n</script>\r\n\r\n<template>\r\n  <BalModal show :fireworks=\"investmentConfirmed\" @close=\"handleClose\">\r\n    <template #header>\r\n      <div class=\"flex items-center\">\r\n        <BalCircle\r\n          v-if=\"investmentConfirmed\"\r\n          size=\"8\"\r\n          color=\"green\"\r\n          class=\"mr-2 text-white\"\r\n        >\r\n          <BalIcon name=\"check\" />\r\n        </BalCircle>\r\n        <h4>\r\n          {{ title }}\r\n        </h4>\r\n      </div>\r\n    </template>\r\n\r\n    <TokenAmounts\r\n      :amountMap=\"amountMap\"\r\n      :tokenMap=\"tokenMap\"\r\n      :fiatAmountMap=\"fiatAmountMap\"\r\n      :fiatTotal=\"fiatTotal\"\r\n    />\r\n\r\n    <InvestSummary\r\n      :pool=\"pool\"\r\n      :fiatTotal=\"fiatTotal\"\r\n      :priceImpact=\"priceImpact\"\r\n      :highPriceImpact=\"highPriceImpact\"\r\n    />\r\n\r\n    <BalAlert\r\n      v-if=\"rektPriceImpact\"\r\n      type=\"error\"\r\n      :title=\"$t('investment.error.rektPriceImpact.title')\"\r\n      :description=\"$t('investment.error.rektPriceImpact.description')\"\r\n      class=\"mt-6 mb-2\"\r\n    />\r\n\r\n    <InvestActions\r\n      :pool=\"pool\"\r\n      :math=\"math\"\r\n      :tokenAddresses=\"tokenAddresses\"\r\n      :disabled=\"rektPriceImpact\"\r\n      class=\"mt-4\"\r\n      @success=\"investmentConfirmed = true\"\r\n      @show-stake-modal=\"handleShowStakeModal\"\r\n    />\r\n  </BalModal>\r\n</template>\r\n","import { logFetchException } from '@/lib/utils/exceptions';\r\nimport { queryBatchSwapTokensIn, SOR } from '@balancer-labs/sdk';\r\nimport { parseUnits } from '@ethersproject/units';\r\nimport { BigNumber } from 'ethers';\r\nimport { computed, Ref, ref, watch } from 'vue';\r\n\r\nimport useNumbers, { FNumFormats } from '@/composables/useNumbers';\r\nimport { usePool } from '@/composables/usePool';\r\nimport usePromiseSequence from '@/composables/usePromiseSequence';\r\nimport useSlippage from '@/composables/useSlippage';\r\nimport { useTokens } from '@/providers/tokens.provider';\r\nimport {\r\n  HIGH_PRICE_IMPACT,\r\n  REKT_PRICE_IMPACT,\r\n} from '@/constants/poolLiquidity';\r\nimport { bnum, isSameAddress } from '@/lib/utils';\r\nimport { balancerContractsService } from '@/services/balancer/contracts/balancer-contracts.service';\r\nimport PoolCalculator from '@/services/pool/calculator/calculator.sevice';\r\nimport { Pool } from '@/services/pool/types';\r\nimport { BatchSwap } from '@/types';\r\nimport { TokenInfo } from '@/types/TokenList';\r\nimport PoolExchange from '@/services/pool/exchange/exchange.service';\r\nimport useWeb3 from '@/services/web3/useWeb3';\r\nimport { captureException } from '@sentry/browser';\r\n\r\nexport type InvestMathResponse = ReturnType<typeof useInvestMath>;\r\n\r\nexport default function useInvestMath(\r\n  pool: Ref<Pool>,\r\n  tokenAddresses: Ref<string[]>,\r\n  amounts: Ref<string[]>,\r\n  useNativeAsset: Ref<boolean>,\r\n  sor: SOR\r\n) {\r\n  /**\r\n   * STATE\r\n   */\r\n  const proportionalAmounts = ref<string[]>([]);\r\n  const loadingData = ref(false);\r\n  const batchSwap = ref<BatchSwap | null>(null);\r\n  const queryBptOut = ref<string>('0');\r\n\r\n  /**\r\n   * COMPOSABLES\r\n   */\r\n  const { toFiat, fNum } = useNumbers();\r\n  const { tokens, getToken, balances, balanceFor, nativeAsset } = useTokens();\r\n  const { minusSlippageScaled } = useSlippage();\r\n  const { getSigner } = useWeb3();\r\n  const {\r\n    managedPoolWithSwappingHalted,\r\n    isComposableStableLikePool,\r\n    isShallowComposableStablePool,\r\n    isDeepPool,\r\n  } = usePool(pool);\r\n  const {\r\n    promises: batchSwapPromises,\r\n    processing: processingBatchSwaps,\r\n    processAll: processBatchSwaps,\r\n  } = usePromiseSequence();\r\n\r\n  /**\r\n   * Services\r\n   */\r\n  const poolCalculator = new PoolCalculator(\r\n    pool,\r\n    tokens,\r\n    balances,\r\n    'join',\r\n    useNativeAsset\r\n  );\r\n  const poolExchange = new PoolExchange(pool);\r\n\r\n  /**\r\n   * COMPUTED\r\n   */\r\n  const tokenCount = computed(() => tokenAddresses.value.length);\r\n\r\n  const poolTokens = computed((): TokenInfo[] =>\r\n    tokenAddresses.value.map(address => getToken(address))\r\n  );\r\n\r\n  // Input amounts can be null so fullAmounts returns amounts for all tokens\r\n  // and zero if null.\r\n  const fullAmounts = computed((): string[] =>\r\n    new Array(tokenCount.value).fill('0').map((_, i) => amounts.value[i] || '0')\r\n  );\r\n\r\n  const fullAmountsScaled = computed((): BigNumber[] =>\r\n    fullAmounts.value.map((amount, i) =>\r\n      parseUnits(amount, poolTokens.value[i].decimals)\r\n    )\r\n  );\r\n\r\n  const batchSwapAmountMap = computed((): Record<string, BigNumber> => {\r\n    const allTokensWithAmounts = fullAmountsScaled.value.map((amount, i) => [\r\n      tokenAddresses.value[i].toLowerCase(),\r\n      amount,\r\n    ]);\r\n    const onlyTokensWithAmounts = allTokensWithAmounts.filter(([, amount]) =>\r\n      (amount as BigNumber).gt(0)\r\n    );\r\n    return Object.fromEntries(onlyTokensWithAmounts);\r\n  });\r\n\r\n  const fiatAmounts = computed((): string[] =>\r\n    fullAmounts.value.map((_, i) => fiatAmount(i))\r\n  );\r\n\r\n  const fiatTotal = computed((): string =>\r\n    fiatAmounts.value.reduce(\r\n      (total, amount) => bnum(total).plus(amount).toString(),\r\n      '0'\r\n    )\r\n  );\r\n\r\n  const fiatTotalLabel = computed((): string =>\r\n    fNum(fiatTotal.value, FNumFormats.fiat)\r\n  );\r\n\r\n  const hasAmounts = computed(() =>\r\n    fullAmounts.value.some(amount => bnum(amount).gt(0))\r\n  );\r\n\r\n  const priceImpact = computed((): number => {\r\n    if (!hasAmounts.value) return 0;\r\n    try {\r\n      return (\r\n        poolCalculator\r\n          .priceImpact(fullAmounts.value, {\r\n            queryBPT: fullBPTOut.value.toString(),\r\n          })\r\n          .toNumber() || 0\r\n      );\r\n    } catch (error) {\r\n      captureException(error);\r\n      console.error(error);\r\n      return 1;\r\n    }\r\n  });\r\n\r\n  const highPriceImpact = computed((): boolean => {\r\n    if (loadingData.value) return false;\r\n    return bnum(priceImpact.value).isGreaterThanOrEqualTo(HIGH_PRICE_IMPACT);\r\n  });\r\n\r\n  const rektPriceImpact = computed((): boolean => {\r\n    if (loadingData.value) return false;\r\n    return bnum(priceImpact.value).isGreaterThanOrEqualTo(REKT_PRICE_IMPACT);\r\n  });\r\n\r\n  const maximized = computed(() =>\r\n    fullAmounts.value.every((amount, i) => {\r\n      if (isSameAddress(tokenAddresses.value[i], nativeAsset.address)) {\r\n        const balance = balanceFor(tokenAddresses.value[i]);\r\n        return (\r\n          amount ===\r\n          bnum(balance).minus(nativeAsset.minTransactionBuffer).toString()\r\n        );\r\n      } else {\r\n        return amount === balanceFor(tokenAddresses.value[i]);\r\n      }\r\n    })\r\n  );\r\n\r\n  const optimized = computed(() => {\r\n    const { send } = poolCalculator.propMax();\r\n    return fullAmounts.value.every((amount, i) => amount === send[i]);\r\n  });\r\n\r\n  const fullBPTOut = computed((): string => {\r\n    let _bptOut: string;\r\n\r\n    if (isDeepPool.value) {\r\n      _bptOut = batchSwap.value\r\n        ? bnum(batchSwap.value.amountTokenOut).abs().toString()\r\n        : '0';\r\n    } else if (\r\n      isShallowComposableStablePool.value &&\r\n      bnum(queryBptOut.value).gt(0)\r\n    ) {\r\n      _bptOut = queryBptOut.value;\r\n    } else {\r\n      if (!hasAmounts.value) return '0';\r\n      _bptOut = poolCalculator\r\n        .exactTokensInForBPTOut(fullAmounts.value)\r\n        .toString();\r\n    }\r\n\r\n    return _bptOut;\r\n  });\r\n\r\n  const bptOut = computed((): string => {\r\n    if (managedPoolWithSwappingHalted.value) return fullBPTOut.value.toString();\r\n    return minusSlippageScaled(fullBPTOut.value);\r\n  });\r\n\r\n  const poolTokenBalances = computed((): string[] =>\r\n    tokenAddresses.value.map(token => balanceFor(token))\r\n  );\r\n\r\n  const hasZeroBalance = computed((): boolean =>\r\n    poolTokenBalances.value.map(balance => bnum(balance).eq(0)).includes(true)\r\n  );\r\n\r\n  const hasNoBalances = computed((): boolean =>\r\n    poolTokenBalances.value.every(balance => bnum(balance).eq(0))\r\n  );\r\n\r\n  const hasAllTokens = computed((): boolean =>\r\n    poolTokenBalances.value.every(balance => bnum(balance).gt(0))\r\n  );\r\n\r\n  const shouldFetchBatchSwap = computed(\r\n    (): boolean => pool.value && isDeepPool.value && hasAmounts.value\r\n  );\r\n\r\n  const supportsPropotionalOptimization = computed(\r\n    (): boolean => !isComposableStableLikePool.value\r\n  );\r\n\r\n  /**\r\n   * METHODS\r\n   */\r\n  function tokenAmount(index: number): string {\r\n    return fullAmounts.value[index] || '0';\r\n  }\r\n\r\n  function fiatAmount(index: number): string {\r\n    return toFiat(tokenAmount(index), tokenAddresses.value[index]);\r\n  }\r\n\r\n  function maximizeAmounts(): void {\r\n    fullAmounts.value.forEach((_, i) => {\r\n      if (isSameAddress(tokenAddresses.value[i], nativeAsset.address)) {\r\n        const balance = balanceFor(tokenAddresses.value[i]);\r\n        amounts.value[i] = bnum(balance).gt(nativeAsset.minTransactionBuffer)\r\n          ? bnum(balance).minus(nativeAsset.minTransactionBuffer).toString()\r\n          : '0';\r\n      } else {\r\n        amounts.value[i] = balanceFor(tokenAddresses.value[i]);\r\n      }\r\n    });\r\n  }\r\n\r\n  function optimizeAmounts(): void {\r\n    const { send } = poolCalculator.propMax();\r\n    amounts.value = [...send];\r\n  }\r\n\r\n  async function getBatchSwap(): Promise<void> {\r\n    loadingData.value = true;\r\n    batchSwap.value = await queryBatchSwapTokensIn(\r\n      sor,\r\n      balancerContractsService.vault.instance as any,\r\n      Object.keys(batchSwapAmountMap.value),\r\n      Object.values(batchSwapAmountMap.value),\r\n      pool.value.address.toLowerCase()\r\n    );\r\n\r\n    loadingData.value = false;\r\n  }\r\n\r\n  /**\r\n   * Fetches expected BPT out using queryJoin and overrides bptOut value derived\r\n   * from JS maths. Only used shallow ComposableStable pools due to issue with\r\n   * cached priceRates.\r\n   *\r\n   * Note: This was originally seen with BAL#208 failures on join calls of the\r\n   * Polygon MaticX pool.\r\n   */\r\n  async function getQueryBptOut() {\r\n    if (!isShallowComposableStablePool.value) return;\r\n    if (!hasAmounts.value) return;\r\n\r\n    try {\r\n      loadingData.value = true;\r\n      const result = await poolExchange.queryJoin(\r\n        getSigner(),\r\n        fullAmounts.value,\r\n        tokenAddresses.value,\r\n        '0'\r\n      );\r\n\r\n      queryBptOut.value = result.bptOut.toString();\r\n      loadingData.value = false;\r\n    } catch (error) {\r\n      logFetchException('Failed to fetch query bptOut', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * WATCHERS\r\n   */\r\n  watch(fullAmounts, async (newAmounts, oldAmounts) => {\r\n    const changedIndex = newAmounts.findIndex(\r\n      (amount, i) => oldAmounts[i] !== amount\r\n    );\r\n\r\n    if (changedIndex >= 0) {\r\n      await getQueryBptOut();\r\n\r\n      if (shouldFetchBatchSwap.value) {\r\n        batchSwapPromises.value.push(getBatchSwap);\r\n        if (!processingBatchSwaps.value) processBatchSwaps();\r\n      }\r\n\r\n      const { send } = poolCalculator.propAmountsGiven(\r\n        fullAmounts.value[changedIndex],\r\n        changedIndex,\r\n        'send'\r\n      );\r\n      proportionalAmounts.value = send;\r\n    }\r\n  });\r\n\r\n  return {\r\n    // computed\r\n    hasAmounts,\r\n    fullAmounts,\r\n    fullAmountsScaled,\r\n    batchSwapAmountMap,\r\n    fiatTotal,\r\n    fiatTotalLabel,\r\n    priceImpact,\r\n    highPriceImpact,\r\n    rektPriceImpact,\r\n    maximized,\r\n    optimized,\r\n    proportionalAmounts,\r\n    batchSwap,\r\n    bptOut,\r\n    hasZeroBalance,\r\n    hasNoBalances,\r\n    hasAllTokens,\r\n    shouldFetchBatchSwap,\r\n    loadingData,\r\n    supportsPropotionalOptimization,\r\n    // methods\r\n    maximizeAmounts,\r\n    optimizeAmounts,\r\n    getBatchSwap,\r\n  };\r\n}\r\n","<script setup lang=\"ts\">\r\nimport { computed, nextTick, onBeforeMount, ref, watch } from 'vue';\r\n// Composables\r\nimport { useI18n } from 'vue-i18n';\r\n\r\nimport WrapStEthLink from '@/components/contextual/pages/pool/invest/WrapStEthLink.vue';\r\nimport StakePreviewModal from '@/components/contextual/pages/pool/staking/StakePreviewModal.vue';\r\n// Components\r\nimport TokenInput from '@/components/inputs/TokenInput/TokenInput.vue';\r\nimport usePoolTransfers from '@/composables/contextual/pool-transfers/usePoolTransfers';\r\nimport {\r\n  isStableLike,\r\n  usePool,\r\n  isDeep,\r\n  tokensListExclBpt,\r\n} from '@/composables/usePool';\r\nimport { useTokens } from '@/providers/tokens.provider';\r\nimport { LOW_LIQUIDITY_THRESHOLD } from '@/constants/poolLiquidity';\r\nimport {\r\n  bnum,\r\n  selectByAddress,\r\n  indexOfAddress,\r\n  isSameAddress,\r\n} from '@/lib/utils';\r\nimport { isRequired } from '@/lib/utils/validations';\r\n// Types\r\nimport { Pool } from '@/services/pool/types';\r\nimport useWeb3 from '@/services/web3/useWeb3';\r\n\r\nimport InvestFormTotals from './components/InvestFormTotals.vue';\r\nimport InvestPreviewModal from './components/InvestPreviewModal/InvestPreviewModal.vue';\r\nimport useInvestMath from './composables/useInvestMath';\r\nimport useInvestState from './composables/useInvestState';\r\n\r\n/**\r\n * TYPES\r\n */\r\nenum NativeAsset {\r\n  wrapped = 'wrapped',\r\n  unwrapped = 'unwrapped',\r\n}\r\n\r\ntype Props = {\r\n  pool: Pool;\r\n};\r\n\r\n/**\r\n * PROPS & EMITS\r\n */\r\nconst props = defineProps<Props>();\r\n\r\n/**\r\n * STATE\r\n */\r\nconst showInvestPreview = ref(false);\r\nconst showStakeModal = ref(false);\r\n\r\n/**\r\n * COMPOSABLES\r\n */\r\nconst { t } = useI18n();\r\nconst { balanceFor, nativeAsset, wrappedNativeAsset } = useTokens();\r\nconst { useNativeAsset } = usePoolTransfers();\r\nconst {\r\n  tokenAddresses,\r\n  amounts,\r\n  validInputs,\r\n  highPriceImpactAccepted,\r\n  resetAmounts,\r\n  sor,\r\n} = useInvestState();\r\n\r\nconst pool = computed(() => props.pool);\r\n\r\nconst investMath = useInvestMath(\r\n  pool,\r\n  tokenAddresses,\r\n  amounts,\r\n  useNativeAsset,\r\n  sor\r\n);\r\n\r\nconst {\r\n  hasAmounts,\r\n  highPriceImpact,\r\n  maximizeAmounts,\r\n  optimizeAmounts,\r\n  proportionalAmounts,\r\n  loadingData,\r\n} = investMath;\r\n\r\nconst { isWalletReady, startConnectWithInjectedProvider, isMismatchedNetwork } =\r\n  useWeb3();\r\n\r\nconst { managedPoolWithSwappingHalted, isWethPool, isStableLikePool } =\r\n  usePool(pool);\r\n\r\n/**\r\n * COMPUTED\r\n */\r\nconst hasValidInputs = computed(\r\n  (): boolean =>\r\n    validInputs.value.every(validInput => validInput === true) &&\r\n    hasAcceptedHighPriceImpact.value\r\n);\r\n\r\nconst hasAcceptedHighPriceImpact = computed((): boolean =>\r\n  highPriceImpact.value ? highPriceImpactAccepted.value : true\r\n);\r\n\r\nconst forceProportionalInputs = computed(\r\n  (): boolean => managedPoolWithSwappingHalted.value\r\n);\r\n\r\nconst poolHasLowLiquidity = computed((): boolean =>\r\n  bnum(props.pool.totalLiquidity).lt(LOW_LIQUIDITY_THRESHOLD)\r\n);\r\n\r\nconst investmentTokens = computed((): string[] => {\r\n  if (isDeep(props.pool)) {\r\n    return props.pool.mainTokens || [];\r\n  }\r\n  return tokensListExclBpt(props.pool);\r\n});\r\n\r\n/**\r\n * METHODS\r\n */\r\nfunction handleAmountChange(value: string, index: number): void {\r\n  amounts.value[index] = value;\r\n\r\n  nextTick(() => {\r\n    if (forceProportionalInputs.value) {\r\n      amounts.value = [...proportionalAmounts.value];\r\n    }\r\n  });\r\n}\r\n\r\nfunction handleAddressChange(newAddress: string): void {\r\n  useNativeAsset.value = isSameAddress(newAddress, nativeAsset.address);\r\n}\r\n\r\nfunction tokenWeight(address: string): number {\r\n  if (isStableLike(props.pool.poolType)) return 0;\r\n  if (!props.pool?.onchain?.tokens) return 0;\r\n\r\n  if (isSameAddress(address, nativeAsset.address)) {\r\n    return (\r\n      selectByAddress(\r\n        props.pool.onchain.tokens,\r\n        wrappedNativeAsset.value.address\r\n      )?.weight || 1\r\n    );\r\n  }\r\n\r\n  return selectByAddress(props.pool.onchain.tokens, address)?.weight || 1;\r\n}\r\n\r\nfunction propAmountFor(index: number): string {\r\n  if (isStableLikePool.value) return '0.0';\r\n\r\n  return bnum(proportionalAmounts.value[index]).gt(0)\r\n    ? proportionalAmounts.value[index]\r\n    : '0.0';\r\n}\r\n\r\nfunction hint(index: number): string {\r\n  return bnum(propAmountFor(index)).gt(0) ? t('proportionalSuggestion') : '';\r\n}\r\n\r\nfunction tokenOptions(index: number): string[] {\r\n  return isSameAddress(\r\n    props.pool.tokensList[index],\r\n    wrappedNativeAsset.value.address\r\n  )\r\n    ? [wrappedNativeAsset.value.address, nativeAsset.address]\r\n    : [];\r\n}\r\n\r\n// If ETH has a higher balance than WETH then use it for the input.\r\nfunction setNativeAssetByBalance(): void {\r\n  const nativeAssetBalance = balanceFor(nativeAsset.address);\r\n  const wrappedNativeAssetBalance = balanceFor(\r\n    wrappedNativeAsset.value.address\r\n  );\r\n\r\n  if (bnum(nativeAssetBalance).gt(wrappedNativeAssetBalance)) {\r\n    setNativeAsset(NativeAsset.unwrapped);\r\n    useNativeAsset.value = true;\r\n  }\r\n}\r\n\r\nfunction setNativeAsset(to: NativeAsset): void {\r\n  const fromAddress =\r\n    to === NativeAsset.wrapped\r\n      ? nativeAsset.address\r\n      : wrappedNativeAsset.value.address;\r\n  const toAddress =\r\n    to === NativeAsset.wrapped\r\n      ? wrappedNativeAsset.value.address\r\n      : nativeAsset.address;\r\n\r\n  const indexOfAsset = indexOfAddress(tokenAddresses.value, fromAddress);\r\n\r\n  if (indexOfAsset >= 0) {\r\n    tokenAddresses.value[indexOfAsset] = toAddress;\r\n  }\r\n}\r\n\r\n/**\r\n * CALLBACKS\r\n */\r\nonBeforeMount(() => {\r\n  resetAmounts();\r\n  tokenAddresses.value = [...investmentTokens.value];\r\n  if (isWethPool.value) setNativeAssetByBalance();\r\n});\r\n\r\n/**\r\n * WATCHERS\r\n */\r\nwatch(useNativeAsset, shouldUseNativeAsset => {\r\n  if (shouldUseNativeAsset) {\r\n    setNativeAsset(NativeAsset.unwrapped);\r\n  } else {\r\n    setNativeAsset(NativeAsset.wrapped);\r\n  }\r\n});\r\n</script>\r\n\r\n<template>\r\n  <div>\r\n    <BalAlert\r\n      v-if=\"forceProportionalInputs\"\r\n      type=\"warning\"\r\n      :title=\"$t('investment.warning.managedPoolSwappingHalted.title')\"\r\n      :description=\"\r\n        $t('investment.warning.managedPoolSwappingHalted.description')\r\n      \"\r\n      class=\"mb-4\"\r\n    />\r\n\r\n    <BalAlert\r\n      v-if=\"poolHasLowLiquidity\"\r\n      type=\"warning\"\r\n      :title=\"$t('investment.warning.lowLiquidity.title')\"\r\n      :description=\"$t('investment.warning.lowLiquidity.description')\"\r\n      class=\"mb-4\"\r\n    />\r\n\r\n    <TokenInput\r\n      v-for=\"(n, i) in tokenAddresses.length\"\r\n      :key=\"i\"\r\n      v-model:address=\"tokenAddresses[i]\"\r\n      v-model:amount=\"amounts[i]\"\r\n      v-model:isValid=\"validInputs[i]\"\r\n      :name=\"tokenAddresses[i]\"\r\n      :weight=\"tokenWeight(tokenAddresses[i])\"\r\n      :hintAmount=\"propAmountFor(i)\"\r\n      :hint=\"hint(i)\"\r\n      class=\"mb-4\"\r\n      fixedToken\r\n      :options=\"tokenOptions(i)\"\r\n      @update:amount=\"handleAmountChange($event, i)\"\r\n      @update:address=\"handleAddressChange($event)\"\r\n    />\r\n\r\n    <InvestFormTotals\r\n      :math=\"investMath\"\r\n      @maximize=\"maximizeAmounts\"\r\n      @optimize=\"optimizeAmounts\"\r\n    />\r\n\r\n    <div\r\n      v-if=\"highPriceImpact\"\r\n      class=\"p-2 pb-2 mt-4 rounded-lg border dark:border-gray-700\"\r\n    >\r\n      <BalCheckbox\r\n        v-model=\"highPriceImpactAccepted\"\r\n        :rules=\"[isRequired($t('priceImpactCheckbox'))]\"\r\n        name=\"highPriceImpactAccepted\"\r\n        size=\"sm\"\r\n        :label=\"$t('priceImpactAccept', [$t('depositing')])\"\r\n      />\r\n    </div>\r\n\r\n    <WrapStEthLink :pool=\"pool\" class=\"mt-4\" />\r\n\r\n    <div class=\"mt-4\">\r\n      <BalBtn\r\n        v-if=\"!isWalletReady\"\r\n        :label=\"$t('connectWallet')\"\r\n        color=\"gradient\"\r\n        block\r\n        @click=\"startConnectWithInjectedProvider\"\r\n      />\r\n      <BalBtn\r\n        v-else\r\n        :label=\"$t('preview')\"\r\n        color=\"gradient\"\r\n        :disabled=\"\r\n          !hasAmounts || !hasValidInputs || isMismatchedNetwork || loadingData\r\n        \"\r\n        block\r\n        @click=\"showInvestPreview = true\"\r\n      />\r\n    </div>\r\n\r\n    <teleport to=\"#modal\">\r\n      <InvestPreviewModal\r\n        v-if=\"showInvestPreview\"\r\n        :pool=\"pool\"\r\n        :math=\"investMath\"\r\n        :tokenAddresses=\"tokenAddresses\"\r\n        @close=\"showInvestPreview = false\"\r\n        @show-stake-modal=\"showStakeModal = true\"\r\n      />\r\n      <StakePreviewModal\r\n        :pool=\"pool\"\r\n        :isVisible=\"showStakeModal\"\r\n        action=\"stake\"\r\n        @close=\"showStakeModal = false\"\r\n      />\r\n    </teleport>\r\n  </div>\r\n</template>\r\n","<script setup lang=\"ts\">\r\nimport {\r\n  TransactionReceipt,\r\n  TransactionResponse,\r\n} from '@ethersproject/abstract-provider';\r\nimport { computed, onUnmounted, ref, toRef } from 'vue';\r\nimport { useI18n } from 'vue-i18n';\r\n\r\nimport BalActionSteps from '@/components/_global/BalActionSteps/BalActionSteps.vue';\r\nimport ConfirmationIndicator from '@/components/web3/ConfirmationIndicator.vue';\r\nimport useEthers from '@/composables/useEthers';\r\nimport { usePool } from '@/composables/usePool';\r\nimport { dateTimeLabelFor } from '@/composables/useTime';\r\nimport useTransactions from '@/composables/useTransactions';\r\nimport useVeBal from '@/composables/useVeBAL';\r\nimport { Pool } from '@/services/pool/types';\r\nimport { TransactionActionInfo } from '@/types/transactions';\r\nimport { useJoinPool } from '@/providers/local/join-pool.provider';\r\nimport useNumbers, { FNumFormats } from '@/composables/useNumbers';\r\nimport { usePoolStaking } from '@/providers/local/pool-staking.provider';\r\n\r\n/**\r\n * TYPES\r\n */\r\ntype Props = {\r\n  pool: Pool;\r\n};\r\n\r\n/**\r\n * PROPS & EMITS\r\n */\r\nconst props = defineProps<Props>();\r\n\r\nconst emit = defineEmits<{\r\n  (e: 'success', value: TransactionReceipt): void;\r\n  (e: 'showStakeModal'): void;\r\n}>();\r\n\r\n/**\r\n * COMPOSABLES\r\n */\r\nconst { t } = useI18n();\r\nconst { fNum } = useNumbers();\r\nconst { addTransaction } = useTransactions();\r\nconst { txListener, getTxConfirmedAt } = useEthers();\r\nconst { lockablePoolId } = useVeBal();\r\nconst { isStakablePool } = usePoolStaking();\r\nconst { poolWeightsLabel } = usePool(toRef(props, 'pool'));\r\nconst {\r\n  rektPriceImpact,\r\n  fiatValueOut,\r\n  join,\r\n  txState,\r\n  resetTxState,\r\n  approvalActions: joinPoolApprovalActions,\r\n} = useJoinPool();\r\n\r\nconst approvalActions = ref(joinPoolApprovalActions.value);\r\n\r\n/**\r\n * COMPUTED\r\n */\r\nconst actions = computed((): TransactionActionInfo[] => [\r\n  ...approvalActions.value,\r\n  {\r\n    label: t('addLiquidity'),\r\n    loadingLabel: t('investment.preview.loadingLabel.investment'),\r\n    confirmingLabel: t('confirming'),\r\n    action: submit,\r\n    stepTooltip: t('investmentTooltip'),\r\n  },\r\n]);\r\n\r\n/**\r\n * METHODS\r\n */\r\nasync function handleTransaction(tx): Promise<void> {\r\n  addTransaction({\r\n    id: tx.hash,\r\n    type: 'tx',\r\n    action: 'invest',\r\n    summary: t('transactionSummary.investInPool', [\r\n      fNum(fiatValueOut.value, FNumFormats.fiat),\r\n      poolWeightsLabel(props.pool),\r\n    ]),\r\n    details: {\r\n      total: fNum(fiatValueOut.value, FNumFormats.fiat),\r\n      pool: props.pool,\r\n    },\r\n  });\r\n\r\n  await txListener(tx, {\r\n    onTxConfirmed: async (receipt: TransactionReceipt) => {\r\n      emit('success', receipt);\r\n      txState.receipt = receipt;\r\n\r\n      const confirmedAt = await getTxConfirmedAt(receipt);\r\n      txState.confirmedAt = dateTimeLabelFor(confirmedAt);\r\n      txState.confirmed = true;\r\n      txState.confirming = false;\r\n    },\r\n    onTxFailed: () => {\r\n      console.error('Invest failed');\r\n      txState.confirming = false;\r\n    },\r\n  });\r\n}\r\n\r\nonUnmounted(() => {\r\n  // Reset tx state after Invest Modal is closed. Ready for another Invest transaction\r\n  resetTxState();\r\n});\r\n\r\nasync function submit(): Promise<TransactionResponse> {\r\n  txState.init = true;\r\n  try {\r\n    const tx = await join();\r\n\r\n    txState.confirming = true;\r\n\r\n    handleTransaction(tx);\r\n    return tx;\r\n  } catch (error) {\r\n    txState.confirming = false;\r\n    throw new Error('Failed to submit transaction.', {\r\n      cause: error,\r\n    });\r\n  } finally {\r\n    txState.init = false;\r\n  }\r\n}\r\n</script>\r\n\r\n<template>\r\n  <transition>\r\n    <BalActionSteps\r\n      v-if=\"!txState.confirmed || !txState.receipt\"\r\n      :actions=\"actions\"\r\n      :disabled=\"rektPriceImpact\"\r\n    />\r\n    <div v-else>\r\n      <ConfirmationIndicator :txReceipt=\"txState.receipt\" />\r\n      <BalBtn\r\n        v-if=\"lockablePoolId === pool.id\"\r\n        tag=\"router-link\"\r\n        :to=\"{ name: 'get-vebal' }\"\r\n        color=\"gradient\"\r\n        block\r\n        class=\"flex mt-2\"\r\n      >\r\n        <StarsIcon class=\"mr-2 h-5 text-orange-300\" />{{ $t('lockToGetVeBAL') }}\r\n      </BalBtn>\r\n      <BalBtn\r\n        v-else-if=\"isStakablePool\"\r\n        color=\"gradient\"\r\n        block\r\n        class=\"flex mt-2\"\r\n        @click=\"emit('showStakeModal')\"\r\n      >\r\n        <StarsIcon class=\"mr-2 h-5 text-orange-300\" />{{\r\n          $t('stakeToGetExtra')\r\n        }}\r\n      </BalBtn>\r\n\r\n      <BalBtn\r\n        tag=\"router-link\"\r\n        :to=\"{ name: 'pool', params: { id: pool.id } }\"\r\n        color=\"gray\"\r\n        outline\r\n        block\r\n        class=\"mt-2\"\r\n      >\r\n        {{ $t('returnToPool') }}\r\n      </BalBtn>\r\n    </div>\r\n  </transition>\r\n</template>\r\n","<script setup lang=\"ts\">\r\nimport { computed, ref } from 'vue';\r\nimport { useI18n } from 'vue-i18n';\r\n\r\nimport useNumbers from '@/composables/useNumbers';\r\nimport { useTokens } from '@/providers/tokens.provider';\r\nimport { bnum } from '@/lib/utils';\r\nimport { Pool } from '@/services/pool/types';\r\nimport { TokenInfoMap } from '@/types/TokenList';\r\n\r\nimport InvestSummary from './components/InvestSummary.vue';\r\nimport TokenAmounts from '@/components/forms/pool_actions/shared/TokenAmounts.vue';\r\nimport InvestActionsV2 from './components/InvestActionsV2.vue';\r\nimport { useJoinPool } from '@/providers/local/join-pool.provider';\r\nimport { useIntervalFn } from '@vueuse/shared';\r\nimport { oneSecondInMs } from '@/composables/useTime';\r\n\r\n/**\r\n * TYPES\r\n */\r\ntype Props = {\r\n  pool: Pool;\r\n};\r\n\r\ntype AmountMap = {\r\n  [address: string]: string;\r\n};\r\n\r\n/**\r\n * PROPS & EMITS\r\n */\r\nconst props = defineProps<Props>();\r\n\r\nconst emit = defineEmits<{\r\n  (e: 'close'): void;\r\n  (e: 'showStakeModal'): void;\r\n}>();\r\n\r\n/**\r\n * STATE\r\n */\r\nconst investmentConfirmed = ref(false);\r\n\r\n/**\r\n * COMPOSABLES\r\n */\r\nconst { t } = useI18n();\r\nconst { getToken } = useTokens();\r\nconst { toFiat } = useNumbers();\r\nconst {\r\n  isSingleAssetJoin,\r\n  amountsIn,\r\n  bptOut,\r\n  fiatValueIn,\r\n  fiatValueOut,\r\n  priceImpact,\r\n  highPriceImpact,\r\n  rektPriceImpact,\r\n  isLoadingQuery,\r\n  txInProgress,\r\n  queryJoinQuery,\r\n  missingPricesIn,\r\n  resetAmounts,\r\n} = useJoinPool();\r\n\r\n/**\r\n * COMPUTED\r\n */\r\nconst title = computed((): string =>\r\n  investmentConfirmed.value\r\n    ? t('investment.preview.titles.confirmed')\r\n    : t('investment.preview.titles.default')\r\n);\r\n\r\nconst showTokensOut = computed<boolean>(\r\n  () => !!Object.keys(tokenOutMap.value).length\r\n);\r\n\r\nconst amountInMap = computed((): AmountMap => {\r\n  const amountMap = {};\r\n  amountsIn.value.forEach(amountIn => {\r\n    amountMap[amountIn.address] = amountIn.value;\r\n  });\r\n  return amountMap;\r\n});\r\n\r\nconst amountOutMap = computed((): AmountMap => {\r\n  const amountMap = {\r\n    [props.pool.address]: bptOut.value,\r\n  };\r\n  return amountMap;\r\n});\r\n\r\nconst tokenInMap = computed((): TokenInfoMap => {\r\n  const tokenMap = {};\r\n  Object.keys(amountInMap.value).forEach(address => {\r\n    tokenMap[address] = getToken(address);\r\n  });\r\n  return tokenMap;\r\n});\r\n\r\nconst tokenOutMap = computed((): TokenInfoMap => {\r\n  const tokenMap = {\r\n    [props.pool.address]: getToken(props.pool.address),\r\n  };\r\n  return tokenMap;\r\n});\r\n\r\nconst fiatAmountInMap = computed((): AmountMap => {\r\n  const fiatAmountMap = {};\r\n  Object.keys(amountInMap.value).forEach(address => {\r\n    fiatAmountMap[address] = toFiat(amountInMap.value[address], address);\r\n  });\r\n  return fiatAmountMap;\r\n});\r\n\r\nconst fiatAmountOutMap = computed((): AmountMap => {\r\n  if (!fiatValueOut.value) return {};\r\n  const fiatAmountMap = {\r\n    [props.pool.address]: fiatValueOut.value,\r\n  };\r\n  return fiatAmountMap;\r\n});\r\n\r\nconst fiatTotalOut = computed((): string =>\r\n  Object.values(fiatAmountOutMap.value).reduce(\r\n    (total, amount) => bnum(total).plus(amount).toString(),\r\n    '0'\r\n  )\r\n);\r\n\r\n/**\r\n * METHODS\r\n */\r\nfunction handleClose(): void {\r\n  if (investmentConfirmed.value) {\r\n    resetAmounts();\r\n    investmentConfirmed.value = false;\r\n  }\r\n  emit('close');\r\n}\r\n\r\nfunction handleShowStakeModal() {\r\n  handleClose();\r\n  emit('showStakeModal');\r\n}\r\n\r\n/**\r\n * WATCHERS\r\n */\r\n// Every 10s we should re-trigger queryJoin in case the expected output\r\n// has changed as a result of pool state changing. This should only happen in\r\n// the preview modal, not at the JoinPoolProvider level.\r\n//\r\n// Originally we did it every block but this is overfetching on short blocktime\r\n// networks like Polygon.\r\nuseIntervalFn(() => {\r\n  if (!isLoadingQuery.value && !txInProgress.value) {\r\n    queryJoinQuery.refetch();\r\n  }\r\n}, oneSecondInMs * 10);\r\n</script>\r\n\r\n<template>\r\n  <BalModal show :fireworks=\"investmentConfirmed\" @close=\"handleClose\">\r\n    <template #header>\r\n      <div class=\"flex items-center\">\r\n        <BalCircle\r\n          v-if=\"investmentConfirmed\"\r\n          size=\"8\"\r\n          color=\"green\"\r\n          class=\"mr-2 text-white\"\r\n        >\r\n          <BalIcon name=\"check\" />\r\n        </BalCircle>\r\n        <h4>\r\n          {{ title }}\r\n        </h4>\r\n      </div>\r\n    </template>\r\n\r\n    <TokenAmounts\r\n      :title=\"$t('investment.preview.titles.tokenIn')\"\r\n      :amountMap=\"amountInMap\"\r\n      :tokenMap=\"tokenInMap\"\r\n      :fiatAmountMap=\"fiatAmountInMap\"\r\n      :fiatTotal=\"fiatValueIn\"\r\n      :hideAmountShare=\"isSingleAssetJoin\"\r\n    />\r\n    <TokenAmounts\r\n      v-if=\"showTokensOut\"\r\n      showZeroAmounts\r\n      :title=\"$t('investment.preview.titles.tokenOut')\"\r\n      class=\"mt-4\"\r\n      :amountMap=\"amountOutMap\"\r\n      :tokenMap=\"tokenOutMap\"\r\n      :fiatAmountMap=\"fiatAmountOutMap\"\r\n      :fiatTotal=\"fiatTotalOut\"\r\n      hideAmountShare\r\n    />\r\n\r\n    <BalAlert\r\n      v-if=\"missingPricesIn\"\r\n      type=\"warning\"\r\n      :title=\"$t('noPriceInfo')\"\r\n      class=\"mt-4\"\r\n      block\r\n    />\r\n\r\n    <InvestSummary\r\n      :pool=\"pool\"\r\n      :fiatTotal=\"missingPricesIn ? '-' : fiatValueIn\"\r\n      :priceImpact=\"priceImpact\"\r\n      :highPriceImpact=\"highPriceImpact\"\r\n    />\r\n\r\n    <BalAlert\r\n      v-if=\"rektPriceImpact\"\r\n      type=\"error\"\r\n      :title=\"$t('investment.error.rektPriceImpact.title')\"\r\n      :description=\"$t('investment.error.rektPriceImpact.description')\"\r\n      class=\"mt-6 mb-2\"\r\n    />\r\n\r\n    <InvestActionsV2\r\n      :pool=\"pool\"\r\n      class=\"mt-4\"\r\n      @success=\"investmentConfirmed = true\"\r\n      @show-stake-modal=\"handleShowStakeModal\"\r\n    />\r\n  </BalModal>\r\n</template>\r\n","<script setup lang=\"ts\">\r\nimport { computed } from 'vue';\r\n\r\nimport useNumbers, { FNumFormats } from '@/composables/useNumbers';\r\nimport { useJoinPool } from '@/providers/local/join-pool.provider';\r\n\r\n/**\r\n * COMPOSABLES\r\n */\r\nconst { highPriceImpact, isLoadingQuery, priceImpact } = useJoinPool();\r\nconst { fNum } = useNumbers();\r\n\r\n/**\r\n * COMPUTED\r\n */\r\nconst priceImpactClasses = computed(() => ({\r\n  'dark:bg-gray-800': !highPriceImpact.value,\r\n  'bg-red-500 dark:bg-red-500 text-white divide-red-400': highPriceImpact.value,\r\n}));\r\n</script>\r\n\r\n<template>\r\n  <div class=\"data-table\">\r\n    <div :class=\"['data-table-row price-impact-row', priceImpactClasses]\">\r\n      <div class=\"p-2\">\r\n        {{ $t('priceImpact') }}\r\n      </div>\r\n      <div class=\"data-table-number-col\">\r\n        <div class=\"flex\">\r\n          <span v-if=\"!isLoadingQuery\">\r\n            {{ fNum(priceImpact, FNumFormats.percent) }}\r\n          </span>\r\n          <BalLoadingBlock v-else class=\"w-10\" />\r\n\r\n          <BalTooltip :text=\"$t('customAmountsTip')\">\r\n            <template #activator>\r\n              <BalIcon\r\n                v-if=\"highPriceImpact\"\r\n                name=\"alert-triangle\"\r\n                size=\"xs\"\r\n                class=\"-mb-px ml-1\"\r\n              />\r\n              <BalIcon\r\n                v-else\r\n                name=\"info\"\r\n                size=\"xs\"\r\n                class=\"-mb-px ml-1 text-gray-400\"\r\n              />\r\n            </template>\r\n          </BalTooltip>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.data-table {\r\n  @apply border dark:border-gray-900 rounded-lg divide-y dark:divide-gray-900;\r\n}\r\n\r\n.data-table-row {\r\n  @apply grid grid-cols-4 items-center;\r\n  @apply divide-x dark:divide-gray-900;\r\n}\r\n\r\n.data-table-row:first-child {\r\n  @apply rounded-t-lg;\r\n}\r\n\r\n.data-table-number-col {\r\n  @apply col-span-3 p-2 flex items-center justify-between;\r\n}\r\n\r\n.total-row {\r\n  @apply text-lg font-bold dark:bg-gray-800;\r\n}\r\n\r\n.price-impact-row {\r\n  @apply text-sm rounded-b-lg;\r\n}\r\n</style>\r\n","<script setup lang=\"ts\">\r\nimport { computed } from 'vue';\r\nimport { useI18n } from 'vue-i18n';\r\nimport { formatWordListAsSentence } from '@/lib/utils';\r\nimport { useTokens } from '@/providers/tokens.provider';\r\n\r\n/**\r\n * TYPES\r\n */\r\ntype Props = {\r\n  poolTokensWithoutBalance: string[];\r\n  poolTokensWithBalance: string[];\r\n  showSingleTokenSuggestion: boolean;\r\n};\r\n\r\n/**\r\n * PROPS & EMITS\r\n */\r\nconst props = defineProps<Props>();\r\n\r\n/**\r\n * COMPOSABLES\r\n */\r\nconst { t } = useI18n();\r\nconst { getToken } = useTokens();\r\n/**\r\n * COMPUTED\r\n */\r\nconst tokenSymbolsWithoutBalance = computed(() => {\r\n  return props.poolTokensWithoutBalance.map(\r\n    address => getToken(address)?.symbol\r\n  );\r\n});\r\nconst tokenSymbolsWithoutBalanceMsg = computed(() => {\r\n  return formatWordListAsSentence(tokenSymbolsWithoutBalance.value, t);\r\n});\r\n\r\nconst description = computed(() => {\r\n  const singleTokenHint = props.showSingleTokenSuggestion\r\n    ? ` \\n\\n${t('investment.warning.noPoolTokensToJoinWith.paragraph2')}`\r\n    : '';\r\n  return (\r\n    t('investment.warning.noPoolTokensToJoinWith.paragraph1') + singleTokenHint\r\n  );\r\n});\r\n</script>\r\n\r\n<template>\r\n  <BalAlert\r\n    v-if=\"!poolTokensWithBalance.length\"\r\n    class=\"mb-4\"\r\n    :type=\"'warning'\"\r\n    :title=\"t('investment.warning.noPoolTokensToJoinWith.title')\"\r\n    :description=\"description\"\r\n  ></BalAlert>\r\n  <div v-else-if=\"tokenSymbolsWithoutBalance.length\" class=\"italic-warning\">\r\n    {{ t('investment.warning.noBalanceSomeTokens') }}:\r\n    {{ tokenSymbolsWithoutBalanceMsg }}\r\n  </div>\r\n</template>\r\n<style scoped>\r\n.italic-warning {\r\n  @apply mb-4 text-sm text-gray-600 dark:text-gray-400;\r\n\r\n  font-variation-settings: 'slnt' -10;\r\n}\r\n</style>\r\n\r\n","<script setup lang=\"ts\">\r\nimport { computed, onBeforeMount, ref, toRef, watch } from 'vue';\r\n\r\nimport WrapStEthLink from '@/components/contextual/pages/pool/invest/WrapStEthLink.vue';\r\nimport StakePreviewModal from '@/components/contextual/pages/pool/staking/StakePreviewModal.vue';\r\nimport TokenInput from '@/components/inputs/TokenInput/TokenInput.vue';\r\nimport { usePool } from '@/composables/usePool';\r\nimport { LOW_LIQUIDITY_THRESHOLD } from '@/constants/poolLiquidity';\r\nimport { bnum, forChange } from '@/lib/utils';\r\nimport { isRequired } from '@/lib/utils/validations';\r\nimport { Pool } from '@/services/pool/types';\r\nimport useWeb3 from '@/services/web3/useWeb3';\r\nimport useVeBal from '@/composables/useVeBAL';\r\n\r\nimport InvestPreviewModalV2 from './components/InvestPreviewModal/InvestPreviewModalV2.vue';\r\nimport InvestFormTotalsV2 from './components/InvestFormTotalsV2.vue';\r\n\r\nimport useMyWalletTokens from '@/composables/useMyWalletTokens';\r\nimport MissingPoolTokensAlert from './components/MissingPoolTokensAlert.vue';\r\nimport { useTokens } from '@/providers/tokens.provider';\r\nimport { isEqual } from 'lodash';\r\nimport { useJoinPool } from '@/providers/local/join-pool.provider';\r\n\r\n/**\r\n * TYPES\r\n */\r\ntype Props = {\r\n  pool: Pool;\r\n};\r\n\r\n/**\r\n * PROPS & EMITS\r\n */\r\nconst props = defineProps<Props>();\r\n\r\n/**\r\n * STATE\r\n */\r\nconst showInvestPreview = ref(false);\r\nconst showStakeModal = ref(false);\r\n\r\n/**\r\n * COMPOSABLES\r\n */\r\nconst { managedPoolWithSwappingHalted, isDeepPool, isPreMintedBptPool } =\r\n  usePool(toRef(props, 'pool'));\r\nconst { veBalTokenInfo } = useVeBal();\r\nconst { isWalletReady, startConnectWithInjectedProvider, isMismatchedNetwork } =\r\n  useWeb3();\r\nconst { wrappedNativeAsset } = useTokens();\r\nconst {\r\n  isLoadingQuery,\r\n  isSingleAssetJoin,\r\n  amountsIn,\r\n  highPriceImpact,\r\n  highPriceImpactAccepted,\r\n  hasValidInputs,\r\n  hasAmountsIn,\r\n  queryError,\r\n  setAmountsIn,\r\n  addTokensIn,\r\n} = useJoinPool();\r\n\r\nconst { poolTokensWithBalance, isLoadingBalances, poolTokensWithoutBalance } =\r\n  useMyWalletTokens({\r\n    pool: props.pool,\r\n    includeNativeAsset: true,\r\n  });\r\n\r\n/**\r\n * COMPUTED\r\n */\r\nconst forceProportionalInputs = computed(\r\n  (): boolean => managedPoolWithSwappingHalted.value\r\n);\r\n\r\nconst poolHasLowLiquidity = computed((): boolean =>\r\n  bnum(props.pool.totalLiquidity).lt(LOW_LIQUIDITY_THRESHOLD)\r\n);\r\n\r\nasync function initializeTokensForm(isSingleAssetJoin: boolean) {\r\n  setAmountsIn([]);\r\n  if (isSingleAssetJoin) {\r\n    addTokensIn([wrappedNativeAsset.value.address]);\r\n  } else {\r\n    await forChange(isLoadingBalances, false);\r\n    addTokensIn(poolTokensWithBalance.value);\r\n  }\r\n}\r\n\r\n/**\r\n * CALLBACKS\r\n */\r\nonBeforeMount(() => {\r\n  initializeTokensForm(isSingleAssetJoin.value);\r\n});\r\n\r\n/**\r\n * WATCHERS\r\n */\r\nwatch(\r\n  [isSingleAssetJoin, poolTokensWithBalance],\r\n  (\r\n    [isSingleAsset, newPoolTokensWithBalance],\r\n    [prevIsSingleAsset, prevPoolTokensWithBalance]\r\n  ) => {\r\n    // Initialize token form if token balances change (ie. After investing, transaction confirmed or when account changes)\r\n    // only if preview modal is not open\r\n    if (!showInvestPreview.value) {\r\n      const hasTabChanged = prevIsSingleAsset !== isSingleAsset;\r\n      const hasUserTokensChanged = !isEqual(\r\n        prevPoolTokensWithBalance,\r\n        newPoolTokensWithBalance\r\n      );\r\n      if (hasUserTokensChanged || hasTabChanged) {\r\n        initializeTokensForm(isSingleAsset);\r\n      }\r\n    }\r\n  }\r\n);\r\n</script>\r\n\r\n<template>\r\n  <div>\r\n    <BalAlert\r\n      v-if=\"forceProportionalInputs\"\r\n      type=\"warning\"\r\n      :title=\"$t('investment.warning.managedPoolSwappingHalted.title')\"\r\n      :description=\"\r\n        $t('investment.warning.managedPoolSwappingHalted.description')\r\n      \"\r\n      class=\"mb-5\"\r\n    />\r\n\r\n    <BalAlert\r\n      v-if=\"poolHasLowLiquidity\"\r\n      type=\"warning\"\r\n      :title=\"$t('investment.warning.lowLiquidity.title')\"\r\n      :description=\"$t('investment.warning.lowLiquidity.description')\"\r\n      class=\"mb-5\"\r\n    />\r\n    <TokenInput\r\n      v-for=\"amountIn in amountsIn\"\r\n      :key=\"amountIn.address\"\r\n      v-model:isValid=\"amountIn.valid\"\r\n      v-model:address=\"amountIn.address\"\r\n      v-model:amount=\"amountIn.value\"\r\n      :name=\"amountIn.address\"\r\n      class=\"mb-4\"\r\n      :fixedToken=\"!isSingleAssetJoin\"\r\n      :excludedTokens=\"[veBalTokenInfo?.address, pool.address]\"\r\n    />\r\n\r\n    <MissingPoolTokensAlert\r\n      v-if=\"!isSingleAssetJoin\"\r\n      :showSingleTokenSuggestion=\"isDeepPool && isPreMintedBptPool\"\r\n      :poolTokensWithBalance=\"poolTokensWithBalance\"\r\n      :poolTokensWithoutBalance=\"poolTokensWithoutBalance\"\r\n    />\r\n\r\n    <InvestFormTotalsV2 />\r\n\r\n    <div\r\n      v-if=\"highPriceImpact\"\r\n      class=\"p-2 pb-2 mt-5 rounded-lg border dark:border-gray-700 high-price-impact\"\r\n    >\r\n      <BalCheckbox\r\n        v-model=\"highPriceImpactAccepted\"\r\n        :rules=\"[isRequired($t('priceImpactCheckbox'))]\"\r\n        name=\"highPriceImpactAccepted\"\r\n        size=\"sm\"\r\n        :label=\"$t('priceImpactAccept', [$t('depositing')])\"\r\n      />\r\n    </div>\r\n\r\n    <WrapStEthLink :pool=\"pool\" class=\"mt-5\" />\r\n\r\n    <BalAlert\r\n      v-if=\"queryError\"\r\n      type=\"error\"\r\n      :title=\"$t('thereWasAnError')\"\r\n      :description=\"queryError\"\r\n      class=\"mt-4\"\r\n      block\r\n    />\r\n\r\n    <div class=\"mt-4\">\r\n      <BalBtn\r\n        v-if=\"!isWalletReady\"\r\n        :label=\"$t('connectWallet')\"\r\n        color=\"gradient\"\r\n        block\r\n        @click=\"startConnectWithInjectedProvider\"\r\n      />\r\n      <BalBtn\r\n        v-else\r\n        :label=\"$t('preview')\"\r\n        color=\"gradient\"\r\n        :disabled=\"\r\n          !hasAmountsIn ||\r\n          !hasValidInputs ||\r\n          isMismatchedNetwork ||\r\n          isLoadingQuery ||\r\n          !!queryError\r\n        \"\r\n        block\r\n        @click=\"showInvestPreview = true\"\r\n      />\r\n    </div>\r\n\r\n    <teleport to=\"#modal\">\r\n      <InvestPreviewModalV2\r\n        v-if=\"showInvestPreview\"\r\n        :pool=\"pool\"\r\n        @close=\"showInvestPreview = false\"\r\n        @show-stake-modal=\"showStakeModal = true\"\r\n      />\r\n      <StakePreviewModal\r\n        :pool=\"pool\"\r\n        :isVisible=\"showStakeModal\"\r\n        action=\"stake\"\r\n        @close=\"showStakeModal = false\"\r\n      />\r\n    </teleport>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.high-price-impact:has(.bal-checkbox-error) {\r\n  @apply border-red-500 bg-red-50 dark:bg-red-500 bg-opacity-50 dark:bg-opacity-5 transition-colors;\r\n}\r\n</style>\r\n","<script setup lang=\"ts\">\r\nimport { computed, onMounted, watch } from 'vue';\r\nimport InvestForm from '@/components/forms/pool_actions/InvestForm/InvestForm.vue';\r\nimport SwapSettingsPopover, {\r\n  SwapSettingsContext,\r\n} from '@/components/popovers/SwapSettingsPopover.vue';\r\nimport { usePool } from '@/composables/usePool';\r\nimport { configService } from '@/services/config/config.service';\r\nimport InvestFormV2 from '@/components/forms/pool_actions/InvestForm/InvestFormV2.vue';\r\nimport useInvestPageTabs, {\r\n  Tab,\r\n  tabs,\r\n} from '@/composables/pools/useInvestPageTabs';\r\nimport { useJoinPool } from '@/providers/local/join-pool.provider';\r\nimport { Pool } from '@balancer-labs/sdk';\r\n\r\ntype Props = {\r\n  pool: Pool;\r\n};\r\n\r\n/**\r\n * PROPS & EMITS\r\n */\r\nconst props = defineProps<Props>();\r\n\r\n/**\r\n * COMPUTED\r\n */\r\nconst pool = computed(() => props.pool);\r\n\r\n/**\r\n * COMPOSABLES\r\n */\r\nconst { network } = configService;\r\nconst { activeTab, resetTabs } = useInvestPageTabs();\r\nconst { isDeepPool, isPreMintedBptPool } = usePool(pool);\r\n\r\nconst { setIsSingleAssetJoin } = useJoinPool();\r\n\r\nwatch(activeTab, value => {\r\n  setIsSingleAssetJoin(value === Tab.SingleToken);\r\n});\r\n\r\n/**\r\n * CALLBACKS\r\n */\r\nonMounted(() => resetTabs());\r\n</script>\r\n\r\n<template>\r\n  <BalCard shadow=\"xl\" exposeOverflow noBorder>\r\n    <template #header>\r\n      <div class=\"w-full\">\r\n        <div class=\"text-xs leading-none text-secondary\">\r\n          {{ network.chainName }}\r\n        </div>\r\n        <div class=\"flex justify-between items-center\">\r\n          <h4>{{ $t('addLiquidity') }}</h4>\r\n          <SwapSettingsPopover :context=\"SwapSettingsContext.invest\" />\r\n        </div>\r\n        <BalTabs\r\n          v-if=\"isDeepPool && isPreMintedBptPool\"\r\n          v-model=\"activeTab\"\r\n          :tabs=\"tabs\"\r\n          class=\"p-0 m-0 -mb-px whitespace-nowrap\"\r\n          noPad\r\n        />\r\n      </div>\r\n    </template>\r\n    <template v-if=\"isDeepPool\">\r\n      <InvestFormV2 :pool=\"pool\" />\r\n    </template>\r\n    <template v-else>\r\n      <InvestForm :pool=\"pool\" />\r\n    </template>\r\n  </BalCard>\r\n</template>\r\n\r\n","<script setup lang=\"ts\">\r\nimport { usePool } from '@/composables/usePool';\r\nimport useBreakpoints from '@/composables/useBreakpoints';\r\nimport InvestPageMyWallet from './InvestPageMyWallet.vue';\r\nimport InvestPageAccordion from './InvestPageAccordion.vue';\r\nimport InvestPageInvestBlock from './InvestPageInvestBlock.vue';\r\nimport { Pool } from '@balancer-labs/sdk';\r\nimport { computed } from 'vue';\r\nimport { provideJoinPool } from '@/providers/local/join-pool.provider';\r\n\r\ntype Props = {\r\n  pool: Pool;\r\n};\r\n\r\n/**\r\n * PROPS & EMITS\r\n */\r\nconst props = defineProps<Props>();\r\n\r\n/**\r\n * COMPUTED\r\n */\r\nconst pool = computed(() => props.pool);\r\n/**\r\n * COMPOSABLES\r\n */\r\nconst { isDeepPool } = usePool(pool);\r\nconst { upToLargeBreakpoint } = useBreakpoints();\r\n\r\nprovideJoinPool(pool);\r\n</script>\r\n\r\n<template>\r\n  <div class=\"invest-page-layout-grid\">\r\n    <div v-if=\"!upToLargeBreakpoint\" class=\"col-span-5\">\r\n      <InvestPageMyWallet :pool=\"pool\" />\r\n    </div>\r\n\r\n    <div class=\"col-span-7\">\r\n      <InvestPageInvestBlock :pool=\"pool\" />\r\n    </div>\r\n\r\n    <InvestPageAccordion\r\n      v-if=\"upToLargeBreakpoint\"\r\n      :pool=\"pool\"\r\n      class=\"mt-4\"\r\n      :isDeepPool=\"isDeepPool\"\r\n    ></InvestPageAccordion>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.invest-page-layout-grid {\r\n  @apply grid grid-cols-1 lg:grid-cols-12 gap-y-8 gap-x-0 lg:gap-x-8;\r\n}\r\n</style>\r\n","<script setup lang=\"ts\">\r\nimport usePoolTransfers from '@/composables/contextual/pool-transfers/usePoolTransfers';\r\nimport InvestPage from '@/components/contextual/pages/pool/invest/InvestPage.vue';\r\nimport { useIntervalFn } from '@vueuse/core';\r\nimport { oneSecondInMs } from '@/composables/useTime';\r\nimport { providePoolStaking } from '@/providers/local/pool-staking.provider';\r\nimport { useRoute } from 'vue-router';\r\nimport usePoolTransfersGuard from '@/composables/contextual/pool-transfers/usePoolTransfersGuard';\r\nimport { hasFetchedPoolsForSor } from '@/lib/balancer.sdk';\r\nimport { usePool } from '@/composables/usePool';\r\n\r\n/**\r\n * STATE\r\n */\r\nconst route = useRoute();\r\nconst poolId = (route.params.id as string).toLowerCase();\r\n\r\n/**\r\n * PROVIDERS\r\n */\r\nprovidePoolStaking(poolId);\r\nusePoolTransfersGuard();\r\n\r\n/**\r\n * COMPOSABLES\r\n */\r\nconst { pool, poolDecorationQuery, loadingPool, transfersAllowed } =\r\n  usePoolTransfers();\r\nconst { isDeepPool } = usePool(pool);\r\n\r\n/**\r\n * COMPUTED\r\n */\r\n// We only need to wait for SOR if it's a deep pool.\r\nconst isLoadingSor = computed(\r\n  (): boolean => isDeepPool.value && !hasFetchedPoolsForSor.value\r\n);\r\n\r\nconst isLoading = computed(\r\n  (): boolean =>\r\n    loadingPool.value && !transfersAllowed.value && isLoadingSor.value\r\n);\r\n\r\n// Instead of refetching pool data on every block, we refetch every 20s to prevent\r\n// overfetching a request on short blocktime networks like Polygon.\r\nuseIntervalFn(poolDecorationQuery.refetch, oneSecondInMs * 20);\r\n</script>\r\n\r\n<template>\r\n  <div class=\"px-4 lg:px-0 mx-auto max-w-3xl\">\r\n    <BalLoadingBlock v-if=\"isLoading || !pool\" class=\"h-96\" />\r\n    <InvestPage v-else :pool=\"pool\" />\r\n  </div>\r\n</template>\r\n\r\n"],"names":["state","reactive","sor","getBalancer","resetAmounts","useInvestState","toRefs","_sfc_render","_ctx","_cache","useNativeBalance","hasBalance","nativeAsset","balanceFor","useTokens","nativeCurrency","configService","appNetworkConfig","isWalletReady","useWeb3","nativeBalance","computed","useMyWalletTokens","excludedTokens","pool","includeNativeAsset","balances","isLoadingBalances","poolRef","isWethPool","isDeepPool","usePool","isExcludedToken","tokenAddress","excludedAddress","isSameAddress","tokensWithBalance","take","_includeNativeAsset","poolTokenAddresses","nodes","tokenTreeNodes","removeAddress","tokensList","poolTokensWithBalance","token","includesAddress","poolTokensWithoutBalance","poolToken","notPoolTokensWithBalance","startConnectWithInjectedProvider","upToLargeBreakpoint","useBreakpoints","setTokenInAddress","useSwapState","networkName","t","useI18n","isPreMintedBptPool","toRef","props","noNativeCurrencyMessage","noNativeCurrencyMessageEthereum","noTokensMessage","hasNativeBalance","handleAssetClick","isPoolToken","emit","Tab","Tab2","tabs","i18n","activeTab","ref","resetTabs","useInvestPageTabs","SwapJoinHandler","sdk","gasPriceService","__publicField","params","signer","slippageBsp","userAddress","swap","options","kind","swaps","assets","funds","limits","vaultService","amountsIn","tokensIn","amountIn","tokenIn","bnum","hasFetchedPoolsForSor","fetchPoolsForSor","safeAmount","overflowProtected","bnumAmount","parseFixed","gasPrice","bptOut","formatFixed","_a","priceImpact","amountOut","marketSp","price","gasPriceParams","BigNumber","swapInfo","maxSlippage","deadline","getTimestampSecondsFromNow","NATIVE_ASSET_ADDRESS","parseUnits","address","POOLS","GeneralisedJoinHandler","txBuilder","TransactionBuilder","to","encodedCall","relayerSignature","approvalActions","evmAmountsIn","value","selectByAddress","tokenAddresses","signerAddress","slippage","poolId","simulationType","item","SimulationType","JoinPoolService","gasPriceServ","swapJoin","isDeep","joinPoolProvider","isMounted","highPriceImpactAccepted","txError","isSingleAssetJoin","debounceQueryJoin","debounce","queryJoin","queryEnabled","txInProgress","queryJoinQuery","useQuery","QUERY_KEYS","joinPoolService","getTokens","prices","injectTokens","priceFor","toFiat","useNumbers","useUserSettings","getSigner","transactionDeadline","useApp","txState","resetTxState","useTxState","relayerApproval","useRelayerApprovalTx","RelayerType","relayerApprovalAction","useRelayerApproval","joinTokens","addresses","a","highPriceImpact","HIGH_PRICE_IMPACT","rektPriceImpact","REKT_PRICE_IMPACT","hasAcceptedHighPriceImpact","hasValidInputs","hasAmountsIn","amountsInWithValue","missingPricesIn","fiatValueIn","fiatValuesIn","bnSum","fiatValueOut","fiatValueOf","shouldSignRelayer","tokensToApprove","amountsToApprove","getTokenApprovalActions","useTokenApprovalActions","isLoadingQuery","queryError","setAmountsIn","_amountsIn","addTokensIn","i","resetQueryJoinState","setApprovalActions","tokenApprovalActions","output","error","captureException","join","setIsSingleAssetJoin","watch","newVal","onBeforeMount","onMounted","readonly","JoinPoolProviderSymbol","symbolKeys","provideJoinPool","joinPoolResponse","provide","useJoinPool","safeInject","useNativeAsset","usePoolTransfers","amounts","wrappedNativeAsset","getMaxBalanceFor","setMaxAmount","maxBalance","setMaxAmountForLegacyInvestState","indexOfAsset","indexOfAddress","handleMyWalletTokenClick","nextTick","isNativeAsset","isWrappedNativeAsset","nativeBalanceText","sectionTitle","isMainnetWstETHPool","networkConfig","useConfig","getToken","networkSlug","useNetwork","stETH","wstETH","fNum","fiatTotal","hasNoBalances","hasAllTokens","maximized","optimized","loadingData","supportsPropotionalOptimization","priceImpactClasses","optimizeBtnClasses","investmentState","blockNumber","addTransaction","useTransactions","txListener","getTxConfirmedAt","useEthers","lockablePoolId","useVeBal","isStakablePool","usePoolStaking","refetchBalances","poolWeightsLabel","fullAmounts","batchSwapAmountMap","fiatTotalLabel","batchSwap","shouldFetchBatchSwap","poolExchange","PoolExchange","actions","submit","transactionInProgress","normalizedBptOut","formatUnits","_b","handleTransaction","tx","receipt","confirmedAt","dateTimeLabelFor","trackGoal","Goals","boostedJoinBatchSwap","currency","investmentConfirmed","account","title","amountMap","amountMap2","amount","tokenMap","tokenMap2","fiatAmountMap","fiatAmountMap2","total","handleClose","handleShowStakeModal","useInvestMath","proportionalAmounts","queryBptOut","tokens","minusSlippageScaled","useSlippage","managedPoolWithSwappingHalted","isComposableStableLikePool","isShallowComposableStablePool","batchSwapPromises","processingBatchSwaps","processBatchSwaps","usePromiseSequence","poolCalculator","PoolCalculator","tokenCount","poolTokens","_","fullAmountsScaled","onlyTokensWithAmounts","fiatAmounts","fiatAmount","FNumFormats","hasAmounts","fullBPTOut","balance","send","_bptOut","poolTokenBalances","hasZeroBalance","tokenAmount","index","maximizeAmounts","optimizeAmounts","getBatchSwap","queryBatchSwapTokensIn","balancerContractsService","getQueryBptOut","result","logFetchException","newAmounts","oldAmounts","changedIndex","showInvestPreview","showStakeModal","validInputs","investMath","isMismatchedNetwork","isStableLikePool","validInput","forceProportionalInputs","poolHasLowLiquidity","LOW_LIQUIDITY_THRESHOLD","investmentTokens","tokensListExclBpt","handleAmountChange","handleAddressChange","newAddress","tokenWeight","isStableLike","_c","_d","propAmountFor","hint","tokenOptions","setNativeAssetByBalance","nativeAssetBalance","wrappedNativeAssetBalance","setNativeAsset","fromAddress","toAddress","shouldUseNativeAsset","joinPoolApprovalActions","onUnmounted","showTokensOut","tokenOutMap","amountInMap","amountOutMap","tokenInMap","fiatAmountInMap","fiatAmountOutMap","fiatTotalOut","useIntervalFn","oneSecondInMs","tokenSymbolsWithoutBalance","tokenSymbolsWithoutBalanceMsg","formatWordListAsSentence","description","singleTokenHint","veBalTokenInfo","initializeTokensForm","isSingleAssetJoin2","forChange","isSingleAsset","newPoolTokensWithBalance","prevIsSingleAsset","prevPoolTokensWithBalance","hasTabChanged","isEqual","network","useRoute","providePoolStaking","usePoolTransfersGuard","poolDecorationQuery","loadingPool","transfersAllowed","isLoadingSor","isLoading"],"mappings":"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"}