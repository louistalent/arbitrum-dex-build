{"version":3,"file":"StakePreviewModal.vue_vue_type_script_setup_true_lang-225d7685.js","sources":["../../src/components/contextual/pages/pool/staking/StakeSummary.vue","../../src/components/contextual/pages/pool/staking/StakePreview.vue","../../src/components/contextual/pages/pool/staking/StakePreviewModal.vue"],"sourcesContent":["<script lang=\"ts\" setup>\r\nimport useNumbers, { FNumFormats } from '@/composables/useNumbers';\r\nimport { StakeAction } from './StakePreview.vue';\r\n\r\n/**\r\n * PROPS\r\n */\r\ntype Props = {\r\n  action: StakeAction;\r\n  fiatValue: string;\r\n  sharePercentage: string;\r\n};\r\n\r\ndefineProps<Props>();\r\n\r\n/**\r\n * COMPOSABLES\r\n */\r\nconst { fNum } = useNumbers();\r\n</script>\r\n\r\n<template>\r\n  <BalDataList :title=\"$t('summary')\">\r\n    <BalDataListRow>\r\n      <template #label>\r\n        {{ $t('totalValueTo') }}\r\n        &nbsp;\r\n        <span class=\"lowercase\">\r\n          {{ action === 'stake' ? $t('stake') : $t('unstake') }}:\r\n        </span>\r\n      </template>\r\n      <template #value>\r\n        <span class=\"capitalize\">\r\n          {{ fNum(fiatValue, FNumFormats.fiat) }}\r\n        </span>\r\n        <BalTooltip\r\n          :text=\"\r\n            action === 'stake'\r\n              ? $t('staking.stakeValueTooltip')\r\n              : $t('staking.unstakeValueTooltip')\r\n          \"\r\n          width=\"40\"\r\n          textAlign=\"center\"\r\n          class=\"ml-2\"\r\n        />\r\n      </template>\r\n    </BalDataListRow>\r\n    <BalDataListRow :label=\"$t('staking.newTotalShare')\">\r\n      <template #value>\r\n        <span class=\"capitalize\">\r\n          {{ fNum(sharePercentage, FNumFormats.percent) }}\r\n        </span>\r\n        <BalTooltip\r\n          :text=\"$t('staking.totalShareTooltip')\"\r\n          width=\"40\"\r\n          textAlign=\"center\"\r\n          class=\"ml-2\"\r\n        />\r\n      </template>\r\n    </BalDataListRow>\r\n  </BalDataList>\r\n</template>\r\n","<script setup lang=\"ts\">\r\nimport {\r\n  TransactionReceipt,\r\n  TransactionResponse,\r\n} from '@ethersproject/abstract-provider';\r\nimport { getAddress } from '@ethersproject/address';\r\nimport { useI18n } from 'vue-i18n';\r\nimport AnimatePresence from '@/components/animate/AnimatePresence.vue';\r\nimport ConfirmationIndicator from '@/components/web3/ConfirmationIndicator.vue';\r\nimport useNumbers, { FNumFormats } from '@/composables/useNumbers';\r\nimport { useTokens } from '@/providers/tokens.provider';\r\nimport useTokenApprovalActions from '@/composables/approvals/useTokenApprovalActions';\r\nimport { bnum, trackLoading } from '@/lib/utils';\r\nimport { AnyPool } from '@/services/pool/types';\r\nimport { TransactionActionInfo } from '@/types/transactions';\r\nimport useTransactions from '@/composables/useTransactions';\r\nimport { fiatValueOf, tokensListExclBpt } from '@/composables/usePool';\r\nimport StakeSummary from './StakeSummary.vue';\r\nimport { usePoolStaking } from '@/providers/local/pool-staking.provider';\r\nimport { ApprovalAction } from '@/composables/approvals/types';\r\n\r\nexport type StakeAction = 'stake' | 'unstake' | 'restake';\r\ntype Props = {\r\n  pool: AnyPool;\r\n  action: StakeAction;\r\n};\r\nconst props = defineProps<Props>();\r\nconst emit = defineEmits(['close', 'success']);\r\n\r\n/**\r\n * COMPOSABLES\r\n */\r\nconst { balanceFor, getToken, refetchBalances } = useTokens();\r\nconst { fNum } = useNumbers();\r\nconst { t } = useI18n();\r\nconst { addTransaction } = useTransactions();\r\n\r\nconst {\r\n  stake,\r\n  unstake,\r\n  stakedShares,\r\n  refetchAllPoolStakingData,\r\n  preferentialGaugeAddress,\r\n} = usePoolStaking();\r\n\r\n// Staked or unstaked shares depending on action type.\r\nconst currentShares =\r\n  props.action === 'stake'\r\n    ? balanceFor(getAddress(props.pool.address))\r\n    : stakedShares.value;\r\n\r\nconst { getTokenApprovalActionsForSpender } = useTokenApprovalActions(\r\n  ref<string[]>([props.pool.address]),\r\n  ref<string[]>([currentShares]),\r\n  ApprovalAction.Staking\r\n);\r\n\r\nconst stakeAction = {\r\n  label: t('stake'),\r\n  loadingLabel: t('staking.staking'),\r\n  confirmingLabel: t('confirming'),\r\n  action: () => txWithNotification(stake),\r\n  stepTooltip: t('staking.stakeTooltip'),\r\n};\r\n\r\nconst unstakeAction = {\r\n  label: t('unstake'),\r\n  loadingLabel: t('staking.unstaking'),\r\n  confirmingLabel: t('confirming'),\r\n  action: () => txWithNotification(unstake),\r\n  stepTooltip:\r\n    props.action === 'restake'\r\n      ? t('staking.restakeTooltip')\r\n      : t('staking.unstakeTooltip'),\r\n};\r\n\r\n/**\r\n * STATE\r\n */\r\nconst isLoadingApprovalsForGauge = ref(false);\r\nconst isActionConfirmed = ref(false);\r\nconst confirmationReceipt = ref<TransactionReceipt>();\r\nconst stakeActions = ref<TransactionActionInfo[]>([]);\r\n\r\n/**\r\n * WATCHERS\r\n */\r\nwatch(\r\n  () => props.action,\r\n  () => {\r\n    if (props.action === 'stake') stakeActions.value = [stakeAction];\r\n    if (props.action === 'unstake') stakeActions.value = [unstakeAction];\r\n    if (props.action === 'restake')\r\n      stakeActions.value = [unstakeAction, stakeAction];\r\n  },\r\n  { immediate: true }\r\n);\r\n\r\n/* COMPUTED */\r\nconst assetRowWidth = computed(\r\n  () => (tokensListExclBpt(props.pool).length * 32) / 1.5\r\n);\r\n\r\nconst isStakeAndZero = computed(\r\n  () =>\r\n    props.action === 'stake' && (currentShares === '0' || currentShares === '')\r\n);\r\n\r\nconst totalUserPoolSharePct = ref(\r\n  bnum(\r\n    bnum(stakedShares.value).plus(balanceFor(getAddress(props.pool.address)))\r\n  )\r\n    .div(props.pool.totalShares)\r\n    .toString()\r\n);\r\n\r\n/**\r\n * LIFECYCLE\r\n */\r\nonBeforeMount(async () => {\r\n  if (props.action !== 'unstake') await loadApprovalsForGauge();\r\n});\r\n\r\n/** METHODS */\r\nasync function handleSuccess({ receipt }) {\r\n  isActionConfirmed.value = true;\r\n  confirmationReceipt.value = receipt;\r\n  await Promise.all([refetchBalances(), refetchAllPoolStakingData()]);\r\n  emit('success');\r\n}\r\n\r\nasync function txWithNotification(action: () => Promise<TransactionResponse>) {\r\n  try {\r\n    const tx = await action();\r\n    addTransaction({\r\n      id: tx.hash,\r\n      type: 'tx',\r\n      action: props.action,\r\n      summary: t(`transactionSummary.${props.action}`, {\r\n        pool: props.pool.symbol,\r\n        amount: fNum(fiatValueOf(props.pool, currentShares), FNumFormats.fiat),\r\n      }),\r\n      details: {\r\n        total: fNum(fiatValueOf(props.pool, currentShares), FNumFormats.fiat),\r\n        pool: props.pool,\r\n      },\r\n    });\r\n    return tx;\r\n  } catch (error) {\r\n    throw new Error(`Failed create ${props.action} transaction`, {\r\n      cause: error,\r\n    });\r\n  }\r\n}\r\n\r\nasync function loadApprovalsForGauge() {\r\n  const approvalActions = await trackLoading(async () => {\r\n    if (!preferentialGaugeAddress.value) return;\r\n    return getTokenApprovalActionsForSpender(preferentialGaugeAddress.value);\r\n  }, isLoadingApprovalsForGauge);\r\n\r\n  if (approvalActions) stakeActions.value.unshift(...approvalActions);\r\n}\r\n\r\nfunction handleClose() {\r\n  isActionConfirmed.value = false;\r\n  confirmationReceipt.value = undefined;\r\n  emit('close');\r\n}\r\n</script>\r\n\r\n<template>\r\n  <BalStack vertical>\r\n    <BalStack horizontal spacing=\"sm\" align=\"center\">\r\n      <BalCircle\r\n        v-if=\"isActionConfirmed\"\r\n        size=\"8\"\r\n        color=\"green\"\r\n        class=\"text-white\"\r\n      >\r\n        <BalIcon name=\"check\" />\r\n      </BalCircle>\r\n      <h4>{{ $t(`${action}`) }} {{ $t('lpTokens') }}</h4>\r\n    </BalStack>\r\n    <div\r\n      class=\"py-2 px-4 rounded-lg border dark:border-gray-700 divide-y dark:divide-gray-700\"\r\n    >\r\n      <BalStack horizontal justify=\"between\" align=\"center\">\r\n        <BalStack vertical spacing=\"none\">\r\n          <h5>{{ fNum(currentShares) }} {{ $t('lpTokens') }}</h5>\r\n          <span class=\"text-secondary\">\r\n            {{ getToken(pool.address)?.symbol }}\r\n          </span>\r\n        </BalStack>\r\n        <BalAssetSet\r\n          :addresses=\"tokensListExclBpt(pool)\"\r\n          :width=\"assetRowWidth\"\r\n          :size=\"32\"\r\n        />\r\n      </BalStack>\r\n    </div>\r\n    <StakeSummary\r\n      :action=\"action\"\r\n      :fiatValue=\"fiatValueOf(pool, currentShares)\"\r\n      :sharePercentage=\"totalUserPoolSharePct\"\r\n    />\r\n    <BalActionSteps\r\n      v-if=\"!isActionConfirmed\"\r\n      :actions=\"stakeActions\"\r\n      :isLoading=\"isLoadingApprovalsForGauge\"\r\n      :disabled=\"isStakeAndZero\"\r\n      @success=\"handleSuccess\"\r\n    />\r\n    <BalStack v-if=\"isActionConfirmed && confirmationReceipt\" vertical>\r\n      <ConfirmationIndicator :txReceipt=\"confirmationReceipt\" />\r\n      <AnimatePresence :isVisible=\"isActionConfirmed\">\r\n        <BalBtn\r\n          v-if=\"action === 'stake'\"\r\n          color=\"gradient\"\r\n          block\r\n          class=\"mb-2\"\r\n          @click=\"$router.push({ name: 'claim' })\"\r\n        >\r\n          {{ $t('viewClaims') }}\r\n        </BalBtn>\r\n        <BalBtn color=\"gray\" outline block @click=\"handleClose\">\r\n          {{ $t('close') }}\r\n        </BalBtn>\r\n      </AnimatePresence>\r\n    </BalStack>\r\n  </BalStack>\r\n</template>\r\n","<script setup lang=\"ts\">\r\nimport { onMounted, ref, watch } from 'vue';\r\n\r\nimport { Pool } from '@/services/pool/types';\r\nimport StakePreview, { StakeAction } from './StakePreview.vue';\r\nimport { usePoolStaking } from '@/providers/local/pool-staking.provider';\r\n\r\n/**\r\n * TYPES\r\n */\r\ntype Props = {\r\n  isVisible: boolean;\r\n  pool: Pool;\r\n  action: StakeAction;\r\n};\r\n\r\n/**\r\n * PROPS & EMITS\r\n */\r\nconst props = defineProps<Props>();\r\nconst emit = defineEmits(['close', 'success']);\r\n\r\n/**\r\n * STATE\r\n */\r\nconst showFireworks = ref(false);\r\n\r\n/**\r\n * COMPOSABLES\r\n */\r\nconst { setCurrentPool } = usePoolStaking();\r\n\r\n/**\r\n * METHODS\r\n */\r\nfunction handleClose() {\r\n  showFireworks.value = false;\r\n  emit('close');\r\n}\r\n\r\nfunction handleSuccess() {\r\n  showFireworks.value = true;\r\n  emit('success');\r\n}\r\n\r\n/**\r\n * WATCHERS\r\n */\r\nonMounted(() => {\r\n  setCurrentPool(props.pool.id);\r\n});\r\n\r\nwatch(\r\n  () => props.pool,\r\n  newPool => {\r\n    setCurrentPool(newPool.id);\r\n  }\r\n);\r\n</script>\r\n\r\n<template>\r\n  <teleport to=\"#modal\">\r\n    <BalModal :show=\"isVisible\" :fireworks=\"showFireworks\" @close=\"handleClose\">\r\n      <StakePreview\r\n        :pool=\"pool\"\r\n        :action=\"action\"\r\n        @close=\"handleClose\"\r\n        @success=\"handleSuccess\"\r\n      />\r\n    </BalModal>\r\n  </teleport>\r\n</template>\r\n"],"names":["fNum","useNumbers","balanceFor","getToken","refetchBalances","useTokens","t","useI18n","addTransaction","useTransactions","stake","unstake","stakedShares","refetchAllPoolStakingData","preferentialGaugeAddress","usePoolStaking","currentShares","props","getAddress","getTokenApprovalActionsForSpender","useTokenApprovalActions","ref","ApprovalAction","stakeAction","txWithNotification","unstakeAction","isLoadingApprovalsForGauge","isActionConfirmed","confirmationReceipt","stakeActions","watch","assetRowWidth","computed","tokensListExclBpt","isStakeAndZero","totalUserPoolSharePct","bnum","onBeforeMount","loadApprovalsForGauge","handleSuccess","receipt","emit","action","tx","fiatValueOf","FNumFormats","error","approvalActions","trackLoading","handleClose","showFireworks","setCurrentPool","onMounted","newPool"],"mappings":"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"}