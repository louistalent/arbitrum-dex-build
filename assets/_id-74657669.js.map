{"version":3,"file":"_id-74657669.js","sources":["../../node_modules/date-fns/esm/addMinutes/index.js","../../node_modules/date-fns/esm/fromUnixTime/index.js","../../node_modules/date-fns/esm/startOfHour/index.js","../../src/components/contextual/pages/pool/PoolActionsCard.vue","../../src/components/contextual/pages/pool/MyPoolBalancesCard.vue","../../src/composables/useUserPoolPercentage.ts","../../src/components/contextual/pages/pool/PoolCompositionCard/components/TokenBreakdown.vue","../../src/lib/utils/numbers.ts","../../src/components/contextual/pages/pool/PoolCompositionCard/components/composables/useTokenBreakdown.ts","../../src/components/contextual/pages/pool/PoolCompositionCard/components/PercentagePill.vue","../../src/components/contextual/pages/pool/PoolCompositionCard/PoolCompositionCard.vue","../../src/components/_global/BalChart/BalChart.vue","../../src/components/contextual/pages/pool/FxPoolWarning.vue","../../src/components/contextual/pages/pool/PoolChart.vue","../../src/components/contextual/pages/pool/PoolStatCards.vue","../../src/composables/queries/usePoolSwapsQuery.ts","../../src/composables/queries/useUserPoolSwapsQuery.ts","../../src/components/contextual/pages/pool/PoolTransactionsCard/types.ts","../../src/components/contextual/pages/pool/PoolTransactionsCard/BoostedPoolActivities/Table.vue","../../src/components/contextual/pages/pool/PoolTransactionsCard/BoostedPoolActivities/Activities.vue","../../src/composables/queries/usePoolActivitiesQuery.ts","../../src/composables/queries/usePoolUserActivitiesQuery.ts","../../src/components/contextual/pages/pool/PoolTransactionsCard/PoolActivities/Table.vue","../../src/components/contextual/pages/pool/PoolTransactionsCard/PoolActivities/Activities.vue","../../src/components/contextual/pages/pool/PoolTransactionsCard/InvestmentTransactions/InvestmentTransactions.vue","../../src/components/contextual/pages/pool/PoolTransactionsCard/SwapTransactions/Table.vue","../../src/components/contextual/pages/pool/PoolTransactionsCard/SwapTransactions/SwapTransactions.vue","../../src/components/contextual/pages/pool/PoolTransactionsCard/PoolTransactionsCard.vue","../../src/components/_global/BalDetailsTable/BalDetailsTable.vue","../../src/components/contextual/pages/pool/PoolContractDetails.vue","../../src/components/contextual/pages/pool/PoolDeprecatedWarning.vue","../../src/components/contextual/pages/pool/staking/StakingIncentivesCard.vue","../../src/components/contextual/pages/pool/PoolLockingCard/PoolLockingCard.vue","../../src/assets/images/icons/apy-vision.svg","../../src/composables/external/useApyVisionHelpers.ts","../../src/components/links/ApyVisionPoolLink.vue","../../src/components/images/icons/GauntletIcon.vue","../../src/components/images/icons/GauntletIcon.vue","../../src/components/pool/PoolPageHeader.vue","../../src/composables/queries/usePoolAprQuery.ts","../../src/composables/queries/usePoolSnapshotsQuery.ts","../../src/services/coingecko/api/price.service.ts","../../src/services/coingecko/coingecko.client.ts","../../src/services/coingecko/coingecko.service.ts","../../src/composables/queries/useHistoricalPricesQuery.ts","../../src/components/pool/branded-redirect/constants.ts","../../src/assets/images/branded-redirect-logos/xave.png","../../src/components/pool/branded-redirect/BrandedRedirectCard.vue","../../src/pages/pool/_id.vue"],"sourcesContent":["import toInteger from \"../_lib/toInteger/index.js\";\nimport addMilliseconds from \"../addMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nvar MILLISECONDS_IN_MINUTE = 60000;\n/**\n * @name addMinutes\n * @category Minute Helpers\n * @summary Add the specified number of minutes to the given date.\n *\n * @description\n * Add the specified number of minutes to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of minutes to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the minutes added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 30 minutes to 10 July 2014 12:00:00:\n * const result = addMinutes(new Date(2014, 6, 10, 12, 0), 30)\n * //=> Thu Jul 10 2014 12:30:00\n */\n\nexport default function addMinutes(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMilliseconds(dirtyDate, amount * MILLISECONDS_IN_MINUTE);\n}","import toDate from \"../toDate/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name fromUnixTime\n * @category Timestamp Helpers\n * @summary Create a date from a Unix timestamp.\n *\n * @description\n * Create a date from a Unix timestamp (in seconds). Decimal values will be discarded.\n *\n * @param {Number} unixTime - the given Unix timestamp (in seconds)\n * @returns {Date} the date\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Create the date 29 February 2012 11:45:05:\n * const result = fromUnixTime(1330515905)\n * //=> Wed Feb 29 2012 11:45:05\n */\n\nexport default function fromUnixTime(dirtyUnixTime) {\n  requiredArgs(1, arguments);\n  var unixTime = toInteger(dirtyUnixTime);\n  return toDate(unixTime * 1000);\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name startOfHour\n * @category Hour Helpers\n * @summary Return the start of an hour for the given date.\n *\n * @description\n * Return the start of an hour for the given date.\n * The result will be in the local timezone.\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of an hour\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of an hour for 2 September 2014 11:55:00:\n * const result = startOfHour(new Date(2014, 8, 2, 11, 55))\n * //=> Tue Sep 02 2014 11:00:00\n */\n\nexport default function startOfHour(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setMinutes(0, 0, 0);\n  return date;\n}","<script setup lang=\"ts\">\r\nimport { computed, toRef } from 'vue';\r\nimport useWithdrawMath from '@/components/forms/pool_actions/WithdrawForm/composables/useWithdrawMath';\r\nimport {\r\n  isJoinsDisabled,\r\n  usePool,\r\n  deprecatedDetails,\r\n} from '@/composables/usePool';\r\nimport useNetwork from '@/composables/useNetwork';\r\nimport { Pool } from '@/services/pool/types';\r\nimport useWeb3 from '@/services/web3/useWeb3';\r\nimport { isSoftMigratablePool } from '@/components/forms/pool_actions/MigrateForm/constants';\r\nimport { Goals, trackGoal } from '@/composables/useFathom';\r\n\r\n/**\r\n * TYPES\r\n */\r\ntype Props = {\r\n  pool: Pool;\r\n  missingPrices: boolean;\r\n};\r\n\r\n/**\r\n * PROPS\r\n */\r\nconst props = defineProps<Props>();\r\n\r\n/**\r\n * COMPOSABLES\r\n */\r\nconst { hasBpt } = useWithdrawMath(toRef(props, 'pool'));\r\nconst { isMigratablePool, hasNonApprovedRateProviders } = usePool(\r\n  toRef(props, 'pool')\r\n);\r\nconst { isWalletReady, startConnectWithInjectedProvider } = useWeb3();\r\nconst { networkSlug } = useNetwork();\r\n\r\n/**\r\n * COMPUTED\r\n */\r\nconst joinDisabled = computed(\r\n  (): boolean =>\r\n    deprecatedDetails(props.pool.id)?.joinsDisabled ||\r\n    isJoinsDisabled(props.pool.id) ||\r\n    hasNonApprovedRateProviders.value ||\r\n    (isMigratablePool(props.pool) && !isSoftMigratablePool(props.pool.id))\r\n);\r\n</script>\r\n\r\n<template>\r\n  <div\r\n    class=\"p-4 w-full bg-gray-50 dark:bg-gray-800 border-t border-gray-200 dark:border-gray-900\"\r\n  >\r\n    <BalBtn\r\n      v-if=\"!isWalletReady\"\r\n      :label=\"$t('connectWallet')\"\r\n      color=\"gradient\"\r\n      block\r\n      @click=\"startConnectWithInjectedProvider\"\r\n    />\r\n    <div v-else class=\"grid grid-cols-2 gap-2\">\r\n      <BalBtn\r\n        :tag=\"joinDisabled ? 'div' : 'router-link'\"\r\n        :to=\"{ name: 'add-liquidity', params: { networkSlug } }\"\r\n        :label=\"$t('addLiquidity')\"\r\n        color=\"gradient\"\r\n        :disabled=\"joinDisabled\"\r\n        block\r\n        @click=\"trackGoal(Goals.ClickAddLiquidity)\"\r\n      />\r\n      <BalBtn\r\n        :tag=\"hasBpt ? 'router-link' : 'div'\"\r\n        :to=\"{ name: 'withdraw', params: { networkSlug } }\"\r\n        :label=\"$t('withdraw.label')\"\r\n        :disabled=\"!hasBpt\"\r\n        color=\"blue\"\r\n        outline\r\n        block\r\n        @click=\"trackGoal(Goals.ClickWithdraw)\"\r\n      />\r\n    </div>\r\n  </div>\r\n</template>\r\n","<script setup lang=\"ts\">\r\nimport { computed, toRef } from 'vue';\r\nimport { useRouter } from 'vue-router';\r\n\r\nimport { POOL_MIGRATIONS_MAP } from '@/components/forms/pool_actions/MigrateForm/constants';\r\nimport useNumbers, { FNumFormats } from '@/composables/useNumbers';\r\nimport { fiatValueOf, isVeBalPool, usePool } from '@/composables/usePool';\r\nimport { useTokens } from '@/providers/tokens.provider';\r\nimport useNetwork from '@/composables/useNetwork';\r\nimport { bnum } from '@/lib/utils';\r\nimport { Pool } from '@/services/pool/types';\r\nimport useWeb3 from '@/services/web3/useWeb3';\r\n\r\nimport PoolActionsCard from './PoolActionsCard.vue';\r\nimport { usePoolStaking } from '@/providers/local/pool-staking.provider';\r\nimport { useLock } from '@/composables/useLock';\r\n\r\n/**\r\n * TYPES\r\n */\r\ntype Props = {\r\n  pool: Pool;\r\n  missingPrices: boolean;\r\n};\r\n\r\n/**\r\n * PROPS\r\n */\r\nconst props = defineProps<Props>();\r\n\r\n/**\r\n * COMPOSABLES\r\n */\r\nconst { balanceFor } = useTokens();\r\nconst { fNum } = useNumbers();\r\nconst { isWalletReady } = useWeb3();\r\nconst { isMigratablePool } = usePool(toRef(props, 'pool'));\r\nconst { stakedShares } = usePoolStaking();\r\nconst { networkSlug } = useNetwork();\r\nconst router = useRouter();\r\nconst { totalLockedValue } = useLock();\r\n\r\n/**\r\n * COMPUTED\r\n */\r\nconst bptBalance = computed((): string =>\r\n  bnum(balanceFor(props.pool.address)).plus(stakedShares.value).toString()\r\n);\r\n\r\nconst fiatValue = computed(() => {\r\n  if (isVeBalPool(props.pool.id)) return totalLockedValue.value;\r\n\r\n  return fiatValueOf(props.pool, bptBalance.value);\r\n});\r\n\r\nconst showMigrateButton = computed(\r\n  () =>\r\n    (bnum(bptBalance.value).gt(0) || bnum(stakedShares.value).gt(0)) &&\r\n    isMigratablePool(props.pool)\r\n);\r\n\r\n/**\r\n * METHODS\r\n */\r\nfunction navigateToPoolMigration(pool: Pool) {\r\n  router.push({\r\n    name: 'migrate-pool',\r\n    params: {\r\n      from: pool.id,\r\n      to: POOL_MIGRATIONS_MAP[pool.id].toPoolId,\r\n    },\r\n    query: {\r\n      returnRoute: 'pool',\r\n      returnParams: JSON.stringify({ id: pool.id, networkSlug }),\r\n    },\r\n  });\r\n}\r\n</script>\r\n\r\n<template>\r\n  <BalCard shadow=\"2xl\" noPad class=\"rounded-xl\">\r\n    <template #header>\r\n      <div class=\"card-header\">\r\n        <h5>\r\n          {{ $t('poolTransfer.myPoolBalancesCard.title') }}\r\n        </h5>\r\n        <h5 class=\"text-2xl\">\r\n          {{ isWalletReady ? fNum(fiatValue, FNumFormats.fiat) : '-' }}\r\n        </h5>\r\n      </div>\r\n    </template>\r\n    <div v-if=\"showMigrateButton\" class=\"py-2 px-4\">\r\n      <BalBtn\r\n        color=\"blue\"\r\n        block\r\n        @click.prevent=\"navigateToPoolMigration(props.pool)\"\r\n      >\r\n        {{ $t('migratePool.migrateLiquidity') }}\r\n      </BalBtn>\r\n    </div>\r\n    <template #footer>\r\n      <PoolActionsCard :pool=\"pool\" :missingPrices=\"missingPrices\" />\r\n    </template>\r\n  </BalCard>\r\n</template>\r\n\r\n<style scoped>\r\n.card-header {\r\n  @apply p-4 w-full flex items-center justify-between;\r\n  @apply border-b dark:border-gray-700;\r\n}\r\n\r\n.asset-row {\r\n  @apply py-3 flex justify-between items-center text-lg;\r\n}\r\n</style>\r\n","import { bnum } from '@/lib/utils';\r\nimport { Pool } from '@/services/pool/types';\r\nimport { computed, Ref } from 'vue';\r\nimport useNumbers from '@/composables/useNumbers';\r\nimport { useTokens } from '@/providers/tokens.provider';\r\nimport { usePoolStaking } from '@/providers/local/pool-staking.provider';\r\nimport { useLock } from './useLock';\r\nimport { isVeBalPool } from './usePool';\r\n\r\nexport function useUserPoolPercentage(pool: Ref<Pool>) {\r\n  const { balanceFor } = useTokens();\r\n  const { stakedShares } = usePoolStaking();\r\n\r\n  const isVeBal = computed(() => isVeBalPool(pool.value.id));\r\n\r\n  const { totalLockedShares } = useLock({\r\n    // Avoid lock queries when pool is not veBAL:\r\n    enabled: isVeBal.value,\r\n  });\r\n  const { fNum } = useNumbers();\r\n\r\n  const userPoolPercentage = computed(() => {\r\n    let bptBalance = bnum(balanceFor(pool.value.address)).plus(\r\n      stakedShares.value\r\n    );\r\n    if (isVeBal.value && totalLockedShares.value) {\r\n      bptBalance = bptBalance.plus(totalLockedShares.value);\r\n    }\r\n    return bptBalance.div(bnum(pool.value.totalShares)).multipliedBy(100);\r\n  });\r\n\r\n  const userPoolPercentageLabel = computed(\r\n    () =>\r\n      fNum(userPoolPercentage.value.toString(), {\r\n        maximumFractionDigits: 4,\r\n        minimumFractionDigits: 0,\r\n      }) + '%'\r\n  );\r\n\r\n  return {\r\n    userPoolPercentage,\r\n    userPoolPercentageLabel,\r\n  };\r\n}\r\n","<script setup lang=\"ts\">\r\nimport { Pool, PoolToken } from '@/services/pool/types';\r\nimport useWeb3 from '@/services/web3/useWeb3';\r\nimport { computed, toRefs } from 'vue';\r\nimport { TokensData } from './composables/useTokenBreakdown';\r\n\r\nimport { isWeightedLike, usePool } from '@/composables/usePool';\r\nimport { useTokens } from '@/providers/tokens.provider';\r\n\r\n/**\r\n * TYPES\r\n */\r\ntype Props = {\r\n  token: PoolToken;\r\n  parentLevel?: number;\r\n  showUserShares: boolean;\r\n  rootPool: Pool;\r\n  tokensData: TokensData;\r\n};\r\n\r\n/**\r\n * PROPS\r\n */\r\nconst props = withDefaults(defineProps<Props>(), {\r\n  parentLevel: 0,\r\n});\r\n\r\nconst { token, showUserShares, rootPool } = toRefs(props);\r\nconst tokenData = computed(() => props.tokensData[token.value.address]);\r\n\r\n/**\r\n * COMPOSABLES\r\n */\r\nconst { explorerLinks } = useWeb3();\r\nconst { isDeepPool } = usePool(rootPool);\r\nconst isWeighted = isWeightedLike(rootPool.value.poolType);\r\nconst { getToken } = useTokens();\r\n\r\n/**\r\n * COMPUTED\r\n */\r\n// The nested level, the top level being 0, the level below that 1, etc.\r\nconst currentLevel = computed(() => props.parentLevel + 1);\r\n\r\nconst nestedPaddingClass = computed(() => {\r\n  switch (currentLevel.value) {\r\n    case 1:\r\n      return 'level-1';\r\n    case 2:\r\n      return 'level-2';\r\n    case 3:\r\n      return 'level-3';\r\n    case 4:\r\n      return 'level-4';\r\n    default:\r\n      return 'pl-4';\r\n  }\r\n});\r\n\r\n/**\r\n * METHODS\r\n */\r\nfunction symbolFor(token: PoolToken): string {\r\n  return getToken(token.address)?.symbol || token.symbol || '---';\r\n}\r\n</script>\r\n\r\n<template>\r\n  <div\r\n    :class=\"[\r\n      'grid gap-y-4 px-4 w-full',\r\n      isWeighted ? 'grid-cols-5' : 'grid-cols-4',\r\n      nestedPaddingClass,\r\n    ]\"\r\n  >\r\n    <BalLink\r\n      :href=\"explorerLinks.addressLink(token.address)\"\r\n      external\r\n      noStyle\r\n      class=\"group flex items-center\"\r\n    >\r\n      <BalAsset\r\n        :address=\"token.address\"\r\n        :class=\"\r\n          isDeepPool && currentLevel > 1 ? 'nested-token' : 'mr-2 shrink-0 z-10'\r\n        \"\r\n        :size=\"isDeepPool && currentLevel > 1 ? 28 : 36\"\r\n      />\r\n      <span\r\n        class=\"group-hover:text-purple-500 dark:group-hover:text-yellow-500 transition-colors\"\r\n        >{{ symbolFor(token) }}</span\r\n      >\r\n      <BalIcon\r\n        name=\"arrow-up-right\"\r\n        size=\"sm\"\r\n        class=\"ml-1 text-gray-500 group-hover:text-purple-500 dark:group-hover:text-yellow-500 transition-colors\"\r\n      />\r\n    </BalLink>\r\n    <div v-if=\"isWeighted\" class=\"justify-self-end\">\r\n      {{ tokenData.tokenWeightLabel }}\r\n    </div>\r\n    <div class=\"justify-self-end\">\r\n      {{ showUserShares ? tokenData.userBalanceLabel : tokenData.balanceLabel }}\r\n    </div>\r\n    <div class=\"justify-self-end\">\r\n      {{ showUserShares ? tokenData.userFiatLabel : tokenData.fiatLabel }}\r\n    </div>\r\n    <div class=\"justify-self-end\">\r\n      {{ tokenData.getTokenPercentageLabel() }}\r\n    </div>\r\n  </div>\r\n\r\n  <template v-if=\"isDeepPool\">\r\n    <TokenBreakdown\r\n      v-for=\"nestedToken in token.token?.pool?.tokens\"\r\n      :key=\"nestedToken.address\"\r\n      :token=\"nestedToken\"\r\n      :parentLevel=\"currentLevel\"\r\n      :showUserShares=\"showUserShares\"\r\n      :rootPool=\"rootPool\"\r\n      :tokensData=\"tokensData\"\r\n    />\r\n  </template>\r\n</template>\r\n<style scoped>\r\n.nested-token {\r\n  @apply flex-shrink-0 mr-2 relative ml-1 sm:ml-0;\r\n}\r\n\r\n.nested-token :deep(img) {\r\n  position: relative;\r\n  z-index: 1;\r\n}\r\n\r\n.nested-token::after {\r\n  content: '';\r\n  top: 14px;\r\n  left: -15px;\r\n  @apply absolute border border-solid bg-gray-200 border-gray-200 dark:border-gray-700 w-3 dark:bg-gray-700;\r\n}\r\n\r\n.nested-token::before {\r\n  content: '';\r\n  height: calc(100% + 14px);\r\n  left: -15px;\r\n  top: -28px;\r\n  @apply absolute border bg-gray-200 border-gray-200 dark:border-gray-700 dark:bg-gray-700;\r\n}\r\n\r\n.level-1 {\r\n  @apply pl-4;\r\n}\r\n\r\n.level-2 {\r\n  @apply pl-12;\r\n}\r\n\r\n.level-3 {\r\n  @apply pl-20 relative -left-1;\r\n}\r\n\r\n.level-3 a {\r\n  @apply relative;\r\n}\r\n\r\n.level-3 a::before {\r\n  content: '';\r\n  height: calc(100% + 16px);\r\n  left: -36px;\r\n  top: -28px;\r\n  @apply absolute bg-gray-200 border border-gray-200 dark:border-gray-700 dark:bg-gray-700;\r\n}\r\n\r\n@media (min-width: 640px) {\r\n  .level-3 a::before {\r\n    left: -43px;\r\n  }\r\n}\r\n\r\n.level-3:last-child a::before,\r\n.level-3:nth-last-child(2) a::before {\r\n  content: '';\r\n  @apply border-0;\r\n}\r\n\r\n.level-4 {\r\n  @apply pl-24;\r\n}\r\n</style>\r\n","export function isNumber(str: string | number): boolean {\r\n  if (str === '') {\r\n    return false;\r\n  }\r\n\r\n  return !Number.isNaN(Number(str));\r\n}\r\n","import useNumbers, { FNumFormats } from '@/composables/useNumbers';\r\nimport { isDeep } from '@/composables/usePool';\r\nimport { useUserPoolPercentage } from '@/composables/useUserPoolPercentage';\r\nimport { bnum } from '@/lib/utils';\r\nimport { isNumber } from '@/lib/utils/numbers';\r\nimport { Pool, PoolToken } from '@/services/pool/types';\r\nimport { computed, Ref } from 'vue';\r\n\r\nexport interface TokenData {\r\n  balanceLabel: string | number;\r\n  userBalanceLabel: string | number;\r\n  fiatLabel: string;\r\n  userFiatLabel: string;\r\n  tokenWeightLabel: string;\r\n  getTokenPercentageLabel: () => string;\r\n}\r\n\r\nexport type TokensData = Record<string, TokenData>;\r\n\r\nexport function useTokenBreakdown(rootPool: Ref<Pool>) {\r\n  const { fNum, toFiat } = useNumbers();\r\n\r\n  const { userPoolPercentage } = useUserPoolPercentage(rootPool);\r\n  const isDeepPool = computed(() => isDeep(rootPool.value));\r\n  let tokensData: TokensData = {};\r\n  // Sum of every token's fiat value.\r\n  // Used to increase token percentage accuracy as pool.totalLiquidity is not completely in sync with balance * coingecko-price calculations).\r\n  let totalFiat = 0;\r\n\r\n  // Recalculates recursive tokensData whenever the pool is re-fetched\r\n  return computed(() => calculateAllTokensData(rootPool));\r\n\r\n  function calculateAllTokensData(pool: Ref<Pool>) {\r\n    totalFiat = 0;\r\n    tokensData = {};\r\n    pool.value.tokens.forEach(token => {\r\n      const rootTokenShare = 1;\r\n      calculateTokenData(token, rootTokenShare);\r\n    });\r\n    return tokensData;\r\n  }\r\n\r\n  function calculateTokenData(token: PoolToken, shareOfParentInPool: number) {\r\n    // To get the balance of this token in the current pool we need to know the\r\n    // share of it's parent in this pool. e.g. If the token is DAI which is nested\r\n    // in bb-a-DAI, we need to know what share of bb-a-DAI is contained in the\r\n    // current pool. Then we can use this share and multiply it by the total\r\n    // balance of this token.\r\n    const balance = bnum(token.balance).times(shareOfParentInPool).toString();\r\n\r\n    const hasNestedTokens = token?.token?.pool?.tokens;\r\n    const isParentTokenInDeepPool = hasNestedTokens && isDeepPool.value;\r\n\r\n    const fiatValue = calculateFiatValue();\r\n    if (isNumber(fiatValue)) totalFiat += Number(fiatValue);\r\n    const balanceValue = calculateBalanceValue();\r\n\r\n    const userFiat = applyUserPoolPercentageTo(fiatValue);\r\n    const userFiatLabel = fiatValue === '' ? '' : formatFiatValue(userFiat);\r\n\r\n    const userBalanceLabel =\r\n      balanceValue === ''\r\n        ? ''\r\n        : formatBalanceValue(applyUserPoolPercentageTo(balanceValue));\r\n\r\n    const tokenWeightLabel = !token?.weight\r\n      ? ''\r\n      : fNum(token.weight, FNumFormats.percent);\r\n\r\n    function getTokenPercentageLabel() {\r\n      if (totalFiat === 0) return '0%';\r\n      const tokenPercentage = Number(fiatValue) / Number(totalFiat);\r\n      return tokenPercentage === 0\r\n        ? ''\r\n        : fNum(tokenPercentage, FNumFormats.percent);\r\n    }\r\n\r\n    tokensData[token.address] = {\r\n      balanceLabel: formatBalanceValue(calculateBalanceValue()),\r\n      fiatLabel: formatFiatValue(fiatValue),\r\n      userFiatLabel,\r\n      userBalanceLabel: userBalanceLabel,\r\n      tokenWeightLabel,\r\n      getTokenPercentageLabel,\r\n    };\r\n\r\n    const isLeaf = !token.token?.pool;\r\n    if (isLeaf || !isDeepPool.value) return;\r\n\r\n    const shareOfTokenInPool = bnum(token?.balance || '0')\r\n      .div(token.token?.pool?.totalShares || 1)\r\n      .times(shareOfParentInPool)\r\n      .toNumber();\r\n\r\n    // Recursively calculate data for next token level\r\n    token.token?.pool?.tokens?.forEach(token =>\r\n      calculateTokenData(token, shareOfTokenInPool)\r\n    );\r\n\r\n    function calculateBalanceValue() {\r\n      if (isParentTokenInDeepPool) return '';\r\n      if (token.priceRate && isDeepPool) {\r\n        const equivMainTokenBalance = bnum(balance)\r\n          .times(token.priceRate)\r\n          .toString();\r\n\r\n        return equivMainTokenBalance;\r\n      }\r\n      return token.balance;\r\n    }\r\n\r\n    function formatBalanceValue(value: string | number) {\r\n      if (!isNumber(value)) return value;\r\n      return fNum(value, FNumFormats.token);\r\n    }\r\n\r\n    function calculateFiatValue() {\r\n      if (isParentTokenInDeepPool) return '';\r\n\r\n      let value = toFiat(balance, token.address);\r\n\r\n      if (value === '0' && token.token?.latestUSDPrice) {\r\n        // Attempt to use latest USD price from subgraph.\r\n        value = bnum(balance).times(token.token.latestUSDPrice).toString();\r\n      }\r\n      return value;\r\n    }\r\n\r\n    function formatFiatValue(value: string | number): string {\r\n      value = value.toString();\r\n      if (!isNumber(value)) return value;\r\n      return fNum(value, FNumFormats.fiat);\r\n    }\r\n\r\n    function applyUserPoolPercentageTo(value: string): number {\r\n      return (Number(value) * Number(userPoolPercentage.value)) / 100;\r\n    }\r\n  }\r\n}\r\n","<script setup lang=\"ts\">\r\nimport { computed } from 'vue';\r\n\r\ntype Props = {\r\n  isActive?: boolean;\r\n};\r\nconst props = withDefaults(defineProps<Props>(), { isActive: false });\r\n\r\nconst textColorClasses = computed(() =>\r\n  props.isActive\r\n    ? 'text-blue-600 dark:text-blue-400 bg-blue-100 dark:bg-blue-500/20'\r\n    : 'text-secondary bg-gray-200 dark:bg-gray-800'\r\n);\r\n</script>\r\n<template>\r\n  <div class=\"flex p-1 text-sm rounded\" :class=\"[textColorClasses]\">\r\n    <slot></slot>\r\n  </div>\r\n</template>","<script setup lang=\"ts\">\r\nimport useBreakpoints from '@/composables/useBreakpoints';\r\nimport { removeBptFrom } from '@/composables/usePool';\r\nimport { Pool } from '@/services/pool/types';\r\nimport { computed, nextTick, onMounted, ref, toRefs } from 'vue';\r\n\r\nimport { isWeightedLike } from '@/composables/usePool';\r\nimport { useUserPoolPercentage } from '@/composables/useUserPoolPercentage';\r\nimport { useI18n } from 'vue-i18n';\r\nimport TokenBreakdown from './components/TokenBreakdown.vue';\r\nimport { useTokenBreakdown } from './components/composables/useTokenBreakdown';\r\nimport PercentagePill from './components/PercentagePill.vue';\r\n\r\n/**\r\n * TYPES\r\n */\r\ntype Props = {\r\n  pool: Pool;\r\n};\r\n\r\n/**\r\n * PROPS\r\n */\r\nconst props = defineProps<Props>();\r\nconst { pool } = toRefs(props);\r\nconst isWeighted = isWeightedLike(pool.value.poolType);\r\n\r\n/**\r\n * COMPOSABLES\r\n */\r\nconst { upToLargeBreakpoint } = useBreakpoints();\r\nconst { userPoolPercentage, userPoolPercentageLabel } =\r\n  useUserPoolPercentage(pool);\r\nconst { t } = useI18n();\r\nconst rootPool = computed(() => removeBptFrom(pool.value));\r\nconst tokenData = useTokenBreakdown(rootPool);\r\n\r\n/**\r\n * STATE\r\n */\r\nconst TOTAL_COMPOSITION = 'TOTAL_COMPOSITION';\r\nconst MY_POOL_SHARE = 'MY_POOL_SHARE';\r\n\r\nconst compositionTab = {\r\n  value: TOTAL_COMPOSITION,\r\n  label: t('poolComposition.tabs.totalComposition'),\r\n};\r\nconst mySharesTab = {\r\n  value: MY_POOL_SHARE,\r\n  label: t('poolComposition.tabs.myPoolShare'),\r\n};\r\nconst activeTab = ref(TOTAL_COMPOSITION);\r\n\r\n/**\r\n * COMPUTED\r\n */\r\nconst userHasShares = computed(() => userPoolPercentage.value.gt(0));\r\n// Hide my pool share tab when user does not have shares\r\nconst tabs = computed(() =>\r\n  userHasShares.value ? [compositionTab, mySharesTab] : [compositionTab]\r\n);\r\nconst showUserShares = computed(() => activeTab.value === MY_POOL_SHARE);\r\n\r\n/**\r\n * LIFECYCLE\r\n */\r\nonMounted(async () => {\r\n  await nextTick();\r\n\r\n  if (userHasShares.value) {\r\n    activeTab.value = MY_POOL_SHARE;\r\n  }\r\n});\r\n</script>\r\n\r\n<template>\r\n  <div\r\n    class=\"flex justify-start items-center mx-4 lg:mx-0 mb-6 border-b dark:border-gray-900\"\r\n  >\r\n    <BalTabs v-model=\"activeTab\" :tabs=\"tabs\" noPad class=\"-mb-px\">\r\n      <PercentagePill v-if=\"userHasShares\" :isActive=\"showUserShares\">\r\n        {{ userPoolPercentageLabel }}\r\n      </PercentagePill>\r\n    </BalTabs>\r\n  </div>\r\n  <BalCard\r\n    class=\"overflow-x-auto whitespace-nowrap\"\r\n    :square=\"upToLargeBreakpoint\"\r\n    :noBorder=\"upToLargeBreakpoint\"\r\n    noPad\r\n  >\r\n    <template #header>\r\n      <div\r\n        class=\"grid p-4 w-full text-base font-semibold border-b dark:border-gray-900\"\r\n        :class=\"[isWeighted ? 'grid-cols-5' : 'grid-cols-4']\"\r\n      >\r\n        <div>{{ $t('token') }}</div>\r\n        <div v-if=\"isWeighted\" class=\"justify-self-end\">\r\n          {{ $t('weight') }}\r\n        </div>\r\n        <div class=\"justify-self-end\">\r\n          {{ $t('balance') }}\r\n        </div>\r\n        <div class=\"justify-self-end\">\r\n          {{ $t('value') }}\r\n        </div>\r\n        <div class=\"justify-self-end\">\r\n          {{ $t('poolComposition.token%') }}\r\n        </div>\r\n      </div>\r\n    </template>\r\n\r\n    <div class=\"grid gap-y-4 py-4\">\r\n      <div\r\n        v-for=\"token in rootPool.tokens\"\r\n        :key=\"token.address\"\r\n        class=\"grid gap-y-4\"\r\n      >\r\n        <TokenBreakdown\r\n          :token=\"token\"\r\n          :showUserShares=\"showUserShares\"\r\n          :rootPool=\"pool\"\r\n          :tokensData=\"tokenData\"\r\n        />\r\n      </div>\r\n    </div>\r\n  </BalCard>\r\n</template>\r\n","<script setup lang=\"ts\">\r\nimport * as echarts from 'echarts/core';\r\nimport { GridOption } from 'echarts/types/dist/shared';\r\nimport { last } from 'lodash';\r\nimport { Dictionary } from 'lodash';\r\nimport numeral from 'numeral';\r\nimport ECharts from 'vue-echarts';\r\nimport { initEcharts } from '@/dependencies/echarts';\r\n\r\nimport useDarkMode from '@/composables/useDarkMode';\r\nimport useNumbers, { FNumOptions } from '@/composables/useNumbers';\r\nimport useTailwind from '@/composables/useTailwind';\r\nimport { bnum } from '@/lib/utils';\r\n\r\ninitEcharts();\r\n\r\ntype AxisMoveEvent = {\r\n  seriesIndex: number;\r\n  dataIndex: number;\r\n};\r\n\r\ntype ChartData = {\r\n  name: string;\r\n  values: (readonly [string, number])[];\r\n};\r\n\r\ntype AxisLabelFormat = {\r\n  xAxis?: FNumOptions;\r\n  yAxis?: FNumOptions;\r\n};\r\n\r\ntype AreaStyle = {\r\n  color: echarts.LinearGradientObject;\r\n};\r\n\r\ntype Props = {\r\n  data: ChartData[];\r\n  chartType: string;\r\n  onAxisMoved?: undefined | ((value: readonly [string, number]) => void);\r\n  isLoading?: boolean;\r\n  hideYAxis?: boolean;\r\n  hideXAxis?: boolean;\r\n  xAxisMinInterval?: number;\r\n  showHeader?: boolean;\r\n  needChartValue?: boolean;\r\n  axisLabelFormatter?: AxisLabelFormat;\r\n  color?: string[];\r\n  hoverColor?: string;\r\n  hoverBorderColor?: string;\r\n  height: number | string;\r\n  showLegend?: boolean;\r\n  legendState?: Dictionary<boolean>;\r\n  forceResizeTick?: number; // manually uptick this variable to force a resize calculation on the chart\r\n  isLastValueChipVisible?: boolean; // whether to show the little rectangle with the last value of the data\r\n  customGrid?: echarts.ComposeOption<GridOption>; // provide a custom grid for the chart\r\n  chartClass?: string; // sets the class for the chart container\r\n  wrapperClass?: unknown; // sets the class for the element which wraps the chart and the header\r\n  showTooltip?: boolean; // shows the tooltip\r\n  showTooltipLayer?: boolean; // hides tooltip floating layer\r\n  useMinMax?: boolean; // whether to constrain the y-axis based on the min and max values of the data passed in\r\n  areaStyle?: AreaStyle;\r\n};\r\n\r\nconst emit = defineEmits([\r\n  'periodSelected',\r\n  'setCurrentChartValue',\r\n  'mouseLeaveEvent',\r\n  'mouseEnterEvent',\r\n]);\r\n\r\nconst props = withDefaults(defineProps<Props>(), {\r\n  isLoading: false,\r\n  type: 'category',\r\n  hideYAxis: false,\r\n  hideXAxis: false,\r\n  showHeader: false,\r\n  needChartValue: false,\r\n  showLegend: false,\r\n  axisLabelFormatter: () => ({}),\r\n  showTooltip: true,\r\n  showTooltipLayer: true,\r\n  useMinMax: false,\r\n});\r\n\r\nconst chartInstance = ref<echarts.ECharts>();\r\nconst currentValue = ref('$0,00');\r\nconst change = ref(0);\r\nconst { fNum } = useNumbers();\r\nconst tailwind = useTailwind();\r\nconst { darkMode } = useDarkMode();\r\n\r\n// https://echarts.apache.org/en/option.html\r\nconst chartConfig = computed(() => ({\r\n  // controls the legend you see at the top\r\n  // formatter allows us to show the latest value for each series\r\n  legend: {\r\n    show: props.showLegend,\r\n    left: 0,\r\n    top: 0,\r\n    icon: 'roundRect',\r\n    itemHeight: 5,\r\n    formatter: (legendName: string) => {\r\n      const latestValue = last(\r\n        props.data.find(d => d.name === legendName)?.values as any\r\n      ) as [string | number, string | number];\r\n      return `${legendName}: ${fNum(\r\n        latestValue[1],\r\n        props.axisLabelFormatter.yAxis\r\n      )}`;\r\n    },\r\n    selected: props.legendState || {},\r\n    textStyle: {\r\n      color: darkMode.value\r\n        ? tailwind.theme.colors.gray['100']\r\n        : tailwind.theme.colors.gray['800'],\r\n    },\r\n    inactiveColor: darkMode.value\r\n      ? tailwind.theme.colors.gray['700']\r\n      : tailwind.theme.colors.gray['300'],\r\n  },\r\n  // controlling the display of the X-Axis\r\n  xAxis: {\r\n    type: 'time',\r\n    show: !props.hideXAxis,\r\n    axisTick: { show: false },\r\n    axisLine: {\r\n      show: false,\r\n    },\r\n    minInterval: props.xAxisMinInterval,\r\n    axisLabel: {\r\n      formatter: props.axisLabelFormatter.xAxis\r\n        ? value => fNum(value, props.axisLabelFormatter.xAxis)\r\n        : undefined,\r\n      color: tailwind.theme.colors.gray['400'],\r\n    },\r\n    splitArea: {\r\n      show: false,\r\n      areaStyle: {\r\n        color: ['rgba(250,250,250,0.3)', 'rgba(200,200,200,0.3)'],\r\n      },\r\n    },\r\n  },\r\n  // controlling the display of the Y-Axis\r\n  yAxis: {\r\n    axisLine: {\r\n      show: false,\r\n    },\r\n    axisTick: { show: false },\r\n    min: props.useMinMax ? 'dataMin' : null,\r\n    max: props.useMinMax ? 'dataMax' : null,\r\n    type: 'value',\r\n    show: !props.hideYAxis,\r\n    splitNumber: 4,\r\n    splitLine: {\r\n      show: false,\r\n    },\r\n    position: 'left',\r\n    axisLabel: {\r\n      show: !props.hideYAxis,\r\n      formatter: props.axisLabelFormatter.yAxis\r\n        ? value => fNum(value, props.axisLabelFormatter.yAxis)\r\n        : undefined,\r\n      color: tailwind.theme.colors.gray['400'],\r\n    },\r\n    nameGap: 25,\r\n  },\r\n  color: props.color,\r\n  // Controls the boundaries of the chart from the HTML defined rectangle\r\n  grid: props.customGrid || {\r\n    left: '2.5%',\r\n    right: 0,\r\n    top: '10%',\r\n    bottom: '5%',\r\n    containLabel: true,\r\n  },\r\n  tooltip: {\r\n    show: props.showTooltip,\r\n    showContent: props.showTooltipLayer,\r\n    trigger: 'axis',\r\n    confine: true,\r\n    axisPointer: {\r\n      type: 'shadow',\r\n      label: {\r\n        show: false,\r\n      },\r\n    },\r\n    backgroundColor: darkMode.value\r\n      ? tailwind.theme.colors.gray['800']\r\n      : tailwind.theme.colors.white,\r\n    borderColor: darkMode.value\r\n      ? tailwind.theme.colors.gray['900']\r\n      : tailwind.theme.colors.white,\r\n    formatter: params => {\r\n      return `\r\n            <div class='flex flex-col font-body bg-white dark:bg-gray-850 dark:text-white'>\r\n              <span>${params[0].value[0]}</span>\r\n              ${params\r\n                .map(\r\n                  param => `\r\n                    <span>\r\n                      ${param.marker} ${param.seriesName}\r\n                      <span class='font-semibold'>\r\n                        ${fNum(param.value[1], props.axisLabelFormatter.yAxis)}\r\n                      </span>\r\n                    </span>\r\n                  `\r\n                )\r\n                .join('')}\r\n            </div>\r\n          `;\r\n    },\r\n  },\r\n  series: props.data.map((d, i) => ({\r\n    data: d.values,\r\n    type: props.chartType,\r\n    smooth: 0.3,\r\n    showSymbol: false,\r\n    name: d.name,\r\n    silent: true,\r\n    animationEasing: function (k) {\r\n      return k === 1 ? 1 : 1 - Math.pow(2, -10 * k);\r\n    },\r\n    lineStyle: {\r\n      width: 2,\r\n    },\r\n    areaStyle: props.areaStyle,\r\n    itemStyle: {\r\n      borderRadius: 100,\r\n    },\r\n    emphasis: {\r\n      itemStyle: {\r\n        color: props.hoverColor,\r\n        borderColor: props.hoverBorderColor,\r\n      },\r\n    },\r\n    // This is a retrofitted option to show the small pill with the\r\n    // latest value of the series at the end of the line on the RHS\r\n    // the line is hidden, but the label is shown with extra styles\r\n    markLine: {\r\n      symbol: 'roundRect',\r\n      symbolSize: 0,\r\n      lineStyle: {\r\n        color: 'rgba(0, 0, 0, 0)',\r\n      },\r\n      precision: 5,\r\n      label: {\r\n        backgroundColor: (props.color || [])[i] || 'black',\r\n        borderRadius: 3,\r\n        padding: 4,\r\n        formatter: (params: any) => {\r\n          return fNum(params.data.yAxis, props.axisLabelFormatter.yAxis);\r\n        },\r\n        color: '#FFF',\r\n        fontSize: 10,\r\n      },\r\n      data: props.isLastValueChipVisible\r\n        ? [\r\n            {\r\n              name: 'Latest',\r\n              yAxis:\r\n                props.data[i]?.values.length > 0\r\n                  ? (last(props.data[i]?.values) || [])[1]\r\n                  : 0,\r\n            },\r\n          ]\r\n        : [],\r\n      animation: false,\r\n    },\r\n  })),\r\n}));\r\n\r\nconst styleOverrides = computed(() => {\r\n  let style: any = {};\r\n  if (props.height && typeof props.height === 'number') {\r\n    style.height = `${props.height}px`;\r\n  }\r\n  return style;\r\n});\r\n\r\n// sometimes the autoresize doesn't resize as often as we'd like\r\n// for page size changes, its own mechanism is fine however for\r\n// usages where we need to animate the size of the graph, it's not as\r\n// smooth so we can use this little tick (updated by anim tick) to resize\r\n// smoothly.\r\nwatch(\r\n  () => props.forceResizeTick,\r\n  () => {\r\n    if (chartInstance.value) {\r\n      chartInstance.value.resize();\r\n    }\r\n  }\r\n);\r\n\r\nfunction setCurrentValueToLatest(updateCurrentValue: boolean) {\r\n  const currentDayValue = numeral(\r\n    (props.data[0].values[props.data[0].values.length - 1] || [])[1]\r\n  );\r\n\r\n  if (updateCurrentValue) {\r\n    currentValue.value = fNum(\r\n      currentDayValue.value() || 0,\r\n      props.axisLabelFormatter.yAxis || {\r\n        style: 'currency',\r\n        currency: 'USD',\r\n        fixedFormat: true,\r\n      }\r\n    );\r\n    const currentChartValue = props.data[0].values[0];\r\n\r\n    if (currentChartValue) {\r\n      emit('setCurrentChartValue', {\r\n        chartDate: currentChartValue[0],\r\n        chartValue: currentChartValue[1],\r\n      });\r\n    }\r\n  }\r\n\r\n  const startValue = numeral((props.data[0].values[0] || [])[1]);\r\n  change.value =\r\n    ((currentDayValue.value() || 0) - (startValue.value() || 0)) /\r\n    (startValue.value() || 0);\r\n}\r\n\r\n// make sure to update the latest values when we get a fresh set of data\r\nwatch(\r\n  () => props.data,\r\n  () => {\r\n    setCurrentValueToLatest(true);\r\n  }\r\n);\r\n\r\n// make sure to update the latest values when we get a fresh set of data\r\n// need to do this onMount as well since the data doesn't change on mount\r\n// it simply is there without change so it won't trigger the watcher\r\nonMounted(() => {\r\n  setCurrentValueToLatest(true);\r\n});\r\n\r\n//reset the current value to latest when the user's mouse leaves the view\r\nfunction handleMouseLeave() {\r\n  setCurrentValueToLatest(true);\r\n  emit('mouseLeaveEvent');\r\n}\r\n\r\nfunction handleMouseEnter() {\r\n  emit('mouseEnterEvent');\r\n}\r\n\r\n// Triggered when hovering mouse over different xAxis points\r\nconst handleAxisMoved = ({ dataIndex, seriesIndex }: AxisMoveEvent) => {\r\n  if (!props.showHeader && !props.needChartValue) return;\r\n  if (props.data[seriesIndex]?.values) {\r\n    props.onAxisMoved &&\r\n      props.onAxisMoved(props.data[seriesIndex].values[dataIndex]);\r\n\r\n    const currentChartValue = props.data[seriesIndex].values[dataIndex];\r\n\r\n    emit('setCurrentChartValue', {\r\n      chartDate: currentChartValue[0],\r\n      chartValue: currentChartValue[1],\r\n    });\r\n\r\n    // toFixed to prevent maximumFractionalDigits error in fNum formatting.\r\n    // Shouldn't need more than 6 decimals because this is a USD value.\r\n    const value = bnum(props.data[seriesIndex].values[dataIndex][1]).toFixed(6);\r\n\r\n    currentValue.value = fNum(\r\n      value,\r\n      props.axisLabelFormatter.yAxis || {\r\n        style: 'currency',\r\n        currency: 'USD',\r\n        fixedFormat: true,\r\n      }\r\n    );\r\n\r\n    // if first point in chart, show overall change\r\n    if (dataIndex === 0) {\r\n      const prev = Number(props.data[seriesIndex].values[0][1]);\r\n      const current = props.data[seriesIndex].values[\r\n        props.data[seriesIndex].values.length - 1\r\n      ][1] as number;\r\n      change.value = (current - prev) / prev;\r\n    } else {\r\n      const prev = props.data[seriesIndex].values[dataIndex - 1][1] as number;\r\n      const current = props.data[seriesIndex].values[dataIndex][1] as number;\r\n      const _change = (current - prev) / prev;\r\n\r\n      // 100% increase if coming from a 0!\r\n      if (prev === 0 && current !== 0) {\r\n        change.value = 1;\r\n        return;\r\n      }\r\n\r\n      // any errors or 0 division, fall back to 0\r\n      if (isNaN(_change)) {\r\n        change.value = 0;\r\n        return;\r\n      }\r\n      change.value = _change;\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <BalLoadingBlock v-if=\"isLoading\" class=\"mt-16 h-96\" />\r\n  <div\r\n    v-else\r\n    :class=\"wrapperClass\"\r\n    @mouseenter=\"handleMouseEnter\"\r\n    @touchstart.passive=\"handleMouseEnter\"\r\n    @mouseleave=\"handleMouseLeave\"\r\n    @touchend=\"handleMouseLeave\"\r\n  >\r\n    <div v-if=\"showHeader\" id=\"lineChartHeader\" class=\"mb-4\">\r\n      <h3 class=\"text-xl tracking-wider text-gray-800 dark:text-gray-400\">\r\n        {{ currentValue }}\r\n      </h3>\r\n      <span\r\n        :class=\"{\r\n          'text-green-400': change >= 0,\r\n          'text-red-400': change < 0,\r\n          'font-medium': true,\r\n        }\"\r\n        >{{ numeral(change).format('+0.0%') }}\r\n      </span>\r\n    </div>\r\n    <ECharts\r\n      ref=\"chartInstance\"\r\n      :class=\"[\r\n        height && typeof (height === 'string') ? `h-${height}` : '',\r\n        'w-full',\r\n        chartClass,\r\n      ]\"\r\n      :option=\"chartConfig\"\r\n      autoresize\r\n      :updateOptions=\"{ replaceMerge: 'series' }\"\r\n      :style=\"[styleOverrides]\"\r\n      @update-axis-pointer=\"handleAxisMoved\"\r\n    />\r\n  </div>\r\n</template>\r\n","<template>\r\n  <BalAlert class=\"py-2 px-2.5 mb-5\" type=\"tip\" size=\"md\" block title=\"\">\r\n    <div class=\"flex flex-col text-sm\">\r\n      <span>{{ $t('poolChart.fxPoolWarning') }}</span>\r\n      <BalLink\r\n        href=\"https://docs.xave.co/product-overview-1/amm#mechanism\"\r\n        external\r\n        noStyle\r\n      >\r\n        <div class=\"flex items-center text-blue-600\">\r\n          <span>\r\n            {{ $t('learnMore') }}\r\n          </span>\r\n          <BalIcon name=\"arrow-up-right\" size=\"sm\" />\r\n        </div>\r\n      </BalLink>\r\n    </div>\r\n  </BalAlert>\r\n</template>\r\n","<script setup lang=\"ts\">\r\nimport { format, addMinutes } from 'date-fns';\r\nimport * as echarts from 'echarts/core';\r\nimport { computed, ref } from 'vue';\r\nimport { useI18n } from 'vue-i18n';\r\n\r\nimport { PRETTY_DATE_FORMAT } from '@/components/forms/lock_actions/constants';\r\nimport PoolChartPeriodSelect from '@/components/pool/PoolChartPeriodSelect.vue';\r\nimport useBreakpoints from '@/composables/useBreakpoints';\r\nimport useDarkMode from '@/composables/useDarkMode';\r\nimport useNumbers from '@/composables/useNumbers';\r\nimport useTailwind from '@/composables/useTailwind';\r\nimport { HistoricalPrices } from '@/services/coingecko/api/price.service';\r\nimport { PoolSnapshot, PoolSnapshots, PoolType } from '@/services/pool/types';\r\nimport { twentyFourHoursInSecs } from '@/composables/useTime';\r\nimport { isFx } from '@/composables/usePool';\r\nimport FxPoolWarning from './FxPoolWarning.vue';\r\n\r\n/**\r\n * TYPES\r\n */\r\nexport type PoolChartPeriod = {\r\n  text: string;\r\n  days: number;\r\n};\r\n\r\ntype Props = {\r\n  historicalPrices?: HistoricalPrices | null;\r\n  snapshots?: PoolSnapshots | null;\r\n  loading: boolean;\r\n  poolPremintedBptIndex: number | null;\r\n  // these props are added to prevent line chart rerender on each pool update\r\n  totalLiquidity?: string;\r\n  tokensList?: string[];\r\n  poolType?: PoolType;\r\n};\r\n\r\nenum PoolChartTab {\r\n  VOLUME = 'volume',\r\n  TVL = 'tvl',\r\n  FEES = 'fees',\r\n}\r\n\r\ninterface PoolChartData {\r\n  color: string[];\r\n  hoverBorderColor?: string;\r\n  hoverColor?: string;\r\n  areaStyle?: {\r\n    color: echarts.LinearGradientObject;\r\n  };\r\n  chartType: string;\r\n  data: {\r\n    name: string;\r\n    values: (readonly [string, number])[];\r\n  }[];\r\n  defaultHeaderStateValue: string;\r\n}\r\n\r\n/**\r\n * PROPS\r\n */\r\nconst props = withDefaults(defineProps<Props>(), {\r\n  loading: false,\r\n  historicalPrices: null,\r\n  snapshots: null,\r\n});\r\n\r\n/**\r\n * COMPOSABLES\r\n */\r\nconst { t } = useI18n();\r\nconst tailwind = useTailwind();\r\nconst { fNum } = useNumbers();\r\nconst { isMobile } = useBreakpoints();\r\nconst { darkMode } = useDarkMode();\r\n\r\n/**\r\n * STATE\r\n */\r\nconst MIN_CHART_VALUES = 2;\r\n\r\nconst tabs = [\r\n  {\r\n    value: PoolChartTab.VOLUME,\r\n    label: t('poolChart.tabs.volume'),\r\n  },\r\n  {\r\n    value: PoolChartTab.TVL,\r\n    label: t('poolChart.tabs.tvl'),\r\n  },\r\n  {\r\n    value: PoolChartTab.FEES,\r\n    label: t('poolChart.tabs.fees'),\r\n  },\r\n];\r\nconst activeTab = ref(tabs[0].value);\r\n\r\nconst currentChartValue = ref({ num: '', isNegative: false });\r\nconst currentChartDate = ref('');\r\nconst isFocusedOnChart = ref(false);\r\n\r\n/**\r\n * COMPUTED\r\n */\r\nconst snapshotValues = computed(() => Object.values(props.snapshots || []));\r\n\r\nconst periodOptions = computed(() => [\r\n  { text: t('poolChart.period.days', [90]), days: 90 },\r\n  { text: t('poolChart.period.days', [180]), days: 180 },\r\n  { text: t('poolChart.period.days', [365]), days: 365 },\r\n  { text: t('poolChart.period.all'), days: snapshotValues.value.length },\r\n]);\r\n\r\nconst currentPeriod = ref<PoolChartPeriod>(periodOptions.value[0]);\r\n\r\nconst timestamps = computed(() =>\r\n  snapshotValues.value.map(snapshot =>\r\n    format(\r\n      addMinutes(\r\n        snapshot.timestamp,\r\n        new Date(snapshot.timestamp).getTimezoneOffset()\r\n      ),\r\n      'yyyy/MM/dd'\r\n    )\r\n  )\r\n);\r\n\r\nfunction getTVLData(periodSnapshots: PoolSnapshot[]) {\r\n  const tvlValues: (readonly [string, number])[] = [];\r\n\r\n  // temporary statement until we start get prices from coingecko for\r\n  if (props.poolType === PoolType.StablePhantom) {\r\n    periodSnapshots.forEach((snapshot, idx) => {\r\n      const timestamp = timestamps.value[idx];\r\n      if (idx === 0) {\r\n        tvlValues.push(\r\n          Object.freeze<[string, number]>([\r\n            timestamp,\r\n            Number(props.totalLiquidity || 0),\r\n          ])\r\n        );\r\n        return;\r\n      }\r\n      tvlValues.push(\r\n        Object.freeze<[string, number]>([timestamp, Number(snapshot.liquidity)])\r\n      );\r\n    });\r\n  } else {\r\n    periodSnapshots.forEach((snapshot, idx) => {\r\n      const timestamp = timestamps.value[idx];\r\n      // get today's TVL value from pool.totalLiquidity due to differences in prices during the day\r\n      if (idx === 0) {\r\n        tvlValues.push(\r\n          Object.freeze<[string, number]>([\r\n            timestamp,\r\n            Number(props.totalLiquidity || 0),\r\n          ])\r\n        );\r\n        return;\r\n      }\r\n\r\n      const prices =\r\n        props.historicalPrices && props.historicalPrices[snapshot.timestamp];\r\n\r\n      // if there are no prices from coingecko use snapshot.liquidity\r\n      if (!prices || prices.length < (props.tokensList?.length || 0)) {\r\n        if (!snapshot.liquidity) {\r\n          return;\r\n        }\r\n        tvlValues.push(\r\n          Object.freeze<[string, number]>([\r\n            timestamp,\r\n            Number(snapshot.liquidity),\r\n          ])\r\n        );\r\n        return;\r\n      }\r\n\r\n      let amounts = [...snapshot.amounts];\r\n\r\n      /**\r\n       * @description\r\n       * There may be more amounts in snapshots than prices.\r\n       * For example in balancer boosted pool the largest one is the BPT of the pool itself.\r\n       * It is removed here to calculate properly snapshot pool value.\r\n       */\r\n      if (snapshot.amounts.length > prices.length) {\r\n        amounts = amounts.filter(\r\n          (_, index) => index !== props.poolPremintedBptIndex\r\n        );\r\n      }\r\n\r\n      const snapshotPoolValue = amounts.reduce(\r\n        (sum: number, amount: string, index: number) => {\r\n          sum += Number(amount) * prices[index];\r\n          return sum;\r\n        },\r\n        0\r\n      );\r\n\r\n      tvlValues.push(\r\n        Object.freeze<[string, number]>([timestamp, snapshotPoolValue])\r\n      );\r\n    });\r\n  }\r\n\r\n  return {\r\n    color: [tailwind.theme.colors.blue['600']],\r\n    hoverBorderColor: tailwind.theme.colors.pink['500'],\r\n    hoverColor: darkMode.value\r\n      ? tailwind.theme.colors.gray['900']\r\n      : tailwind.theme.colors.white,\r\n    areaStyle: {\r\n      color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [\r\n        {\r\n          offset: 0,\r\n          color: 'rgba(14, 165, 233, 0.08)',\r\n        },\r\n        {\r\n          offset: 1,\r\n          color: 'rgba(68, 9, 236, 0)',\r\n        },\r\n      ]),\r\n    },\r\n    chartType: 'line',\r\n    data: [\r\n      {\r\n        name: 'TVL',\r\n        values: tvlValues,\r\n      },\r\n    ],\r\n    defaultHeaderStateValue: fNum(tvlValues[0][1], {\r\n      style: 'currency',\r\n    }),\r\n  };\r\n}\r\n\r\nfunction getFeesData(\r\n  periodSnapshots: PoolSnapshot[],\r\n  isAllTimeSelected: boolean,\r\n  pariodLastSnapshotIdx: number\r\n) {\r\n  const feesValues = periodSnapshots.map(\r\n    (snapshot, idx): readonly [string, number] => {\r\n      const value = parseFloat(snapshot.swapFees);\r\n      let prevValue: number;\r\n\r\n      // get value of prev snapshot\r\n      // if it is last value among all snapshots, then prev value is 0\r\n      if (idx === snapshotValues.value.length - 1) {\r\n        prevValue = 0;\r\n      } // if it is last value among certain period snapshots, then we get prev value from all snapshots\r\n      else if (idx === pariodLastSnapshotIdx) {\r\n        prevValue = parseFloat(snapshotValues.value[idx + 1].swapFees);\r\n      } else {\r\n        prevValue = parseFloat(periodSnapshots[idx + 1].swapFees);\r\n      }\r\n\r\n      const result = Object.freeze<[string, number]>([\r\n        timestamps.value[idx],\r\n        value - prevValue,\r\n      ]);\r\n      return result;\r\n    }\r\n  );\r\n\r\n  // add 0 values in order to show chart properly\r\n  if (periodSnapshots.length < 30) {\r\n    feesValues.push(...addLaggingTimestamps());\r\n  }\r\n\r\n  const defaultHeaderStateValue =\r\n    Number(periodSnapshots[0].swapFees) -\r\n    (isAllTimeSelected\r\n      ? 0\r\n      : Number(periodSnapshots[pariodLastSnapshotIdx].swapFees));\r\n\r\n  return {\r\n    color: [tailwind.theme.colors.yellow['400']],\r\n    chartType: 'bar',\r\n    hoverColor: tailwind.theme.colors.pink['500'],\r\n    data: [\r\n      {\r\n        name: 'Fees',\r\n        values: feesValues,\r\n      },\r\n    ],\r\n    defaultHeaderStateValue: fNum(defaultHeaderStateValue, {\r\n      style: 'currency',\r\n    }),\r\n  };\r\n}\r\n\r\nfunction getVolumeData(\r\n  periodSnapshots: PoolSnapshot[],\r\n  isAllTimeSelected: boolean,\r\n  pariodLastSnapshotIdx: number\r\n): PoolChartData {\r\n  const volumeData = periodSnapshots.map((snapshot, idx) => {\r\n    const value = parseFloat(snapshot.swapVolume);\r\n    let prevValue: number;\r\n\r\n    // get value of prev snapshot\r\n    if (idx === snapshotValues.value.length - 1) {\r\n      prevValue = 0;\r\n    } else if (idx === pariodLastSnapshotIdx) {\r\n      prevValue = parseFloat(snapshotValues.value[idx + 1].swapVolume);\r\n    } else {\r\n      prevValue = parseFloat(periodSnapshots[idx + 1].swapVolume);\r\n    }\r\n    return Object.freeze<[string, number]>([\r\n      timestamps.value[idx],\r\n      value - prevValue,\r\n    ]);\r\n  });\r\n\r\n  // add 0 values in order to show chart properly\r\n  if (periodSnapshots.length < 30) {\r\n    volumeData.push(...addLaggingTimestamps());\r\n  }\r\n\r\n  const defaultHeaderStateValue =\r\n    Number(periodSnapshots[0].swapVolume) -\r\n    (isAllTimeSelected\r\n      ? 0\r\n      : Number(periodSnapshots[pariodLastSnapshotIdx].swapVolume));\r\n\r\n  return {\r\n    color: [tailwind.theme.colors.green['400']],\r\n    chartType: 'bar',\r\n    hoverColor: tailwind.theme.colors.pink['500'],\r\n    data: [\r\n      {\r\n        name: 'Volume',\r\n        values: volumeData,\r\n      },\r\n    ],\r\n    defaultHeaderStateValue: fNum(defaultHeaderStateValue, {\r\n      style: 'currency',\r\n    }),\r\n  };\r\n}\r\n\r\nconst chartData = computed((): PoolChartData => {\r\n  const periodSnapshots =\r\n    currentPeriod.value.days === snapshotValues.value.length\r\n      ? snapshotValues.value\r\n      : snapshotValues.value.slice(0, currentPeriod.value.days - 1);\r\n  const isAllTimeSelected =\r\n    periodSnapshots.length === snapshotValues.value.length;\r\n  const pariodLastSnapshotIdx = periodSnapshots.length - 1;\r\n\r\n  if (activeTab.value === PoolChartTab.TVL) {\r\n    return getTVLData(periodSnapshots);\r\n  }\r\n\r\n  if (activeTab.value === PoolChartTab.FEES) {\r\n    return getFeesData(\r\n      periodSnapshots,\r\n      isAllTimeSelected,\r\n      pariodLastSnapshotIdx\r\n    );\r\n  }\r\n\r\n  return getVolumeData(\r\n    periodSnapshots,\r\n    isAllTimeSelected,\r\n    pariodLastSnapshotIdx\r\n  );\r\n});\r\n\r\nconst defaultChartData = computed(() => {\r\n  const currentPeriodOption = periodOptions.value.find(\r\n    option => option.days === currentPeriod.value.days\r\n  );\r\n  let title = `${currentPeriodOption?.text} ${activeTab.value}`;\r\n\r\n  if (activeTab.value === PoolChartTab.TVL) {\r\n    title = t('poolChart.defaultTitle.tvl');\r\n  }\r\n\r\n  return { title, value: chartData.value.defaultHeaderStateValue };\r\n});\r\n\r\nconst showFxPoolWarning = computed(() => {\r\n  const { poolType } = props;\r\n  return poolType && isFx(poolType) && activeTab.value === PoolChartTab.FEES;\r\n});\r\n\r\n/**\r\n * METHODS\r\n */\r\nfunction setCurrentPeriod(period: PoolChartPeriod) {\r\n  currentPeriod.value = period;\r\n}\r\n\r\nfunction setCurrentChartValue(payload: {\r\n  chartDate: string;\r\n  chartValue: number;\r\n}) {\r\n  currentChartValue.value.num = fNum(payload.chartValue, {\r\n    style: 'currency',\r\n    maximumFractionDigits: 0,\r\n    fixedFormat: true,\r\n  });\r\n  currentChartValue.value.isNegative = payload.chartValue < 0;\r\n\r\n  currentChartDate.value = format(\r\n    new Date(payload.chartDate),\r\n    PRETTY_DATE_FORMAT\r\n  );\r\n}\r\n\r\nfunction addLaggingTimestamps() {\r\n  const lastDate =\r\n    snapshotValues.value[snapshotValues.value.length - 1].timestamp / 1000;\r\n  const days = 30 - snapshotValues.value.length;\r\n\r\n  const timestampsArr: number[] = [];\r\n  for (let i = 1; i <= days; i++) {\r\n    const timestamp = lastDate - i * twentyFourHoursInSecs;\r\n    timestampsArr.push(timestamp * 1000);\r\n  }\r\n\r\n  return timestampsArr.map(timestamp =>\r\n    Object.freeze<[string, number]>([\r\n      format(\r\n        addMinutes(timestamp, new Date(timestamp).getTimezoneOffset()),\r\n        'yyyy/MM/dd'\r\n      ),\r\n      0,\r\n    ])\r\n  );\r\n}\r\n</script>\r\n\r\n<template>\r\n  <BalLoadingBlock v-if=\"loading\" class=\"chart-loading-block\" />\r\n\r\n  <div v-else-if=\"snapshotValues.length >= MIN_CHART_VALUES\" class=\"chart\">\r\n    <div\r\n      class=\"flex flex-col xs:flex-row xs:flex-wrap justify-between mb-6 dark:border-gray-900\"\r\n    >\r\n      <div class=\"flex mb-4\">\r\n        <BalTabs v-model=\"activeTab\" :tabs=\"tabs\" noPad class=\"mr-6 -mb-px\" />\r\n        <div class=\"flex items-center\">\r\n          <PoolChartPeriodSelect\r\n            :options=\"periodOptions\"\r\n            :activeOption=\"currentPeriod\"\r\n            @change-option=\"setCurrentPeriod\"\r\n          />\r\n        </div>\r\n      </div>\r\n      <div\r\n        class=\"flex flex-col items-start xs:items-end text-2xl font-semibold tabular-nums\"\r\n      >\r\n        <p\r\n          class=\"tracking-tighter\"\r\n          :class=\"{\r\n            'text-red-500': currentChartValue.isNegative && isFocusedOnChart,\r\n          }\"\r\n        >\r\n          {{\r\n            isFocusedOnChart ? currentChartValue.num : defaultChartData.value\r\n          }}\r\n        </p>\r\n        <div\r\n          class=\"text-sm font-medium text-secondary\"\r\n          :class=\"{ 'text-pink-500': isFocusedOnChart }\"\r\n        >\r\n          <p>\r\n            {{ isFocusedOnChart ? currentChartDate : defaultChartData.title }}\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <BalBlankSlate\r\n      v-if=\"chartData.data[0].values.length <= MIN_CHART_VALUES\"\r\n      class=\"h-96\"\r\n    >\r\n      <BalIcon name=\"bar-chart\" />\r\n      {{ $t('noPriceInfo') }}\r\n    </BalBlankSlate>\r\n    <BalChart\r\n      v-else\r\n      height=\"96\"\r\n      :data=\"chartData.data\"\r\n      :axisLabelFormatter=\"{\r\n        yAxis: {\r\n          style: 'currency',\r\n          maximumFractionDigits: 0,\r\n          fixedFormat: true,\r\n          abbreviate: true,\r\n        },\r\n      }\"\r\n      :areaStyle=\"chartData.areaStyle\"\r\n      :color=\"chartData.color\"\r\n      :hoverColor=\"chartData.hoverColor\"\r\n      :hoverBorderColor=\"chartData.hoverBorderColor\"\r\n      :xAxisMinInterval=\"3600 * 1000 * 24 * 30\"\r\n      :showLegend=\"false\"\r\n      needChartValue\r\n      :chartType=\"chartData.chartType\"\r\n      :showTooltipLayer=\"false\"\r\n      :hideYAxis=\"isMobile\"\r\n      @set-current-chart-value=\"setCurrentChartValue\"\r\n      @mouse-leave-event=\"isFocusedOnChart = false\"\r\n      @mouse-enter-event=\"isFocusedOnChart = true\"\r\n    />\r\n\r\n    <FxPoolWarning v-if=\"showFxPoolWarning\" />\r\n  </div>\r\n  <BalBlankSlate v-else class=\"h-96\" align=\"center\">\r\n    <BalIcon name=\"bar-chart\" />\r\n    {{ $t('insufficientData') }}\r\n  </BalBlankSlate>\r\n</template>\r\n\r\n<style scoped>\r\n.chart-loading-block {\r\n  height: 30.9rem;\r\n}\r\n\r\n.chart {\r\n  @apply sm:border rounded-xl sm:px-5 sm:pt-5 sm:shadow sm:dark:bg-gray-850 dark:border-transparent;\r\n}\r\n</style>\r\n","<script lang=\"ts\" setup>\r\nimport { computed } from 'vue';\r\nimport { useI18n } from 'vue-i18n';\r\n\r\nimport APRTooltip from '@/components/tooltips/APRTooltip/APRTooltip.vue';\r\nimport useNumbers, { FNumFormats } from '@/composables/useNumbers';\r\nimport { isLBP, totalAprLabel } from '@/composables/usePool';\r\nimport { APR_THRESHOLD, VOLUME_THRESHOLD } from '@/constants/pools';\r\nimport { Pool } from '@/services/pool/types';\r\nimport { AprBreakdown } from '@balancer-labs/sdk';\r\n\r\n/**\r\n * TYPES\r\n */\r\ntype Props = {\r\n  pool?: Pool | null;\r\n  poolApr: AprBreakdown | null;\r\n  loading?: boolean;\r\n  loadingApr?: boolean;\r\n};\r\n\r\n/**\r\n * PROPS & EMITS\r\n */\r\nconst props = withDefaults(defineProps<Props>(), {\r\n  loading: false,\r\n  pool: null,\r\n  poolApr: null,\r\n});\r\n\r\n/**\r\n * COMPOSABLES\r\n */\r\nconst { fNum } = useNumbers();\r\nconst { t } = useI18n();\r\n\r\n/**\r\n * COMPUTED\r\n */\r\nconst aprLabel = computed((): string => {\r\n  const poolAPRs = props.poolApr;\r\n  if (!poolAPRs) return '0';\r\n\r\n  return totalAprLabel(poolAPRs, props.pool?.boost);\r\n});\r\n\r\nconst stats = computed(() => {\r\n  const volumeSnapshot = Number(props.pool?.volumeSnapshot || '0');\r\n  const feesSnapshot = Number(props.pool?.feesSnapshot || '0');\r\n  return [\r\n    {\r\n      id: 'poolValue',\r\n      label: t('poolValue'),\r\n      value: fNum(props.pool?.totalLiquidity || '0', FNumFormats.fiat),\r\n      loading: props.loading,\r\n    },\r\n    {\r\n      id: 'volumeTime',\r\n      label: t('volumeTime', ['24h']),\r\n      value: fNum(\r\n        volumeSnapshot > VOLUME_THRESHOLD ? '-' : volumeSnapshot,\r\n        FNumFormats.fiat\r\n      ),\r\n      loading: props.loading,\r\n    },\r\n    {\r\n      id: 'feesTime',\r\n      label: t('feesTime', ['24h']),\r\n      value: fNum(\r\n        feesSnapshot > VOLUME_THRESHOLD ? '-' : feesSnapshot,\r\n        FNumFormats.fiat\r\n      ),\r\n      loading: props.loading,\r\n    },\r\n    {\r\n      id: 'apr',\r\n      label: 'APR',\r\n      value:\r\n        Number(props.poolApr?.swapFees || '0') > APR_THRESHOLD\r\n          ? '-'\r\n          : aprLabel.value,\r\n      loading: props.loadingApr,\r\n    },\r\n  ];\r\n});\r\n</script>\r\n\r\n<template>\r\n  <div class=\"grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-4 gap-4\">\r\n    <template v-for=\"stat in stats\" :key=\"stat.id\">\r\n      <BalLoadingBlock v-if=\"stat.loading || !pool\" class=\"h-24\" />\r\n      <BalCard v-else>\r\n        <div class=\"flex mb-2 text-sm font-medium text-secondary\">\r\n          <span>{{ stat.label }}</span>\r\n          <template v-if=\"stat.id === 'apr' && poolApr\">\r\n            <BalTooltip\r\n              v-if=\"isLBP(pool.poolType)\"\r\n              width=\"36\"\r\n              :text=\"$t('lbpAprTooltip')\"\r\n              iconSize=\"sm\"\r\n              iconClass=\"ml-1\"\r\n            />\r\n            <APRTooltip v-else :pool=\"pool\" :poolApr=\"poolApr\" />\r\n          </template>\r\n        </div>\r\n        <div\r\n          :class=\"[\r\n            'flex items-center text-xl font-medium',\r\n            {\r\n              'text-gray-300 dark:text-gray-600 line-through':\r\n                stat.id === 'apr' && isLBP(pool.poolType),\r\n            },\r\n          ]\"\r\n        >\r\n          {{ stat.value }}\r\n        </div>\r\n      </BalCard>\r\n    </template>\r\n  </div>\r\n</template>\r\n","import { reactive } from 'vue';\r\nimport { useInfiniteQuery, UseInfiniteQueryOptions } from '@tanstack/vue-query';\r\n\r\nimport { POOLS } from '@/constants/pools';\r\nimport QUERY_KEYS from '@/constants/queryKeys';\r\nimport { balancerSubgraphService } from '@/services/balancer/subgraph/balancer-subgraph.service';\r\nimport { PoolSwap } from '@/services/pool/types';\r\n\r\nimport useNetwork from '../useNetwork';\r\n\r\ntype PoolSwapsQueryResponse = {\r\n  poolSwaps: PoolSwap[];\r\n  skip?: number;\r\n};\r\n\r\ntype QueryOptions = UseInfiniteQueryOptions<PoolSwapsQueryResponse>;\r\n\r\nexport default function usePoolSwapsQuery(\r\n  id: string,\r\n  subgraphQuery: Record<string, any> = {},\r\n  options: QueryOptions = {}\r\n) {\r\n  // COMPOSABLES\r\n  const { networkId } = useNetwork();\r\n\r\n  // DATA\r\n  const queryKey = reactive(\r\n    QUERY_KEYS.Pools.Swaps(networkId, id, subgraphQuery)\r\n  );\r\n\r\n  // METHODS\r\n  const queryFn = async ({ pageParam = 0 }) => {\r\n    const pagination =\r\n      pageParam === 0\r\n        ? POOLS.Pagination.PerPoolInitial\r\n        : POOLS.Pagination.PerPool;\r\n\r\n    const poolSwaps = await balancerSubgraphService.poolSwaps.get({\r\n      first: pagination,\r\n      skip: pageParam,\r\n      where: Object.assign(\r\n        {\r\n          poolId: id,\r\n        },\r\n        subgraphQuery\r\n      ),\r\n    });\r\n\r\n    return {\r\n      poolSwaps,\r\n      skip: poolSwaps.length >= pagination ? pageParam + pagination : undefined,\r\n    };\r\n  };\r\n\r\n  const queryOptions = reactive({\r\n    getNextPageParam: (lastPage: PoolSwapsQueryResponse) => lastPage.skip,\r\n    ...options,\r\n  });\r\n\r\n  return useInfiniteQuery<PoolSwapsQueryResponse>(\r\n    queryKey,\r\n    queryFn,\r\n    queryOptions as QueryOptions\r\n  );\r\n}\r\n","import { computed, reactive } from 'vue';\r\nimport { useInfiniteQuery, UseInfiniteQueryOptions } from '@tanstack/vue-query';\r\n\r\nimport { POOLS } from '@/constants/pools';\r\nimport QUERY_KEYS from '@/constants/queryKeys';\r\nimport { balancerSubgraphService } from '@/services/balancer/subgraph/balancer-subgraph.service';\r\nimport { PoolSwap } from '@/services/pool/types';\r\nimport useWeb3 from '@/services/web3/useWeb3';\r\n\r\nimport useNetwork from '../useNetwork';\r\n\r\ntype PoolSwapsQueryResponse = {\r\n  poolSwaps: PoolSwap[];\r\n  skip?: number;\r\n};\r\n\r\ntype QueryOptions = UseInfiniteQueryOptions<PoolSwapsQueryResponse>;\r\n\r\nexport default function useUserPoolSwapsQuery(\r\n  id: string,\r\n  options: QueryOptions = {}\r\n) {\r\n  // COMPOSABLES\r\n  const { account, isWalletReady } = useWeb3();\r\n  const { networkId } = useNetwork();\r\n\r\n  // COMPUTED\r\n  const enabled = computed(() => isWalletReady.value && account.value != null);\r\n\r\n  // DATA\r\n  const queryKey = reactive(QUERY_KEYS.Pools.UserSwaps(networkId, id, account));\r\n\r\n  // METHODS\r\n  const queryFn = async ({ pageParam = 0 }) => {\r\n    const poolSwaps = await balancerSubgraphService.poolSwaps.get({\r\n      first: POOLS.Pagination.PerPage,\r\n      skip: pageParam,\r\n      where: {\r\n        userAddress: account.value.toLowerCase(),\r\n        poolId: id,\r\n      },\r\n    });\r\n\r\n    return {\r\n      poolSwaps,\r\n      skip:\r\n        poolSwaps.length >= POOLS.Pagination.PerPage\r\n          ? pageParam + POOLS.Pagination.PerPage\r\n          : undefined,\r\n    };\r\n  };\r\n\r\n  const queryOptions = reactive({\r\n    enabled,\r\n    getNextPageParam: (lastPage: PoolSwapsQueryResponse) => lastPage.skip,\r\n    ...options,\r\n  });\r\n\r\n  return useInfiniteQuery<PoolSwapsQueryResponse>(\r\n    queryKey,\r\n    queryFn,\r\n    queryOptions as QueryOptions\r\n  );\r\n}\r\n","export enum PoolTransactionsTab {\r\n  ALL_ACTIVITY = 'allActivity',\r\n  USER_ACTIVITY = 'userActivity',\r\n  SWAPS = 'swaps',\r\n}\r\n","<script setup lang=\"ts\">\r\nimport { formatDistanceToNow } from 'date-fns';\r\nimport { groupBy } from 'lodash';\r\nimport { computed } from 'vue';\r\nimport { useI18n } from 'vue-i18n';\r\n\r\nimport { ColumnDefinition } from '@/components/_global/BalTable/types';\r\n\r\nimport useBreakpoints from '@/composables/useBreakpoints';\r\nimport useNumbers, { FNumFormats } from '@/composables/useNumbers';\r\nimport { useTokens } from '@/providers/tokens.provider';\r\nimport { bnum } from '@/lib/utils';\r\nimport { Pool, PoolSwap } from '@/services/pool/types';\r\nimport useWeb3 from '@/services/web3/useWeb3';\r\n\r\n/**\r\n * TYPES\r\n */\r\ntype TokenAmount = {\r\n  address: string;\r\n  amount: string;\r\n};\r\n\r\ntype SwapType = 'invest' | 'withdraw' | 'swap';\r\n\r\ntype SwapRow = {\r\n  label: string;\r\n  timestamp: number;\r\n  formattedDate: string;\r\n  value: number;\r\n  formattedValue: string;\r\n  type: SwapType;\r\n  tx: string;\r\n  tokenAmounts: TokenAmount[];\r\n};\r\n\r\ntype Props = {\r\n  poolSwaps: PoolSwap[];\r\n  isLoading?: boolean;\r\n  isLoadingMore?: boolean;\r\n  loadMore?: () => void;\r\n  isPaginated?: boolean;\r\n  noResultsLabel?: string;\r\n  pool: Pool;\r\n};\r\n\r\n/**\r\n * PROPS & EMITS\r\n */\r\nconst props = withDefaults(defineProps<Props>(), {\r\n  isLoading: false,\r\n  isLoadingMore: false,\r\n  isPaginated: false,\r\n  noResultsLabel: '',\r\n});\r\n\r\nconst emit = defineEmits(['loadMore']);\r\n\r\n/**\r\n * COMPOSABLES\r\n */\r\nconst { fNum } = useNumbers();\r\nconst { t } = useI18n();\r\nconst { priceFor } = useTokens();\r\nconst { upToLargeBreakpoint } = useBreakpoints();\r\nconst { explorerLinks } = useWeb3();\r\n\r\n/**\r\n * COMPUTED\r\n */\r\nconst columns = computed<ColumnDefinition<SwapRow>[]>(() => [\r\n  {\r\n    name: t('action'),\r\n    id: 'action',\r\n    accessor: 'tx',\r\n    Cell: 'actionCell',\r\n    width: 150,\r\n    sortable: false,\r\n  },\r\n  {\r\n    name: t('details'),\r\n    id: 'details',\r\n    accessor: '',\r\n    Cell: 'detailsCell',\r\n    width: 325,\r\n    sortable: false,\r\n  },\r\n  {\r\n    name: t('value'),\r\n    id: 'value',\r\n    accessor: 'value',\r\n    Cell: 'valueCell',\r\n    align: 'right',\r\n    className: 'align-center w-40',\r\n    sortKey: pool => pool.value,\r\n    width: 125,\r\n  },\r\n  {\r\n    name: t('time'),\r\n    id: 'timeAgo',\r\n    accessor: 'timestamp',\r\n    Cell: 'timeCell',\r\n    align: 'right',\r\n    sortKey: pool => pool.timestamp,\r\n    width: 200,\r\n  },\r\n]);\r\n\r\nconst swapRows = computed<SwapRow[]>(() => {\r\n  if (props.isLoading) {\r\n    return [];\r\n  }\r\n\r\n  const groupedSwaps = Object.entries(groupBy(props.poolSwaps, 'tx'));\r\n\r\n  return groupedSwaps.map(([tx, swaps]) => {\r\n    const { tokenIn, tokenOut, timestamp } = swaps[0];\r\n\r\n    let type: SwapType;\r\n    let label: string;\r\n\r\n    if (tokenOut === props.pool.address) {\r\n      type = 'invest';\r\n      label = t('pool');\r\n    } else if (tokenIn === props.pool.address) {\r\n      type = 'withdraw';\r\n      label = t('withdraw.label');\r\n    } else {\r\n      type = 'swap';\r\n      label = t('swap');\r\n    }\r\n\r\n    const tokenAmounts = getTokenAmounts(swaps, type);\r\n    const value = getTransactionValue(tokenAmounts, type);\r\n\r\n    return {\r\n      label,\r\n      type,\r\n      value,\r\n      formattedValue:\r\n        value > 0 ? fNum(value, { style: 'currency', abbreviate: true }) : '-',\r\n      timestamp,\r\n      formattedDate: t('timeAgo', [formatDistanceToNow(timestamp)]),\r\n      tx,\r\n      tokenAmounts,\r\n    };\r\n  });\r\n});\r\n\r\n/**\r\n * METHODS\r\n */\r\nfunction getTransactionValue(tokenAmounts: TokenAmount[], type: SwapType) {\r\n  if (type === 'swap') {\r\n    const mainTokenAddress = getUnderlyingTokenAddress(tokenAmounts[1].address);\r\n    const mainEquivAmount = getMainTokenEquivalentAmount(\r\n      tokenAmounts[1].address,\r\n      tokenAmounts[1].amount\r\n    );\r\n    return bnum(priceFor(mainTokenAddress)).times(mainEquivAmount).toNumber();\r\n  }\r\n\r\n  let total = bnum(0);\r\n\r\n  for (const { address, amount } of tokenAmounts) {\r\n    const mainTokenAddress = getUnderlyingTokenAddress(address);\r\n    const mainEquivAmount = getMainTokenEquivalentAmount(address, amount);\r\n    const price = priceFor(mainTokenAddress);\r\n    const amountNumber = Math.abs(parseFloat(mainEquivAmount.toString()));\r\n\r\n    // If the price is unknown for any of the positive amounts - the value cannot be computed.\r\n    if (amountNumber > 0 && price === 0) {\r\n      return 0;\r\n    }\r\n\r\n    total = total.plus(bnum(amountNumber).times(price));\r\n  }\r\n\r\n  return total.toNumber();\r\n}\r\n\r\nfunction getTokenAmounts(swaps: PoolSwap[], type: SwapType) {\r\n  const isInvest = type === 'invest';\r\n\r\n  if (type === 'swap') {\r\n    const swap = swaps[0];\r\n    const { tokenIn, tokenOut, tokenAmountIn, tokenAmountOut } = swap;\r\n\r\n    return [\r\n      {\r\n        address: tokenIn,\r\n        amount: tokenAmountIn,\r\n      },\r\n      {\r\n        address: tokenOut,\r\n        amount: tokenAmountOut,\r\n      },\r\n    ];\r\n  }\r\n  return swaps.map(swap => {\r\n    let address = isInvest ? swap.tokenIn : swap.tokenOut;\r\n\r\n    return {\r\n      address,\r\n      amount: isInvest ? swap.tokenAmountIn : swap.tokenAmountOut,\r\n    };\r\n  });\r\n}\r\n\r\nfunction getUnderlyingTokenAddress(address: string) {\r\n  const linearPools = props.pool?.onchain?.linearPools;\r\n  return linearPools != null && linearPools[address] != null\r\n    ? linearPools[address].mainToken.address\r\n    : address;\r\n}\r\n\r\nfunction getMainTokenEquivalentAmount(address: string, amount: string) {\r\n  const linearPools = props.pool?.onchain?.linearPools;\r\n  return linearPools != null && linearPools[address] != null\r\n    ? bnum(amount).times(linearPools[address].priceRate)\r\n    : bnum(amount);\r\n}\r\n</script>\r\n\r\n<template>\r\n  <BalCard\r\n    class=\"overflow-x-auto\"\r\n    :square=\"upToLargeBreakpoint\"\r\n    :noBorder=\"upToLargeBreakpoint\"\r\n    noPad\r\n  >\r\n    <BalTable\r\n      :columns=\"columns\"\r\n      :data=\"swapRows\"\r\n      :isLoading=\"isLoading\"\r\n      :isLoadingMore=\"isLoadingMore\"\r\n      :isPaginated=\"isPaginated\"\r\n      skeletonClass=\"h-64\"\r\n      sticky=\"both\"\r\n      :noResultsLabel=\"noResultsLabel\"\r\n      :initialState=\"{\r\n        sortColumn: 'timeAgo',\r\n        sortDirection: 'desc',\r\n      }\"\r\n      @load-more=\"emit('loadMore')\"\r\n    >\r\n      <template #actionCell=\"action\">\r\n        <div class=\"py-2 px-6\">\r\n          <div class=\"flex items-center\">\r\n            <div class=\"flex mr-3 center\">\r\n              <BalIcon\r\n                v-if=\"action.type === 'invest'\"\r\n                name=\"plus\"\r\n                size=\"sm\"\r\n                class=\"text-green-500 dark:text-green-400\"\r\n              />\r\n              <BalIcon\r\n                v-else-if=\"action.type === 'withdraw'\"\r\n                name=\"minus\"\r\n                size=\"sm\"\r\n                class=\"text-red-500\"\r\n              />\r\n              <BalIcon\r\n                v-else\r\n                name=\"repeat\"\r\n                size=\"sm\"\r\n                class=\"text-green-500 dark:text-green-400\"\r\n              />\r\n            </div>\r\n            <div>{{ action.label }}</div>\r\n          </div>\r\n        </div>\r\n      </template>\r\n\r\n      <template #detailsCell=\"action\">\r\n        <div class=\"flex flex-wrap items-center py-4 px-6 -mt-1\">\r\n          <template v-if=\"action.type === 'swap'\">\r\n            <div class=\"token-item\">\r\n              <BalAsset\r\n                :address=\"action.tokenAmounts[0].address\"\r\n                class=\"mr-2 shrink-0\"\r\n              />\r\n              <span class=\"font-numeric\">{{\r\n                fNum(action.tokenAmounts[0].amount, FNumFormats.token)\r\n              }}</span>\r\n            </div>\r\n            <BalIcon name=\"arrow-right\" class=\"mx-1\" />\r\n            <div class=\"token-item\">\r\n              <BalAsset\r\n                :address=\"action.tokenAmounts[1].address\"\r\n                class=\"mr-2 shrink-0\"\r\n              />\r\n              <span class=\"font-numeric\">{{\r\n                fNum(action.tokenAmounts[1].amount, FNumFormats.token)\r\n              }}</span>\r\n            </div>\r\n          </template>\r\n          <template v-else>\r\n            <template v-for=\"(tokenAmount, i) in action.tokenAmounts\" :key=\"i\">\r\n              <div\r\n                v-if=\"tokenAmount.amount !== '0'\"\r\n                class=\"flex items-center p-1 px-2 m-1 bg-gray-50 dark:bg-gray-700 rounded-lg\"\r\n              >\r\n                <BalAsset\r\n                  :address=\"tokenAmount.address\"\r\n                  class=\"mr-2 shrink-0\"\r\n                />\r\n                <span class=\"font-numeric\">{{\r\n                  fNum(tokenAmount.amount, FNumFormats.token)\r\n                }}</span>\r\n              </div>\r\n            </template>\r\n          </template>\r\n        </div>\r\n      </template>\r\n\r\n      <template #valueCell=\"action\">\r\n        <div class=\"flex justify-end py-4 px-6 font-numeric\">\r\n          {{ action.formattedValue }}\r\n        </div>\r\n      </template>\r\n\r\n      <template #timeCell=\"action\">\r\n        <div class=\"py-4 px-6\">\r\n          <div\r\n            class=\"flex justify-end items-center text-right whitespace-nowrap wrap\"\r\n          >\r\n            {{ action.formattedDate }}\r\n            <BalLink\r\n              :href=\"explorerLinks.txLink(action.tx)\"\r\n              external\r\n              class=\"flex items-center ml-2\"\r\n            >\r\n              <BalIcon\r\n                name=\"arrow-up-right\"\r\n                size=\"sm\"\r\n                class=\"hover:text-blue-600 dark:hover:text-blue-400 transition-colors text-secondary\"\r\n              />\r\n            </BalLink>\r\n          </div>\r\n        </div>\r\n      </template>\r\n    </BalTable>\r\n  </BalCard>\r\n</template>\r\n\r\n<style scoped>\r\n.token-item {\r\n  @apply m-1 flex items-center p-1 px-2 bg-gray-50 dark:bg-gray-700 rounded-lg;\r\n}\r\n</style>\r\n","<script setup lang=\"ts\">\r\nimport { flatten } from 'lodash';\r\nimport { computed } from 'vue';\r\n\r\nimport usePoolSwapsQuery from '@/composables/queries/usePoolSwapsQuery';\r\nimport useUserPoolSwapsQuery from '@/composables/queries/useUserPoolSwapsQuery';\r\nimport { Pool } from '@/services/pool/types';\r\n\r\nimport { PoolTransactionsTab } from '../types';\r\nimport Table from './Table.vue';\r\n\r\n/**\r\n * TYPES\r\n */\r\ntype Props = {\r\n  pool: Pool;\r\n  loading: boolean;\r\n  poolActivityType: PoolTransactionsTab;\r\n};\r\n\r\n/**\r\n * PROPS\r\n */\r\nconst props = withDefaults(defineProps<Props>(), {\r\n  loading: false,\r\n  poolActivityType: PoolTransactionsTab.ALL_ACTIVITY,\r\n});\r\n\r\n/**\r\n * QUERIES\r\n */\r\n\r\nconst poolSwapsQuery =\r\n  props.poolActivityType === PoolTransactionsTab.ALL_ACTIVITY\r\n    ? usePoolSwapsQuery(props.pool.id)\r\n    : useUserPoolSwapsQuery(props.pool.id);\r\n\r\n/**\r\n * COMPUTED\r\n */\r\nconst poolSwaps = computed(() =>\r\n  poolSwapsQuery.data.value\r\n    ? flatten(poolSwapsQuery.data.value.pages.map(page => page.poolSwaps))\r\n    : []\r\n);\r\nconst isLoadingPoolSwaps = computed(() => poolSwapsQuery.isLoading.value);\r\nconst poolSwapsHasNextPage = computed(() => poolSwapsQuery.hasNextPage?.value);\r\nconst poolSwapsIsFetchingNextPage = computed(\r\n  () => poolSwapsQuery.isFetchingNextPage?.value\r\n);\r\n\r\n/**\r\n * METHODS\r\n */\r\nfunction loadMorePoolSwaps() {\r\n  poolSwapsQuery.fetchNextPage();\r\n}\r\n</script>\r\n\r\n<template>\r\n  <Table\r\n    :poolSwaps=\"poolSwaps\"\r\n    :pool=\"pool\"\r\n    :isLoading=\"loading || isLoadingPoolSwaps\"\r\n    :isLoadingMore=\"poolSwapsIsFetchingNextPage\"\r\n    :isPaginated=\"poolSwapsHasNextPage\"\r\n    :noResultsLabel=\"\r\n      poolActivityType === PoolTransactionsTab.ALL_ACTIVITY\r\n        ? $t('poolTransactions.noResults.allTransactions')\r\n        : $t('poolTransactions.noResults.myTransactions')\r\n    \"\r\n    @load-more=\"loadMorePoolSwaps\"\r\n  />\r\n</template>\r\n","import { reactive } from 'vue';\r\nimport { useInfiniteQuery, UseInfiniteQueryOptions } from '@tanstack/vue-query';\r\n\r\nimport { POOLS } from '@/constants/pools';\r\nimport QUERY_KEYS from '@/constants/queryKeys';\r\nimport { balancerSubgraphService } from '@/services/balancer/subgraph/balancer-subgraph.service';\r\nimport { PoolActivity } from '@/services/pool/types';\r\n\r\nimport useNetwork from '../useNetwork';\r\n\r\ntype PoolActivitiesQueryResponse = {\r\n  poolActivities: PoolActivity[];\r\n  skip?: number;\r\n};\r\n\r\ntype QueryOptions = UseInfiniteQueryOptions<PoolActivitiesQueryResponse>;\r\n\r\nexport default function usePoolActivitiesQuery(\r\n  id: string,\r\n  options: QueryOptions = {}\r\n) {\r\n  // COMPOSABLES\r\n  const { networkId } = useNetwork();\r\n\r\n  // DATA\r\n  const queryKey = reactive(QUERY_KEYS.Pools.Activities(networkId, id));\r\n\r\n  // METHODS\r\n  const queryFn = async ({ pageParam = 0 }) => {\r\n    const pagination =\r\n      pageParam === 0\r\n        ? POOLS.Pagination.PerPoolInitial\r\n        : POOLS.Pagination.PerPool;\r\n\r\n    const poolActivities = await balancerSubgraphService.poolActivities.get({\r\n      first: pagination,\r\n      skip: pageParam,\r\n      where: {\r\n        pool: id,\r\n      },\r\n    });\r\n\r\n    return {\r\n      poolActivities,\r\n      skip:\r\n        poolActivities.length >= pagination\r\n          ? pageParam + pagination\r\n          : undefined,\r\n    };\r\n  };\r\n\r\n  const queryOptions = reactive({\r\n    getNextPageParam: (lastPage: PoolActivitiesQueryResponse) => lastPage.skip,\r\n    ...options,\r\n  });\r\n\r\n  return useInfiniteQuery<PoolActivitiesQueryResponse>(\r\n    queryKey,\r\n    queryFn,\r\n    queryOptions as QueryOptions\r\n  );\r\n}\r\n","import { computed, reactive } from 'vue';\r\nimport { useInfiniteQuery, UseInfiniteQueryOptions } from '@tanstack/vue-query';\r\n\r\nimport { POOLS } from '@/constants/pools';\r\nimport QUERY_KEYS from '@/constants/queryKeys';\r\nimport { balancerSubgraphService } from '@/services/balancer/subgraph/balancer-subgraph.service';\r\nimport { PoolActivity } from '@/services/pool/types';\r\nimport useWeb3 from '@/services/web3/useWeb3';\r\n\r\nimport useNetwork from '../useNetwork';\r\n\r\ntype UserPoolActivitiesQueryResponse = {\r\n  poolActivities: PoolActivity[];\r\n  skip?: number;\r\n};\r\n\r\ntype QueryOptions = UseInfiniteQueryOptions<UserPoolActivitiesQueryResponse>;\r\n\r\nexport default function usePoolUserActivitiesQuery(\r\n  id: string,\r\n  options: QueryOptions = {}\r\n) {\r\n  // COMPOSABLES\r\n  const { account, isWalletReady } = useWeb3();\r\n  const { networkId } = useNetwork();\r\n\r\n  // COMPUTED\r\n  const enabled = computed(() => isWalletReady.value && account.value != null);\r\n\r\n  // DATA\r\n  const queryKey = reactive(\r\n    QUERY_KEYS.Pools.UserActivities(networkId, id, account)\r\n  );\r\n\r\n  // METHODS\r\n  const queryFn = async ({ pageParam = 0 }) => {\r\n    const pagination =\r\n      pageParam === 0\r\n        ? POOLS.Pagination.PerPoolInitial\r\n        : POOLS.Pagination.PerPool;\r\n\r\n    const poolActivities = await balancerSubgraphService.poolActivities.get({\r\n      first: pagination,\r\n      skip: pageParam,\r\n      where: {\r\n        pool: id,\r\n        sender: account.value.toLowerCase(),\r\n      },\r\n    });\r\n\r\n    return {\r\n      poolActivities,\r\n      skip:\r\n        poolActivities.length >= pagination\r\n          ? pageParam + pagination\r\n          : undefined,\r\n    };\r\n  };\r\n\r\n  const queryOptions = reactive({\r\n    enabled,\r\n    getNextPageParam: (lastPage: UserPoolActivitiesQueryResponse) =>\r\n      lastPage.skip,\r\n    ...options,\r\n  });\r\n\r\n  return useInfiniteQuery<UserPoolActivitiesQueryResponse>(\r\n    queryKey,\r\n    queryFn,\r\n    queryOptions as QueryOptions\r\n  );\r\n}\r\n","<script setup lang=\"ts\">\r\nimport { getAddress } from '@ethersproject/address';\r\nimport { formatDistanceToNow } from 'date-fns';\r\nimport { computed } from 'vue';\r\nimport { useI18n } from 'vue-i18n';\r\n\r\nimport { ColumnDefinition } from '@/components/_global/BalTable/types';\r\n\r\nimport useBreakpoints from '@/composables/useBreakpoints';\r\nimport useNumbers, { FNumFormats } from '@/composables/useNumbers';\r\nimport { useTokens } from '@/providers/tokens.provider';\r\nimport { bnum } from '@/lib/utils';\r\nimport { Pool, PoolActivity, PoolActivityType } from '@/services/pool/types';\r\nimport useWeb3 from '@/services/web3/useWeb3';\r\nimport { preMintedBptIndex } from '@/composables/usePool';\r\n\r\n/**\r\n * TYPES\r\n */\r\ntype TokenAmount = {\r\n  address: string;\r\n  symbol: string;\r\n  amount: string;\r\n};\r\n\r\ntype ActivityRow = {\r\n  label: string;\r\n  formattedValue: string;\r\n  value: number;\r\n  timestamp: number;\r\n  formattedDate: string;\r\n  tx: string;\r\n  type: PoolActivityType;\r\n  tokenAmounts: TokenAmount[];\r\n};\r\n\r\ntype Props = {\r\n  tokens: string[];\r\n  pool: Pool;\r\n  poolActivities: PoolActivity[];\r\n  isLoading?: boolean;\r\n  isLoadingMore?: boolean;\r\n  loadMore?: () => void;\r\n  isPaginated?: boolean;\r\n  noResultsLabel?: string;\r\n};\r\n\r\n/**\r\n * PROPS & EMITS\r\n */\r\nconst props = withDefaults(defineProps<Props>(), {\r\n  isLoading: false,\r\n  isLoadingMore: false,\r\n  isPaginated: false,\r\n  noResultsLabel: '',\r\n});\r\n\r\nconst emit = defineEmits(['loadMore']);\r\n\r\n/**\r\n * COMPOSABLES\r\n */\r\nconst { fNum } = useNumbers();\r\nconst { t } = useI18n();\r\nconst { explorerLinks } = useWeb3();\r\nconst { upToLargeBreakpoint } = useBreakpoints();\r\nconst { getToken, priceFor } = useTokens();\r\n/**\r\n * COMPUTED\r\n */\r\nconst columns = computed<ColumnDefinition<ActivityRow>[]>(() => [\r\n  {\r\n    name: t('action'),\r\n    id: 'action',\r\n    accessor: 'tx',\r\n    Cell: 'actionCell',\r\n    width: 150,\r\n    sortable: false,\r\n  },\r\n  {\r\n    name: t('value'),\r\n    id: 'value',\r\n    accessor: 'value',\r\n    Cell: 'valueCell',\r\n    align: 'right',\r\n    className: 'align-center w-40',\r\n    sortKey: pool => pool.value,\r\n    width: 125,\r\n  },\r\n  {\r\n    name: t('tokens'),\r\n    id: 'details',\r\n    accessor: '',\r\n    Cell: 'detailsCell',\r\n    width: 325,\r\n    sortable: false,\r\n  },\r\n  {\r\n    name: t('time'),\r\n    id: 'timeAgo',\r\n    accessor: 'timestamp',\r\n    Cell: 'timeCell',\r\n    align: 'right',\r\n    sortKey: pool => pool.timestamp,\r\n    width: 200,\r\n  },\r\n]);\r\n\r\nconst activityRows = computed<ActivityRow[]>(() =>\r\n  props.isLoading\r\n    ? []\r\n    : props.poolActivities.map(({ type, timestamp, tx, amounts }) => {\r\n        const poolTokenItselfIndex = preMintedBptIndex(props.pool);\r\n\r\n        const amountExcludedPoolTokenItself = amounts.filter(\r\n          (amount, index) => index !== poolTokenItselfIndex\r\n        );\r\n\r\n        const isJoin = type === 'Join';\r\n        const value = getJoinExitValue(amountExcludedPoolTokenItself);\r\n\r\n        return {\r\n          label: isJoin ? t('addTokens') : t('withdraw.label'),\r\n          value,\r\n          formattedValue:\r\n            value > 0\r\n              ? fNum(value, { style: 'currency', abbreviate: true })\r\n              : '-',\r\n          timestamp,\r\n          formattedDate: t('timeAgo', [formatDistanceToNow(timestamp)]),\r\n          tx,\r\n          type,\r\n          tokenAmounts: getJoinExitDetails(amountExcludedPoolTokenItself),\r\n        };\r\n      })\r\n);\r\n\r\n/**\r\n * METHODS\r\n */\r\nfunction getJoinExitValue(amounts: PoolActivity['amounts']) {\r\n  let total = bnum(0);\r\n\r\n  for (let i = 0; i < amounts.length; i++) {\r\n    const amount = amounts[i];\r\n    const address = getAddress(props.tokens[i]);\r\n    const token = getToken(address);\r\n    const price = priceFor(token?.address);\r\n    const amountNumber = Math.abs(parseFloat(amount));\r\n    // If the price is unknown for any of the positive amounts - the value cannot be computed.\r\n    if (amountNumber > 0 && price === 0) {\r\n      return 0;\r\n    }\r\n    total = total.plus(bnum(amountNumber).times(price));\r\n  }\r\n  return total.toNumber();\r\n}\r\n\r\nfunction getJoinExitDetails(amounts: PoolActivity['amounts']) {\r\n  return amounts.map((amount, i) => {\r\n    const address = getAddress(props.tokens[i]);\r\n    const token = getToken(address);\r\n    const symbol = token ? token.symbol : address;\r\n    const amountNumber = parseFloat(amount);\r\n    return {\r\n      address,\r\n      symbol,\r\n      amount: fNum(amountNumber, FNumFormats.token),\r\n    };\r\n  });\r\n}\r\n</script>\r\n\r\n<template>\r\n  <BalCard\r\n    class=\"overflow-x-auto\"\r\n    :square=\"upToLargeBreakpoint\"\r\n    :noBorder=\"upToLargeBreakpoint\"\r\n    noPad\r\n  >\r\n    <BalTable\r\n      :columns=\"columns\"\r\n      :data=\"activityRows\"\r\n      :isLoading=\"isLoading\"\r\n      :isLoadingMore=\"isLoadingMore\"\r\n      :isPaginated=\"isPaginated\"\r\n      skeletonClass=\"h-64\"\r\n      sticky=\"both\"\r\n      :noResultsLabel=\"noResultsLabel\"\r\n      :initialState=\"{\r\n        sortColumn: 'timeAgo',\r\n        sortDirection: 'desc',\r\n      }\"\r\n      @load-more=\"emit('loadMore')\"\r\n    >\r\n      <template #actionCell=\"action\">\r\n        <div class=\"py-2 px-6\">\r\n          <div class=\"flex items-center\">\r\n            <div class=\"flex mr-3 center\">\r\n              <BalIcon\r\n                v-if=\"action.type === 'Join'\"\r\n                name=\"plus\"\r\n                size=\"sm\"\r\n                class=\"text-green-500 dark:text-green-400\"\r\n              />\r\n              <BalIcon v-else name=\"minus\" size=\"sm\" class=\"text-red-500\" />\r\n            </div>\r\n            <div class=\"text-left\">{{ action.label }}</div>\r\n          </div>\r\n        </div>\r\n      </template>\r\n\r\n      <template #detailsCell=\"action\">\r\n        <div class=\"flex flex-wrap py-4 px-6 -mt-1\">\r\n          <template v-for=\"(tokenAmount, i) in action.tokenAmounts\" :key=\"i\">\r\n            <div\r\n              v-if=\"tokenAmount.amount !== '0'\"\r\n              class=\"flex items-center p-1 px-2 m-1 bg-gray-50 dark:bg-gray-700 rounded-lg\"\r\n            >\r\n              <BalAsset :address=\"tokenAmount.address\" class=\"mr-2 shrink-0\" />\r\n              <span class=\"font-numeric\">{{ tokenAmount.amount }}</span>\r\n            </div>\r\n          </template>\r\n        </div>\r\n      </template>\r\n\r\n      <template #valueCell=\"action\">\r\n        <div class=\"flex justify-end py-4 px-6 font-numeric\">\r\n          {{ action.formattedValue }}\r\n        </div>\r\n      </template>\r\n\r\n      <template #timeCell=\"action\">\r\n        <div class=\"py-4 px-6\">\r\n          <div\r\n            class=\"flex justify-end items-center text-right whitespace-nowrap wrap\"\r\n          >\r\n            {{ action.formattedDate }}\r\n            <BalLink\r\n              :href=\"explorerLinks.txLink(action.tx)\"\r\n              external\r\n              class=\"flex items-center ml-2\"\r\n            >\r\n              <BalIcon\r\n                name=\"arrow-up-right\"\r\n                size=\"sm\"\r\n                class=\"text-gray-500 hover:text-blue-500 transition-colors\"\r\n              />\r\n            </BalLink>\r\n          </div>\r\n        </div>\r\n      </template>\r\n    </BalTable>\r\n  </BalCard>\r\n</template>\r\n","<script setup lang=\"ts\">\r\nimport { flatten } from 'lodash';\r\nimport { computed } from 'vue';\r\n\r\nimport usePoolActivitiesQuery from '@/composables/queries/usePoolActivitiesQuery';\r\nimport usePoolUserActivitiesQuery from '@/composables/queries/usePoolUserActivitiesQuery';\r\nimport { Pool } from '@/services/pool/types';\r\n\r\nimport { PoolTransactionsTab } from '../types';\r\nimport Table from './Table.vue';\r\nimport { tokensListExclBpt } from '@/composables/usePool';\r\n\r\n/**\r\n * TYPES\r\n */\r\ntype Props = {\r\n  pool: Pool;\r\n  loading: boolean;\r\n  poolActivityType: PoolTransactionsTab;\r\n};\r\n\r\n/**\r\n * PROPS\r\n */\r\nconst props = withDefaults(defineProps<Props>(), {\r\n  loading: false,\r\n  poolActivityType: PoolTransactionsTab.ALL_ACTIVITY,\r\n});\r\n\r\n/**\r\n * QUERIES\r\n */\r\n\r\nconst poolActivitiesQuery =\r\n  props.poolActivityType === PoolTransactionsTab.ALL_ACTIVITY\r\n    ? usePoolActivitiesQuery(props.pool.id)\r\n    : usePoolUserActivitiesQuery(props.pool.id);\r\n\r\n/**\r\n * COMPUTED\r\n */\r\nconst poolActivities = computed(() =>\r\n  poolActivitiesQuery.data.value\r\n    ? flatten(\r\n        poolActivitiesQuery.data.value.pages.map(page => page.poolActivities)\r\n      )\r\n    : []\r\n);\r\nconst isLoadingPoolActivities = computed(\r\n  () => poolActivitiesQuery.isLoading.value\r\n);\r\nconst poolActivitiesHasNextPage = computed(\r\n  () => poolActivitiesQuery.hasNextPage?.value\r\n);\r\nconst poolActivitiesIsFetchingNextPage = computed(\r\n  () => poolActivitiesQuery.isFetchingNextPage?.value\r\n);\r\n\r\n/**\r\n * METHODS\r\n */\r\nfunction loadMorePoolActivities() {\r\n  poolActivitiesQuery.fetchNextPage();\r\n}\r\n</script>\r\n\r\n<template>\r\n  <Table\r\n    :pool=\"pool\"\r\n    :tokens=\"tokensListExclBpt(pool)\"\r\n    :poolActivities=\"poolActivities\"\r\n    :isLoading=\"loading || isLoadingPoolActivities\"\r\n    :isLoadingMore=\"poolActivitiesIsFetchingNextPage\"\r\n    :isPaginated=\"poolActivitiesHasNextPage\"\r\n    :noResultsLabel=\"\r\n      poolActivityType === PoolTransactionsTab.ALL_ACTIVITY\r\n        ? $t('poolTransactions.noResults.allInvestments')\r\n        : $t('poolTransactions.noResults.myInvestments')\r\n    \"\r\n    @load-more=\"loadMorePoolActivities\"\r\n  />\r\n</template>\r\n","<script setup lang=\"ts\">\r\nimport { computed, ref, toRef } from 'vue';\r\nimport { useI18n } from 'vue-i18n';\r\n\r\nimport { usePool } from '@/composables/usePool';\r\nimport { Pool } from '@/services/pool/types';\r\n\r\nimport BoostedActivities from '../BoostedPoolActivities/Activities.vue';\r\nimport Activities from '../PoolActivities/Activities.vue';\r\nimport { PoolTransactionsTab } from '../types';\r\nimport useWeb3 from '@/services/web3/useWeb3';\r\n\r\n/**\r\n * TYPES\r\n */\r\ntype Props = {\r\n  pool: Pool;\r\n  loading: boolean;\r\n};\r\n\r\n/**\r\n * PROPS\r\n */\r\nconst props = withDefaults(defineProps<Props>(), {\r\n  loading: false,\r\n});\r\n\r\n/**\r\n * COMPOSABLES\r\n */\r\nconst { isWalletReady } = useWeb3();\r\n\r\n/**\r\n * COMPUTED\r\n */\r\nconst tabs = computed(() =>\r\n  isDeepPool.value || isStablePhantomPool.value\r\n    ? [\r\n        {\r\n          value: PoolTransactionsTab.ALL_ACTIVITY,\r\n          label: t('poolTransactions.tabs.allTransactions'),\r\n        },\r\n        ...(isWalletReady.value\r\n          ? [\r\n              {\r\n                value: PoolTransactionsTab.USER_ACTIVITY,\r\n                label: t('poolTransactions.tabs.myTransactions'),\r\n              },\r\n            ]\r\n          : []),\r\n      ]\r\n    : [\r\n        {\r\n          value: PoolTransactionsTab.ALL_ACTIVITY,\r\n          label: t('poolTransactions.tabs.allInvestments'),\r\n        },\r\n        ...(isWalletReady.value\r\n          ? [\r\n              {\r\n                value: PoolTransactionsTab.USER_ACTIVITY,\r\n                label: t('poolTransactions.tabs.myInvestments'),\r\n              },\r\n            ]\r\n          : []),\r\n      ]\r\n);\r\n\r\n/**\r\n * COMPOSABLES\r\n */\r\nconst { isDeepPool, isStablePhantomPool } = usePool(toRef(props, 'pool'));\r\nconst { t } = useI18n();\r\n\r\n/**\r\n * STATE\r\n */\r\nconst activeTab = ref(tabs.value[0].value);\r\n\r\n/**\r\n * COMPUTED\r\n */\r\nconst title = computed((): string => {\r\n  if (isDeepPool.value || isStablePhantomPool.value) return t('poolActivity');\r\n\r\n  return t('liquidityProvision');\r\n});\r\n</script>\r\n\r\n<template>\r\n  <div>\r\n    <div>\r\n      <h4 class=\"px-4 lg:px-0 mb-5\" v-text=\"title\" />\r\n      <div\r\n        class=\"flex justify-between items-end mx-4 lg:mx-0 mb-6 border-b dark:border-gray-900\"\r\n      >\r\n        <BalTabs v-model=\"activeTab\" :tabs=\"tabs\" noPad class=\"-mb-px\" />\r\n      </div>\r\n    </div>\r\n\r\n    <template v-if=\"isStablePhantomPool || isDeepPool\">\r\n      <BoostedActivities\r\n        v-if=\"activeTab === PoolTransactionsTab.ALL_ACTIVITY\"\r\n        :poolActivityType=\"PoolTransactionsTab.ALL_ACTIVITY\"\r\n        :pool=\"pool\"\r\n        :loading=\"loading\"\r\n      />\r\n      <BoostedActivities\r\n        v-else-if=\"activeTab === PoolTransactionsTab.USER_ACTIVITY\"\r\n        :poolActivityType=\"PoolTransactionsTab.USER_ACTIVITY\"\r\n        :pool=\"pool\"\r\n        :loading=\"loading\"\r\n      />\r\n    </template>\r\n    <template v-else>\r\n      <div class=\"mb-20\">\r\n        <Activities\r\n          v-if=\"activeTab === PoolTransactionsTab.ALL_ACTIVITY\"\r\n          :poolActivityType=\"PoolTransactionsTab.ALL_ACTIVITY\"\r\n          :pool=\"pool\"\r\n          :loading=\"loading\"\r\n        />\r\n        <Activities\r\n          v-else-if=\"activeTab === PoolTransactionsTab.USER_ACTIVITY\"\r\n          :poolActivityType=\"PoolTransactionsTab.USER_ACTIVITY\"\r\n          :pool=\"pool\"\r\n          :loading=\"loading\"\r\n        />\r\n      </div>\r\n    </template>\r\n  </div>\r\n</template>\r\n","<script setup lang=\"ts\">\r\nimport { formatDistanceToNow } from 'date-fns';\r\nimport { computed } from 'vue';\r\nimport { useI18n } from 'vue-i18n';\r\n\r\nimport { ColumnDefinition } from '@/components/_global/BalTable/types';\r\n\r\nimport useBreakpoints from '@/composables/useBreakpoints';\r\nimport useNumbers, { FNumFormats } from '@/composables/useNumbers';\r\nimport { useTokens } from '@/providers/tokens.provider';\r\nimport { shortenLabel } from '@/lib/utils';\r\nimport { bnum } from '@/lib/utils';\r\nimport { PoolSwap } from '@/services/pool/types';\r\nimport useWeb3 from '@/services/web3/useWeb3';\r\n\r\n/**\r\n * TYPES\r\n */\r\ntype SwapRow = {\r\n  tokenIn: string;\r\n  tokenOut: string;\r\n  tokenAmountIn: string;\r\n  tokenAmountOut: string;\r\n  timestamp: number;\r\n  formattedDate: string;\r\n  value: number;\r\n  formattedValue: string;\r\n  tx: string;\r\n};\r\n\r\ntype Props = {\r\n  poolSwaps: PoolSwap[];\r\n  isLoading?: boolean;\r\n  isLoadingMore?: boolean;\r\n  loadMore?: () => void;\r\n  isPaginated?: boolean;\r\n  noResultsLabel?: string;\r\n};\r\n\r\n/**\r\n * PROPS & EMITS\r\n */\r\nconst props = withDefaults(defineProps<Props>(), {\r\n  isLoading: false,\r\n  isLoadingMore: false,\r\n  isPaginated: false,\r\n  noResultsLabel: '',\r\n});\r\n\r\nconst emit = defineEmits(['loadMore']);\r\n\r\n/**\r\n * COMPOSABLES\r\n */\r\nconst { fNum } = useNumbers();\r\nconst { t } = useI18n();\r\nconst { priceFor } = useTokens();\r\nconst { upToLargeBreakpoint } = useBreakpoints();\r\nconst { explorerLinks } = useWeb3();\r\n\r\n/**\r\n * COMPUTED\r\n */\r\nconst columns = computed<ColumnDefinition<SwapRow>[]>(() => [\r\n  {\r\n    name: t('swapper'),\r\n    id: 'action',\r\n    accessor: 'tx',\r\n    Cell: 'actionCell',\r\n    width: 190,\r\n    sortable: false,\r\n  },\r\n  {\r\n    name: t('value'),\r\n    id: 'value',\r\n    accessor: 'value',\r\n    Cell: 'valueCell',\r\n    align: 'right',\r\n    className: 'align-center w-40',\r\n    sortKey: pool => pool.value,\r\n    width: 125,\r\n  },\r\n  {\r\n    name: t('swapDetails'),\r\n    id: 'details',\r\n    accessor: '',\r\n    Cell: 'detailsCell',\r\n    width: 310,\r\n    sortable: false,\r\n  },\r\n\r\n  {\r\n    name: t('time'),\r\n    id: 'timeAgo',\r\n    accessor: 'timestamp',\r\n    Cell: 'timeCell',\r\n    align: 'right',\r\n    sortKey: pool => pool.timestamp,\r\n    width: 190,\r\n  },\r\n]);\r\n\r\nconst swapRows = computed<SwapRow[]>(() =>\r\n  props.isLoading\r\n    ? []\r\n    : props.poolSwaps.map(\r\n        ({\r\n          tokenIn,\r\n          tokenOut,\r\n          tokenAmountIn,\r\n          tokenAmountOut,\r\n          timestamp,\r\n          tx,\r\n          userAddress,\r\n          ensName,\r\n          ensAvatar,\r\n        }) => {\r\n          const value = bnum(priceFor(tokenOut))\r\n            .times(tokenAmountOut)\r\n            .toNumber();\r\n\r\n          return {\r\n            value,\r\n            formattedValue:\r\n              value > 0\r\n                ? fNum(value, { style: 'currency', abbreviate: true })\r\n                : '-',\r\n            tokenIn,\r\n            tokenOut,\r\n            tokenAmountIn,\r\n            tokenAmountOut,\r\n            timestamp,\r\n            userAddress: userAddress.id,\r\n            ensName,\r\n            ensAvatar,\r\n            formattedDate: t('timeAgo', [formatDistanceToNow(timestamp)]),\r\n            tx,\r\n          };\r\n        }\r\n      )\r\n);\r\n</script>\r\n\r\n<template>\r\n  <BalCard\r\n    class=\"overflow-x-auto\"\r\n    :square=\"upToLargeBreakpoint\"\r\n    :noBorder=\"upToLargeBreakpoint\"\r\n    noPad\r\n  >\r\n    <BalTable\r\n      :columns=\"columns\"\r\n      :data=\"swapRows\"\r\n      :isLoading=\"isLoading\"\r\n      :isLoadingMore=\"isLoadingMore\"\r\n      :isPaginated=\"isPaginated\"\r\n      skeletonClass=\"h-64\"\r\n      sticky=\"both\"\r\n      :noResultsLabel=\"noResultsLabel\"\r\n      :initialState=\"{\r\n        sortColumn: 'timeAgo',\r\n        sortDirection: 'desc',\r\n      }\"\r\n      @load-more=\"emit('loadMore')\"\r\n    >\r\n      <template #actionCell=\"action\">\r\n        <div class=\"py-2 px-6\">\r\n          <div class=\"flex items-center\">\r\n            <BalAsset\r\n              class=\"mr-2 shrink-0\"\r\n              :address=\"action.userAddress\"\r\n              :iconURI=\"action.ensAvatar\"\r\n              :size=\"30\"\r\n            />\r\n            <span :class=\"[action.ensName && 'truncate']\">\r\n              {{ action.ensName || shortenLabel(action.userAddress) }}\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </template>\r\n\r\n      <template #valueCell=\"action\">\r\n        <div class=\"flex justify-end py-4 px-6 font-numeric\">\r\n          {{ action.formattedValue }}\r\n        </div>\r\n      </template>\r\n\r\n      <template #detailsCell=\"action\">\r\n        <div class=\"flex flex-wrap items-center py-4 px-6 -mt-1\">\r\n          <div class=\"token-item\">\r\n            <BalAsset :address=\"action.tokenIn\" class=\"mr-2 shrink-0\" />\r\n            <span class=\"font-numeric\">{{\r\n              fNum(action.tokenAmountIn, FNumFormats.token)\r\n            }}</span>\r\n          </div>\r\n          <BalIcon name=\"arrow-right\" class=\"mx-1\" />\r\n          <div class=\"token-item\">\r\n            <BalAsset :address=\"action.tokenOut\" class=\"mr-2 shrink-0\" />\r\n            <span class=\"font-numeric\">{{\r\n              fNum(action.tokenAmountOut, FNumFormats.token)\r\n            }}</span>\r\n          </div>\r\n        </div>\r\n      </template>\r\n\r\n      <template #timeCell=\"action\">\r\n        <div class=\"py-4 px-6\">\r\n          <div\r\n            class=\"flex justify-end items-center text-right whitespace-nowrap wrap\"\r\n          >\r\n            {{ action.formattedDate }}\r\n            <BalLink\r\n              :href=\"explorerLinks.txLink(action.tx)\"\r\n              external\r\n              class=\"flex items-center ml-2\"\r\n            >\r\n              <BalIcon\r\n                name=\"arrow-up-right\"\r\n                size=\"sm\"\r\n                class=\"text-gray-500 hover:text-blue-500 transition-colors\"\r\n              />\r\n            </BalLink>\r\n          </div>\r\n        </div>\r\n      </template>\r\n    </BalTable>\r\n  </BalCard>\r\n</template>\r\n\r\n<style scoped>\r\n.token-item {\r\n  @apply m-1 flex items-center p-1 px-2 bg-gray-50 dark:bg-gray-700 rounded-lg;\r\n}\r\n</style>\r\n","<script setup lang=\"ts\">\r\nimport { flatten } from 'lodash';\r\nimport { computed } from 'vue';\r\n\r\nimport usePoolSwapsQuery from '@/composables/queries/usePoolSwapsQuery';\r\nimport { Pool } from '@/services/pool/types';\r\n\r\nimport Table from './Table.vue';\r\n\r\n/**\r\n * TYPES\r\n */\r\ntype Props = {\r\n  pool: Pool;\r\n  loading: boolean;\r\n};\r\n\r\n/**\r\n * PROPS\r\n */\r\nconst props = withDefaults(defineProps<Props>(), {\r\n  loading: false,\r\n});\r\n\r\n/**\r\n * QUERIES\r\n */\r\nconst poolSwapsQuery = usePoolSwapsQuery(props.pool.id);\r\n\r\n/**\r\n * COMPUTED\r\n */\r\nconst poolSwaps = computed(() =>\r\n  poolSwapsQuery.data.value\r\n    ? flatten(poolSwapsQuery.data.value.pages.map(page => page.poolSwaps))\r\n    : []\r\n);\r\nconst isLoadingPoolSwaps = computed(() => poolSwapsQuery.isLoading.value);\r\nconst poolSwapsHasNextPage = computed(() => poolSwapsQuery.hasNextPage?.value);\r\nconst poolSwapsIsFetchingNextPage = computed(\r\n  () => poolSwapsQuery.isFetchingNextPage?.value\r\n);\r\n\r\n/**\r\n * METHODS\r\n */\r\nfunction loadMorePoolSwaps() {\r\n  poolSwapsQuery.fetchNextPage();\r\n}\r\n</script>\r\n\r\n<template>\r\n  <div class=\"mb-20\">\r\n    <h4 class=\"px-4 lg:px-0 mb-5\" v-text=\"$t('poolTransactions.tabs.swaps')\" />\r\n\r\n    <Table\r\n      :poolSwaps=\"poolSwaps\"\r\n      :isLoading=\"loading || isLoadingPoolSwaps\"\r\n      :isLoadingMore=\"poolSwapsIsFetchingNextPage\"\r\n      :isPaginated=\"poolSwapsHasNextPage\"\r\n      :noResultsLabel=\"$t('poolTransactions.noResults.swaps')\"\r\n      @load-more=\"loadMorePoolSwaps\"\r\n    />\r\n  </div>\r\n</template>\r\n","<script setup lang=\"ts\">\r\nimport { toRef } from 'vue';\r\n\r\nimport { usePool } from '@/composables/usePool';\r\nimport { Pool } from '@/services/pool/types';\r\n\r\nimport InvestmentTransactions from './InvestmentTransactions/InvestmentTransactions.vue';\r\nimport SwapTransactions from './SwapTransactions/SwapTransactions.vue';\r\n\r\n/**\r\n * TYPES\r\n */\r\ntype Props = {\r\n  pool: Pool;\r\n  loading: boolean;\r\n};\r\n\r\n/**\r\n * PROPS\r\n */\r\nconst props = withDefaults(defineProps<Props>(), {\r\n  loading: false,\r\n});\r\n\r\n/**\r\n * COMPOSABLES\r\n */\r\nconst { isDeepPool, isStablePhantomPool } = usePool(toRef(props, 'pool'));\r\n</script>\r\n\r\n<template>\r\n  <InvestmentTransactions :pool=\"pool\" :loading=\"loading\" />\r\n\r\n  <SwapTransactions\r\n    v-if=\"!isStablePhantomPool && !isDeepPool\"\r\n    :pool=\"pool\"\r\n    :loading=\"loading\"\r\n  />\r\n</template>\r\n","<script setup lang=\"ts\">\r\nimport useBreakpoints from '@/composables/useBreakpoints';\r\nimport { BalDetailsTableData } from '@/services/pool/types';\r\n\r\n/**\r\n * TYPES\r\n */\r\ntype Props = {\r\n  tableData: (BalDetailsTableData | null)[];\r\n};\r\n\r\n/**\r\n * PROPS\r\n */\r\ndefineProps<Props>();\r\n\r\n/**\r\n * COMPOSABLES\r\n */\r\nconst { upToLargeBreakpoint } = useBreakpoints();\r\n</script>\r\n\r\n<template>\r\n  <BalCard class=\"overflow-x-auto\" :square=\"upToLargeBreakpoint\" noPad>\r\n    <template v-for=\"(row, i) in tableData\" :key=\"i\">\r\n      <div v-if=\"row\" class=\"table-row\">\r\n        <div class=\"table-row-title\">\r\n          {{ row.title }}\r\n        </div>\r\n        <div class=\"table-row-value\">\r\n          {{ row.value }}\r\n          <BalTooltip\r\n            v-if=\"row.tooltip\"\r\n            :text=\"row.tooltip\"\r\n            iconSize=\"sm\"\r\n            class=\"mt-1 ml-2\"\r\n          />\r\n          <BalLink v-if=\"row.link\" :href=\"row.link\" external noStyle>\r\n            <BalIcon\r\n              name=\"arrow-up-right\"\r\n              size=\"sm\"\r\n              class=\"mt-2 ml-2 text-gray-500 hover:text-blue-500 transition-colors\"\r\n            />\r\n          </BalLink>\r\n        </div>\r\n      </div>\r\n    </template>\r\n  </BalCard>\r\n</template>\r\n\r\n<style scoped>\r\n.table-row {\r\n  @apply flex border-b dark:border-gray-700;\r\n}\r\n\r\n.table-row:first-child {\r\n  @apply font-semibold bg-gray-50 dark:bg-gray-800;\r\n}\r\n\r\n.table-row:last-child {\r\n  @apply border-b-0;\r\n}\r\n\r\n.table-row-title {\r\n  @apply flex items-center py-3 px-4 flex-1 dark:border-gray-700;\r\n\r\n  border-right-width: 1px;\r\n}\r\n\r\n.table-row-value {\r\n  @apply flex py-3 px-4 items-center;\r\n\r\n  word-break: break-all;\r\n  flex: 2;\r\n}\r\n</style>","<script setup lang=\"ts\">\r\nimport { POOLS } from '@/constants/pools';\r\nimport { shortenLabel } from '@/lib/utils';\r\nimport { Pool, PoolType } from '@/services/pool/types';\r\nimport useWeb3 from '@/services/web3/useWeb3';\r\nimport { format } from 'date-fns';\r\nimport { computed } from 'vue';\r\nimport { useI18n } from 'vue-i18n';\r\n\r\n/**\r\n * TYPES\r\n */\r\ntype Props = {\r\n  pool: Pool;\r\n};\r\n\r\n/**\r\n * PROPS\r\n */\r\nconst props = defineProps<Props>();\r\n\r\n/**\r\n * COMPOSABLES\r\n */\r\nconst { t } = useI18n();\r\nconst { explorerLinks: explorer } = useWeb3();\r\n\r\nfunction formSwapFeesHint(owner: string): string {\r\n  if (owner === POOLS.ZeroAddress) {\r\n    return t('poolAttrs.feesFixed');\r\n  }\r\n\r\n  if (owner === POOLS.DelegateOwner) {\r\n    return t('poolAttrs.feesEditableGovernance');\r\n  }\r\n\r\n  return t('poolAttrs.feesEditableOwner');\r\n}\r\n/**\r\n * COMPUTED\r\n */\r\nconst data = computed(() => {\r\n  const {\r\n    poolType,\r\n    address,\r\n    symbol,\r\n    owner,\r\n    createTime,\r\n    swapFee,\r\n    name,\r\n    id,\r\n    onchain,\r\n  } = props.pool;\r\n\r\n  return [\r\n    {\r\n      title: t('attribute'),\r\n      value: t('details'),\r\n    },\r\n    {\r\n      title: t('poolName'),\r\n      value: POOLS.Metadata[id]?.name || name,\r\n    },\r\n    {\r\n      title: t('poolSymbol'),\r\n      value: symbol || '',\r\n    },\r\n    {\r\n      title: t('poolType'),\r\n      value: poolType,\r\n    },\r\n    onchain?.amp && Number(onchain?.amp)\r\n      ? {\r\n          title: t('ampFactor.title'),\r\n          value: onchain.amp,\r\n        }\r\n      : null,\r\n    {\r\n      title: t('swapFees'),\r\n      value: `${Number(swapFee) * 100}% (${formSwapFeesHint(owner || '')})`,\r\n    },\r\n    {\r\n      title: t('poolManager'),\r\n      value: poolType === PoolType.Managed ? t('yes') : t('none'),\r\n    },\r\n    owner\r\n      ? {\r\n          title: t('poolOwner'),\r\n          value: poolOwnerData.value.title,\r\n          link: poolOwnerData.value.link,\r\n          tooltip: poolOwnerTooltip.value,\r\n        }\r\n      : null,\r\n    {\r\n      title: t('contractAddress'),\r\n      value: shortenLabel(address),\r\n      link: explorer.addressLink(address || ''),\r\n    },\r\n    {\r\n      title: t('createDate'),\r\n      value: format((createTime || 0) * 1000, 'dd MMMM yyyy'),\r\n    },\r\n  ];\r\n});\r\n\r\nconst poolOwnerData = computed(() => {\r\n  const { owner } = props.pool;\r\n  if (owner === POOLS.ZeroAddress) {\r\n    return { title: t('noOwner'), link: '' };\r\n  }\r\n\r\n  if (owner === POOLS.DelegateOwner) {\r\n    return { title: t('delegateOwner.title'), link: '' };\r\n  }\r\n\r\n  return {\r\n    title: shortenLabel(owner || ''),\r\n    link: explorer.addressLink(owner || ''),\r\n  };\r\n});\r\n\r\nconst poolOwnerTooltip = computed(() => {\r\n  if (props.pool.owner === POOLS.DelegateOwner) {\r\n    return t('delegateOwner.tooltip');\r\n  }\r\n\r\n  return '';\r\n});\r\n\r\nconst poolManagementText = computed(() => {\r\n  if (props.pool.poolType === PoolType.Managed) {\r\n    return t('');\r\n  }\r\n\r\n  if (props.pool.owner === POOLS.ZeroAddress) {\r\n    return t('poolAttrs.immutable');\r\n  }\r\n\r\n  if (props.pool.owner === POOLS.DelegateOwner) {\r\n    return t('poolAttrs.immutableFeesEditableByGovernance');\r\n  }\r\n\r\n  return t('poolAttrs.immutableFeesEditableByOwner');\r\n});\r\n</script>\r\n\r\n<template>\r\n  <div>\r\n    <h3 class=\"px-4 lg:px-0 mb-5\" v-text=\"$t('poolDetails')\" />\r\n\r\n    <BalDetailsTable class=\"mb-12\" :tableData=\"data\" />\r\n    <template v-if=\"poolManagementText\">\r\n      <h4 class=\"px-4 lg:px-0 mb-2\" v-text=\"$t('poolManagement')\" />\r\n      <div class=\"px-4 lg:px-0\">\r\n        {{ poolManagementText }}\r\n      </div>\r\n    </template>\r\n  </div>\r\n</template>\r\n\r\n","<script setup lang=\"ts\">\r\nimport { Pool } from '@/services/pool/types';\r\nimport useNetwork from '@/composables/useNetwork';\r\nimport { deprecatedDetails } from '@/composables/usePool';\r\n\r\n/**\r\n * TYPES\r\n */\r\ntype Props = {\r\n  pool: Pool;\r\n};\r\n\r\n/**\r\n * PROPS\r\n */\r\nconst props = defineProps<Props>();\r\n\r\n/**\r\n * COMPOSABLES\r\n */\r\nconst { networkSlug } = useNetwork();\r\nconst router = useRouter();\r\n\r\n/**\r\n * COMPUTED\r\n */\r\nconst newPoolId = computed(\r\n  (): string | undefined => deprecatedDetails(props.pool.id)?.newPool\r\n);\r\n\r\nconst localeKey = computed((): string => {\r\n  if (newPoolId.value) return 'deprecatedPool.hasNewPool';\r\n\r\n  return 'deprecatedPool.generic';\r\n});\r\n\r\nconst poolRoute = computed(() => {\r\n  if (!newPoolId.value) return undefined;\r\n\r\n  return router.resolve({\r\n    name: 'pool',\r\n    params: { id: newPoolId.value, networkSlug },\r\n  }).fullPath;\r\n});\r\n</script>\r\n\r\n<template>\r\n  <BalAlert type=\"tip\" class=\"mb-4\" :title=\"$t(`${localeKey}.title`)\">\r\n    <span>{{ $t(`${localeKey}.description`) }}</span>\r\n    &nbsp;\r\n    <BalLink v-if=\"newPoolId\" tag=\"router-link\" :to=\"poolRoute\">\r\n      {{ $t('incentivizedPool') }}</BalLink\r\n    >.\r\n  </BalAlert>\r\n</template>\r\n","<script setup lang=\"ts\">\r\nimport { getAddress } from '@ethersproject/address';\r\nimport { computed, ref } from 'vue';\r\n\r\nimport BalLoadingBlock from '@/components/_global/BalLoadingBlock/BalLoadingBlock.vue';\r\nimport AnimatePresence from '@/components/animate/AnimatePresence.vue';\r\nimport useNumbers, { FNumFormats } from '@/composables/useNumbers';\r\nimport { useTokens } from '@/providers/tokens.provider';\r\nimport { bnum } from '@/lib/utils';\r\nimport { Pool } from '@/services/pool/types';\r\n\r\nimport StakePreviewModal from './StakePreviewModal.vue';\r\nimport { StakeAction } from '@/components/contextual/pages/pool/staking/StakePreview.vue';\r\nimport { usePoolStaking } from '@/providers/local/pool-staking.provider';\r\n\r\nimport { deprecatedDetails } from '@/composables/usePool';\r\n\r\ntype Props = {\r\n  pool: Pool;\r\n};\r\nconst props = defineProps<Props>();\r\n\r\n/**\r\n * STATE\r\n */\r\n\r\nconst isStakePreviewVisible = ref(false);\r\nconst stakeAction = ref<StakeAction>('stake');\r\n\r\n/**\r\n * COMPOSABLES\r\n */\r\nconst { fNum } = useNumbers();\r\nconst { balanceFor } = useTokens();\r\nconst {\r\n  isStakablePool,\r\n  isLoading: isLoadingStakingData,\r\n  isRefetchingStakedShares,\r\n  stakedShares,\r\n  hasNonPrefGaugeBalance,\r\n} = usePoolStaking();\r\n\r\n/**\r\n * COMPUTED\r\n */\r\nconst fiatValueOfStakedShares = computed(() => {\r\n  return bnum(props.pool.totalLiquidity)\r\n    .div(props.pool.totalShares)\r\n    .times((stakedShares.value || 0).toString())\r\n    .toString();\r\n});\r\n\r\nconst fiatValueOfUnstakedShares = computed(() => {\r\n  return bnum(props.pool.totalLiquidity)\r\n    .div(props.pool.totalShares)\r\n    .times(balanceFor(getAddress(props.pool.address)))\r\n    .toString();\r\n});\r\n\r\nconst isStakeDisabled = computed(() => {\r\n  return (\r\n    deprecatedDetails(props.pool.id)?.stakingDisabled ||\r\n    fiatValueOfUnstakedShares.value === '0' ||\r\n    hasNonPrefGaugeBalance.value\r\n  );\r\n});\r\n\r\n/**\r\n * METHODS\r\n */\r\nfunction showStakePreview() {\r\n  if (fiatValueOfUnstakedShares.value === '0') return;\r\n  stakeAction.value = 'stake';\r\n  isStakePreviewVisible.value = true;\r\n}\r\n\r\nfunction showUnstakePreview() {\r\n  if (fiatValueOfStakedShares.value === '0') return;\r\n  stakeAction.value = 'unstake';\r\n  isStakePreviewVisible.value = true;\r\n}\r\n\r\nfunction handlePreviewClose() {\r\n  isStakePreviewVisible.value = false;\r\n}\r\n</script>\r\n\r\n<template>\r\n  <div>\r\n    <AnimatePresence :isVisible=\"!isLoadingStakingData\">\r\n      <div class=\"relative\">\r\n        <BalAccordion\r\n          :class=\"['shadow-2xl', { handle: isStakablePool }]\"\r\n          :sections=\"[\r\n            {\r\n              title: $t('staking.stakingIncentives'),\r\n              id: 'staking-incentives',\r\n              handle: 'staking-handle',\r\n              isDisabled: !isStakablePool,\r\n            },\r\n          ]\"\r\n          :reCalcKey=\"hasNonPrefGaugeBalance ? 0 : 1\"\r\n        >\r\n          <template #staking-handle>\r\n            <button\r\n              class=\"p-4 w-full hover:bg-gray-50 dark:hover:bg-gray-800 rounded-xl transition-colors\"\r\n            >\r\n              <BalStack horizontal justify=\"between\" align=\"center\">\r\n                <BalStack spacing=\"sm\" align=\"center\">\r\n                  <div\r\n                    :class=\"[\r\n                      'flex items-center p-1 text-white rounded-full',\r\n                      {\r\n                        'bg-green-500': isStakablePool,\r\n                        'bg-gray-400': !isStakablePool,\r\n                      },\r\n                    ]\"\r\n                  >\r\n                    <BalIcon v-if=\"isStakablePool\" size=\"sm\" name=\"check\" />\r\n                    <BalIcon v-else size=\"sm\" name=\"x\" />\r\n                  </div>\r\n                  <h6>{{ $t('staking.stakingIncentives') }}</h6>\r\n                </BalStack>\r\n                <BalStack\r\n                  v-if=\"isStakablePool\"\r\n                  horizontal\r\n                  spacing=\"sm\"\r\n                  align=\"center\"\r\n                >\r\n                  <BalIcon name=\"chevron-down\" class=\"text-blue-500\" />\r\n                </BalStack>\r\n              </BalStack>\r\n            </button>\r\n          </template>\r\n          <template #staking-incentives>\r\n            <div class=\"relative bg-white dark:bg-gray-850 rounded-b-lg\">\r\n              <BalStack\r\n                vertical\r\n                spacing=\"sm\"\r\n                class=\"p-4 rounded-b-lg border-t dark:border-gray-900\"\r\n              >\r\n                <BalStack horizontal justify=\"between\" class=\"rounded-b-lg\">\r\n                  <span>{{ $t('staked') }} {{ $t('lpTokens') }}</span>\r\n                  <BalStack horizontal spacing=\"sm\" align=\"center\">\r\n                    <AnimatePresence :isVisible=\"isRefetchingStakedShares\">\r\n                      <BalLoadingBlock class=\"h-5\" />\r\n                    </AnimatePresence>\r\n                    <AnimatePresence :isVisible=\"!isRefetchingStakedShares\">\r\n                      <span>\r\n                        {{ fNum(fiatValueOfStakedShares, FNumFormats.fiat) }}\r\n                      </span>\r\n                    </AnimatePresence>\r\n                    <BalTooltip :text=\"$t('staking.stakedLpTokensTooltip')\" />\r\n                  </BalStack>\r\n                </BalStack>\r\n                <BalStack horizontal justify=\"between\">\r\n                  <span>{{ $t('unstaked') }} {{ $t('lpTokens') }}</span>\r\n                  <BalStack horizontal spacing=\"sm\" align=\"center\">\r\n                    <AnimatePresence :isVisible=\"isRefetchingStakedShares\">\r\n                      <BalLoadingBlock class=\"h-5\" />\r\n                    </AnimatePresence>\r\n                    <AnimatePresence :isVisible=\"!isRefetchingStakedShares\">\r\n                      <span>\r\n                        {{ fNum(fiatValueOfUnstakedShares, FNumFormats.fiat) }}\r\n                      </span>\r\n                    </AnimatePresence>\r\n                    <BalTooltip :text=\"$t('staking.unstakedLpTokensTooltip')\" />\r\n                  </BalStack>\r\n                </BalStack>\r\n                <BalStack horizontal spacing=\"sm\" class=\"mt-2\">\r\n                  <BalBtn\r\n                    color=\"gradient\"\r\n                    size=\"sm\"\r\n                    :disabled=\"isStakeDisabled\"\r\n                    @click=\"showStakePreview\"\r\n                  >\r\n                    {{ $t('stake') }}\r\n                  </BalBtn>\r\n                  <BalBtn\r\n                    outline\r\n                    color=\"blue\"\r\n                    size=\"sm\"\r\n                    :disabled=\"fiatValueOfStakedShares === '0'\"\r\n                    @click=\"showUnstakePreview\"\r\n                  >\r\n                    {{ $t('unstake') }}\r\n                  </BalBtn>\r\n                </BalStack>\r\n                <BalAlert\r\n                  v-if=\"hasNonPrefGaugeBalance\"\r\n                  :title=\"$t('staking.restakeGauge')\"\r\n                  class=\"mt-2\"\r\n                >\r\n                  {{ $t('staking.restakeGaugeDescription') }}\r\n                </BalAlert>\r\n              </BalStack>\r\n            </div>\r\n          </template>\r\n        </BalAccordion>\r\n      </div>\r\n    </AnimatePresence>\r\n    <AnimatePresence :isVisible=\"isLoadingStakingData\" unmountInstantly>\r\n      <BalLoadingBlock class=\"h-12\" />\r\n    </AnimatePresence>\r\n    <StakePreviewModal\r\n      :isVisible=\"isStakePreviewVisible\"\r\n      :pool=\"pool\"\r\n      :action=\"stakeAction\"\r\n      @close=\"handlePreviewClose\"\r\n    />\r\n  </div>\r\n</template>\r\n\r\n<style>\r\n.handle {\r\n  @apply overflow-hidden rounded-xl;\r\n}\r\n\r\n.handle::before {\r\n  @apply absolute left-0 w-full opacity-100;\r\n\r\n  content: '';\r\n  top: -2px;\r\n  height: calc(100% + 4px);\r\n  background: linear-gradient(90deg, #4254ff, #f441a5, #ffeb3b, #4254ff);\r\n  background-size: 400%;\r\n  animation: anim-half 3s ease-out both;\r\n  border-radius: 14px;\r\n  z-index: -1;\r\n}\r\n\r\n.handle:hover::before {\r\n  animation: anim 12s linear infinite;\r\n}\r\n\r\n.handle .bal-card {\r\n  @apply mx-auto;\r\n\r\n  width: calc(100% - 4px);\r\n}\r\n\r\n@keyframes anim-half {\r\n  from {\r\n    background-position: 0;\r\n  }\r\n\r\n  to {\r\n    background-position: 125%;\r\n  }\r\n}\r\n\r\n@keyframes anim {\r\n  from {\r\n    background-position: 125%;\r\n  }\r\n\r\n  to {\r\n    background-position: 600%;\r\n  }\r\n}\r\n</style>\r\n","<script setup lang=\"ts\">\r\nimport { computed, ref } from 'vue';\r\n\r\nimport AnimatePresence from '@/components/animate/AnimatePresence.vue';\r\nimport { useLock } from '@/composables/useLock';\r\nimport useNumbers, { FNumFormats } from '@/composables/useNumbers';\r\nimport { useTokens } from '@/providers/tokens.provider';\r\nimport { bnum } from '@/lib/utils';\r\nimport { Pool } from '@/services/pool/types';\r\nimport useWeb3 from '@/services/web3/useWeb3';\r\nimport UnlockPreviewModal from '@/components/forms/lock_actions/UnlockForm/components/UnlockPreviewModal/UnlockPreviewModal.vue';\r\n\r\ntype Props = {\r\n  pool: Pool;\r\n};\r\nconst props = defineProps<Props>();\r\n\r\nconst showUnlockPreviewModal = ref(false);\r\n\r\n/**\r\n * COMPOSABLES\r\n */\r\nconst { fNum } = useNumbers();\r\nconst { balanceFor } = useTokens();\r\nconst { totalLockedValue, lock, isLoadingLockInfo, lockPool, lockPoolToken } =\r\n  useLock();\r\nconst { isWalletReady } = useWeb3();\r\n\r\n/**\r\n * COMPUTED\r\n */\r\nconst poolShares = computed(() =>\r\n  bnum(props.pool.totalLiquidity).div(props.pool.totalShares)\r\n);\r\nconst bptBalance = computed(() => balanceFor(props.pool.address));\r\n\r\nconst fiatTotal = computed(() =>\r\n  poolShares.value.times(bptBalance.value).toString()\r\n);\r\n\r\nconst totalExpiredLpTokens = computed(() =>\r\n  lock.value?.isExpired ? lock.value.lockedAmount : '0'\r\n);\r\n\r\nconst fiatTotalExpiredLpTokens = computed(() =>\r\n  bnum(lockPool.value?.totalLiquidity || '0')\r\n    .div(lockPool.value?.totalShares || '0')\r\n    .times(totalExpiredLpTokens.value)\r\n    .toString()\r\n);\r\n</script>\r\n\r\n<template>\r\n  <div v-if=\"isWalletReady\">\r\n    <AnimatePresence :isVisible=\"!isLoadingLockInfo\">\r\n      <div class=\"relative\">\r\n        <BalAccordion\r\n          :class=\"[\r\n            'shadow-2xl overflow-visible',\r\n            { 'pool-handle': !isLoadingLockInfo },\r\n          ]\"\r\n          :sections=\"[\r\n            {\r\n              title: 'Locking',\r\n              id: 'locking-module',\r\n              handle: 'locking-handle',\r\n              isDisabled: isLoadingLockInfo,\r\n            },\r\n          ]\"\r\n        >\r\n          <template #locking-handle>\r\n            <button\r\n              class=\"p-4 w-full hover:bg-gray-50 dark:hover:bg-gray-800 rounded-xl transition-colors\"\r\n            >\r\n              <BalStack horizontal justify=\"between\" align=\"center\">\r\n                <BalStack spacing=\"sm\" horizontal>\r\n                  <div\r\n                    class=\"flex items-center p-1 text-white bg-green-500 rounded-full\"\r\n                  >\r\n                    <BalIcon size=\"sm\" name=\"check\" />\r\n                  </div>\r\n                  <BalStack spacing=\"sm\" align=\"center\">\r\n                    <h6>{{ $t('locking.lockBptForVeBal') }}</h6>\r\n                  </BalStack>\r\n                </BalStack>\r\n                <BalStack horizontal spacing=\"sm\" align=\"center\">\r\n                  <BalIcon name=\"chevron-down\" class=\"text-blue-500\" />\r\n                </BalStack>\r\n              </BalStack>\r\n            </button>\r\n          </template>\r\n          <template #locking-module>\r\n            <div\r\n              class=\"overflow-visible relative bg-white dark:bg-gray-850 rounded-b-lg\"\r\n            >\r\n              <BalStack\r\n                vertical\r\n                spacing=\"sm\"\r\n                class=\"py-4 px-4 border-t dark:border-gray-900\"\r\n              >\r\n                <BalStack horizontal justify=\"between\">\r\n                  <span v-if=\"!lock?.isExpired\"\r\n                    >{{ $t('locked') }} {{ $t('lpTokens') }}</span\r\n                  >\r\n                  <span v-else class=\"text-red-500\">{{\r\n                    $t('locking.expiredLockLpTokens')\r\n                  }}</span>\r\n                  <BalStack horizontal spacing=\"sm\" align=\"center\">\r\n                    <AnimatePresence :isVisible=\"false\">\r\n                      <BalLoadingBlock class=\"h-5\" />\r\n                    </AnimatePresence>\r\n                    <AnimatePresence :isVisible=\"true\">\r\n                      <span :class=\"{ 'text-red-500': lock?.isExpired }\">\r\n                        {{ fNum(totalLockedValue, FNumFormats.fiat) }}\r\n                      </span>\r\n                    </AnimatePresence>\r\n                    <BalTooltip\r\n                      v-if=\"!lock?.isExpired\"\r\n                      :text=\"$t('locking.lockedLpTokensTooltip')\"\r\n                    />\r\n                    <BalTooltip v-else :text=\"$t('locking.expiredLockTooltip')\">\r\n                      <template #activator>\r\n                        <BalIcon\r\n                          class=\"text-red-500\"\r\n                          size=\"sm\"\r\n                          name=\"alert-triangle\"\r\n                        />\r\n                      </template>\r\n                    </BalTooltip>\r\n                  </BalStack>\r\n                </BalStack>\r\n                <BalStack horizontal justify=\"between\">\r\n                  <span>{{ $t('unlocked') }} {{ $t('lpTokens') }}</span>\r\n                  <BalStack horizontal spacing=\"sm\" align=\"center\">\r\n                    <AnimatePresence :isVisible=\"false\">\r\n                      <BalLoadingBlock class=\"h-5\" />\r\n                    </AnimatePresence>\r\n                    <AnimatePresence :isVisible=\"true\">\r\n                      <span>\r\n                        {{ fNum(fiatTotal, FNumFormats.fiat) }}\r\n                      </span>\r\n                    </AnimatePresence>\r\n                    <BalTooltip :text=\"$t('locking.unlockedLpTokensTooltip')\" />\r\n                  </BalStack>\r\n                </BalStack>\r\n                <BalStack horizontal spacing=\"sm\" class=\"mt-2\">\r\n                  <BalLink\r\n                    v-if=\"Number(bptBalance) > 0\"\r\n                    href=\"/get-vebal?returnRoute=vebal\"\r\n                  >\r\n                    <BalBtn\r\n                      :disabled=\"Number(bptBalance) === 0\"\r\n                      color=\"gradient\"\r\n                      size=\"sm\"\r\n                    >\r\n                      {{ $t('lock') }}\r\n                    </BalBtn>\r\n                  </BalLink>\r\n                  <BalBtn\r\n                    v-else\r\n                    :disabled=\"Number(bptBalance) === 0\"\r\n                    color=\"gradient\"\r\n                    size=\"sm\"\r\n                  >\r\n                    {{ $t('lock') }}\r\n                  </BalBtn>\r\n                  <BalBtn\r\n                    v-if=\"lock?.isExpired\"\r\n                    outline\r\n                    color=\"red\"\r\n                    size=\"sm\"\r\n                    @click=\"showUnlockPreviewModal = true\"\r\n                  >\r\n                    {{ $t('redeem') }}\r\n                  </BalBtn>\r\n                </BalStack>\r\n              </BalStack>\r\n            </div>\r\n          </template>\r\n        </BalAccordion>\r\n      </div>\r\n    </AnimatePresence>\r\n    <AnimatePresence :isVisible=\"isLoadingLockInfo\" unmountInstantly>\r\n      <BalLoadingBlock class=\"h-12\" />\r\n    </AnimatePresence>\r\n    <teleport to=\"#modal\">\r\n      <UnlockPreviewModal\r\n        v-if=\"showUnlockPreviewModal && lock && lockPool && lockPoolToken\"\r\n        :lockablePool=\"lockPool\"\r\n        :lockablePoolTokenInfo=\"lockPoolToken\"\r\n        :veBalLockInfo=\"lock\"\r\n        :totalLpTokens=\"totalExpiredLpTokens\"\r\n        :fiatTotalLpTokens=\"fiatTotalExpiredLpTokens\"\r\n        @close=\"showUnlockPreviewModal = false\"\r\n      />\r\n    </teleport>\r\n  </div>\r\n</template>\r\n\r\n<style>\r\n.pool-handle {\r\n  @apply rounded-xl;\r\n}\r\n\r\n.pool-handle::before {\r\n  @apply absolute left-0 w-full opacity-100;\r\n\r\n  content: '';\r\n  top: -2px;\r\n  height: calc(100% + 4px);\r\n  background: linear-gradient(90deg, #4254ff, #f441a5, #ffeb3b, #4254ff);\r\n  background-size: 400%;\r\n  animation: anim-half 3s ease-out both;\r\n  border-radius: 14px;\r\n  z-index: -1;\r\n}\r\n\r\n.pool-handle:hover::before {\r\n  animation: anim 12s linear infinite;\r\n}\r\n\r\n.pool-handle .bal-card {\r\n  @apply mx-auto;\r\n\r\n  width: calc(100% - 4px);\r\n}\r\n\r\n@keyframes anim-half {\r\n  from {\r\n    background-position: 0;\r\n  }\r\n\r\n  to {\r\n    background-position: 125%;\r\n  }\r\n}\r\n\r\n@keyframes anim {\r\n  from {\r\n    background-position: 125%;\r\n  }\r\n\r\n  to {\r\n    background-position: 600%;\r\n  }\r\n}\r\n</style>\r\n","export default \"__VITE_ASSET__f7dc3739__\"","import { computed } from 'vue';\r\n\r\nimport { PoolToken } from '@balancer-labs/sdk';\r\n\r\nimport { isArbitrum, isMainnet, isPolygon } from '../useNetwork';\r\n\r\nexport function poolPathSymbolSegment(tokens: PoolToken[]) {\r\n  return tokens.map(token => token.symbol).join('-');\r\n}\r\n\r\nexport function useApyVisionHelpers() {\r\n  const apyVisionNetworkName = computed(() => {\r\n    if (isMainnet.value) {\r\n      return 'eth';\r\n    } else if (isPolygon.value) {\r\n      return 'matic';\r\n    } else if (isArbitrum.value) {\r\n      return 'arbitrum';\r\n    } else {\r\n      return 'eth';\r\n    }\r\n  });\r\n\r\n  return {\r\n    apyVisionNetworkName,\r\n    poolPathSymbolSegment,\r\n  };\r\n}\r\n","<script lang=\"ts\" setup>\r\nimport { useApyVisionHelpers } from '@/composables/external/useApyVisionHelpers';\r\nimport { getAddressFromPoolId } from '@/lib/utils';\r\nimport { PoolToken } from '@balancer-labs/sdk';\r\n\r\n/**\r\n * TYPES\r\n */\r\ntype Props = {\r\n  poolId: string;\r\n  tokens: PoolToken[];\r\n};\r\n\r\n/**\r\n * PROPS & EMITS\r\n */\r\ndefineProps<Props>();\r\n\r\n/**\r\n * COMPOSABLES\r\n */\r\nconst { poolPathSymbolSegment, apyVisionNetworkName } = useApyVisionHelpers();\r\n</script>\r\n\r\n<template>\r\n  <div class=\"group flex items-center mt-6 w-fit h-fit\">\r\n    <BalLink\r\n      :href=\"\r\n        'https://app.apy.vision/pools/balancerv2_' +\r\n        apyVisionNetworkName +\r\n        '-' +\r\n        poolPathSymbolSegment(tokens) +\r\n        '-' +\r\n        getAddressFromPoolId(poolId)\r\n      \"\r\n      external\r\n      noStyle\r\n      class=\"flex items-center font-medium link link-black\"\r\n    >\r\n      <img\r\n        width=\"32\"\r\n        height=\"32\"\r\n        class=\"mr-2 rounded-full group-hover:shadow-lg transition\"\r\n        src=\"@/assets/images/icons/apy-vision.svg\"\r\n        alt=\"\"\r\n      />\r\n      {{ $t('apyvisionPoolInsights') }}\r\n      <BalIcon\r\n        name=\"arrow-up-right\"\r\n        size=\"sm\"\r\n        class=\"ml-0.5 text-gray-500 group-hover:text-blue-500 hover:text-blue-400 transition-colors\"\r\n      />\r\n    </BalLink>\r\n  </div>\r\n</template>\r\n","<template>\r\n  <svg width=\"20\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\">\r\n    <g fill=\"none\" fill-rule=\"evenodd\">\r\n      <circle fill=\"#192533\" cx=\"10\" cy=\"10\" r=\"10\" />\r\n      <g fill-rule=\"nonzero\">\r\n        <path\r\n          d=\"M11.608 12.19v-2.095H9.453V8h4.31v4.19h-2.155zm2.155-6.285H7.298v6.285H5.143V3.81h8.62v2.095z\"\r\n          fill=\"#87ABC5\"\r\n        />\r\n        <path\r\n          fill=\"#87ABC5\"\r\n          d=\"M13.763 13.029v1.257H7.298V12.19h4.31v-.942h2.155z\"\r\n        />\r\n        <path fill=\"#FFF\" d=\"M15.918 5.905V8h-2.155V5.905z\" />\r\n        <path fill=\"#1D252E\" d=\"M7.298 12.19v2.096H5.143V12.19z\" />\r\n        <path fill=\"#F07F53\" d=\"M7.298 14.286v2.095H5.143v-2.095z\" />\r\n      </g>\r\n    </g>\r\n  </svg>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue';\r\n\r\nexport default defineComponent({\r\n  name: 'GauntletIcon',\r\n});\r\n</script>\r\n","<template>\r\n  <svg width=\"20\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\">\r\n    <g fill=\"none\" fill-rule=\"evenodd\">\r\n      <circle fill=\"#192533\" cx=\"10\" cy=\"10\" r=\"10\" />\r\n      <g fill-rule=\"nonzero\">\r\n        <path\r\n          d=\"M11.608 12.19v-2.095H9.453V8h4.31v4.19h-2.155zm2.155-6.285H7.298v6.285H5.143V3.81h8.62v2.095z\"\r\n          fill=\"#87ABC5\"\r\n        />\r\n        <path\r\n          fill=\"#87ABC5\"\r\n          d=\"M13.763 13.029v1.257H7.298V12.19h4.31v-.942h2.155z\"\r\n        />\r\n        <path fill=\"#FFF\" d=\"M15.918 5.905V8h-2.155V5.905z\" />\r\n        <path fill=\"#1D252E\" d=\"M7.298 12.19v2.096H5.143V12.19z\" />\r\n        <path fill=\"#F07F53\" d=\"M7.298 14.286v2.095H5.143v-2.095z\" />\r\n      </g>\r\n    </g>\r\n  </svg>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue';\r\n\r\nexport default defineComponent({\r\n  name: 'GauntletIcon',\r\n});\r\n</script>\r\n","<script lang=\"ts\" setup>\r\nimport { computed, toRef, ref } from 'vue';\r\nimport { useI18n } from 'vue-i18n';\r\n\r\nimport BalChipNew from '@/components/chips/BalChipNew.vue';\r\nimport GauntletIcon from '@/components/images/icons/GauntletIcon.vue';\r\nimport APRTooltip from '@/components/tooltips/APRTooltip/APRTooltip.vue';\r\nimport StakePreviewModal from '@/components/contextual/pages/pool/staking/StakePreviewModal.vue';\r\nimport useNumbers from '@/composables/useNumbers';\r\nimport { usePoolWarning } from '@/composables/usePoolWarning';\r\nimport { usePool } from '@/composables/usePool';\r\nimport { useTokens } from '@/providers/tokens.provider';\r\nimport { EXTERNAL_LINKS } from '@/constants/links';\r\nimport { POOLS } from '@/constants/pools';\r\nimport { includesAddress } from '@/lib/utils';\r\nimport { Pool, PoolToken } from '@/services/pool/types';\r\nimport useWeb3 from '@/services/web3/useWeb3';\r\nimport { AprBreakdown } from '@balancer-labs/sdk';\r\nimport { usePoolStaking } from '@/providers/local/pool-staking.provider';\r\n\r\n/**\r\n * TYPES\r\n */\r\ntype Props = {\r\n  loadingApr: boolean;\r\n  noInitLiquidity: boolean;\r\n  isStableLikePool: boolean;\r\n  pool: Pool;\r\n  poolApr?: AprBreakdown;\r\n  titleTokens: PoolToken[];\r\n  missingPrices: boolean;\r\n  isLiquidityBootstrappingPool: boolean;\r\n  isComposableStableLikePool: boolean;\r\n};\r\n\r\nconst props = withDefaults(defineProps<Props>(), {\r\n  loadingApr: true,\r\n  noInitLiquidity: false,\r\n  poolApr: undefined,\r\n});\r\n\r\nconst poolId = computed(() => toRef(props, 'pool').value.id);\r\n\r\n/**\r\n * COMPOSABLES\r\n */\r\nconst { isAffected, warnings } = usePoolWarning(poolId);\r\nconst { hasNonApprovedRateProviders } = usePool(toRef(props, 'pool'));\r\nconst { fNum } = useNumbers();\r\nconst { t } = useI18n();\r\nconst { explorerLinks: explorer } = useWeb3();\r\nconst { balancerTokenListTokens, getToken } = useTokens();\r\nconst { hasNonPrefGaugeBalance } = usePoolStaking();\r\n\r\n/**\r\n * STATE\r\n */\r\nconst isRestakePreviewVisible = ref(false);\r\n\r\n/**\r\n * COMPUTED\r\n */\r\nconst feesFixed = computed(() => props.pool?.owner == POOLS.ZeroAddress);\r\n\r\nconst communityManagedFees = computed(\r\n  () => props.pool?.owner == POOLS.DelegateOwner\r\n);\r\nconst feesManagedByGauntlet = computed(\r\n  () =>\r\n    communityManagedFees.value &&\r\n    POOLS.DynamicFees.Gauntlet.includes(props.pool.id)\r\n);\r\nconst swapFeeToolTip = computed(() => {\r\n  if (feesManagedByGauntlet.value) {\r\n    return t('feesManagedByGauntlet');\r\n  } else if (communityManagedFees.value) {\r\n    return t('delegateFeesTooltip');\r\n  } else if (feesFixed.value) {\r\n    return t('fixedFeesTooltip');\r\n  } else {\r\n    return t('ownerFeesTooltip');\r\n  }\r\n});\r\n\r\nconst poolFeeLabel = computed(() => {\r\n  if (!props.pool || !props.pool?.swapFee) return '';\r\n\r\n  const feeLabel = `${fNum(props.pool.swapFee, {\r\n    style: 'percent',\r\n    maximumFractionDigits: 4,\r\n  })}`;\r\n\r\n  if (feesFixed.value) {\r\n    return t('fixedSwapFeeLabel', [feeLabel]);\r\n  } else if (communityManagedFees.value) {\r\n    return feesManagedByGauntlet.value\r\n      ? t('dynamicSwapFeeLabel', [feeLabel])\r\n      : t('communitySwapFeeLabel', [feeLabel]);\r\n  }\r\n\r\n  // Must be owner-controlled\r\n  return t('dynamicSwapFeeLabel', [feeLabel]);\r\n});\r\n\r\nconst hasCustomToken = computed(() => {\r\n  const knownTokens = Object.keys(balancerTokenListTokens.value);\r\n  return (\r\n    !props.isLiquidityBootstrappingPool &&\r\n    !props.isComposableStableLikePool &&\r\n    props.pool.tokensList.some(\r\n      address => !includesAddress(knownTokens, address)\r\n    )\r\n  );\r\n});\r\n\r\nconst poolTypeLabel = computed(() => {\r\n  if (!props.pool?.factory) return '';\r\n  const key = POOLS.Factories[props.pool.factory];\r\n\r\n  return key ? t(key) : t('unknownPoolType');\r\n});\r\n\r\nconst poolMetadata = computed(() => POOLS.Metadata[props.pool?.id]);\r\nconst hasMetadata = computed((): boolean => !!poolMetadata.value);\r\n\r\n/**\r\n * METHODS\r\n */\r\nfunction symbolFor(titleTokenIndex: number): string {\r\n  const token = props.titleTokens[titleTokenIndex];\r\n  return getToken(token.address)?.symbol || token.symbol || '---';\r\n}\r\n</script>\r\n\r\n<template>\r\n  <div class=\"flex flex-col\">\r\n    <div class=\"flex flex-wrap items-center -mt-2\">\r\n      <div v-if=\"hasMetadata\">\r\n        <h3 class=\"pool-title\">\r\n          {{ poolMetadata.name }}\r\n        </h3>\r\n        <h5 class=\"text-sm\">\r\n          {{ poolTypeLabel }}\r\n        </h5>\r\n      </div>\r\n      <h3 v-else class=\"pool-title\">\r\n        {{ poolTypeLabel }}\r\n      </h3>\r\n    </div>\r\n    <div class=\"flex items-center\">\r\n      <div\r\n        v-for=\"({ address, weight }, i) in titleTokens\"\r\n        :key=\"i\"\r\n        class=\"flex items-center px-2 mt-2 mr-2 h-10 bg-gray-50 dark:bg-gray-850 rounded-lg\"\r\n      >\r\n        <BalAsset :address=\"address\" />\r\n        <span class=\"ml-2\">\r\n          {{ symbolFor(i) }}\r\n        </span>\r\n        <span\r\n          v-if=\"!isStableLikePool && !!weight && weight !== '0'\"\r\n          class=\"mt-px ml-1 text-xs font-medium text-gray-400\"\r\n        >\r\n          {{\r\n            fNum(weight || '0', {\r\n              style: 'percent',\r\n              maximumFractionDigits: 0,\r\n            })\r\n          }}\r\n        </span>\r\n      </div>\r\n      <BalChipNew v-if=\"pool?.isNew\" class=\"mt-2 mr-2\" />\r\n      <APRTooltip\r\n        v-if=\"!loadingApr\"\r\n        :pool=\"pool\"\r\n        :poolApr=\"poolApr\"\r\n        class=\"mt-1 -ml-1\"\r\n      />\r\n      <BalLink\r\n        :href=\"explorer.addressLink(pool?.address || '')\"\r\n        external\r\n        noStyle\r\n        class=\"flex items-center\"\r\n      >\r\n        <BalIcon\r\n          name=\"arrow-up-right\"\r\n          size=\"sm\"\r\n          class=\"mt-2 ml-2 text-gray-500 hover:text-blue-500 transition-colors\"\r\n        />\r\n      </BalLink>\r\n    </div>\r\n    <div class=\"flex items-center mt-2\">\r\n      <div class=\"mr-1 text-sm text-secondary\" v-html=\"poolFeeLabel\" />\r\n      <BalTooltip>\r\n        <template #activator>\r\n          <BalLink\r\n            v-if=\"feesManagedByGauntlet\"\r\n            :href=\"EXTERNAL_LINKS.Gauntlet.Home\"\r\n            external\r\n          >\r\n            <GauntletIcon />\r\n          </BalLink>\r\n          <BalIcon\r\n            v-else\r\n            name=\"info\"\r\n            size=\"xs\"\r\n            class=\"text-gray-400 dark:text-gray-500\"\r\n          />\r\n        </template>\r\n        <span>\r\n          {{ swapFeeToolTip }}\r\n        </span>\r\n      </BalTooltip>\r\n    </div>\r\n  </div>\r\n\r\n  <BalAlert\r\n    v-if=\"hasNonApprovedRateProviders\"\r\n    type=\"warning\"\r\n    :title=\"$t('hasNonApprovedRateProviders')\"\r\n    class=\"mt-2\"\r\n    block\r\n  />\r\n  <BalAlert\r\n    v-if=\"missingPrices\"\r\n    type=\"warning\"\r\n    :title=\"$t('noPriceInfo')\"\r\n    class=\"mt-2\"\r\n    block\r\n  />\r\n  <BalAlert\r\n    v-if=\"hasCustomToken\"\r\n    type=\"error\"\r\n    :title=\"$t('highRiskPool')\"\r\n    class=\"mt-2\"\r\n    block\r\n  />\r\n  <BalAlert\r\n    v-if=\"hasNonPrefGaugeBalance && !isAffected\"\r\n    :title=\"$t('staking.restakeGauge')\"\r\n    :type=\"'warning'\"\r\n    class=\"mt-2\"\r\n  >\r\n    <BalStack spacing=\"sm\">\r\n      <span>{{ $t('staking.restakeGaugeDescription') }}</span>\r\n      <div>\r\n        <BalBtn\r\n          :color=\"'gradient'\"\r\n          class=\"p-2\"\r\n          :size=\"'sm'\"\r\n          @click=\"isRestakePreviewVisible = true\"\r\n        >\r\n          {{ $t('restake') }}\r\n        </BalBtn>\r\n      </div>\r\n    </BalStack>\r\n  </BalAlert>\r\n  <template v-if=\"isAffected\">\r\n    <BalAlert\r\n      v-for=\"(warning, i) in warnings\"\r\n      :key=\"`warning-${i}`\"\r\n      type=\"error\"\r\n      class=\"mt-2\"\r\n      block\r\n    >\r\n      <template #title>\r\n        <div v-html=\"warning.title\" />\r\n      </template>\r\n      <template #description>\r\n        <div v-html=\"warning.description\" />\r\n      </template>\r\n    </BalAlert>\r\n  </template>\r\n  <BalAlert\r\n    v-if=\"noInitLiquidity\"\r\n    type=\"warning\"\r\n    :title=\"$t('noInitLiquidity')\"\r\n    :description=\"$t('noInitLiquidityDetail')\"\r\n    class=\"mt-2\"\r\n    block\r\n  />\r\n  <StakePreviewModal\r\n    v-if=\"!!pool\"\r\n    :isVisible=\"isRestakePreviewVisible\"\r\n    :pool=\"pool\"\r\n    :action=\"'restake'\"\r\n    @close=\"isRestakePreviewVisible = false\"\r\n    @success=\"isRestakePreviewVisible = false\"\r\n  />\r\n</template>\r\n<style scoped>\r\n.pool-title {\r\n  @apply mr-4 capitalize mt-2;\r\n\r\n  font-variation-settings: 'wght' 700;\r\n}\r\n</style>\r\n","import { computed, reactive } from 'vue';\r\nimport { useQuery, QueryObserverOptions } from '@tanstack/vue-query';\r\n\r\nimport QUERY_KEYS from '@/constants/queryKeys';\r\nimport { poolsStoreService } from '@/services/pool/pools-store.service';\r\nimport { Pool } from '@/services/pool/types';\r\n\r\nimport useNetwork from '../useNetwork';\r\nimport usePoolQuery from './usePoolQuery';\r\nimport { AprBreakdown } from '@balancer-labs/sdk';\r\nimport { getBalancer } from '@/dependencies/balancer-sdk';\r\n\r\ntype QueryOptions = QueryObserverOptions<AprBreakdown>;\r\n\r\nexport default function usePoolAprQuery(\r\n  id: string,\r\n  options: QueryObserverOptions<AprBreakdown> = {}\r\n) {\r\n  /**\r\n   * @description\r\n   * If pool is already downloaded, we can use it instantly\r\n   * it may be if user came to pool page from home page\r\n   */\r\n  const storedPool = poolsStoreService.findPool(id);\r\n\r\n  /**\r\n   * COMPOSABLES\r\n   */\r\n  const poolQuery = usePoolQuery(id);\r\n\r\n  /**\r\n   * QUERY DEPENDENCIES\r\n   */\r\n  const { networkId } = useNetwork();\r\n\r\n  /**\r\n   * COMPUTED\r\n   */\r\n  const pool = computed(() => poolQuery.data.value);\r\n  const enabled = computed(() => !!pool.value?.id || !!storedPool);\r\n\r\n  /**\r\n   * QUERY INPUTS\r\n   */\r\n  const queryKey = QUERY_KEYS.Pools.APR(networkId, id);\r\n\r\n  const queryFn = async (): Promise<AprBreakdown> => {\r\n    let _pool: Pool;\r\n    if (storedPool) {\r\n      _pool = storedPool;\r\n    } else if (pool.value) {\r\n      // copy computed pool to avoid mutation warnings\r\n      _pool = { ...pool.value, tokens: [...pool.value.tokens] };\r\n    } else {\r\n      throw new Error('No pool');\r\n    }\r\n\r\n    if (_pool?.apr) {\r\n      return _pool.apr;\r\n    }\r\n\r\n    _pool.chainId = networkId.value;\r\n\r\n    const apr = await getBalancer().pools.apr(_pool);\r\n\r\n    return apr;\r\n  };\r\n  const queryOptions = reactive({\r\n    enabled,\r\n    ...options,\r\n  });\r\n  return useQuery<AprBreakdown>(\r\n    queryKey,\r\n    queryFn,\r\n    queryOptions as QueryOptions\r\n  );\r\n}\r\n","import { computed, reactive } from 'vue';\r\nimport { QueryObserverOptions, useQuery } from '@tanstack/vue-query';\r\n\r\nimport QUERY_KEYS from '@/constants/queryKeys';\r\nimport { balancerSubgraphService } from '@/services/balancer/subgraph/balancer-subgraph.service';\r\nimport { poolsStoreService } from '@/services/pool/pools-store.service';\r\nimport { PoolSnapshots } from '@/services/pool/types';\r\n\r\nimport useNetwork from '../useNetwork';\r\nimport usePoolQuery from './usePoolQuery';\r\n\r\ntype QueryOptions = QueryObserverOptions<PoolSnapshots>;\r\n\r\n/**\r\n * HELPERS\r\n */\r\nexport default function usePoolSnapshotsQuery(\r\n  id: string,\r\n  days?: number,\r\n  options: QueryOptions = {}\r\n) {\r\n  /**\r\n   * @description\r\n   * If pool is already downloaded, we can use it instantly\r\n   * it may be if user came to pool page from home page\r\n   */\r\n  const storedPool = poolsStoreService.findPool(id);\r\n\r\n  /**\r\n   * QUERY DEPENDENCIES\r\n   */\r\n  const { networkId } = useNetwork();\r\n  const poolQuery = usePoolQuery(id);\r\n\r\n  /**\r\n   * COMPUTED\r\n   */\r\n  const pool = computed(() => poolQuery.data.value);\r\n  const enabled = computed(() => !!pool.value?.id || !!storedPool);\r\n\r\n  /**\r\n   * QUERY INPUTS\r\n   */\r\n  const queryKey = QUERY_KEYS.Pools.Snapshot(networkId, id);\r\n\r\n  const queryFn = async () => {\r\n    if (!pool.value && !storedPool) throw new Error('No pool');\r\n\r\n    const createTime = storedPool?.createTime || pool.value?.createTime || 0;\r\n    return await balancerSubgraphService.poolSnapshots.get({\r\n      where: {\r\n        pool: id.toLowerCase(),\r\n        timestamp_gt: createTime,\r\n      },\r\n    });\r\n  };\r\n\r\n  const queryOptions = reactive({\r\n    enabled,\r\n    ...options,\r\n  });\r\n\r\n  return useQuery<PoolSnapshots>(\r\n    queryKey,\r\n    queryFn,\r\n    queryOptions as QueryOptions\r\n  );\r\n}\r\n","import { fromUnixTime, getUnixTime, startOfHour } from 'date-fns';\r\nimport { groupBy, invert, last } from 'lodash';\r\n\r\nimport { twentyFourHoursInSecs } from '@/composables/useTime';\r\nimport { TOKENS } from '@/constants/tokens';\r\nimport { getAddressFromPoolId, includesAddress } from '@/lib/utils';\r\nimport { retryPromiseWithDelay } from '@/lib/utils/promise';\r\nimport { configService as _configService } from '@/services/config/config.service';\r\n\r\nimport { CoingeckoClient } from '../coingecko.client';\r\nimport {\r\n  CoingeckoService,\r\n  getNativeAssetId,\r\n  getPlatformId,\r\n} from '../coingecko.service';\r\nimport { getAddress } from '@ethersproject/address';\r\n\r\n/**\r\n * TYPES\r\n */\r\nexport type Price = { [fiat: string]: number };\r\nexport type PriceResponse = { [id: string]: Price };\r\nexport type TokenPrices = { [address: string]: Price };\r\nexport interface HistoricalPriceResponse {\r\n  market_caps: number[][];\r\n  prices: number[][];\r\n  total_volumes: number[][];\r\n}\r\nexport type HistoricalPrices = { [timestamp: string]: number[] };\r\n\r\nexport class PriceService {\r\n  client: CoingeckoClient;\r\n  fiatParam: string;\r\n  appNetwork: string;\r\n  platformId: string;\r\n  nativeAssetId: string;\r\n  nativeAssetAddress: string;\r\n  appAddresses: { [key: string]: string };\r\n\r\n  constructor(\r\n    service: CoingeckoService,\r\n    private readonly configService = _configService\r\n  ) {\r\n    this.client = service.client;\r\n    this.fiatParam = service.supportedFiat;\r\n    this.appNetwork = this.configService.network.key;\r\n    this.platformId = getPlatformId(this.appNetwork);\r\n    this.nativeAssetId = getNativeAssetId(this.appNetwork);\r\n    this.nativeAssetAddress = this.configService.network.nativeAsset.address;\r\n    this.appAddresses = this.configService.network.addresses;\r\n  }\r\n\r\n  async getNativeAssetPrice(): Promise<Price> {\r\n    try {\r\n      const response = await this.client.get<PriceResponse>(\r\n        `/simple/price?ids=${this.nativeAssetId}&vs_currencies=${this.fiatParam}`\r\n      );\r\n      return response[this.nativeAssetId];\r\n    } catch (error) {\r\n      console.error('Unable to fetch Ether price', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   *  Rate limit for the CoinGecko API is 10 calls each second per IP address.\r\n   */\r\n  async getTokens(\r\n    addresses: string[],\r\n    addressesPerRequest = 100\r\n  ): Promise<TokenPrices> {\r\n    try {\r\n      if (addresses.length / addressesPerRequest > 10)\r\n        throw new Error('To many requests for rate limit.');\r\n\r\n      addresses = addresses\r\n        .map(getAddressFromPoolId)\r\n        .map(address => this.addressMapIn(address));\r\n      const pageCount = Math.ceil(addresses.length / addressesPerRequest);\r\n      const pages = Array.from(Array(pageCount).keys());\r\n      const requests: Promise<PriceResponse>[] = [];\r\n\r\n      pages.forEach(page => {\r\n        const addressString = addresses.slice(\r\n          addressesPerRequest * page,\r\n          addressesPerRequest * (page + 1)\r\n        );\r\n        const endpoint = `/simple/token_price/${this.platformId}?contract_addresses=${addressString}&vs_currencies=${this.fiatParam}`;\r\n        const request = retryPromiseWithDelay(\r\n          this.client.get<PriceResponse>(endpoint),\r\n          3,\r\n          2000\r\n        );\r\n        requests.push(request);\r\n      });\r\n\r\n      const paginatedResults = await Promise.all(requests);\r\n      const results = this.parsePaginatedTokens(paginatedResults);\r\n\r\n      // Inject native asset price if included in requested addresses\r\n      if (includesAddress(addresses, this.nativeAssetAddress)) {\r\n        results[this.nativeAssetAddress] = await this.getNativeAssetPrice();\r\n      }\r\n\r\n      return results;\r\n    } catch (error) {\r\n      console.error('Unable to fetch token prices', addresses, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async getTokensHistorical(\r\n    addresses: string[],\r\n    days: number,\r\n    addressesPerRequest = 1,\r\n    aggregateBy: 'hour' | 'day' = 'day'\r\n  ): Promise<HistoricalPrices> {\r\n    try {\r\n      if (addresses.length / addressesPerRequest > 10)\r\n        throw new Error('To many requests for rate limit.');\r\n\r\n      const now = Math.floor(Date.now() / 1000);\r\n      const end =\r\n        aggregateBy === 'hour' ? now : now - (now % twentyFourHoursInSecs);\r\n      const start = end - days * twentyFourHoursInSecs;\r\n\r\n      addresses = addresses\r\n        .map(getAddressFromPoolId)\r\n        .map(address => this.addressMapIn(address));\r\n      const requests: Promise<HistoricalPriceResponse>[] = [];\r\n\r\n      addresses.forEach(address => {\r\n        const endpoint = `/coins/${\r\n          this.platformId\r\n        }/contract/${address.toLowerCase()}/market_chart/range?vs_currency=${\r\n          this.fiatParam\r\n        }&from=${start}&to=${end}`;\r\n        const request = retryPromiseWithDelay(\r\n          this.client.get<HistoricalPriceResponse>(endpoint),\r\n          2, // retryCount\r\n          2000 // delayTime\r\n        );\r\n        requests.push(request);\r\n      });\r\n\r\n      const paginatedResults = await Promise.all(requests);\r\n      const results = this.parseHistoricalPrices(\r\n        paginatedResults,\r\n        addresses,\r\n        start,\r\n        aggregateBy\r\n      );\r\n      return results;\r\n    } catch (error) {\r\n      console.error('Unable to fetch token prices', addresses, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  private parsePaginatedTokens(paginatedResults: TokenPrices[]): TokenPrices {\r\n    const results = paginatedResults.reduce(\r\n      (result, page) => ({ ...result, ...page }),\r\n      {}\r\n    );\r\n    const entries = Object.entries(results);\r\n    const parsedEntries = entries\r\n      .filter(result => Object.keys(result[1]).length > 0)\r\n      .map(result => [this.addressMapOut(result[0]), result[1]]);\r\n    return Object.fromEntries(parsedEntries);\r\n  }\r\n\r\n  private parseHistoricalPrices(\r\n    results: HistoricalPriceResponse[],\r\n    addresses: string[],\r\n    start: number,\r\n    aggregateBy: 'day' | 'hour' = 'day'\r\n  ): HistoricalPrices {\r\n    const assetPrices = Object.fromEntries(\r\n      addresses.map((address, index) => {\r\n        address = this.addressMapOut(address);\r\n        const result = results[index].prices;\r\n        const prices = {};\r\n\r\n        if (aggregateBy === 'hour') {\r\n          const pricesByHour = groupBy(result, r =>\r\n            getUnixTime(startOfHour(fromUnixTime(r[0] / 1000)))\r\n          );\r\n          for (const key of Object.keys(pricesByHour)) {\r\n            const price = (last(pricesByHour[key]) || [])[1] || 0;\r\n            prices[Number(key) * 1000] = price;\r\n          }\r\n        } else if (aggregateBy === 'day') {\r\n          for (const key in result) {\r\n            const [timestamp, price] = result[key];\r\n            prices[timestamp] = price;\r\n          }\r\n        }\r\n\r\n        return [address, prices];\r\n      })\r\n    );\r\n\r\n    const prices = {};\r\n    for (const asset in assetPrices) {\r\n      const assetPrice = assetPrices[asset];\r\n      for (const timestamp in assetPrice) {\r\n        const price = assetPrice[timestamp];\r\n        if (!(timestamp in prices)) {\r\n          prices[timestamp] = [];\r\n        }\r\n        prices[timestamp].push(price);\r\n      }\r\n    }\r\n    return prices;\r\n  }\r\n\r\n  /**\r\n   * Map address to mainnet address if app network is a testnet\r\n   */\r\n  public addressMapIn(address: string): string {\r\n    const addressMap = TOKENS?.PriceChainMap;\r\n    if (!addressMap) return address;\r\n    return getAddress(addressMap[address.toLowerCase()] || address);\r\n  }\r\n\r\n  /**\r\n   * Map mainnet address back to testnet address\r\n   */\r\n  public addressMapOut(address: string): string {\r\n    const addressMap = TOKENS?.PriceChainMap;\r\n    if (!addressMap) return address;\r\n    return getAddress(invert(addressMap)[address.toLowerCase()] || address);\r\n  }\r\n}\r\n","import axios from 'axios';\r\n\r\nexport class CoingeckoClient {\r\n  baseUrl: string;\r\n\r\n  constructor() {\r\n    this.baseUrl = 'https://api.coingecko.com/api/v3';\r\n  }\r\n\r\n  async get<T>(endpoint: string): Promise<T> {\r\n    const { data } = await axios.get(this.baseUrl + endpoint);\r\n    return data;\r\n  }\r\n}\r\n\r\nexport const coingeckoClient = new CoingeckoClient();\r\n","import { SUPPORTED_FIAT } from '@/constants/currency';\r\n\r\nimport { PriceService } from './api/price.service';\r\nimport { coingeckoClient } from './coingecko.client';\r\n\r\nexport const getNativeAssetId = (chainId: string): string => {\r\n  const mapping = {\r\n    '1': 'ethereum',\r\n    '5': 'ethereum',\r\n    '42': 'ethereum',\r\n    '137': 'matic-network',\r\n    '100': 'xdai',\r\n    '42161': 'ethereum',\r\n  };\r\n\r\n  return mapping[chainId] || 'ethereum';\r\n};\r\n\r\nexport const getPlatformId = (chainId: string): string => {\r\n  const mapping = {\r\n    '1': 'ethereum',\r\n    '5': 'ethereum',\r\n    '42': 'ethereum',\r\n    '137': 'polygon-pos',\r\n    '100': 'xdai',\r\n    '42161': 'arbitrum-one',\r\n  };\r\n\r\n  return mapping[chainId] || 'ethereum';\r\n};\r\n\r\nexport class CoingeckoService {\r\n  supportedFiat: string;\r\n  prices: PriceService;\r\n\r\n  constructor(\r\n    public readonly client = coingeckoClient,\r\n    priceServiceClass = PriceService\r\n  ) {\r\n    this.supportedFiat = SUPPORTED_FIAT.join(',');\r\n    this.prices = new priceServiceClass(this);\r\n  }\r\n}\r\n\r\nexport const coingeckoService = new CoingeckoService();\r\n","import differenceInDays from 'date-fns/differenceInDays';\r\nimport { computed, reactive } from 'vue';\r\nimport { QueryObserverOptions, useQuery } from '@tanstack/vue-query';\r\n\r\nimport QUERY_KEYS from '@/constants/queryKeys';\r\nimport { HistoricalPrices } from '@/services/coingecko/api/price.service';\r\nimport { coingeckoService } from '@/services/coingecko/coingecko.service';\r\nimport { poolsStoreService } from '@/services/pool/pools-store.service';\r\n\r\nimport useNetwork from '../useNetwork';\r\nimport usePoolQuery from './usePoolQuery';\r\nimport { tokensListExclBpt } from '../usePool';\r\n\r\ntype QueryOptions = QueryObserverOptions<HistoricalPrices>;\r\n\r\n/**\r\n * HELPERS\r\n */\r\nexport default function useHistoricalPricesQuery(\r\n  id: string,\r\n  days?: number,\r\n  options: QueryOptions = {}\r\n) {\r\n  /**\r\n   * @description\r\n   * If pool is already downloaded, we can use it instantly\r\n   * it may be if user came to pool page from home page\r\n   */\r\n  const storedPool = poolsStoreService.findPool(id);\r\n\r\n  /**\r\n   * QUERY DEPENDENCIES\r\n   */\r\n  const { networkId } = useNetwork();\r\n  const poolQuery = usePoolQuery(id);\r\n\r\n  /**\r\n   * COMPUTED\r\n   */\r\n  const pool = computed(() => poolQuery.data.value);\r\n  const enabled = computed(() => !!pool.value?.id || !!storedPool);\r\n\r\n  /**\r\n   * QUERY INPUTS\r\n   */\r\n  const queryKey = QUERY_KEYS.Pools.HistoricalPrices(networkId, id);\r\n\r\n  const queryFn = async () => {\r\n    if (!pool.value && !storedPool) throw new Error('No pool');\r\n\r\n    const createTime = storedPool?.createTime || pool.value?.createTime || 0;\r\n    const tokensList = storedPool\r\n      ? tokensListExclBpt(storedPool)\r\n      : pool.value\r\n      ? tokensListExclBpt(pool.value)\r\n      : [];\r\n\r\n    const shapshotDaysNum =\r\n      days || differenceInDays(new Date(), new Date(createTime * 1000));\r\n\r\n    /**\r\n     * @description\r\n     * due to coin gecko docs if we query from 1 to 90 days from current time it returns hourly data\r\n     * @see https://www.coingecko.com/en/api/documentation\r\n     */\r\n    const aggregateBy = shapshotDaysNum <= 90 ? 'hour' : 'day';\r\n\r\n    return await coingeckoService.prices.getTokensHistorical(\r\n      tokensList,\r\n      shapshotDaysNum,\r\n      1,\r\n      aggregateBy\r\n    );\r\n  };\r\n\r\n  const queryOptions = reactive({\r\n    enabled,\r\n    ...options,\r\n  });\r\n\r\n  return useQuery<HistoricalPrices>(\r\n    queryKey,\r\n    queryFn,\r\n    queryOptions as QueryOptions\r\n  );\r\n}\r\n","interface BrandedRedirectData {\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n  btnText: string;\r\n  link: string;\r\n}\r\n\r\nexport const BRANDED_REDIRECT_DATA: Record<string, BrandedRedirectData> = {\r\n  xave: {\r\n    id: 'xave',\r\n    title: 'brandedRedirect.xave.title',\r\n    description: 'brandedRedirect.xave.description',\r\n    btnText: 'brandedRedirect.xave.btnText',\r\n    link: 'https://app.xave.co/',\r\n  },\r\n};\r\n","export default \"__VITE_ASSET__d4e9fa7d__\"","<script setup lang=\"ts\">\r\nimport { BRANDED_REDIRECT_DATA } from './constants';\r\nimport xave from '@/assets/images/branded-redirect-logos/xave.png';\r\nimport { POOLS } from '@/constants/pools';\r\n\r\nconst props = defineProps<{\r\n  poolId: string;\r\n}>();\r\n\r\nconst redirectData = computed(() => {\r\n  const brand = POOLS.BrandedRedirect?.[props.poolId];\r\n  if (!brand) return;\r\n  return BRANDED_REDIRECT_DATA[brand];\r\n});\r\n\r\nfunction openRedirectLink() {\r\n  const link = redirectData.value?.link;\r\n  if (!link) return;\r\n  window.open(link, '_blank');\r\n}\r\n</script>\r\n\r\n<template>\r\n  <BalStack v-if=\"redirectData\" vertical>\r\n    <BalCard shadow=\"2xl\" noPad class=\"rounded-xl\" growContent>\r\n      <div class=\"flex flex-col items-center\">\r\n        <img class=\"mb-4\" :src=\"xave\" :alt=\"redirectData.title\" />\r\n        <div class=\"px-6 pb-4\">\r\n          <div class=\"mb-1.5 text-lg font-semibold\">\r\n            {{ $t(redirectData.title) }}\r\n          </div>\r\n          <div class=\"mb-3\">\r\n            {{ $t(redirectData.description) }}\r\n          </div>\r\n          <BalBtn\r\n            color=\"blue\"\r\n            :label=\"$t(redirectData.btnText)\"\r\n            block\r\n            @click=\"openRedirectLink\"\r\n          />\r\n        </div>\r\n      </div>\r\n    </BalCard>\r\n  </BalStack>\r\n</template>","<script setup lang=\"ts\">\r\nimport { computed, onBeforeUnmount, onMounted, ref, watch } from 'vue';\r\nimport { useI18n } from 'vue-i18n';\r\nimport { useRoute } from 'vue-router';\r\n\r\nimport {\r\n  PoolChart,\r\n  PoolStatCards,\r\n  PoolTransactionsCard,\r\n  MyPoolBalancesCard,\r\n  PoolCompositionCard,\r\n  PoolContractDetails,\r\n  PoolDeprecatedWarning,\r\n} from '@/components/contextual/pages/pool';\r\nimport StakingIncentivesCard from '@/components/contextual/pages/pool/staking/StakingIncentivesCard.vue';\r\nimport PoolLockingCard from '@/components/contextual/pages/pool/PoolLockingCard/PoolLockingCard.vue';\r\nimport ApyVisionPoolLink from '@/components/links/ApyVisionPoolLink.vue';\r\nimport PoolPageHeader from '@/components/pool/PoolPageHeader.vue';\r\nimport usePoolAprQuery from '@/composables/queries/usePoolAprQuery';\r\nimport usePoolQuery from '@/composables/queries/usePoolQuery';\r\nimport usePoolSnapshotsQuery from '@/composables/queries/usePoolSnapshotsQuery';\r\nimport useAlerts, { AlertPriority, AlertType } from '@/composables/useAlerts';\r\nimport {\r\n  isVeBalPool,\r\n  preMintedBptIndex,\r\n  usePool,\r\n  tokensListExclBpt,\r\n  tokenTreeLeafs,\r\n  orderedPoolTokens,\r\n} from '@/composables/usePool';\r\nimport { useTokens } from '@/providers/tokens.provider';\r\nimport { POOLS } from '@/constants/pools';\r\nimport { includesAddress } from '@/lib/utils';\r\nimport useHistoricalPricesQuery from '@/composables/queries/useHistoricalPricesQuery';\r\nimport { PoolToken } from '@/services/pool/types';\r\nimport { providePoolStaking } from '@/providers/local/pool-staking.provider';\r\nimport useWeb3 from '@/services/web3/useWeb3';\r\nimport BrandedRedirectCard from '@/components/pool/branded-redirect/BrandedRedirectCard.vue';\r\nimport metaService from '@/services/meta/meta.service';\r\n\r\n/**\r\n * STATE\r\n */\r\nconst route = useRoute();\r\nconst poolId = (route.params.id as string).toLowerCase();\r\n\r\n/**\r\n * PROVIDERS\r\n */\r\nprovidePoolStaking(poolId);\r\n\r\n/**\r\n * COMPOSABLES\r\n */\r\nconst { t } = useI18n();\r\n\r\nconst { prices, priceQueryLoading } = useTokens();\r\nconst { isWalletReady } = useWeb3();\r\nconst { addAlert, removeAlert } = useAlerts();\r\nconst _isVeBalPool = isVeBalPool(poolId);\r\n\r\n//#region pool query\r\nconst poolQuery = usePoolQuery(poolId, undefined, undefined);\r\nconst pool = computed(() => poolQuery.data.value);\r\nconst poolQueryLoading = computed(\r\n  () => poolQuery.isLoading.value || Boolean(poolQuery.error.value)\r\n);\r\nconst loadingPool = computed(() => poolQueryLoading.value || !pool.value);\r\n\r\nconst {\r\n  isStableLikePool,\r\n  isLiquidityBootstrappingPool,\r\n  isComposableStableLikePool,\r\n  isDeprecatedPool,\r\n} = usePool(poolQuery.data);\r\n//#endregion\r\n\r\n//#region pool snapshot query\r\nconst poolSnapshotsQuery = usePoolSnapshotsQuery(poolId, undefined, {\r\n  refetchOnWindowFocus: false,\r\n});\r\nconst isLoadingSnapshots = computed(() => poolSnapshotsQuery.isLoading.value);\r\n\r\nconst snapshots = computed(() => poolSnapshotsQuery.data.value);\r\n//#endregion\r\n\r\n//#region historical prices query\r\nconst historicalPricesQuery = useHistoricalPricesQuery(\r\n  poolId,\r\n  undefined,\r\n  // in order to prevent multiple coingecko requests\r\n  { refetchOnWindowFocus: false }\r\n);\r\nconst historicalPrices = computed(() => historicalPricesQuery.data.value);\r\n//#endregion\r\n\r\n//#region APR query\r\nconst aprQuery = usePoolAprQuery(poolId);\r\nconst loadingApr = computed(\r\n  () => aprQuery.isLoading.value || Boolean(aprQuery.error.value)\r\n);\r\nconst poolApr = computed(() => aprQuery.data.value);\r\n//#endregion\r\n\r\n//#region Intersection Observer\r\nconst intersectionSentinel = ref<HTMLDivElement | null>(null);\r\nconst isSentinelIntersected = ref(false);\r\nlet observer: IntersectionObserver | undefined;\r\n\r\nfunction addIntersectionObserver(): void {\r\n  if (\r\n    !('IntersectionObserver' in window) ||\r\n    !('IntersectionObserverEntry' in window) ||\r\n    !intersectionSentinel.value\r\n  ) {\r\n    isSentinelIntersected.value = true;\r\n    return;\r\n  }\r\n\r\n  const options = {\r\n    rootMargin: '-100px',\r\n  };\r\n\r\n  const callback = (entries: IntersectionObserverEntry[]): void => {\r\n    entries.forEach(entry => {\r\n      if (entry.isIntersecting) {\r\n        isSentinelIntersected.value = true;\r\n      }\r\n    });\r\n  };\r\n  observer = new IntersectionObserver(callback, options);\r\n  observer.observe(intersectionSentinel.value);\r\n}\r\nonMounted(() => {\r\n  addIntersectionObserver();\r\n});\r\nonBeforeUnmount(() => {\r\n  observer?.disconnect();\r\n});\r\n//#endregion\r\n\r\nconst noInitLiquidity = computed(\r\n  () =>\r\n    !loadingPool.value &&\r\n    pool.value &&\r\n    Number(pool.value?.totalShares || '0') === 0\r\n);\r\n\r\nconst missingPrices = computed(() => {\r\n  if (pool.value && prices.value && !priceQueryLoading.value) {\r\n    const tokensWithPrice = Object.keys(prices.value);\r\n    const tokens = tokenTreeLeafs(pool.value.tokens);\r\n\r\n    return !tokens.every(token => includesAddress(tokensWithPrice, token));\r\n  }\r\n  return false;\r\n});\r\n\r\nconst titleTokens = computed<PoolToken[]>(() => {\r\n  if (!pool.value || !pool.value.tokens) return [];\r\n\r\n  return orderedPoolTokens(pool.value, pool.value.tokens);\r\n});\r\n\r\nconst isStakablePool = computed((): boolean =>\r\n  POOLS.Stakable.AllowList.includes(poolId)\r\n);\r\n\r\nconst poolPremintedBptIndex = computed(() => {\r\n  if (!pool.value) return null;\r\n  return preMintedBptIndex(pool.value) ?? null;\r\n});\r\n\r\nconst showBrandedRedirectCard = computed(() => {\r\n  return POOLS.BrandedRedirect?.[poolId] || false;\r\n});\r\n\r\n/**\r\n * WATCHERS\r\n */\r\nwatch(poolQuery.error, () => {\r\n  if (poolQuery.error.value) {\r\n    addAlert({\r\n      id: 'pool-fetch-error',\r\n      label: t('alerts.pool-fetch-error'),\r\n      type: AlertType.ERROR,\r\n      persistent: true,\r\n      action: poolQuery.refetch,\r\n      actionLabel: t('alerts.retry-label'),\r\n      priority: AlertPriority.MEDIUM,\r\n    });\r\n  } else {\r\n    removeAlert('pool-fetch-error');\r\n  }\r\n});\r\n\r\nwatch(\r\n  () => pool.value,\r\n  () => {\r\n    if (pool.value) {\r\n      metaService.setMeta(route, pool.value);\r\n    }\r\n  }\r\n);\r\n</script>\r\n\r\n<template>\r\n  <div class=\"xl:container lg:px-4 pt-8 xl:mx-auto\">\r\n    <div\r\n      class=\"grid grid-cols-1 lg:grid-cols-3 gap-x-0 lg:gap-x-4 xl:gap-x-8 gap-y-8\"\r\n    >\r\n      <div class=\"col-span-2 px-4 lg:px-0\">\r\n        <BalLoadingBlock\r\n          v-if=\"loadingPool || !pool\"\r\n          class=\"header-loading-block\"\r\n        />\r\n        <PoolPageHeader\r\n          v-else\r\n          :loadingApr=\"loadingApr\"\r\n          :pool=\"pool\"\r\n          :poolApr=\"poolApr\"\r\n          :isStableLikePool=\"isStableLikePool\"\r\n          :noInitLiquidity=\"noInitLiquidity\"\r\n          :titleTokens=\"titleTokens\"\r\n          :missingPrices=\"missingPrices\"\r\n          :isLiquidityBootstrappingPool=\"isLiquidityBootstrappingPool\"\r\n          :isComposableStableLikePool=\"isComposableStableLikePool\"\r\n        />\r\n      </div>\r\n      <div class=\"hidden lg:block\" />\r\n      <div class=\"order-2 lg:order-1 col-span-2\">\r\n        <div class=\"grid grid-cols-1 gap-y-8\">\r\n          <div class=\"px-4 lg:px-0\">\r\n            <PoolChart\r\n              :historicalPrices=\"historicalPrices\"\r\n              :snapshots=\"snapshots\"\r\n              :loading=\"isLoadingSnapshots\"\r\n              :totalLiquidity=\"pool?.totalLiquidity\"\r\n              :tokensList=\"pool ? tokensListExclBpt(pool) : []\"\r\n              :poolType=\"pool?.poolType\"\r\n              :poolPremintedBptIndex=\"poolPremintedBptIndex\"\r\n            />\r\n          </div>\r\n          <div class=\"px-4 lg:px-0 mb-4\">\r\n            <PoolStatCards\r\n              :pool=\"pool\"\r\n              :poolApr=\"poolApr\"\r\n              :loading=\"loadingPool\"\r\n              :loadingApr=\"loadingApr\"\r\n            />\r\n            <ApyVisionPoolLink\r\n              v-if=\"!loadingPool && pool\"\r\n              :poolId=\"pool.id\"\r\n              :tokens=\"titleTokens\"\r\n            />\r\n          </div>\r\n          <div class=\"mb-4\">\r\n            <h4\r\n              class=\"px-4 lg:px-0 mb-4\"\r\n              v-text=\"$t('poolComposition.title')\"\r\n            />\r\n            <BalLoadingBlock v-if=\"loadingPool\" class=\"h-64\" />\r\n            <PoolCompositionCard v-else-if=\"pool\" :pool=\"pool\" />\r\n          </div>\r\n\r\n          <div ref=\"intersectionSentinel\" />\r\n          <template v-if=\"isSentinelIntersected && pool\">\r\n            <PoolTransactionsCard :pool=\"pool\" :loading=\"loadingPool\" />\r\n            <PoolContractDetails :pool=\"pool\" />\r\n          </template>\r\n        </div>\r\n      </div>\r\n\r\n      <BrandedRedirectCard\r\n        v-if=\"showBrandedRedirectCard\"\r\n        :poolId=\"poolId\"\r\n        class=\"order-1 lg:order-2 px-4 lg:px-0\"\r\n      />\r\n\r\n      <div\r\n        v-else-if=\"!isLiquidityBootstrappingPool\"\r\n        class=\"order-1 lg:order-2 px-4 lg:px-0\"\r\n      >\r\n        <PoolDeprecatedWarning\r\n          v-if=\"pool && isWalletReady && isDeprecatedPool\"\r\n          :pool=\"pool\"\r\n        />\r\n\r\n        <BalStack vertical>\r\n          <BalLoadingBlock\r\n            v-if=\"loadingPool || !pool\"\r\n            class=\"mb-4 h-60 pool-actions-card\"\r\n          />\r\n          <MyPoolBalancesCard\r\n            v-else-if=\"!noInitLiquidity\"\r\n            :pool=\"pool\"\r\n            :missingPrices=\"missingPrices\"\r\n            class=\"mb-4\"\r\n          />\r\n\r\n          <BalLoadingBlock v-if=\"loadingPool\" class=\"h-40 pool-actions-card\" />\r\n          <StakingIncentivesCard\r\n            v-if=\"isStakablePool && !loadingPool && pool && isWalletReady\"\r\n            :pool=\"pool\"\r\n            class=\"staking-incentives\"\r\n          />\r\n          <PoolLockingCard\r\n            v-if=\"_isVeBalPool && !loadingPool && pool\"\r\n            :pool=\"pool\"\r\n            class=\"pool-locking\"\r\n          />\r\n        </BalStack>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.pool-actions-card {\r\n  @apply relative;\r\n}\r\n\r\n@media (min-width: 768px) and (min-height: 600px) {\r\n  .pool-actions-card {\r\n    @apply sticky top-24;\r\n  }\r\n}\r\n\r\n.staking-incentives :deep(.active-section) {\r\n  @apply border-transparent;\r\n}\r\n\r\n.header-loading-block {\r\n  height: 6.75rem;\r\n}\r\n</style>\r\n"],"names":["MILLISECONDS_IN_MINUTE","addMinutes","dirtyDate","dirtyAmount","requiredArgs","amount","toInteger","addMilliseconds","fromUnixTime","dirtyUnixTime","unixTime","toDate","startOfHour","date","hasBpt","useWithdrawMath","toRef","props","isMigratablePool","hasNonApprovedRateProviders","usePool","isWalletReady","startConnectWithInjectedProvider","useWeb3","networkSlug","useNetwork","joinDisabled","computed","_a","deprecatedDetails","isJoinsDisabled","isSoftMigratablePool","balanceFor","useTokens","fNum","useNumbers","stakedShares","usePoolStaking","router","useRouter","totalLockedValue","useLock","bptBalance","bnum","fiatValue","isVeBalPool","fiatValueOf","showMigrateButton","navigateToPoolMigration","pool","POOL_MIGRATIONS_MAP","useUserPoolPercentage","isVeBal","totalLockedShares","userPoolPercentage","userPoolPercentageLabel","token","showUserShares","rootPool","toRefs","tokenData","explorerLinks","isDeepPool","isWeighted","isWeightedLike","getToken","currentLevel","nestedPaddingClass","symbolFor","token2","isNumber","str","useTokenBreakdown","toFiat","isDeep","tokensData","totalFiat","calculateAllTokensData","calculateTokenData","shareOfParentInPool","balance","isParentTokenInDeepPool","_b","calculateFiatValue","balanceValue","calculateBalanceValue","userFiat","applyUserPoolPercentageTo","userFiatLabel","formatFiatValue","userBalanceLabel","formatBalanceValue","tokenWeightLabel","FNumFormats","getTokenPercentageLabel","tokenPercentage","_c","shareOfTokenInPool","_e","_d","_h","_g","_f","value","textColorClasses","upToLargeBreakpoint","useBreakpoints","t","useI18n","removeBptFrom","TOTAL_COMPOSITION","MY_POOL_SHARE","compositionTab","mySharesTab","activeTab","ref","userHasShares","tabs","onMounted","nextTick","initEcharts","chartInstance","currentValue","change","tailwind","useTailwind","darkMode","useDarkMode","chartConfig","legendName","latestValue","last","d","params","param","i","k","styleOverrides","style","watch","setCurrentValueToLatest","updateCurrentValue","currentDayValue","numeral","currentChartValue","emit","startValue","handleMouseLeave","handleMouseEnter","handleAxisMoved","dataIndex","seriesIndex","prev","current","_change","_hoisted_1","_openBlock","_createBlock","_component_BalAlert","_withCtx","_createElementVNode","_createVNode","_component_BalLink","_hoisted_2","_component_BalIcon","isMobile","MIN_CHART_VALUES","currentChartDate","isFocusedOnChart","snapshotValues","periodOptions","currentPeriod","timestamps","snapshot","format","getTVLData","periodSnapshots","tvlValues","PoolType","idx","timestamp","prices","amounts","_","index","snapshotPoolValue","sum","echarts.graphic.LinearGradient","getFeesData","isAllTimeSelected","pariodLastSnapshotIdx","feesValues","prevValue","addLaggingTimestamps","defaultHeaderStateValue","getVolumeData","volumeData","chartData","defaultChartData","currentPeriodOption","option","title","showFxPoolWarning","poolType","isFx","setCurrentPeriod","period","setCurrentChartValue","payload","PRETTY_DATE_FORMAT","lastDate","days","timestampsArr","twentyFourHoursInSecs","aprLabel","poolAPRs","totalAprLabel","stats","volumeSnapshot","feesSnapshot","VOLUME_THRESHOLD","APR_THRESHOLD","usePoolSwapsQuery","id","subgraphQuery","options","networkId","queryKey","reactive","QUERY_KEYS","queryFn","pageParam","pagination","POOLS","poolSwaps","balancerSubgraphService","queryOptions","lastPage","useInfiniteQuery","useUserPoolSwapsQuery","account","enabled","PoolTransactionsTab","priceFor","columns","swapRows","groupBy","tx","swaps","tokenIn","tokenOut","type","label","tokenAmounts","getTokenAmounts","getTransactionValue","formatDistanceToNow","mainTokenAddress","getUnderlyingTokenAddress","mainEquivAmount","getMainTokenEquivalentAmount","total","address","price","amountNumber","isInvest","swap","tokenAmountIn","tokenAmountOut","linearPools","poolSwapsQuery","flatten","page","isLoadingPoolSwaps","poolSwapsHasNextPage","poolSwapsIsFetchingNextPage","loadMorePoolSwaps","usePoolActivitiesQuery","poolActivities","usePoolUserActivitiesQuery","activityRows","poolTokenItselfIndex","preMintedBptIndex","amountExcludedPoolTokenItself","isJoin","getJoinExitValue","getJoinExitDetails","getAddress","symbol","poolActivitiesQuery","isLoadingPoolActivities","poolActivitiesHasNextPage","poolActivitiesIsFetchingNextPage","loadMorePoolActivities","isStablePhantomPool","userAddress","ensName","ensAvatar","explorer","formSwapFeesHint","owner","data","createTime","swapFee","name","onchain","poolOwnerData","poolOwnerTooltip","shortenLabel","poolManagementText","newPoolId","localeKey","poolRoute","isStakePreviewVisible","stakeAction","isStakablePool","isLoadingStakingData","isRefetchingStakedShares","hasNonPrefGaugeBalance","fiatValueOfStakedShares","fiatValueOfUnstakedShares","isStakeDisabled","showStakePreview","showUnstakePreview","handlePreviewClose","showUnlockPreviewModal","lock","isLoadingLockInfo","lockPool","lockPoolToken","poolShares","fiatTotal","totalExpiredLpTokens","fiatTotalExpiredLpTokens","_imports_0","poolPathSymbolSegment","tokens","useApyVisionHelpers","isMainnet","isPolygon","isArbitrum","apyVisionNetworkName","_sfc_main$3","defineComponent","poolId","isAffected","warnings","usePoolWarning","balancerTokenListTokens","isRestakePreviewVisible","feesFixed","communityManagedFees","feesManagedByGauntlet","swapFeeToolTip","poolFeeLabel","feeLabel","hasCustomToken","knownTokens","includesAddress","poolTypeLabel","key","poolMetadata","hasMetadata","titleTokenIndex","usePoolAprQuery","storedPool","poolsStoreService","poolQuery","usePoolQuery","_pool","getBalancer","useQuery","usePoolSnapshotsQuery","PriceService","service","configService","_configService","__publicField","getPlatformId","getNativeAssetId","error","addresses","addressesPerRequest","getAddressFromPoolId","pageCount","pages","requests","addressString","endpoint","request","retryPromiseWithDelay","paginatedResults","results","aggregateBy","now","end","start","result","parsedEntries","assetPrices","pricesByHour","r","getUnixTime","asset","assetPrice","addressMap","TOKENS","invert","CoingeckoClient","axios","coingeckoClient","chainId","CoingeckoService","client","priceServiceClass","SUPPORTED_FIAT","coingeckoService","useHistoricalPricesQuery","tokensList","tokensListExclBpt","shapshotDaysNum","differenceInDays","BRANDED_REDIRECT_DATA","xave","redirectData","brand","openRedirectLink","link","route","useRoute","providePoolStaking","priceQueryLoading","addAlert","removeAlert","useAlerts","_isVeBalPool","poolQueryLoading","loadingPool","isStableLikePool","isLiquidityBootstrappingPool","isComposableStableLikePool","isDeprecatedPool","poolSnapshotsQuery","isLoadingSnapshots","snapshots","historicalPricesQuery","historicalPrices","aprQuery","loadingApr","poolApr","intersectionSentinel","isSentinelIntersected","observer","addIntersectionObserver","callback","entries","entry","onBeforeUnmount","noInitLiquidity","missingPrices","tokensWithPrice","tokenTreeLeafs","titleTokens","orderedPoolTokens","poolPremintedBptIndex","showBrandedRedirectCard","AlertType","AlertPriority","metaService"],"mappings":"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","x_google_ignoreList":[0,1,2]}