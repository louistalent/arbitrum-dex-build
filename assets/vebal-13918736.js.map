{"version":3,"file":"vebal-13918736.js","sources":["../../src/components/_global/BalImage/BalImage.vue","../../src/assets/images/coins/coins-1.png","../../src/assets/images/coins/coins-2.png","../../src/assets/images/coins/coins-3.png","../../src/components/contextual/pages/vebal/Hero.vue","../../src/composables/queries/useExpiredGaugesQuery.ts","../../src/composables/useVotingEscrowLocks.ts","../../src/composables/useDebouncedRed.ts","../../src/components/_global/BalLazy/BalLazy.vue","../../src/components/_global/icons/CompositionIcon.vue","../../src/components/_global/icons/NetworkIcon.vue","../../src/components/contextual/pages/vebal/LMVoting/GaugesTableVoteBtn.vue","../../src/components/contextual/pages/vebal/LMVoting/GaugeVoteInfo.vue","../../src/components/_global/icons/TimelockIcon.vue","../../src/components/contextual/pages/vebal/LMVoting/GaugesTableMyVotes.vue","../../src/components/icons/IconLimit.vue","../../src/components/contextual/pages/vebal/LMVoting/GaugesTable.vue","../../src/components/_global/BalForm/BalForm.vue","../../src/components/_global/BalForm/BalForm.vue","../../src/services/contracts/gauge-controller.service.ts","../../src/composables/useActionState.ts","../../src/components/contextual/pages/vebal/LMVoting/GaugeVoteModal.vue","../../src/components/contextual/pages/vebal/LMVoting/ResubmitVotes/GaugeVoteResubmitModal.vue","../../src/components/contextual/pages/vebal/LMVoting/ResubmitVotes/ResubmitVotesAlert.vue","../../src/components/contextual/pages/vebal/LMVoting/GaugesFilters.vue","../../src/components/contextual/pages/vebal/LMVoting/LMVoting.vue","../../src/components/contextual/pages/vebal/MyVeBAL/components/MyVeBalCards.vue","../../src/components/contextual/pages/vebal/MyVeBAL/MyVeBAL.vue"],"sourcesContent":["<script lang=\"ts\" setup>\r\n/**\r\n * TYPES\r\n */\r\ntype Props = {\r\n  noFade?: boolean;\r\n  width?: string;\r\n  height?: string;\r\n};\r\n\r\n/**\r\n * PROPS & EMITS\r\n */\r\nconst props = withDefaults(defineProps<Props>(), {\r\n  noFade: false,\r\n  width: 'auto',\r\n  height: 'auto',\r\n});\r\n\r\n/**\r\n * STATE\r\n */\r\nconst loaded = ref(props.noFade);\r\n\r\n/**\r\n * COMPUTED\r\n */\r\nconst wrapperStyles = computed(() => ({\r\n  width: props.width,\r\n  height: props.height,\r\n}));\r\n\r\n/**\r\n * METHODS\r\n */\r\nfunction onLoaded() {\r\n  loaded.value = true;\r\n}\r\n</script>\r\n\r\n<template>\r\n  <div class=\"bal-image-wrapper\" :style=\"wrapperStyles\">\r\n    <Transition name=\"bal-image-fade\">\r\n      <img\r\n        v-show=\"loaded\"\r\n        :width=\"props.width\"\r\n        :height=\"props.height\"\r\n        v-bind=\"$attrs\"\r\n        @load=\"onLoaded\"\r\n      />\r\n    </Transition>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n/* Image fade animation */\r\n.bal-image-fade-enter-active,\r\n.bal-image-fade-leave-active {\r\n  transition: all 0.5s ease-in-out 0.1s;\r\n  transform: scale(1) translateY(0);\r\n}\r\n\r\n.bal-image-fade-enter-from,\r\n.bal-image-fade-leave-to {\r\n  opacity: 0;\r\n  transform: scale(0.97) translateY(10px);\r\n}\r\n</style>\r\n","export default \"__VITE_ASSET__e57e2511__\"","export default \"__VITE_ASSET__8e0a1859__\"","export default \"__VITE_ASSET__946d7730__\"","<script setup lang=\"ts\">\r\nimport { computed } from 'vue';\r\nimport { useI18n } from 'vue-i18n';\r\nimport { useRouter } from 'vue-router';\r\n\r\nimport coin1 from '@/assets/images/coins/coins-1.png';\r\nimport coin2 from '@/assets/images/coins/coins-2.png';\r\nimport coin3 from '@/assets/images/coins/coins-3.png';\r\n\r\n/**\r\n * COMPOSABLES\r\n */\r\nconst { t } = useI18n();\r\nconst router = useRouter();\r\n\r\n/**\r\n * COMPUTED\r\n */\r\nconst benefits = computed(() => [\r\n  t('veBAL.hero.benefits.boost'),\r\n  t('veBAL.hero.benefits.vote'),\r\n  t('veBAL.hero.benefits.earn'),\r\n]);\r\n\r\n/**\r\n * METHODS\r\n */\r\nfunction navigateToGetVeBAL() {\r\n  router.push({\r\n    name: 'get-vebal',\r\n    query: {\r\n      returnRoute: 'vebal',\r\n    },\r\n  });\r\n}\r\n</script>\r\n\r\n<template>\r\n  <div class=\"hero-container\">\r\n    <div class=\"hero-content\">\r\n      <div\r\n        class=\"py-8 lg:py-4 px-4 lg:px-8 2xl:px-0 xl:pt-0 max-w-md hero-text\"\r\n      >\r\n        <p class=\"font-medium eyebrow\">veBAL</p>\r\n        <h1 class=\"mb-5 text-white title\">\r\n          {{ $t('veBAL.hero.title') }}\r\n        </h1>\r\n        <ul>\r\n          <li\r\n            v-for=\"(benefit, i) in benefits\"\r\n            :key=\"i\"\r\n            class=\"flex items-center mb-2 text-white\"\r\n          >\r\n            â€“ {{ benefit }}\r\n          </li>\r\n        </ul>\r\n        <div class=\"flex mt-6\">\r\n          <BalBtn class=\"mr-3 hero-btn btn-gold\" @click=\"navigateToGetVeBAL\">\r\n            {{ $t('veBAL.hero.buttons.getVeBAL') }}\r\n          </BalBtn>\r\n          <BalBtn\r\n            tag=\"a\"\r\n            href=\"https://docs.balancer.fi/ecosystem/vebal-and-gauges\"\r\n            target=\"_blank\"\r\n            rel=\"noreferrer\"\r\n            color=\"white\"\r\n            class=\"hero-btn\"\r\n            outline\r\n          >\r\n            {{ $t('veBAL.hero.buttons.learnMore') }}\r\n            <BalIcon\r\n              name=\"arrow-up-right\"\r\n              size=\"sm\"\r\n              class=\"ml-px group-hover:text-pink-500 transition-colors\"\r\n            />\r\n          </BalBtn>\r\n        </div>\r\n      </div>\r\n      <div class=\"coins\">\r\n        <div class=\"group coin\">\r\n          <div class=\"w-full coin-wrapper\">\r\n            <BalImage\r\n              class=\"graphic\"\r\n              width=\"330\"\r\n              height=\"377\"\r\n              :src=\"coin1\"\r\n              alt=\"BAL and WETH tokens\"\r\n            />\r\n          </div>\r\n          <div class=\"font-semibold caption\">\r\n            <p\r\n              class=\"inline mr-1 text-sm lg:text-base tracking-tighter lg:tracking-normal\"\r\n            >\r\n              {{ $t('veBAL.hero.tokens.balWETH') }}\r\n            </p>\r\n            <BalTooltip iconSize=\"xs\" textAlign=\"left\" class=\"mt-1 font-medium\">\r\n              {{ $t('veBAL.hero.tokenInfo.balWETH') }}\r\n            </BalTooltip>\r\n          </div>\r\n        </div>\r\n        <div class=\"group coin\">\r\n          <div class=\"coin-wrapper\">\r\n            <BalImage\r\n              class=\"graphic\"\r\n              width=\"330\"\r\n              height=\"377\"\r\n              :src=\"coin2\"\r\n              alt=\"B-80BAL-20WETH LP token\"\r\n            />\r\n          </div>\r\n          <div class=\"font-semibold caption\">\r\n            <p\r\n              class=\"inline mr-1 text-sm lg:text-base tracking-tighter lg:tracking-normal\"\r\n            >\r\n              {{ $t('veBAL.hero.tokens.lpToken') }}\r\n            </p>\r\n            <BalTooltip iconSize=\"xs\" textAlign=\"left\" class=\"mt-1\">\r\n              {{ $t('veBAL.hero.tokenInfo.lpToken') }}\r\n            </BalTooltip>\r\n          </div>\r\n        </div>\r\n        <div class=\"group coin\">\r\n          <div class=\"coin-wrapper\">\r\n            <BalImage\r\n              class=\"graphic\"\r\n              width=\"330\"\r\n              height=\"377\"\r\n              :src=\"coin3\"\r\n              alt=\"veBAL token\"\r\n            />\r\n          </div>\r\n          <div class=\"font-semibold caption\">\r\n            <p\r\n              class=\"inline mr-1 text-sm lg:text-base tracking-tighter lg:tracking-normal\"\r\n            >\r\n              {{ $t('veBAL.hero.tokens.veBAL') }}\r\n            </p>\r\n            <BalTooltip iconSize=\"xs\" textAlign=\"left\" class=\"mt-1\">\r\n              {{ $t('veBAL.hero.tokenInfo.veBAL') }}\r\n            </BalTooltip>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n<style scoped>\r\n.hero-container {\r\n  @apply flex content-center relative w-full;\r\n\r\n  min-height: 440px;\r\n  z-index: 0;\r\n  background-color: #0b0f19;\r\n}\r\n\r\n.dark .hero-container {\r\n  background-color: #0e1420;\r\n}\r\n\r\n.hero-container::before {\r\n  content: ' ';\r\n  background-image: url('/images/patterns/fish-scale.png');\r\n  background-repeat: repeat;\r\n\r\n  @apply block absolute left-0 top-0 w-full h-full opacity-10 z-0;\r\n}\r\n\r\n.dark .hero-container::before {\r\n  opacity: 0.07;\r\n}\r\n\r\n.hero-container::after {\r\n  content: ' ';\r\n  background: linear-gradient(45deg, rgb(0 0 0 / 100%), rgb(0 0 0 / 50%)),\r\n    url('/images/backgrounds/vebal-hero-noise.svg');\r\n\r\n  @apply block absolute left-0 top-0 w-full h-full bg-no-repeat bg-cover opacity-20 z-0;\r\n\r\n  min-height: 440px;\r\n}\r\n\r\n.hero-content {\r\n  @apply flex flex-col md:flex-row md:items-center max-w-screen-2xl mx-auto md:gap-4 lg:gap-8 py-4 md:py-8\r\n    xl:pl-4 w-full z-10;\r\n}\r\n\r\n.eyebrow {\r\n  @apply mb-4;\r\n\r\n  color: #ccb373;\r\n  background: linear-gradient(#ccb373, #977622);\r\n  background-clip: text;\r\n  -webkit-text-fill-color: transparent;\r\n}\r\n\r\n.hero-text {\r\n  @apply opacity-0;\r\n\r\n  animation: fadeIn 1s ease-out 0.1s both;\r\n}\r\n\r\n.title {\r\n  @apply max-w-sm;\r\n}\r\n\r\n.hero-btn {\r\n  min-width: 140px;\r\n}\r\n\r\n.btn-gold {\r\n  background: linear-gradient(45deg, #977622, #ccb373);\r\n  transition: 0.5s all ease-in-out;\r\n}\r\n\r\n.btn-gold:hover {\r\n  background: linear-gradient(-45deg, #ae8d39, #684e09);\r\n}\r\n\r\n.coins {\r\n  @apply flex lg:gap-8 px-1 lg:px-0;\r\n\r\n  flex-grow: 1;\r\n}\r\n\r\n.coin-wrapper {\r\n  aspect-ratio: 7 / 8;\r\n}\r\n\r\n.coin {\r\n  @apply w-full flex flex-col items-center justify-end relative;\r\n}\r\n\r\n.graphic {\r\n  @apply transition-transform duration-300 relative;\r\n}\r\n\r\n.coin:hover .graphic {\r\n  transform: translateY(-8px);\r\n}\r\n\r\n.caption {\r\n  @apply text-sm md:text-base text-gray-400 transition-colors text-center group-hover:text-white;\r\n\r\n  animation: fadeInMoveUp 0.5s ease-out 0.15s both;\r\n}\r\n\r\n@media (min-width: 768px) {\r\n  .hero-text {\r\n    min-width: 400px;\r\n  }\r\n}\r\n\r\n.caption .bal-icon {\r\n  animation: fadeInMoveUp 0.5s ease-out 0.15s both;\r\n}\r\n</style>\r\n","import { getAddress } from '@ethersproject/address';\r\nimport { computed, reactive, Ref } from 'vue';\r\nimport { useQuery, UseQueryOptions } from '@tanstack/vue-query';\r\n\r\nimport QUERY_KEYS from '@/constants/queryKeys';\r\nimport { LiquidityGauge } from '@/services/balancer/contracts/contracts/liquidity-gauge';\r\nimport { Address } from '@/types';\r\n\r\nimport useNetwork from '../useNetwork';\r\n\r\n/**\r\n * TYPES\r\n */\r\ntype QueryResponse = Readonly<Address[]>;\r\ntype MulticallerResult = Record<Address, { isKilled: boolean }>;\r\ntype QueryOptions = UseQueryOptions<QueryResponse>;\r\n\r\nfunction callGaugesIsKilledStatus(\r\n  gaugeAddresses: Address[]\r\n): Promise<MulticallerResult> {\r\n  const multicaller = LiquidityGauge.getMulticaller();\r\n\r\n  for (const gaugeAddress of gaugeAddresses) {\r\n    multicaller.call(\r\n      `${getAddress(gaugeAddress)}.isKilled`,\r\n      getAddress(gaugeAddress),\r\n      'is_killed'\r\n    );\r\n  }\r\n  return multicaller.execute<MulticallerResult>();\r\n}\r\n\r\n/**\r\n * @summary Given a list of gauge addresses, fetches their is_killed status onchain\r\n * and returns the addresses that have is_killed status.\r\n */\r\nexport default function useExpiredGaugesQuery(\r\n  gaugeAddresses: Ref<Address[] | undefined>,\r\n  options: QueryOptions = {}\r\n) {\r\n  /**\r\n   * COMPOSABLES\r\n   */\r\n  const { networkId } = useNetwork();\r\n\r\n  /**\r\n   * COMPUTED\r\n   */\r\n  const isQueryEnabled = computed(() => {\r\n    return !!gaugeAddresses.value?.length;\r\n  });\r\n\r\n  /**\r\n   * QUERY KEY\r\n   */\r\n  const queryKey = reactive(\r\n    QUERY_KEYS.Gauges.Expired(gaugeAddresses, networkId)\r\n  );\r\n\r\n  /**\r\n   * QUERY FUNCTION\r\n   */\r\n  async function queryFn() {\r\n    const expiredGaugeAddresses: Address[] = [];\r\n    if (gaugeAddresses.value?.length) {\r\n      const gaugesExpiredStatus = await callGaugesIsKilledStatus(\r\n        gaugeAddresses.value\r\n      ).catch(error => {\r\n        console.error('Error when fetching voting gauges is_killed status', {\r\n          error,\r\n        });\r\n        return [];\r\n      });\r\n\r\n      for (const [address, value] of Object.entries(gaugesExpiredStatus)) {\r\n        if (value.isKilled) {\r\n          expiredGaugeAddresses.push(address);\r\n        }\r\n      }\r\n    }\r\n    return Object.freeze(expiredGaugeAddresses);\r\n  }\r\n\r\n  /**\r\n   * QUERY OPTIONS\r\n   */\r\n  const queryOptions = reactive({\r\n    enabled: isQueryEnabled,\r\n    ...options,\r\n  });\r\n  return useQuery<QueryResponse>(\r\n    queryKey,\r\n    queryFn,\r\n    queryOptions as QueryOptions\r\n  );\r\n}\r\n","import { computed, reactive } from 'vue';\r\nimport useGraphQuery, { subgraphs } from '@/composables/queries/useGraphQuery';\r\nimport useWeb3 from '@/services/web3/useWeb3';\r\nimport useConfig from '@/composables/useConfig';\r\nimport { bnum, isSameAddress } from '@/lib/utils';\r\nimport useVeBalLockInfoQuery from '@/composables/queries/useVeBalLockInfoQuery';\r\nimport useVotingGauges from '@/composables/useVotingGauges';\r\nimport configs from '@/lib/config';\r\nimport { networkId } from '@/composables/useNetwork';\r\nimport useExpiredGaugesQuery from '@/composables/queries/useExpiredGaugesQuery';\r\nimport { VotingGaugeWithVotes } from '@/services/balancer/gauges/gauge-controller.decorator';\r\nimport useVeBal, { isVotingTimeLocked } from '@/composables/useVeBAL';\r\nimport QUERY_KEYS from '@/constants/queryKeys';\r\n\r\n/**\r\n * TYPES\r\n */\r\nexport type VotingEscrowLock = {\r\n  votingEscrowID: {\r\n    id: string;\r\n  };\r\n  updatedAt: number;\r\n};\r\n\r\ntype VotingEscrowLockQueryResponse = {\r\n  votingEscrowLocks: VotingEscrowLock[];\r\n};\r\n\r\nexport default function useVotingEscrowLocks() {\r\n  /**\r\n   * COMPOSABLES\r\n   */\r\n  const { account } = useWeb3();\r\n  const { networkConfig } = useConfig();\r\n  const veBalLockInfoQuery = useVeBalLockInfoQuery();\r\n  const { votingGauges: allVotingGauges } = useVotingGauges();\r\n  const { veBalBalance } = useVeBal();\r\n\r\n  const votingEscrowLocksQueryEnabled = computed(() => !!account.value);\r\n  const votingEscrowLocksQuery = useGraphQuery<VotingEscrowLockQueryResponse>(\r\n    subgraphs.gauge,\r\n    QUERY_KEYS.Gauges.VotingEscrowLocks(\r\n      veBalLockInfoQuery.data.value?.lockedAmount\r\n    ),\r\n    () => ({\r\n      votingEscrowLocks: {\r\n        __args: {\r\n          where: {\r\n            user: account.value.toLowerCase(),\r\n            votingEscrowID:\r\n              configs[networkId.value].addresses.veBAL.toLocaleLowerCase(),\r\n          },\r\n        },\r\n        votingEscrowID: {\r\n          id: true,\r\n        },\r\n        updatedAt: true,\r\n      },\r\n    }),\r\n    reactive({ enabled: votingEscrowLocksQueryEnabled })\r\n  );\r\n\r\n  /**\r\n   * COMPUTED\r\n   */\r\n  const votingEscrowLocks = computed(\r\n    () => votingEscrowLocksQuery.data.value?.votingEscrowLocks\r\n  );\r\n\r\n  const votingGaugeAddresses = computed<string[]>(\r\n    () => allVotingGauges.value?.map(gauge => gauge.address) || []\r\n  );\r\n\r\n  const { data: expiredGauges } = useExpiredGaugesQuery(votingGaugeAddresses);\r\n\r\n  //  If user has received more veBAL since they last voted, their voting power is under-utilized\r\n  const gaugesUsingUnderUtilizedVotingPower = computed<VotingGaugeWithVotes[]>(\r\n    () =>\r\n      allVotingGauges.value.filter(gauge => {\r\n        return (\r\n          // Does the gauge have user votes\r\n          bnum(gauge.userVotes).gt(0) &&\r\n          // Has user received veBAL since they last voted\r\n          gauge.lastUserVoteTime < lastReceivedVebal.value &&\r\n          // Is voting currently not locked\r\n          !isVotingTimeLocked(gauge.lastUserVoteTime) &&\r\n          // Is gauge not expired\r\n          !expiredGauges.value?.includes(gauge.address)\r\n        );\r\n      })\r\n  );\r\n\r\n  const shouldResubmitVotes = computed<boolean>(\r\n    () =>\r\n      // Does user have any veBAL\r\n      bnum(veBalBalance.value).gt(0) &&\r\n      !!gaugesUsingUnderUtilizedVotingPower.value.length\r\n  );\r\n\r\n  // Timestamp when user has last received veBAL\r\n  const lastReceivedVebal = computed(\r\n    () =>\r\n      votingEscrowLocks.value?.find(item =>\r\n        isSameAddress(item.votingEscrowID.id, networkConfig.addresses.veBAL)\r\n      )?.updatedAt || 0\r\n  );\r\n\r\n  return {\r\n    votingEscrowLocks,\r\n    lastReceivedVebal,\r\n    gaugesUsingUnderUtilizedVotingPower,\r\n    shouldResubmitVotes,\r\n  };\r\n}\r\n","import { customRef, Ref } from 'vue';\r\n\r\n// Taken from https://vuejs.org/api/reactivity-advanced.html#customref\r\nexport default function useDebouncedRef<T>(value: T, delay = 200): Ref<T> {\r\n  let timeout: NodeJS.Timeout;\r\n  return customRef((track, trigger) => {\r\n    return {\r\n      get() {\r\n        track();\r\n        return value;\r\n      },\r\n      set(newValue) {\r\n        clearTimeout(timeout);\r\n        timeout = setTimeout(() => {\r\n          value = newValue;\r\n          trigger();\r\n        }, delay);\r\n      },\r\n    };\r\n  });\r\n}\r\n","<script setup lang=\"ts\">\r\nconst shouldRender = ref(false);\r\nnextTick(() => {\r\n  shouldRender.value = true;\r\n});\r\n</script>\r\n\r\n<template>\r\n  <slot v-if=\"shouldRender\" />\r\n</template>","<script lang=\"ts\" setup>\r\nimport useDarkMode from '@/composables/useDarkMode';\r\nimport useTailwind from '@/composables/useTailwind';\r\n\r\nconst { theme } = useTailwind();\r\nconst { darkMode } = useDarkMode();\r\n\r\nconst color = computed(() =>\r\n  darkMode.value ? theme.colors.white : theme.colors.black\r\n);\r\n</script>\r\n\r\n<template>\r\n  <svg\r\n    width=\"24\"\r\n    height=\"15\"\r\n    viewBox=\"0 0 24 15\"\r\n    fill=\"none\"\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n  >\r\n    <circle cx=\"7.5\" cy=\"7.5\" r=\"7\" :stroke=\"color\" />\r\n    <circle cx=\"16.5\" cy=\"7.5\" r=\"7\" :stroke=\"color\" />\r\n  </svg>\r\n</template>\r\n","<script lang=\"ts\" setup>\r\nimport useDarkMode from '@/composables/useDarkMode';\r\nimport useTailwind from '@/composables/useTailwind';\r\n\r\nconst { theme } = useTailwind();\r\nconst { darkMode } = useDarkMode();\r\n\r\nconst color = computed(() =>\r\n  darkMode.value ? theme.colors.white : theme.colors.black\r\n);\r\n</script>\r\n\r\n<template>\r\n  <svg\r\n    width=\"20\"\r\n    height=\"20\"\r\n    viewBox=\"0 0 20 20\"\r\n    fill=\"none\"\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n  >\r\n    <path\r\n      d=\"M9.99984 18.3333C14.6022 18.3333 18.3332 14.6023 18.3332 9.99996C18.3332 5.39759 14.6022 1.66663 9.99984 1.66663C5.39746 1.66663 1.6665 5.39759 1.6665 9.99996C1.6665 14.6023 5.39746 18.3333 9.99984 18.3333Z\"\r\n      :stroke=\"color\"\r\n      stroke-width=\"1.25\"\r\n      stroke-linecap=\"round\"\r\n      stroke-linejoin=\"round\"\r\n    />\r\n    <path\r\n      d=\"M1.6665 10H18.3332\"\r\n      :stroke=\"color\"\r\n      stroke-width=\"1.25\"\r\n      stroke-linecap=\"round\"\r\n      stroke-linejoin=\"round\"\r\n    />\r\n    <path\r\n      d=\"M9.99984 1.66663C12.0842 3.94859 13.2688 6.90999 13.3332 9.99996C13.2688 13.0899 12.0842 16.0513 9.99984 18.3333C7.91544 16.0513 6.73088 13.0899 6.6665 9.99996C6.73088 6.90999 7.91544 3.94859 9.99984 1.66663V1.66663Z\"\r\n      :stroke=\"color\"\r\n      stroke-width=\"1.25\"\r\n      stroke-linecap=\"round\"\r\n      stroke-linejoin=\"round\"\r\n    />\r\n  </svg>\r\n</template>\r\n","<script setup lang=\"ts\">\r\nimport { computed } from 'vue';\r\n\r\n/**\r\n * TYPES\r\n */\r\ntype Props = {\r\n  isGaugeExpired: boolean;\r\n  hasUserVotes: boolean;\r\n};\r\n\r\n/**\r\n * PROPS & EMITS\r\n */\r\nconst props = defineProps<Props>();\r\n\r\n/**\r\n * COMPUTED\r\n */\r\nconst showRemoveVotes = computed(() => {\r\n  return props.isGaugeExpired && props.hasUserVotes;\r\n});\r\n\r\nconst disabled = computed(() => {\r\n  return props.isGaugeExpired && !props.hasUserVotes;\r\n});\r\n</script>\r\n\r\n<template>\r\n  <BalBtn\r\n    :color=\"showRemoveVotes ? 'red' : 'blue'\"\r\n    :disabled=\"disabled\"\r\n    :class=\"`vote-btn\r\n      ${showRemoveVotes ? 'vote-btn--red' : 'vote-btn--blue'}`\"\r\n    outline\r\n    size=\"sm\"\r\n    flat\r\n    block\r\n  >\r\n    {{\r\n      showRemoveVotes\r\n        ? $t('veBAL.liquidityMining.table.remove')\r\n        : $t('veBAL.liquidityMining.table.vote')\r\n    }}\r\n  </BalBtn>\r\n</template>\r\n\r\n<style scoped>\r\n.vote-btn:not(:disabled) {\r\n  @apply hover:text-white focus:text-white;\r\n}\r\n\r\n.vote-btn--blue:not(:disabled) {\r\n  @apply hover:bg-blue-500 focus:bg-blue-500 dark:hover:bg-blue-500 dark:focus:bg-blue-500;\r\n}\r\n\r\n.vote-btn--red:not(:disabled) {\r\n  @apply hover:bg-red-500  focus:bg-red-500;\r\n}\r\n</style>\r\n","<script setup lang=\"ts\">\r\nimport { computed } from 'vue';\r\n\r\nimport useNumbers from '@/composables/useNumbers';\r\nimport { bnum, scale } from '@/lib/utils';\r\nimport { VotingGaugeWithVotes } from '@/services/balancer/gauges/gauge-controller.decorator';\r\n\r\n/**\r\n * TYPES\r\n */\r\ntype Props = {\r\n  gauge: VotingGaugeWithVotes;\r\n};\r\n\r\n/**\r\n * PROPS & EMITS\r\n */\r\nconst props = withDefaults(defineProps<Props>(), {});\r\n\r\n/**\r\n * COMPOSABLES\r\n */\r\nconst { fNum } = useNumbers();\r\n\r\n/**\r\n * COMPUTED\r\n */\r\n\r\nconst votesThisPeriod = computed<string>(() =>\r\n  formatVotesAsPercent(props.gauge.votes)\r\n);\r\n\r\nconst votesNextPeriod = computed<string>(() =>\r\n  formatVotesAsPercent(props.gauge.votesNextPeriod)\r\n);\r\n\r\nconst voteDifference = computed<number>(() => {\r\n  return Number(props.gauge.votesNextPeriod) - Number(props.gauge.votes);\r\n});\r\n\r\nconst voteDifferenceText = computed<string>(() => {\r\n  const text = formatVotesAsPercent(voteDifference.value.toString());\r\n  const prefix = voteDifference.value > 0 ? '+' : '';\r\n  return `${prefix}${text}`;\r\n});\r\n\r\nconst voteTextClass = computed(() => {\r\n  return {\r\n    'text-green-600': voteDifference.value > 0,\r\n    'text-red-600': voteDifference.value < 0,\r\n  };\r\n});\r\n\r\n/**\r\n * METHODS\r\n */\r\nfunction formatVotesAsPercent(votes: string): string {\r\n  const normalizedVotes = scale(bnum(votes), -18);\r\n  return fNum(normalizedVotes.toString(), {\r\n    style: 'percent',\r\n    maximumFractionDigits: 2,\r\n    fixedFormat: true,\r\n  });\r\n}\r\n</script>\r\n\r\n<template>\r\n  <BalTooltip textAlign=\"left\">\r\n    <template #activator>\r\n      <span :class=\"voteTextClass\">{{ votesNextPeriod }}</span>\r\n    </template>\r\n    <div>\r\n      <div class=\"mb-2 text-sm font-semibold\">\r\n        {{ $t('veBAL.liquidityMining.votesTooltip.title') }}\r\n      </div>\r\n      <div class=\"text-xs font-normal\">\r\n        <div class=\"mb-2\">\r\n          {{\r\n            $t('veBAL.liquidityMining.votesTooltip.thisPeriod', [\r\n              votesThisPeriod,\r\n            ])\r\n          }}\r\n        </div>\r\n        <div class=\"mb-2\">\r\n          {{\r\n            $t('veBAL.liquidityMining.votesTooltip.nextPeriod', [\r\n              votesNextPeriod,\r\n            ])\r\n          }}\r\n          <span :class=\"voteTextClass\">{{ voteDifferenceText }}</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </BalTooltip>\r\n</template>\r\n","<template>\r\n  <svg width=\"20\" height=\"20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n    <path\r\n      fill-rule=\"evenodd\"\r\n      clip-rule=\"evenodd\"\r\n      d=\"M17 14.2h-4.1a.5.5 0 0 0-.5.5V17a.5.5 0 0 0 .5.5H17a.5.5 0 0 0 .5-.5v-2.3a.5.5 0 0 0-.5-.5Zm-4.1-1.5a2 2 0 0 0-2 2V17a2 2 0 0 0 2 2H17a2 2 0 0 0 2-2v-2.3a2 2 0 0 0-2-2h-4.1Z\"\r\n      fill=\"currentColor\"\r\n    />\r\n    <path\r\n      fill-rule=\"evenodd\"\r\n      clip-rule=\"evenodd\"\r\n      d=\"M14.915 10.75c-.271 0-.53.107-.72.295a.993.993 0 0 0-.295.705v1.4a.75.75 0 0 1-1.5 0v-1.4c0-.665.266-1.302.739-1.77a2.522 2.522 0 0 1 3.552 0c.472.468.738 1.105.738 1.77v1.4a.75.75 0 0 1-1.5 0v-1.4a.993.993 0 0 0-.295-.705 1.023 1.023 0 0 0-.72-.295Z\"\r\n      fill=\"currentColor\"\r\n    />\r\n    <path\r\n      fill-rule=\"evenodd\"\r\n      clip-rule=\"evenodd\"\r\n      d=\"M11.55 2.686a7.328 7.328 0 0 0-3.9.172 7.404 7.404 0 0 0-3.276 2.157 7.535 7.535 0 0 0-1.737 3.551 7.584 7.584 0 0 0 .294 3.954 7.501 7.501 0 0 0 2.242 3.247 7.372 7.372 0 0 0 3.556 1.637.75.75 0 1 1-.242 1.48 8.872 8.872 0 0 1-4.28-1.97 9.001 9.001 0 0 1-2.69-3.895 9.084 9.084 0 0 1-.353-4.736 9.035 9.035 0 0 1 2.084-4.258 8.904 8.904 0 0 1 3.94-2.594 8.828 8.828 0 0 1 4.698-.207 8.884 8.884 0 0 1 4.149 2.237 9.016 9.016 0 0 1 2.443 4.058.75.75 0 0 1-1.443.41A7.516 7.516 0 0 0 15 4.546a7.385 7.385 0 0 0-3.448-1.86ZM10 4.3a.75.75 0 0 1 .75.75v4.7a1 1 0 0 1-1 1h-4.7a.75.75 0 0 1 0-1.5h4.2v-4.2A.75.75 0 0 1 10 4.3Z\"\r\n      fill=\"currentColor\"\r\n    />\r\n  </svg>\r\n</template>\r\n","\r\n<script setup lang=\"ts\">\r\nimport { computed } from 'vue';\r\nimport { isSameAddress, scale } from '@/lib/utils';\r\nimport { VotingGaugeWithVotes } from '@/services/balancer/gauges/gauge-controller.decorator';\r\nimport BigNumber from 'bignumber.js';\r\nimport useNumbers from '@/composables/useNumbers';\r\nimport useVotingEscrowLocks from '@/composables/useVotingEscrowLocks';\r\nimport { useI18n } from 'vue-i18n';\r\nimport {\r\n  isVotingTimeLocked,\r\n  remainingVoteLockTime,\r\n} from '@/composables/useVeBAL';\r\nimport TimelockIcon from '@/components/_global/icons/TimelockIcon.vue';\r\nimport BalTooltip from '@/components/_global/BalTooltip/BalTooltip.vue';\r\n\r\n/**\r\n * TYPES\r\n */\r\ntype Props = {\r\n  gauge: VotingGaugeWithVotes;\r\n};\r\n\r\n/**\r\n * PROPS & EMITS\r\n */\r\nconst props = defineProps<Props>();\r\n\r\n/**\r\n * COMPOSABLES\r\n */\r\nconst { t } = useI18n();\r\nconst { fNum } = useNumbers();\r\nconst { gaugesUsingUnderUtilizedVotingPower } = useVotingEscrowLocks();\r\n\r\nconst myVotes = computed(() => {\r\n  const normalizedVotes = scale(new BigNumber(props.gauge.userVotes), -4);\r\n  return fNum(normalizedVotes.toString(), {\r\n    style: 'percent',\r\n    maximumFractionDigits: 2,\r\n  });\r\n});\r\n\r\nconst poolHasUnderUtilizedVotingPoewer = computed<boolean>(\r\n  () =>\r\n    !!gaugesUsingUnderUtilizedVotingPower.value.find(gauge =>\r\n      isSameAddress(gauge.address, props.gauge.address)\r\n    )\r\n);\r\n</script>\r\n\r\n<template>\r\n  <div\r\n    :class=\"{\r\n      'flex justify-end items-center': true,\r\n      'text-red-600': poolHasUnderUtilizedVotingPoewer,\r\n    }\"\r\n  >\r\n    {{ myVotes }}\r\n    <BalTooltip\r\n      v-if=\"isVotingTimeLocked(gauge.lastUserVoteTime)\"\r\n      textAlign=\"left\"\r\n    >\r\n      <template #activator>\r\n        <TimelockIcon />\r\n      </template>\r\n      <div>\r\n        <span class=\"font-semibold\">\r\n          {{\r\n            $t('veBAL.liquidityMining.popover.warnings.votedTooRecently.title')\r\n          }}\r\n        </span>\r\n        <p class=\"text-gray-500\">\r\n          {{\r\n            $t(\r\n              'veBAL.liquidityMining.popover.warnings.votedTooRecently.description',\r\n              [remainingVoteLockTime(gauge.lastUserVoteTime)]\r\n            )\r\n          }}\r\n        </p>\r\n      </div>\r\n    </BalTooltip>\r\n    <BalTooltip\r\n      v-else-if=\"poolHasUnderUtilizedVotingPoewer\"\r\n      template\r\n      textAlign=\"left\"\r\n      width=\"60\"\r\n    >\r\n      <template #activator>\r\n        <BalIcon class=\"ml-1\" name=\"alert-triangle\" size=\"sm\" />\r\n      </template>\r\n      <div class=\"flex flex-col gap-1\">\r\n        <span class=\"font-semibold\"\r\n          >{{ t('veBAL.liquidityMining.resubmit.hint.title') }}\r\n        </span>\r\n        <span>\r\n          {{ t('veBAL.liquidityMining.resubmit.hint.description') }}\r\n        </span>\r\n      </div>\r\n    </BalTooltip>\r\n  </div>\r\n</template>\r\n\r\n","<script setup lang=\"ts\">\r\nimport { computed } from 'vue';\r\n\r\n/**\r\n * TYPES\r\n */\r\ntype Props = {\r\n  amount?: string;\r\n  tooltip?: string;\r\n  size?: 'sm' | 'md' | 'lg';\r\n};\r\n\r\n/**\r\n * PROPS\r\n */\r\nconst props = withDefaults(defineProps<Props>(), {\r\n  amount: '1',\r\n  tooltip: `Limit amount`,\r\n  size: 'md',\r\n});\r\n\r\n/**\r\n * COMPUTED\r\n */\r\nconst sizeClass = computed(() => {\r\n  switch (props.size) {\r\n    case 'sm':\r\n      return 'text-xxs p-0 w-5 h-5 leading-4';\r\n    case 'lg':\r\n      return 'text-md p-2 w-11 h-11';\r\n    default:\r\n      return 'text-sm p-1 w-8 h-8';\r\n  }\r\n});\r\n</script>\r\n\r\n<template>\r\n  <BalTooltip textAlign=\"left\">\r\n    <template #activator>\r\n      <div\r\n        :class=\"sizeClass\"\r\n        class=\"inline-block font-medium text-center rounded-full border-2 border-red-600\"\r\n      >\r\n        {{ amount }}\r\n      </div>\r\n    </template>\r\n    <div>\r\n      <div class=\"text-xs font-normal\">\r\n        {{ tooltip }}\r\n      </div>\r\n    </div>\r\n  </BalTooltip>\r\n</template>\r\n\r\n<style scoped>\r\n.text-xxs {\r\n  font-size: 0.6rem;\r\n  line-height: 1rem;\r\n}\r\n</style>\r\n","<script setup lang=\"ts\">\r\nimport { PoolToken } from '@balancer-labs/sdk';\r\nimport { computed, ref } from 'vue';\r\nimport { useRouter } from 'vue-router';\r\nimport { useI18n } from 'vue-i18n';\r\n\r\nimport { ColumnDefinition } from '@/components/_global/BalTable/types';\r\n\r\nimport BalChipNew from '@/components/chips/BalChipNew.vue';\r\nimport BalChipExpired from '@/components/chips/BalChipExpired.vue';\r\nimport TokenPills from '@/components/tables/PoolsTable/TokenPills/TokenPills.vue';\r\nimport useBreakpoints from '@/composables/useBreakpoints';\r\nimport { getNetworkSlug } from '@/composables/useNetwork';\r\nimport {\r\n  isStableLike,\r\n  isUnknownType,\r\n  orderedPoolTokens,\r\n  poolURLFor,\r\n} from '@/composables/usePool';\r\nimport { isSameAddress } from '@/lib/utils';\r\nimport { VotingGaugeWithVotes } from '@/services/balancer/gauges/gauge-controller.decorator';\r\nimport useWeb3 from '@/services/web3/useWeb3';\r\n\r\nimport GaugesTableVoteBtn from './GaugesTableVoteBtn.vue';\r\nimport GaugeVoteInfo from './GaugeVoteInfo.vue';\r\nimport GaugesTableMyVotes from './GaugesTableMyVotes.vue';\r\nimport BalAssetSet from '@/components/_global/BalAsset/BalAssetSet.vue';\r\nimport { orderedTokenURIs } from '@/composables/useVotingGauges';\r\nimport IconLimit from '@/components/icons/IconLimit.vue';\r\nimport { differenceInWeeks } from 'date-fns';\r\nimport { oneSecondInMs } from '@/composables/useTime';\r\nimport { buildNetworkIconURL } from '@/lib/utils/urls';\r\n\r\n/**\r\n * TYPES\r\n */\r\ntype Props = {\r\n  expiredGauges?: Readonly<string[]>;\r\n  data?: VotingGaugeWithVotes[];\r\n  isLoading?: boolean;\r\n  noPoolsLabel?: string;\r\n  isPaginated?: boolean;\r\n  filterText?: string;\r\n};\r\n\r\n/**\r\n * PROPS & EMITS\r\n */\r\nconst props = withDefaults(defineProps<Props>(), {\r\n  expiredGauges: () => [] as never[],\r\n  showPoolShares: false,\r\n  noPoolsLabel: 'No pools',\r\n  filterText: '',\r\n  isPaginated: false,\r\n  data: () => [],\r\n});\r\n\r\nconst emit = defineEmits<{\r\n  (e: 'clickedVote', value: VotingGaugeWithVotes): void;\r\n}>();\r\n\r\n/**\r\n * COMPOSABLES\r\n */\r\nconst router = useRouter();\r\nconst { t } = useI18n();\r\nconst { upToLargeBreakpoint } = useBreakpoints();\r\nconst { isWalletReady } = useWeb3();\r\n\r\n/**\r\n * DATA\r\n */\r\nconst columns = ref<ColumnDefinition<VotingGaugeWithVotes>[]>([\r\n  {\r\n    name: t('veBAL.liquidityMining.table.chain'),\r\n    id: 'chain',\r\n    accessor: '',\r\n    Header: 'chainColumnHeader',\r\n    Cell: 'networkColumnCell',\r\n    width: 50,\r\n    noGrow: true,\r\n  },\r\n  {\r\n    name: t('veBAL.liquidityMining.table.assets'),\r\n    id: 'icons',\r\n    accessor: 'uri',\r\n    Header: 'iconColumnHeader',\r\n    Cell: 'iconColumnCell',\r\n    width: 100,\r\n    noGrow: true,\r\n  },\r\n  {\r\n    name: t('veBAL.liquidityMining.table.composition'),\r\n    id: 'poolComposition',\r\n    accessor: 'id',\r\n    Cell: 'poolCompositionCell',\r\n    width: 350,\r\n  },\r\n  {\r\n    name: t('veBAL.liquidityMining.table.nextPeriodVotes'),\r\n    accessor: 'id',\r\n    align: 'right',\r\n    id: 'nextPeriodVotes',\r\n    Cell: 'nextPeriodVotesCell',\r\n    sortKey: gauge => Number(gauge.votesNextPeriod),\r\n    width: 160,\r\n    cellClassName: 'font-numeric',\r\n  },\r\n  {\r\n    name: t('veBAL.liquidityMining.table.myVotes'),\r\n    accessor: 'myVotes',\r\n    align: 'right',\r\n    id: 'myVotes',\r\n    sortKey: gauge => Number(gauge.userVotes),\r\n    width: 100,\r\n    Cell: 'myVotesCell',\r\n    cellClassName: 'font-numeric',\r\n    hidden: !isWalletReady.value,\r\n  },\r\n  {\r\n    name: t('veBAL.liquidityMining.table.vote'),\r\n    id: 'vote',\r\n    accessor: 'id',\r\n    align: 'right',\r\n    Cell: 'voteColumnCell',\r\n    width: 100,\r\n    hidden: !isWalletReady.value,\r\n  },\r\n]);\r\n\r\nconst dataKey = computed(() => JSON.stringify(props.data));\r\n\r\n/**\r\n * METHODS\r\n */\r\nfunction isInternalUrl(url: string): boolean {\r\n  return url.includes('balancer.fi') || url.includes('localhost');\r\n}\r\n\r\nfunction redirectToPool(gauge: VotingGaugeWithVotes, inNewTab) {\r\n  const redirectUrl = poolURLFor(gauge.pool, gauge.network);\r\n  if (!isInternalUrl(redirectUrl)) {\r\n    window.location.href = redirectUrl;\r\n  } else {\r\n    const route = router.resolve({\r\n      name: 'pool',\r\n      params: { id: gauge.pool.id, networkSlug: getNetworkSlug(gauge.network) },\r\n    });\r\n    inNewTab ? window.open(route.href) : router.push(route);\r\n  }\r\n}\r\n\r\nfunction getPoolExternalUrl(gauge: VotingGaugeWithVotes) {\r\n  const poolUrl = poolURLFor(gauge.pool, gauge.network);\r\n  return isInternalUrl(poolUrl) ? null : poolUrl;\r\n}\r\n\r\nfunction getIsGaugeNew(addedTimestamp: number): boolean {\r\n  return differenceInWeeks(Date.now(), addedTimestamp * oneSecondInMs) < 2;\r\n}\r\n\r\nfunction getIsGaugeExpired(gaugeAddress: string): boolean {\r\n  return !!props.expiredGauges.some(item => isSameAddress(gaugeAddress, item));\r\n}\r\n\r\nfunction getHasUserVotes(userVotes: string): boolean {\r\n  return !!Number(userVotes);\r\n}\r\n\r\nfunction getTableRowClass(gauge: VotingGaugeWithVotes): string {\r\n  return getHasUserVotes(gauge.userVotes) && getIsGaugeExpired(gauge.address)\r\n    ? 'expired-gauge-row'\r\n    : '';\r\n}\r\n\r\nfunction getSelectedTokens(tokens: PoolToken[]) {\r\n  return tokens\r\n    .filter(\r\n      token => token.symbol?.toLowerCase() === props.filterText?.toLowerCase()\r\n    )\r\n    .map(item => item.address);\r\n}\r\n\r\nfunction getPickedTokens(tokens: PoolToken[]) {\r\n  return tokens\r\n    .filter(\r\n      token =>\r\n        props.filterText &&\r\n        token.symbol?.toLowerCase().includes(props.filterText?.toLowerCase())\r\n    )\r\n    .map(item => item.address);\r\n}\r\n</script>\r\n\r\n<template>\r\n  <BalCard\r\n    shadow=\"lg\"\r\n    class=\"mt-4\"\r\n    :square=\"upToLargeBreakpoint\"\r\n    :noBorder=\"upToLargeBreakpoint\"\r\n    noPad\r\n  >\r\n    <BalTable\r\n      :key=\"dataKey\"\r\n      :columns=\"columns\"\r\n      :data=\"data\"\r\n      :isLoading=\"isLoading\"\r\n      skeletonClass=\"h-64\"\r\n      sticky=\"both\"\r\n      :square=\"upToLargeBreakpoint\"\r\n      :isPaginated=\"isPaginated\"\r\n      :href=\"{ getHref: gauge => getPoolExternalUrl(gauge) }\"\r\n      :onRowClick=\"redirectToPool\"\r\n      :getTableRowClass=\"getTableRowClass\"\r\n      :initialState=\"{\r\n        sortColumn: 'nextPeriodVotes',\r\n        sortDirection: 'desc',\r\n      }\"\r\n      :pin=\"{\r\n        pinOn: 'address',\r\n        pinnedData: ['0xE867AD0a48e8f815DC0cda2CDb275e0F163A480b'],\r\n      }\"\r\n    >\r\n      <template #chainColumnHeader>\r\n        <div class=\"flex items-center\">\r\n          <NetworkIcon />\r\n        </div>\r\n      </template>\r\n      <template #networkColumnCell=\"{ network }\">\r\n        <div v-if=\"!isLoading\" class=\"py-4 px-6\">\r\n          <div\r\n            class=\"flex justify-center items-center w-8 h-8 bg-gray-50 dark:bg-gray-800 rounded shadow-sm\"\r\n          >\r\n            <img\r\n              :src=\"buildNetworkIconURL(getNetworkSlug(network))\"\r\n              :alt=\"network\"\r\n              class=\"w-6 h-6\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </template>\r\n      <template #iconColumnHeader>\r\n        <div class=\"flex items-center\">\r\n          <CompositionIcon />\r\n        </div>\r\n      </template>\r\n      <template #iconColumnCell=\"gauge\">\r\n        <div v-if=\"!isLoading\" class=\"py-4 px-6\">\r\n          <BalAssetSet :logoURIs=\"orderedTokenURIs(gauge)\" :width=\"100\" />\r\n        </div>\r\n      </template>\r\n      <template #poolCompositionCell=\"{ pool, address, addedTimestamp }\">\r\n        <div v-if=\"!isLoading\" class=\"flex items-center py-4 px-6\">\r\n          <TokenPills\r\n            :tokens=\"orderedPoolTokens(pool, pool.tokens)\"\r\n            :isStablePool=\"\r\n              isStableLike(pool.poolType) || isUnknownType(pool.poolType)\r\n            \"\r\n            :selectedTokens=\"getSelectedTokens(pool.tokens)\"\r\n            :pickedTokens=\"getPickedTokens(pool.tokens)\"\r\n          />\r\n          <BalChipNew v-if=\"getIsGaugeNew(addedTimestamp)\" class=\"ml-2\" />\r\n          <BalChipExpired v-if=\"getIsGaugeExpired(address)\" class=\"ml-2\" />\r\n        </div>\r\n      </template>\r\n      <template #nextPeriodVotesCell=\"gauge\">\r\n        <!-- Put to BalLazy the most expensive to render component -->\r\n        <BalLazy>\r\n          <div v-if=\"!isLoading\" class=\"flex justify-end py-4 px-6\">\r\n            <GaugeVoteInfo :gauge=\"gauge\" />\r\n            <div class=\"flex justify-end w-6\">\r\n              <IconLimit\r\n                v-if=\"gauge.pool.symbol === 'veBAL'\"\r\n                size=\"sm\"\r\n                amount=\"10\"\r\n                :tooltip=\"\r\n                  $t(\r\n                    'veBAL.liquidityMining.limitsTooltip.distributionsCappedVeBAL'\r\n                  )\r\n                \"\r\n              />\r\n              <IconLimit\r\n                v-else-if=\"\r\n                  gauge.relativeWeightCap !== 'null' &&\r\n                  gauge.relativeWeightCap !== '1'\r\n                \"\r\n                size=\"sm\"\r\n                :amount=\"(Number(gauge.relativeWeightCap) * 100).toFixed()\"\r\n                :tooltip=\"\r\n                  $t(\r\n                    'veBAL.liquidityMining.limitsTooltip.distributionsCappedAt',\r\n                    [(Number(gauge.relativeWeightCap) * 100).toFixed()]\r\n                  )\r\n                \"\r\n              />\r\n            </div>\r\n          </div>\r\n        </BalLazy>\r\n      </template>\r\n      <template #myVotesCell=\"gauge\">\r\n        <div v-if=\"!isLoading\" class=\"py-4 px-6 text-right\">\r\n          <GaugesTableMyVotes :gauge=\"gauge\"></GaugesTableMyVotes>\r\n        </div>\r\n      </template>\r\n      <template #voteColumnCell=\"gauge\">\r\n        <div v-if=\"isWalletReady\" class=\"px-4\">\r\n          <GaugesTableVoteBtn\r\n            :hasUserVotes=\"getHasUserVotes(gauge.userVotes)\"\r\n            :isGaugeExpired=\"getIsGaugeExpired(gauge.address)\"\r\n            @click.stop.prevent=\"emit('clickedVote', gauge)\"\r\n          />\r\n        </div>\r\n      </template>\r\n    </BalTable>\r\n  </BalCard>\r\n</template>\r\n\r\n<style>\r\ntr.expired-gauge-row {\r\n  @apply bg-red-50  hover:bg-red-100 dark:border-red-600 dark:border;\r\n}\r\n</style>\r\n","<template>\r\n  <form\r\n    :action=\"action\"\r\n    :method=\"method\"\r\n    v-bind=\"$attrs\"\r\n    @submit.prevent=\"$emit('onSubmit')\"\r\n  >\r\n    <slot />\r\n  </form>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nfunction useFormValidations() {\r\n  const errors = ref([] as Array<string>);\r\n  const validatable = ref([] as Array<any>);\r\n\r\n  function handleInputErrors(_errors: Array<string>) {\r\n    if (_errors && _errors.length > 0) {\r\n      errors.value.push(..._errors);\r\n    }\r\n  }\r\n\r\n  function validateInput(input) {\r\n    input.validate(input.$props.modelValue);\r\n    handleInputErrors(input.errors);\r\n  }\r\n\r\n  function findValidatable(children): void {\r\n    children.forEach(child => {\r\n      if (\r\n        child.component &&\r\n        typeof child.component.proxy.validate === 'function'\r\n      ) {\r\n        validatable.value.push(child.component.proxy);\r\n      }\r\n      if (Array.isArray(child.children)) {\r\n        findValidatable(child.children);\r\n      }\r\n    });\r\n  }\r\n\r\n  function validate(this: any) {\r\n    errors.value = [];\r\n    validatable.value = [];\r\n\r\n    findValidatable(this.$.subTree.children);\r\n    validatable.value.forEach(input => validateInput(input));\r\n\r\n    if (errors.value.length > 0) return false;\r\n    return true;\r\n  }\r\n\r\n  return {\r\n    errors,\r\n    validate,\r\n    validateInput,\r\n  };\r\n}\r\n\r\nexport default defineComponent({\r\n  name: 'BalForm',\r\n\r\n  props: {\r\n    action: { type: String, default: '' },\r\n    method: { type: String, default: 'post' },\r\n  },\r\n\r\n  emits: ['onSubmit'],\r\n\r\n  setup() {\r\n    const { errors, validate, validateInput } = useFormValidations();\r\n    return { errors, validate, validateInput };\r\n  },\r\n});\r\n</script>\r\n","<template>\r\n  <form\r\n    :action=\"action\"\r\n    :method=\"method\"\r\n    v-bind=\"$attrs\"\r\n    @submit.prevent=\"$emit('onSubmit')\"\r\n  >\r\n    <slot />\r\n  </form>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nfunction useFormValidations() {\r\n  const errors = ref([] as Array<string>);\r\n  const validatable = ref([] as Array<any>);\r\n\r\n  function handleInputErrors(_errors: Array<string>) {\r\n    if (_errors && _errors.length > 0) {\r\n      errors.value.push(..._errors);\r\n    }\r\n  }\r\n\r\n  function validateInput(input) {\r\n    input.validate(input.$props.modelValue);\r\n    handleInputErrors(input.errors);\r\n  }\r\n\r\n  function findValidatable(children): void {\r\n    children.forEach(child => {\r\n      if (\r\n        child.component &&\r\n        typeof child.component.proxy.validate === 'function'\r\n      ) {\r\n        validatable.value.push(child.component.proxy);\r\n      }\r\n      if (Array.isArray(child.children)) {\r\n        findValidatable(child.children);\r\n      }\r\n    });\r\n  }\r\n\r\n  function validate(this: any) {\r\n    errors.value = [];\r\n    validatable.value = [];\r\n\r\n    findValidatable(this.$.subTree.children);\r\n    validatable.value.forEach(input => validateInput(input));\r\n\r\n    if (errors.value.length > 0) return false;\r\n    return true;\r\n  }\r\n\r\n  return {\r\n    errors,\r\n    validate,\r\n    validateInput,\r\n  };\r\n}\r\n\r\nexport default defineComponent({\r\n  name: 'BalForm',\r\n\r\n  props: {\r\n    action: { type: String, default: '' },\r\n    method: { type: String, default: 'post' },\r\n  },\r\n\r\n  emits: ['onSubmit'],\r\n\r\n  setup() {\r\n    const { errors, validate, validateInput } = useFormValidations();\r\n    return { errors, validate, validateInput };\r\n  },\r\n});\r\n</script>\r\n","import { TransactionResponse } from '@ethersproject/abstract-provider';\r\nimport { BigNumber } from '@ethersproject/bignumber';\r\n\r\nimport GaugeControllerAbi from '@/lib/abi/GaugeController.json';\r\nimport ConfigService, { configService } from '@/services/config/config.service';\r\n\r\nimport WalletService, {\r\n  walletService as walletServiceInstance,\r\n} from '@/services/web3/wallet.service';\r\n\r\nexport default class GaugeControllerService {\r\n  abi: any;\r\n\r\n  constructor(\r\n    protected readonly config: ConfigService = configService,\r\n    private readonly walletService: WalletService = walletServiceInstance\r\n  ) {\r\n    this.abi = GaugeControllerAbi;\r\n  }\r\n\r\n  get address() {\r\n    return this.config.network.addresses.gaugeController;\r\n  }\r\n\r\n  public async voteForManyGaugeWeights(\r\n    gaugeAddresses: string[],\r\n    weights: BigNumber[],\r\n    options: Record<string, any> = {}\r\n  ): Promise<TransactionResponse> {\r\n    return await this.walletService.txBuilder.contract.sendTransaction({\r\n      contractAddress: this.address,\r\n      abi: this.abi,\r\n      action: 'vote_for_many_gauge_weights',\r\n      params: [gaugeAddresses, weights],\r\n      options,\r\n    });\r\n  }\r\n\r\n  public voteForGaugeWeights(\r\n    gaugeAddress: string,\r\n    weight: BigNumber,\r\n    options: Record<string, any> = {}\r\n  ): Promise<TransactionResponse> {\r\n    return this.walletService.txBuilder.contract.sendTransaction({\r\n      contractAddress: this.address,\r\n      abi: this.abi,\r\n      action: 'vote_for_gauge_weights',\r\n      params: [gaugeAddress, weight],\r\n      options,\r\n    });\r\n  }\r\n}\r\n\r\nexport const gaugeControllerService = new GaugeControllerService();\r\n","import { TransactionError } from '@/types/transactions';\r\nimport { TransactionReceipt } from '@ethersproject/abstract-provider';\r\nimport { ref } from 'vue';\r\n\r\nexport enum State {\r\n  IDLE = 'IDLE',\r\n  TRANSACTION_INITIALIZED = 'INIT',\r\n  CONFIRMING = 'CONFIRMING',\r\n  CONFIRMED = 'CONFIRMED',\r\n  ERROR = 'ERROR',\r\n}\r\n\r\ninterface SuccessParams {\r\n  confirmedAt: string;\r\n  receipt: TransactionReceipt;\r\n}\r\n\r\nexport default function useActionState() {\r\n  const state = ref<State>(State.IDLE);\r\n  const confirmedAt = ref<string>('');\r\n  const receipt = ref<TransactionReceipt | null>(null);\r\n  const error = ref<TransactionError | null>(null);\r\n\r\n  function setInit() {\r\n    state.value = State.TRANSACTION_INITIALIZED;\r\n    error.value = null;\r\n  }\r\n\r\n  function setConfirming() {\r\n    state.value = State.CONFIRMING;\r\n  }\r\n  function setSuccess(successParams: SuccessParams) {\r\n    state.value = State.CONFIRMED;\r\n    receipt.value = successParams.receipt;\r\n    confirmedAt.value = successParams.confirmedAt;\r\n  }\r\n  function setError({\r\n    title,\r\n    description,\r\n  }: {\r\n    title: string;\r\n    description: string;\r\n  }) {\r\n    state.value = State.ERROR;\r\n    error.value = {\r\n      title,\r\n      description,\r\n    };\r\n  }\r\n\r\n  return {\r\n    state,\r\n    confirmedAt,\r\n    receipt,\r\n    error,\r\n    setInit,\r\n    setConfirming,\r\n    setSuccess,\r\n    setError,\r\n  };\r\n}\r\n","<script lang=\"ts\" setup>\r\nimport { TransactionReceipt } from '@ethersproject/abstract-provider';\r\nimport { BigNumber } from '@ethersproject/bignumber';\r\nimport { format } from 'date-fns';\r\nimport { computed, onMounted, ref } from 'vue';\r\nimport { useI18n } from 'vue-i18n';\r\n\r\nimport BalForm from '@/components/_global/BalForm/BalForm.vue';\r\nimport BalTextInput from '@/components/_global/BalTextInput/BalTextInput.vue';\r\nimport useEthers from '@/composables/useEthers';\r\nimport useNumbers, { FNumFormats } from '@/composables/useNumbers';\r\nimport { dateTimeLabelFor, toUtcTime } from '@/composables/useTime';\r\nimport useTransactions from '@/composables/useTransactions';\r\nimport useVeBal, {\r\n  isVotingTimeLocked,\r\n  remainingVoteLockTime,\r\n} from '@/composables/useVeBAL';\r\nimport { WEIGHT_VOTE_DELAY } from '@/constants/gauge-controller';\r\nimport { VEBAL_VOTING_GAUGE } from '@/constants/voting-gauges';\r\nimport { bnum, isSameAddress, scale } from '@/lib/utils';\r\nimport { isPositive } from '@/lib/utils/validations';\r\nimport { VeBalLockInfo } from '@/services/balancer/contracts/contracts/veBAL';\r\nimport { VotingGaugeWithVotes } from '@/services/balancer/gauges/gauge-controller.decorator';\r\nimport { gaugeControllerService } from '@/services/contracts/gauge-controller.service';\r\nimport { WalletError } from '@/types';\r\nimport SubmitVoteBtn from './SubmitVoteBtn.vue';\r\nimport useActionState, { State } from '@/composables/useActionState';\r\n\r\n/**\r\n * TYPES\r\n */\r\ntype Props = {\r\n  gauge: VotingGaugeWithVotes;\r\n  unallocatedVoteWeight: number;\r\n  logoURIs: string[];\r\n  poolURL: string;\r\n  veBalLockInfo?: VeBalLockInfo | null;\r\n};\r\n\r\nconst MINIMUM_LOCK_TIME = 86_400_000 * 7;\r\n\r\n/**\r\n * PROPS & EMITS\r\n */\r\nconst props = withDefaults(defineProps<Props>(), {\r\n  veBalLockInfo: null,\r\n});\r\n\r\nconst emit = defineEmits<{\r\n  (e: 'close'): void;\r\n  (e: 'success'): void;\r\n}>();\r\n\r\n/**\r\n * COMPOSABLES\r\n */\r\nconst { fNum } = useNumbers();\r\nconst { t } = useI18n();\r\nconst { addTransaction } = useTransactions();\r\nconst { txListener, getTxConfirmedAt } = useEthers();\r\nconst { veBalBalance } = useVeBal();\r\nconst voteState = useActionState();\r\n\r\n/**\r\n * STATE\r\n */\r\nconst voteWeight = ref<string>('');\r\n\r\n/**\r\n * COMPUTED\r\n */\r\nconst voteButtonDisabled = computed((): boolean => {\r\n  if (isVeBalGauge.value) {\r\n    return !!voteError.value || !hasEnoughVotes.value;\r\n  }\r\n\r\n  return !!voteError.value || !hasEnoughVotes.value;\r\n});\r\n\r\nconst voteInputDisabled = computed((): boolean => {\r\n  return !!voteError.value;\r\n});\r\n\r\nconst currentWeight = computed(() => props.gauge.userVotes);\r\nconst currentWeightNormalized = computed(() =>\r\n  scale(bnum(currentWeight.value), -2).toString()\r\n);\r\nconst hasVotes = computed((): boolean => bnum(currentWeight.value).gt(0));\r\n\r\nconst isVeBalGauge = computed((): boolean =>\r\n  isSameAddress(props.gauge.address, VEBAL_VOTING_GAUGE?.address || '')\r\n);\r\n\r\n// Is votes next period value above voting cap?\r\nconst votesNextPeriodOverCap = computed((): boolean => {\r\n  if (!isVeBalGauge.value && props.gauge.relativeWeightCap === 'null')\r\n    return false;\r\n  const gaugeVoteWeightNormalized = scale(props.gauge.votesNextPeriod, -18);\r\n  return gaugeVoteWeightNormalized.gte(\r\n    bnum(isVeBalGauge.value ? '0.1' : props.gauge.relativeWeightCap)\r\n  );\r\n});\r\n\r\nconst voteTitle = computed(() =>\r\n  hasVotes.value\r\n    ? t('veBAL.liquidityMining.popover.title.edit')\r\n    : t('veBAL.liquidityMining.popover.title.vote')\r\n);\r\n\r\nconst voteButtonText = computed(() =>\r\n  hasVotes.value\r\n    ? t('veBAL.liquidityMining.popover.button.edit')\r\n    : t('veBAL.liquidityMining.popover.button.vote')\r\n);\r\n\r\nconst votedToRecentlyWarning = computed(() => {\r\n  if (isVotingTimeLocked(props.gauge.lastUserVoteTime)) {\r\n    const remainingTime = remainingVoteLockTime(props.gauge.lastUserVoteTime);\r\n    return {\r\n      title: t('veBAL.liquidityMining.popover.warnings.votedTooRecently.title'),\r\n      description: t(\r\n        'veBAL.liquidityMining.popover.warnings.votedTooRecently.description',\r\n        [remainingTime]\r\n      ),\r\n    };\r\n  }\r\n  return null;\r\n});\r\n\r\nconst voteLockedUntilText = computed<string>(() => {\r\n  const unlockTime = Date.now() + WEIGHT_VOTE_DELAY;\r\n  return format(toUtcTime(new Date(unlockTime)), 'd LLLL y');\r\n});\r\n\r\nconst noVeBalWarning = computed(() => {\r\n  if (Number(veBalBalance.value) > 0) {\r\n    return null;\r\n  }\r\n  return {\r\n    title: t('veBAL.liquidityMining.popover.warnings.noVeBal.title'),\r\n    description: t(\r\n      'veBAL.liquidityMining.popover.warnings.noVeBal.description'\r\n    ),\r\n  };\r\n});\r\n\r\nconst veBalLockTooShortWarning = computed(() => {\r\n  if (props.veBalLockInfo?.hasExistingLock && !props.veBalLockInfo?.isExpired) {\r\n    const lockEndDate = props.veBalLockInfo.lockedEndDate;\r\n    if (lockEndDate < Date.now() + MINIMUM_LOCK_TIME) {\r\n      return {\r\n        title: t(\r\n          'veBAL.liquidityMining.popover.warnings.veBalLockTooShort.title'\r\n        ),\r\n        description: t(\r\n          'veBAL.liquidityMining.popover.warnings.veBalLockTooShort.description'\r\n        ),\r\n      };\r\n    }\r\n  }\r\n\r\n  return null;\r\n});\r\n\r\nconst lpVoteOverLimitWarning = computed(() => {\r\n  if (votesNextPeriodOverCap.value) {\r\n    if (isVeBalGauge.value) {\r\n      return {\r\n        title: t(\r\n          'veBAL.liquidityMining.popover.warnings.veBalVoteOverLimitWarning.title'\r\n        ),\r\n        description: t(\r\n          'veBAL.liquidityMining.popover.warnings.veBalVoteOverLimitWarning.description'\r\n        ),\r\n      };\r\n    } else {\r\n      return {\r\n        title: t(\r\n          'veBAL.liquidityMining.popover.warnings.lpVoteOverLimitWarning.title'\r\n        ),\r\n        description: t(\r\n          'veBAL.liquidityMining.popover.warnings.lpVoteOverLimitWarning.description',\r\n          [(Number(props.gauge.relativeWeightCap) * 100).toFixed()]\r\n        ),\r\n      };\r\n    }\r\n  }\r\n\r\n  return null;\r\n});\r\n\r\nconst voteWarning = computed(\r\n  (): {\r\n    title: string;\r\n    description: string;\r\n  } | null => {\r\n    if (lpVoteOverLimitWarning.value) return lpVoteOverLimitWarning.value;\r\n    if (voteState.error.value) return voteState.error.value;\r\n    return null;\r\n  }\r\n);\r\n\r\nconst voteError = computed(\r\n  (): {\r\n    title: string;\r\n    description: string;\r\n  } | null => {\r\n    if (votedToRecentlyWarning.value) return votedToRecentlyWarning.value;\r\n    if (noVeBalWarning.value) return noVeBalWarning.value;\r\n    if (veBalLockTooShortWarning.value) return veBalLockTooShortWarning.value;\r\n    return null;\r\n  }\r\n);\r\n\r\nconst transactionInProgress = computed(\r\n  (): boolean =>\r\n    voteState.state.value === State.TRANSACTION_INITIALIZED ||\r\n    voteState.state.value === State.CONFIRMING\r\n);\r\n\r\nconst hasEnoughVotes = computed((): boolean => {\r\n  return isVoteWeightValid(voteWeight.value);\r\n});\r\n\r\nconst unallocatedVotesFormatted = computed((): string =>\r\n  fNum(\r\n    scale(bnum(props.unallocatedVoteWeight), -4).toString(),\r\n    FNumFormats.percent\r\n  )\r\n);\r\n\r\nconst unallocatedVotesClass = computed(() => {\r\n  return hasEnoughVotes.value\r\n    ? ['text-gray-600 dark:text-gray-400']\r\n    : ['text-red-600'];\r\n});\r\n\r\nconst remainingVotes = computed(() => {\r\n  let remainingVotesText;\r\n  if (!hasEnoughVotes.value) {\r\n    remainingVotesText = 'veBAL.liquidityMining.popover.remainingVotesExceeded';\r\n  } else {\r\n    remainingVotesText = hasVotes.value\r\n      ? 'veBAL.liquidityMining.popover.remainingVotesEditing'\r\n      : 'veBAL.liquidityMining.popover.remainingVotes';\r\n  }\r\n  const remainingVotesFormatted = fNum(\r\n    scale(\r\n      bnum(props.unallocatedVoteWeight).plus(bnum(currentWeight.value)),\r\n      -4\r\n    ).toString(),\r\n    FNumFormats.percent\r\n  );\r\n  const currentVotesFormatted = fNum(\r\n    scale(bnum(currentWeight.value), -4).toString(),\r\n    FNumFormats.percent\r\n  );\r\n  return t(remainingVotesText, [\r\n    remainingVotesFormatted,\r\n    currentVotesFormatted,\r\n    unallocatedVotesFormatted.value,\r\n  ]);\r\n});\r\n\r\nconst inputRules = [v => !v || isVoteWeightValid(v) || '', isPositive()];\r\n\r\n/**\r\n * METHODS\r\n */\r\nfunction isVoteWeightValid(voteWeight) {\r\n  if (voteWeight === '') return true;\r\n  const currentValue = scale(voteWeight, 2).toNumber();\r\n  const isValid =\r\n    currentValue <= props.unallocatedVoteWeight + Number(currentWeight.value);\r\n  return isValid;\r\n}\r\n\r\nasync function submitVote() {\r\n  const totalVoteShares = scale(voteWeight.value, 2).toString();\r\n  try {\r\n    voteState.setInit();\r\n    const tx = await gaugeControllerService.voteForGaugeWeights(\r\n      props.gauge.address,\r\n      BigNumber.from(totalVoteShares)\r\n    );\r\n    voteState.setConfirming();\r\n    handleTransaction(tx);\r\n  } catch (e) {\r\n    console.error(e);\r\n    const error = e as WalletError;\r\n\r\n    voteState.setError({\r\n      title: 'Vote failed',\r\n      description: error.message,\r\n    });\r\n  }\r\n}\r\n\r\nasync function handleTransaction(tx) {\r\n  addTransaction({\r\n    id: tx.hash,\r\n    type: 'tx',\r\n    action: 'voteForGauge',\r\n    summary: t('veBAL.liquidityMining.popover.voteForGauge', [\r\n      fNum(scale(voteWeight.value, -2).toString(), FNumFormats.percent),\r\n      props.gauge.pool.symbol,\r\n    ]),\r\n    details: {\r\n      voteWeight: voteWeight.value,\r\n    },\r\n  });\r\n\r\n  txListener(tx, {\r\n    onTxConfirmed: async (receipt: TransactionReceipt) => {\r\n      const confirmedAt = dateTimeLabelFor(await getTxConfirmedAt(receipt));\r\n\r\n      voteState.setSuccess({ receipt, confirmedAt });\r\n      emit('success');\r\n    },\r\n    onTxFailed: () => {\r\n      console.error('Vote failed');\r\n      voteState.setError({\r\n        title: 'Vote Failed',\r\n        description: 'Vote failed for an unknown reason',\r\n      });\r\n    },\r\n  });\r\n}\r\n\r\n/**\r\n * LIFECYCLE\r\n */\r\nonMounted(() => {\r\n  if (hasVotes.value) voteWeight.value = currentWeightNormalized.value;\r\n});\r\n</script>\r\n\r\n<template>\r\n  <BalModal\r\n    show\r\n    :fireworks=\"voteState.state.value === State.CONFIRMED\"\r\n    @close=\"emit('close')\"\r\n  >\r\n    <template #header>\r\n      <div class=\"flex items-center\">\r\n        <BalCircle\r\n          v-if=\"voteState.state.value === State.CONFIRMED\"\r\n          size=\"8\"\r\n          color=\"green\"\r\n          class=\"mr-2 text-white\"\r\n        >\r\n          <BalIcon name=\"check\" />\r\n        </BalCircle>\r\n        <h4>\r\n          {{ voteTitle }}\r\n        </h4>\r\n      </div>\r\n    </template>\r\n    <div>\r\n      <div v-if=\"!voteWarning\" class=\"mb-4 text-sm\">\r\n        <ul class=\"ml-4 list-disc text-gray-600 dark:text-gray-400\">\r\n          <li class=\"mb-1\">\r\n            {{ t('veBAL.liquidityMining.popover.emissionsInfo') }}\r\n          </li>\r\n          <li class=\"mb-1\">\r\n            {{ t('veBAL.liquidityMining.popover.resubmitVote') }}\r\n          </li>\r\n          <li>\r\n            {{\r\n              t('veBAL.liquidityMining.popover.voteLockInfo', [\r\n                voteLockedUntilText,\r\n              ])\r\n            }}\r\n          </li>\r\n        </ul>\r\n      </div>\r\n      <BalAlert\r\n        v-if=\"voteWarning\"\r\n        type=\"warning\"\r\n        :title=\"voteWarning.title\"\r\n        :description=\"voteWarning.description\"\r\n        class=\"mb-4 w-full rounded\"\r\n      />\r\n      <BalAlert\r\n        v-if=\"voteError\"\r\n        type=\"error\"\r\n        :title=\"voteError.title\"\r\n        :description=\"voteError.description\"\r\n        block\r\n        class=\"mt-2 mb-4\"\r\n      />\r\n\r\n      <div\r\n        class=\"flex justify-between items-center p-2 mb-4 rounded-lg border dark:border-gray-800\"\r\n      >\r\n        <div class=\"flex gap-4 items-center h-full\">\r\n          <BalAssetSet :logoURIs=\"logoURIs\" :width=\"100\" :size=\"32\" />\r\n          <div>\r\n            <p class=\"font-medium text-black dark:text-white\">\r\n              {{ gauge.pool.symbol }}\r\n            </p>\r\n          </div>\r\n        </div>\r\n        <BalLink\r\n          :href=\"poolURL\"\r\n          external\r\n          noStyle\r\n          class=\"group flex items-center\"\r\n        >\r\n          <BalIcon\r\n            name=\"arrow-up-right\"\r\n            class=\"text-gray-500 group-hover:text-pink-500 transition-colors\"\r\n          />\r\n        </BalLink>\r\n      </div>\r\n      <BalForm class=\"vote-form\">\r\n        <BalTextInput\r\n          v-model=\"voteWeight\"\r\n          name=\"voteWeight\"\r\n          type=\"number\"\r\n          autocomplete=\"off\"\r\n          autocorrect=\"off\"\r\n          spellcheck=\"false\"\r\n          step=\"any\"\r\n          placeholder=\"0\"\r\n          validateOn=\"input\"\r\n          :rules=\"inputRules\"\r\n          :disabled=\"\r\n            voteInputDisabled ||\r\n            transactionInProgress ||\r\n            voteState.state.value === State.CONFIRMED\r\n          \"\r\n          size=\"md\"\r\n          autoFocus\r\n        >\r\n          <template #append>\r\n            <div\r\n              class=\"flex flex-row justify-center items-center px-2 h-full rounded-r-lg border-gray-100 dark:border-gray-800\"\r\n            >\r\n              <span class=\"text-xl text-black dark:text-white\">%</span>\r\n            </div>\r\n          </template>\r\n        </BalTextInput>\r\n        <div v-if=\"voteError\" class=\"mt-2 text-sm text-secondary\">\r\n          {{\r\n            t('veBAL.liquidityMining.popover.warnings.noVeBal.inputHintText')\r\n          }}\r\n        </div>\r\n        <div v-else :class=\"['mt-2 text-sm'].concat(unallocatedVotesClass)\">\r\n          {{ remainingVotes }}\r\n        </div>\r\n\r\n        <SubmitVoteBtn\r\n          :disabled=\"voteButtonDisabled\"\r\n          :loading=\"transactionInProgress\"\r\n          class=\"mt-4\"\r\n          :loadingLabel=\"\r\n            voteState.state.value === State.TRANSACTION_INITIALIZED\r\n              ? $t('veBAL.liquidityMining.popover.actions.vote.loadingLabel')\r\n              : $t('veBAL.liquidityMining.popover.actions.vote.confirming')\r\n          \"\r\n          @click:close=\"emit('close')\"\r\n          @click:submit=\"submitVote\"\r\n        >\r\n          {{ voteButtonText }}\r\n        </SubmitVoteBtn>\r\n      </BalForm>\r\n    </div>\r\n  </BalModal>\r\n</template>\r\n","<script lang=\"ts\" setup>\r\nimport { TransactionReceipt } from '@ethersproject/abstract-provider';\r\nimport { BigNumber } from '@ethersproject/bignumber';\r\nimport { computed, ref, watchEffect } from 'vue';\r\nimport { useI18n } from 'vue-i18n';\r\nimport useEthers from '@/composables/useEthers';\r\nimport useNumbers, { FNumFormats } from '@/composables/useNumbers';\r\nimport { dateTimeLabelFor } from '@/composables/useTime';\r\nimport useTransactions from '@/composables/useTransactions';\r\nimport { bnum, scale } from '@/lib/utils';\r\nimport { gaugeControllerService } from '@/services/contracts/gauge-controller.service';\r\nimport { Address, WalletError } from '@/types';\r\nimport useVotingEscrowLocks from '@/composables/useVotingEscrowLocks';\r\nimport useVotingGauges from '@/composables/useVotingGauges';\r\nimport VoteInput from './VoteInput.vue';\r\nimport SubmitVoteBtn from '../SubmitVoteBtn.vue';\r\nimport { POOLS } from '@/constants/pools';\r\nimport useActionState, { State } from '@/composables/useActionState';\r\n\r\n/**\r\n * PROPS & EMITS\r\n */\r\nconst emit = defineEmits<{\r\n  (e: 'close'): void;\r\n}>();\r\n\r\n/**\r\n * COMPOSABLES\r\n */\r\nconst { gaugesUsingUnderUtilizedVotingPower } = useVotingEscrowLocks();\r\nconst { votingGauges, refetch: refetchVotingGauges } = useVotingGauges();\r\nconst voteState = useActionState();\r\nconst { t } = useI18n();\r\nconst { addTransaction } = useTransactions();\r\nconst { txListener, getTxConfirmedAt } = useEthers();\r\nconst { fNum } = useNumbers();\r\n\r\n/**\r\n * STATE\r\n */\r\nconst votes = ref<Record<Address, string>>({});\r\n\r\n/**\r\n * COMPUTED\r\n */\r\n\r\n//  Can vote max 8 gauges in one time\r\nconst visibleVotingGauges = computed(() =>\r\n  gaugesUsingUnderUtilizedVotingPower.value.slice(0, 8)\r\n);\r\n\r\n// All other gauges using under-utilized voting power are grouped separately\r\nconst hiddenVotingGauges = computed(() =>\r\n  gaugesUsingUnderUtilizedVotingPower.value.slice(7)\r\n);\r\n\r\nconst allGaugesTotalAllocation = computed<number>(() => {\r\n  const underUtilizedAddresses = gaugesUsingUnderUtilizedVotingPower.value.map(\r\n    gauge => gauge.address\r\n  );\r\n\r\n  return votingGauges.value.reduce<number>((total, gauge) => {\r\n    return !underUtilizedAddresses.includes(gauge.address)\r\n      ? total + Number(bpsToPct(gauge.userVotes))\r\n      : total + Number(votes.value[gauge.address]);\r\n  }, 0);\r\n});\r\n\r\nconst hasMoreThan8VotingGauges = computed(\r\n  () => gaugesUsingUnderUtilizedVotingPower.value.length > 8\r\n);\r\n\r\nconst hiddenVotesTotalAllocation = computed<number>(() => {\r\n  const totalUnscaled = hiddenVotingGauges.value.reduce<number>(\r\n    (total, gauge) => total + Number(gauge.userVotes),\r\n    0\r\n  );\r\n  return Number(bpsToPct(totalUnscaled));\r\n});\r\n\r\nconst voteButtonDisabled = computed<boolean>(\r\n  () => allGaugesTotalAllocation.value > 100\r\n);\r\nconst transactionInProgress = computed(\r\n  (): boolean =>\r\n    voteState.state.value === State.TRANSACTION_INITIALIZED ||\r\n    voteState.state.value === State.CONFIRMING\r\n);\r\nconst totalAllocationClass = computed(() => ({\r\n  'total-allocation-disabled': voteButtonDisabled.value,\r\n  'total-allocation mt-3 flex justify-between': true,\r\n}));\r\n\r\n/**\r\n * METHODS\r\n */\r\nfunction bpsToPct(weight: string | number): string {\r\n  return scale(bnum(weight || '0'), -2).toString();\r\n}\r\n\r\nasync function submitVote() {\r\n  // Gauge Controller requires a fixed 8 Gauge Addresses\r\n  // We take the first 8 Voting Gauges\r\n  // If there's less than 8, fill the remaining with Zero Addresses\r\n  console.log({ otes: votes.value });\r\n  const gaugeAddresses: string[] = Object.keys(votes.value);\r\n  const weights: BigNumber[] = Object.values(votes.value).map(weight =>\r\n    BigNumber.from(scale(weight || '0', 2).toString())\r\n  );\r\n\r\n  const zeroAddresses: string[] = new Array(8 - gaugeAddresses.length).fill(\r\n    POOLS.ZeroAddress\r\n  );\r\n  const zeroWeights: BigNumber[] = new Array(8 - gaugeAddresses.length).fill(\r\n    BigNumber.from(0)\r\n  );\r\n  console.log({\r\n    zeroAddresses,\r\n    zeroWeights,\r\n  });\r\n  try {\r\n    voteState.setInit();\r\n    const tx = await gaugeControllerService.voteForManyGaugeWeights(\r\n      [...gaugeAddresses, ...zeroAddresses],\r\n      [...weights, ...zeroWeights]\r\n    );\r\n\r\n    voteState.setConfirming();\r\n    handleTransaction(tx);\r\n  } catch (e: any) {\r\n    const error = e as WalletError;\r\n    console.error({ error });\r\n    voteState.setError({\r\n      title: 'Vote failed',\r\n      description: error.message,\r\n    });\r\n  }\r\n}\r\n\r\nfunction getTransactionSummaryMsg(): string {\r\n  const gauges = visibleVotingGauges.value;\r\n  const message = gauges.reduce<string>((acc, gauge, i) => {\r\n    return (\r\n      acc +\r\n      t('veBAL.liquidityMining.popover.voteForGauge', [\r\n        fNum(bpsToPct(votes.value[gauge.address]), FNumFormats.percent),\r\n        gauge.pool.symbol,\r\n      ]) +\r\n      (i < gauges.length - 1 ? ', ' : '')\r\n    );\r\n  }, '');\r\n  return message;\r\n}\r\n\r\nasync function handleTransaction(tx) {\r\n  addTransaction({\r\n    id: tx.hash,\r\n    type: 'tx',\r\n    action: 'voteForGauge',\r\n    summary: getTransactionSummaryMsg(),\r\n  });\r\n\r\n  txListener(tx, {\r\n    onTxConfirmed: async (receipt: TransactionReceipt) => {\r\n      const confirmedAt = dateTimeLabelFor(await getTxConfirmedAt(receipt));\r\n\r\n      voteState.setSuccess({ receipt, confirmedAt });\r\n      refetchVotingGauges();\r\n    },\r\n    onTxFailed: () => {\r\n      console.error('Vote failed');\r\n      voteState.setError({\r\n        title: 'Vote Failed',\r\n        description: 'Vote failed for an unknown reason',\r\n      });\r\n    },\r\n  });\r\n}\r\n\r\nwatchEffect(() => {\r\n  visibleVotingGauges.value.forEach(gauge => {\r\n    votes.value[gauge.address] = gauge.userVotes\r\n      ? bpsToPct(gauge.userVotes)\r\n      : '0';\r\n  });\r\n});\r\n</script>\r\n\r\n<template>\r\n  <BalModal show @close=\"emit('close')\">\r\n    <template #header>\r\n      <div class=\"flex items-center\">\r\n        <h4>\r\n          {{ t('veBAL.liquidityMining.resubmit.modal.title') }}\r\n        </h4>\r\n      </div>\r\n    </template>\r\n    <div>\r\n      <BalAlert\r\n        v-if=\"hasMoreThan8VotingGauges\"\r\n        class=\"mb-4\"\r\n        type=\"warning\"\r\n        :title=\"t('veBAL.liquidityMining.resubmit.modal.warning.title')\"\r\n        :description=\"\r\n          t('veBAL.liquidityMining.resubmit.modal.warning.description')\r\n        \"\r\n      >\r\n      </BalAlert>\r\n      <BalAlert\r\n        v-if=\"voteState.error.value\"\r\n        type=\"error\"\r\n        :title=\"voteState.error.value.title\"\r\n        :description=\"voteState.error.value.description\"\r\n        block\r\n        class=\"mt-2 mb-4\"\r\n      />\r\n      <VoteInput\r\n        v-for=\"gauge in visibleVotingGauges\"\r\n        :key=\"gauge.address\"\r\n        v-model=\"votes[gauge.address]\"\r\n        :gauge=\"gauge\"\r\n        :disabled=\"transactionInProgress\"\r\n      ></VoteInput>\r\n\r\n      <div\r\n        v-if=\"hiddenVotesTotalAllocation\"\r\n        class=\"flex justify-between p-4 mt-3 total-allocation\"\r\n      >\r\n        <div>\r\n          {{\r\n            t(\r\n              'veBAL.liquidityMining.resubmit.modal.otherPools',\r\n              hiddenVotingGauges.length\r\n            )\r\n          }}\r\n        </div>\r\n        <div>{{ hiddenVotesTotalAllocation }}%</div>\r\n      </div>\r\n\r\n      <div :class=\"totalAllocationClass\">\r\n        <div class=\"p-4\">\r\n          {{ t('veBAL.liquidityMining.resubmit.modal.total') }}\r\n        </div>\r\n        <div class=\"p-4 border-l border-gray-200 dark:border-gray-900\">\r\n          {{ allGaugesTotalAllocation }}%\r\n        </div>\r\n      </div>\r\n\r\n      <div v-if=\"voteButtonDisabled\" class=\"mt-3 text-sm text-red-500\">\r\n        {{ t('veBAL.liquidityMining.resubmit.modal.exceeding') }}\r\n      </div>\r\n\r\n      <SubmitVoteBtn\r\n        :disabled=\"voteButtonDisabled\"\r\n        :loading=\"transactionInProgress\"\r\n        class=\"mt-4\"\r\n        :loadingLabel=\"\r\n          voteState.state.value === State.IDLE\r\n            ? $t('veBAL.liquidityMining.popover.actions.vote.loadingLabel')\r\n            : $t('veBAL.liquidityMining.popover.actions.vote.confirming')\r\n        \"\r\n        @click:close=\"emit('close')\"\r\n        @click:submit=\"submitVote\"\r\n      >\r\n        {{ t('veBAL.liquidityMining.resubmit.modal.confirm') }}\r\n      </SubmitVoteBtn>\r\n    </div>\r\n  </BalModal>\r\n</template>\r\n\r\n<style lang=\"css\" scoped>\r\n.total-allocation {\r\n  @apply bg-gray-50 dark:bg-gray-800  border border-gray-200 dark:border-0 rounded-lg;\r\n}\r\n\r\n.total-allocation-disabled {\r\n  @apply bg-red-600 dark:bg-red-600 text-white;\r\n}\r\n</style>\r\n","  <script setup lang=\"ts\">\r\nimport { ref } from 'vue';\r\nimport GaugeVoteResubmitModal from './GaugeVoteResubmitModal.vue';\r\nimport { useI18n } from 'vue-i18n';\r\n\r\nconst { t } = useI18n();\r\nconst isModalOpen = ref<boolean>(false);\r\n</script>\r\n\r\n<template>\r\n  <BalAlert\r\n    v-bind=\"$attrs\"\r\n    type=\"warning\"\r\n    :title=\"t('veBAL.liquidityMining.resubmit.hint.title')\"\r\n    contentClass=\"w-full\"\r\n  >\r\n    <div\r\n      class=\"flex flex-col lg:flex-row gap-2 lg:gap-4 justify-between items-baseline lg:items-start pb-1 lg:pb-0\"\r\n    >\r\n      <div class=\"mr-auto max-w-3xl\">\r\n        {{ t('veBAL.liquidityMining.resubmit.resubmitWarning') }}\r\n      </div>\r\n\r\n      <BalBtn\r\n        color=\"gradient\"\r\n        class=\"flex-shrink-0\"\r\n        size=\"sm\"\r\n        @click=\"isModalOpen = true\"\r\n        >{{ t('veBAL.liquidityMining.resubmit.btn') }}</BalBtn\r\n      >\r\n    </div>\r\n  </BalAlert>\r\n  <teleport to=\"#modal\">\r\n    <GaugeVoteResubmitModal v-if=\"isModalOpen\" @close=\"isModalOpen = false\" />\r\n  </teleport>\r\n</template>\r\n\r\n\r\n\r\n","<script setup lang=\"ts\">\r\nimport { networkLabelMap } from '@/composables/useNetwork';\r\nimport { Network } from '@balancer-labs/sdk';\r\nimport { ref, computed } from 'vue';\r\n\r\n/**\r\n * TYPES\r\n */\r\ntype Props = {\r\n  networkFilters: Network[];\r\n  showExpiredGauges: boolean;\r\n  activeNetworkFilters: number[];\r\n};\r\n\r\nconst emit = defineEmits<{\r\n  (e: 'choose-network', value: number): void;\r\n  (e: 'update:showExpiredGauges', value: boolean): void;\r\n  (e: 'update:activeNetworkFilters', value: number[]): void;\r\n}>();\r\n\r\n/**\r\n * PROPS\r\n */\r\nconst props = defineProps<Props>();\r\n\r\n/**\r\n * STATE\r\n */\r\nconst networkFiltersArr = ref([...props.activeNetworkFilters]);\r\n\r\n/**\r\n * isExpiredFilterActive and activeNetworksArr are created to handle activeFiltersNum computed\r\n * otherwise activeFiltersNum would change only after 500ms debounce which lead to poor UX\r\n */\r\nconst isExpiredFilterActive = ref(false);\r\nconst activeNetworksArr = ref<number[]>([]);\r\n\r\n/**\r\n * COMPUTED\r\n */\r\nconst activeFiltersNum = computed(() => {\r\n  return activeNetworksArr.value.length + Number(isExpiredFilterActive.value);\r\n});\r\n\r\n/**\r\n * METHODS\r\n */\r\nfunction handleExpInput(e) {\r\n  const { checked } = e.target;\r\n  isExpiredFilterActive.value = checked;\r\n  emit('update:showExpiredGauges', checked);\r\n}\r\n\r\nfunction updateNetwork(network: number) {\r\n  const index = networkFiltersArr.value.indexOf(network);\r\n\r\n  index === -1\r\n    ? networkFiltersArr.value.push(network)\r\n    : networkFiltersArr.value.splice(index, 1);\r\n\r\n  const arr = [...networkFiltersArr.value];\r\n  emit('update:activeNetworkFilters', arr);\r\n  activeNetworksArr.value = arr;\r\n}\r\n</script>\r\n\r\n<template>\r\n  <BalPopover noPad class=\"flex-0\">\r\n    <template #activator>\r\n      <BalBtn class=\"flex-1 h-full\" color=\"white\" size=\"sm\">\r\n        <BalIcon\r\n          name=\"filter\"\r\n          size=\"lg\"\r\n          class=\"mr-3 text-gray-600 dark:text-gray-100\"\r\n        />\r\n        <div class=\"flex text-gray-600 dark:text-gray-100\">\r\n          {{ $t('gaugeFilter.moreFilters') }}\r\n        </div>\r\n        <div v-if=\"activeFiltersNum > 0\" class=\"px-2\">\r\n          <div\r\n            class=\"flex justify-center items-center p-2 w-5 h-5 text-xs text-center text-white bg-blue-600 rounded-full\"\r\n          >\r\n            {{ activeFiltersNum }}\r\n          </div>\r\n        </div>\r\n      </BalBtn>\r\n    </template>\r\n    <div class=\"flex overflow-hidden flex-col py-4 px-3 w-64 rounded-lg\">\r\n      <div class=\"text-xl font-bold whitespace-nowrap\">\r\n        {{ $t('network') }}\r\n      </div>\r\n      <div\r\n        v-for=\"network in networkFilters\"\r\n        :key=\"network\"\r\n        class=\"flex py-1 text-base text-gray-600 dark:text-gray-100 hover:bg-gray-50 dark:hover:bg-gray-850 cursor-pointer\"\r\n      >\r\n        <BalCheckbox\r\n          :modelValue=\"networkFiltersArr.includes(Number(network))\"\r\n          name=\"networkFilter\"\r\n          :label=\"networkLabelMap[network]\"\r\n          noMargin\r\n          alignCheckbox=\"items-center\"\r\n          @input=\"updateNetwork(Number(network))\"\r\n        />\r\n      </div>\r\n\r\n      <div class=\"py-2 text-xl font-bold\">\r\n        {{ $t('gaugeFilter.gaugeDisplay') }}\r\n      </div>\r\n\r\n      <BalCheckbox\r\n        class=\"flex py-1 text-base text-gray-600 dark:text-gray-100 hover:bg-gray-50 dark:hover:bg-gray-850 cursor-pointer\"\r\n        name=\"expiredGaugesFilter\"\r\n        :label=\"$t('gaugeFilter.showExpired')\"\r\n        noMargin\r\n        alignCheckbox=\"items-center\"\r\n        :modelValue=\"showExpiredGauges\"\r\n        @input=\"handleExpInput\"\r\n      />\r\n    </div>\r\n  </BalPopover>\r\n</template>\r\n","<script lang=\"ts\" setup>\r\nimport { computed, ref } from 'vue';\r\n\r\nimport useExpiredGaugesQuery from '@/composables/queries/useExpiredGaugesQuery';\r\nimport useVeBalLockInfoQuery from '@/composables/queries/useVeBalLockInfoQuery';\r\nimport useVotingEscrowLocks from '@/composables/useVotingEscrowLocks';\r\nimport useDebouncedRef from '@/composables/useDebouncedRed';\r\nimport useNumbers, { FNumFormats } from '@/composables/useNumbers';\r\nimport { poolURLFor } from '@/composables/usePool';\r\nimport useVotingGauges from '@/composables/useVotingGauges';\r\nimport { bnum, isSameAddress, scale } from '@/lib/utils';\r\nimport { VotingGaugeWithVotes } from '@/services/balancer/gauges/gauge-controller.decorator';\r\n\r\nimport GaugesTable from './GaugesTable.vue';\r\nimport GaugeVoteModal from './GaugeVoteModal.vue';\r\nimport ResubmitVotesAlert from './ResubmitVotes/ResubmitVotesAlert.vue';\r\nimport { orderedTokenURIs } from '@/composables/useVotingGauges';\r\nimport { Network } from '@balancer-labs/sdk';\r\nimport GaugesFilters from './GaugesFilters.vue';\r\n\r\n/**\r\n * DATA\r\n */\r\nconst tokenFilter = useDebouncedRef<string>('', 500);\r\nconst showExpiredGauges = useDebouncedRef<boolean>(false, 500);\r\nconst activeNetworkFilters = useDebouncedRef<Network[]>([], 500);\r\nconst activeVotingGauge = ref<VotingGaugeWithVotes | null>(null);\r\n\r\nconst networkFilters = [\r\n  Network.MAINNET,\r\n  Network.POLYGON,\r\n  Network.ARBITRUM,\r\n  Network.OPTIMISM,\r\n];\r\n\r\n/**\r\n * COMPOSABLES\r\n */\r\nconst {\r\n  isLoading,\r\n  votingGauges,\r\n  unallocatedVotes,\r\n  votingPeriodEnd,\r\n  votingPeriodLastHour,\r\n  refetch: refetchVotingGauges,\r\n} = useVotingGauges();\r\nconst { fNum } = useNumbers();\r\nconst veBalLockInfoQuery = useVeBalLockInfoQuery();\r\n\r\nconst { shouldResubmitVotes } = useVotingEscrowLocks();\r\n\r\nconst votingGaugeAddresses = computed<string[]>(\r\n  () => votingGauges.value?.map(gauge => gauge.address) || []\r\n);\r\nconst { data: expiredGauges } = useExpiredGaugesQuery(votingGaugeAddresses);\r\n\r\n/**\r\n * COMPUTED\r\n */\r\nconst unallocatedVotesFormatted = computed<string>(() =>\r\n  fNum(scale(bnum(unallocatedVotes.value), -4).toString(), FNumFormats.percent)\r\n);\r\n\r\nconst unallocatedVoteWeight = computed(() => {\r\n  const totalVotes = 1e4;\r\n  if (isLoading.value || !votingGauges.value) return totalVotes;\r\n\r\n  const votesRemaining = votingGauges.value.reduce((remainingVotes, gauge) => {\r\n    return remainingVotes - parseFloat(gauge.userVotes);\r\n  }, totalVotes);\r\n  return votesRemaining;\r\n});\r\n\r\nconst hasLock = computed(\r\n  (): boolean =>\r\n    !!veBalLockInfoQuery.data.value?.hasExistingLock &&\r\n    !veBalLockInfoQuery.data.value?.isExpired\r\n);\r\n\r\nconst hasExpiredLock = computed(\r\n  (): boolean =>\r\n    !!veBalLockInfoQuery.data.value?.hasExistingLock &&\r\n    veBalLockInfoQuery.data.value?.isExpired\r\n);\r\n\r\nconst gaugesTableKey = computed(() => JSON.stringify(isLoading.value));\r\n\r\nconst gaugesFilteredByExpiring = computed(() => {\r\n  if (showExpiredGauges.value) {\r\n    return votingGauges.value;\r\n  }\r\n\r\n  return votingGauges.value.filter(gauge => {\r\n    if (Number(gauge.userVotes) > 0) {\r\n      return true;\r\n    }\r\n    return !expiredGauges.value?.some(expGauge =>\r\n      isSameAddress(expGauge, gauge.address)\r\n    );\r\n  });\r\n});\r\n\r\nconst filteredVotingGauges = computed(() => {\r\n  // put filter by expiring in separate computed to maintain readability\r\n  return gaugesFilteredByExpiring.value.filter(gauge => {\r\n    let showByNetwork = true;\r\n    if (\r\n      activeNetworkFilters.value.length > 0 &&\r\n      !activeNetworkFilters.value.includes(gauge.network)\r\n    ) {\r\n      showByNetwork = false;\r\n    }\r\n\r\n    return (\r\n      showByNetwork &&\r\n      gauge.pool.tokens.some(token => {\r\n        return token.symbol\r\n          ?.toLowerCase()\r\n          .includes(tokenFilter.value.toLowerCase());\r\n      })\r\n    );\r\n  });\r\n});\r\n\r\n/**\r\n * METHODS\r\n */\r\nfunction setActiveGaugeVote(votingGauge: VotingGaugeWithVotes) {\r\n  activeVotingGauge.value = votingGauge;\r\n}\r\n\r\nfunction handleModalClose() {\r\n  activeVotingGauge.value = null;\r\n  refetchVotingGauges();\r\n}\r\n\r\nfunction handleVoteSuccess() {\r\n  refetchVotingGauges();\r\n}\r\n</script>\r\n\r\n<template>\r\n  <div class=\"flex flex-col\">\r\n    <div\r\n      class=\"flex flex-col lg:flex-row gap-4 lg:justify-between lg:items-end\"\r\n    >\r\n      <div class=\"px-4 xl:px-0 pb-2 max-w-3xl\">\r\n        <h3 class=\"mb-2\">\r\n          {{ $t('veBAL.liquidityMining.title') }}\r\n          <BalTooltip\r\n            :text=\"$t('veBAL.liquidityMining.description')\"\r\n            iconSize=\"sm\"\r\n            iconClass=\"text-gray-400 dark:text-gray-600\"\r\n            width=\"72\"\r\n            class=\"mt-1\"\r\n          />\r\n        </h3>\r\n      </div>\r\n    </div>\r\n    <ResubmitVotesAlert\r\n      v-if=\"shouldResubmitVotes\"\r\n      class=\"mx-4 xl:mx-0 mb-7\"\r\n    ></ResubmitVotesAlert>\r\n    <div class=\"flex flex-wrap justify-between items-end px-4 lg:px-0\">\r\n      <div class=\"flex gap-2 xs:gap-3 mb-3 lg:mb-0\">\r\n        <BalCard shadow=\"none\" class=\"p-0 md:w-48 min-w-max\">\r\n          <div class=\"flex items-center\">\r\n            <p class=\"inline mr-1 text-sm text-secondary\">\r\n              My unallocated votes\r\n            </p>\r\n            <BalTooltip\r\n              :text=\"$t('veBAL.liquidityMining.myUnallocatedVotesTooltip')\"\r\n              iconClass=\"text-gray-400 dark:text-gray-600\"\r\n              iconSize=\"sm\"\r\n              width=\"72\"\r\n              class=\"mt-1\"\r\n            />\r\n          </div>\r\n          <p\r\n            class=\"inline mr-1 text-lg font-semibold\"\r\n            :class=\"{ 'text-red-500': hasExpiredLock }\"\r\n          >\r\n            <span v-if=\"hasLock\">\r\n              {{ unallocatedVotesFormatted }}\r\n            </span>\r\n            <span v-else class=\"mr-1\">â€”</span>\r\n          </p>\r\n          <BalTooltip\r\n            v-if=\"hasExpiredLock\"\r\n            :text=\"$t('veBAL.liquidityMining.votingPowerExpiredTooltip')\"\r\n            iconSize=\"sm\"\r\n            :iconName=\"'alert-triangle'\"\r\n            :iconClass=\"'text-red-500 hover:text-red-700 dark:hover:text-red-400 transition-colors'\"\r\n            width=\"72\"\r\n            class=\"relative top-0.5\"\r\n          />\r\n        </BalCard>\r\n        <BalCard shadow=\"none\" class=\"md:w-48 min-w-max\">\r\n          <div class=\"flex items-center\">\r\n            <p\r\n              :class=\"{ 'text-orange-500 font-medium': votingPeriodLastHour }\"\r\n              class=\"inline mr-1 text-sm text-secondary\"\r\n            >\r\n              Voting period ends\r\n            </p>\r\n            <BalTooltip\r\n              :text=\"$t('veBAL.liquidityMining.votingPeriodTooltip')\"\r\n              iconSize=\"sm\"\r\n              iconClass=\"text-gray-400 dark:text-gray-600\"\r\n              width=\"72\"\r\n              class=\"mt-1\"\r\n            />\r\n          </div>\r\n          <p class=\"text-lg font-semibold tabular-nums\">\r\n            <span\r\n              v-if=\"votingPeriodEnd.length\"\r\n              :class=\"{ 'text-orange-500': votingPeriodLastHour }\"\r\n            >\r\n              {{\r\n                $t(\r\n                  'veBAL.liquidityMining.votingPeriodCountdown',\r\n                  votingPeriodEnd\r\n                )\r\n              }}\r\n            </span>\r\n          </p>\r\n        </BalCard>\r\n      </div>\r\n      <div class=\"flex mb-3 lg:mb-0\">\r\n        <BalTextInput\r\n          v-model=\"tokenFilter\"\r\n          class=\"mr-5\"\r\n          name=\"tokenSearch\"\r\n          type=\"text\"\r\n          :placeholder=\"$t('filterByToken')\"\r\n          size=\"sm\"\r\n        >\r\n          <template #prepend>\r\n            <div class=\"flex items-center h-full\">\r\n              <BalIcon name=\"search\" size=\"md\" class=\"px-2 text-gray-600\" />\r\n            </div>\r\n          </template>\r\n        </BalTextInput>\r\n\r\n        <GaugesFilters\r\n          :networkFilters=\"networkFilters\"\r\n          :showExpiredGauges=\"showExpiredGauges\"\r\n          :activeNetworkFilters=\"activeNetworkFilters\"\r\n          @update:show-expired-gauges=\"showExpiredGauges = $event\"\r\n          @update:active-network-filters=\"activeNetworkFilters = $event\"\r\n        />\r\n      </div>\r\n    </div>\r\n\r\n    <GaugesTable\r\n      :key=\"gaugesTableKey\"\r\n      :expiredGauges=\"expiredGauges\"\r\n      :isLoading=\"isLoading\"\r\n      :data=\"filteredVotingGauges\"\r\n      :noPoolsLabel=\"$t('noInvestments')\"\r\n      :filterText=\"tokenFilter\"\r\n      showPoolShares\r\n      class=\"mb-8\"\r\n      @clicked-vote=\"setActiveGaugeVote\"\r\n    />\r\n  </div>\r\n  <teleport to=\"#modal\">\r\n    <GaugeVoteModal\r\n      v-if=\"!!activeVotingGauge\"\r\n      :gauge=\"activeVotingGauge\"\r\n      :logoURIs=\"orderedTokenURIs(activeVotingGauge)\"\r\n      :poolURL=\"poolURLFor(activeVotingGauge.pool, activeVotingGauge.network)\"\r\n      :unallocatedVoteWeight=\"unallocatedVoteWeight\"\r\n      :veBalLockInfo=\"veBalLockInfoQuery.data.value\"\r\n      @success=\"handleVoteSuccess\"\r\n      @close=\"handleModalClose\"\r\n    />\r\n  </teleport>\r\n</template>\r\n","<script setup lang=\"ts\">\r\nimport { differenceInDays, format } from 'date-fns';\r\nimport { computed, ref } from 'vue';\r\nimport { useI18n } from 'vue-i18n';\r\n\r\nimport { PRETTY_DATE_FORMAT } from '@/components/forms/lock_actions/constants';\r\nimport UnlockPreviewModal from '@/components/forms/lock_actions/UnlockForm/components/UnlockPreviewModal/UnlockPreviewModal.vue';\r\nimport useNumbers, { FNumFormats } from '@/composables/useNumbers';\r\nimport { useTokens } from '@/providers/tokens.provider';\r\nimport useVeBal from '@/composables/useVeBAL';\r\nimport useNetwork from '@/composables/useNetwork';\r\nimport { bnum } from '@/lib/utils';\r\nimport { VeBalLockInfo } from '@/services/balancer/contracts/contracts/veBAL';\r\nimport { Pool } from '@/services/pool/types';\r\nimport useWeb3 from '@/services/web3/useWeb3';\r\nimport { TokenInfo } from '@/types/TokenList';\r\n\r\n/**\r\n * TYPES\r\n */\r\ntype Props = {\r\n  lockablePool: Pool;\r\n  lockablePoolTokenInfo: TokenInfo;\r\n  veBalLockInfo?: VeBalLockInfo | null;\r\n  totalLockedValue: string;\r\n};\r\n\r\n/**\r\n * PROPS\r\n */\r\nconst props = withDefaults(defineProps<Props>(), {\r\n  veBalLockInfo: null,\r\n});\r\n\r\n/**\r\n * STATE\r\n */\r\nconst showUnlockPreviewModal = ref(false);\r\n\r\n/**\r\n * COMPOSABLES\r\n */\r\nconst { balanceFor } = useTokens();\r\nconst { fNum } = useNumbers();\r\nconst { veBalBalance, lockablePoolId } = useVeBal();\r\nconst { t } = useI18n();\r\nconst { isWalletReady } = useWeb3();\r\nconst { networkSlug } = useNetwork();\r\n\r\n/**\r\n * COMPUTED\r\n */\r\nconst poolShares = computed(() =>\r\n  bnum(props.lockablePool.totalLiquidity).div(props.lockablePool.totalShares)\r\n);\r\n\r\nconst bptBalance = computed(() => balanceFor(props.lockablePool.address));\r\n\r\nconst fiatTotal = computed(() =>\r\n  poolShares.value.times(bptBalance.value).toString()\r\n);\r\n\r\nconst lockedUntil = computed(() => {\r\n  if (props.veBalLockInfo?.hasExistingLock && !props.veBalLockInfo?.isExpired) {\r\n    return format(props.veBalLockInfo.lockedEndDate, PRETTY_DATE_FORMAT);\r\n  }\r\n\r\n  return 'â€”';\r\n});\r\n\r\nconst totalExpiredLpTokens = computed(() =>\r\n  props.veBalLockInfo?.isExpired ? props.veBalLockInfo.lockedAmount : '0'\r\n);\r\n\r\nconst fiatTotalExpiredLpTokens = computed(() =>\r\n  bnum(props.lockablePool.totalLiquidity)\r\n    .div(props.lockablePool.totalShares)\r\n    .times(totalExpiredLpTokens.value)\r\n    .toString()\r\n);\r\n\r\nconst cards = computed(() => {\r\n  const hasExistingLock = props.veBalLockInfo?.hasExistingLock;\r\n  const isExpired = props.veBalLockInfo?.isExpired;\r\n\r\n  return [\r\n    {\r\n      id: 'myLpToken',\r\n      label: t('veBAL.myVeBAL.cards.myLpToken.label'),\r\n      value: isWalletReady.value\r\n        ? fNum(fiatTotal.value, FNumFormats.fiat)\r\n        : 'â€”',\r\n      secondaryText: isWalletReady.value\r\n        ? fNum(bptBalance.value, FNumFormats.token)\r\n        : 'â€”',\r\n      showPlusIcon: isWalletReady.value ? true : false,\r\n      plusIconTo: {\r\n        name: 'add-liquidity',\r\n        params: { id: lockablePoolId.value, networkSlug },\r\n        query: { returnRoute: 'vebal' },\r\n      },\r\n    },\r\n    {\r\n      id: 'myLockedLpToken',\r\n      label: t('veBAL.myVeBAL.cards.myLockedLpToken.label'),\r\n      value: isWalletReady.value\r\n        ? fNum(props.totalLockedValue, FNumFormats.fiat)\r\n        : 'â€”',\r\n      secondaryText: isWalletReady.value\r\n        ? fNum(props.veBalLockInfo?.lockedAmount ?? '0', FNumFormats.token)\r\n        : 'â€”',\r\n      showPlusIcon: isWalletReady.value && !isExpired ? true : false,\r\n      plusIconTo: { name: 'get-vebal', query: { returnRoute: 'vebal' } },\r\n      showUnlockIcon: isExpired ? true : false,\r\n    },\r\n    {\r\n      id: 'lockedEndDate',\r\n      label: t('veBAL.myVeBAL.cards.lockedEndDate.label'),\r\n      value: lockedUntil.value,\r\n      secondaryText:\r\n        hasExistingLock && !isExpired\r\n          ? t('veBAL.myVeBAL.cards.lockedEndDate.secondaryText', [\r\n              differenceInDays(new Date(lockedUntil.value), new Date()),\r\n            ])\r\n          : '-',\r\n      showPlusIcon: hasExistingLock && !isExpired ? true : false,\r\n      plusIconTo: { name: 'get-vebal', query: { returnRoute: 'vebal' } },\r\n    },\r\n    {\r\n      id: 'myVeBAL',\r\n      label: t('veBAL.myVeBAL.cards.myVeBAL.label'),\r\n      secondaryText:\r\n        props.veBalLockInfo && hasExistingLock && !isExpired\r\n          ? t('veBAL.myVeBAL.cards.myVeBAL.secondaryText', [\r\n              fNum(\r\n                bnum(veBalBalance.value)\r\n                  .div(props.veBalLockInfo.totalSupply)\r\n                  .toString(),\r\n                {\r\n                  style: 'percent',\r\n                  maximumFractionDigits: 4,\r\n                }\r\n              ),\r\n            ])\r\n          : '-',\r\n      showPlusIcon: false,\r\n      value: hasExistingLock\r\n        ? fNum(veBalBalance.value, FNumFormats.token)\r\n        : 'â€”',\r\n    },\r\n  ];\r\n});\r\n</script>\r\n\r\n<template>\r\n  <BalCard v-for=\"card in cards\" :key=\"card.id\">\r\n    <div class=\"font-medium label\">\r\n      {{ card.label }}\r\n    </div>\r\n    <div class=\"value\" :class=\"card.id\">\r\n      <div v-if=\"card.id === 'myLockedLpToken'\">\r\n        <span\r\n          :class=\"{ 'text-red-500': bnum(totalExpiredLpTokens).gt(0) }\"\r\n          class=\"mr-1 font-semibold truncate\"\r\n          >{{ card.value }}</span\r\n        >\r\n        <BalTooltip\r\n          v-if=\"bnum(totalExpiredLpTokens).gt(0)\"\r\n          :text=\"$t('veBAL.myVeBAL.cards.myExpiredLockTooltip')\"\r\n          iconSize=\"sm\"\r\n          :iconName=\"'alert-triangle'\"\r\n          :iconClass=\"'text-red-500 hover:text-red-700 dark:hover:text-red-400 transition-colors'\"\r\n          width=\"72\"\r\n          class=\"relative top-0.5\"\r\n        />\r\n      </div>\r\n      <div v-else>\r\n        <span class=\"font-semibold truncate\">{{ card.value }}</span>\r\n      </div>\r\n      <div class=\"flex items-center\">\r\n        <BalIcon\r\n          v-if=\"card.showUnlockIcon\"\r\n          name=\"minus-circle\"\r\n          class=\"mr-2 transition-all cursor-pointer minus-circle\"\r\n          @click=\"showUnlockPreviewModal = true\"\r\n        />\r\n        <div>\r\n          <router-link\r\n            v-if=\"card.showPlusIcon && card.plusIconTo\"\r\n            :to=\"card.plusIconTo\"\r\n            class=\"flex items-center text-blue-600 dark:text-blue-400\"\r\n          >\r\n            <BalIcon\r\n              name=\"plus-circle\"\r\n              class=\"transition-all cursor-pointer plus-circle\"\r\n            />\r\n          </router-link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"font-medium secondary-value text-secondary\">\r\n      {{ card.secondaryText }}\r\n    </div>\r\n  </BalCard>\r\n  <teleport to=\"#modal\">\r\n    <UnlockPreviewModal\r\n      v-if=\"showUnlockPreviewModal && veBalLockInfo\"\r\n      :lockablePool=\"lockablePool\"\r\n      :lockablePoolTokenInfo=\"lockablePoolTokenInfo\"\r\n      :veBalLockInfo=\"veBalLockInfo\"\r\n      :totalLpTokens=\"totalExpiredLpTokens\"\r\n      :fiatTotalLpTokens=\"fiatTotalExpiredLpTokens\"\r\n      @close=\"showUnlockPreviewModal = false\"\r\n    />\r\n  </teleport>\r\n</template>\r\n\r\n<style scoped>\r\n.label {\r\n  @apply text-sm mb-2;\r\n}\r\n\r\n.value {\r\n  @apply text-xl font-medium flex flex-wrap items-center justify-between mb-0.5;\r\n}\r\n\r\n.secondary-value {\r\n  @apply text-sm;\r\n}\r\n\r\n.plus-circle:hover,\r\n.plus-circle:focus,\r\n.plus-circle:hover :deep(svg.feather-plus-circle),\r\n.plus-circle:focus :deep(svg.feather-plus-circle) {\r\n  @apply transition-all text-white;\r\n\r\n  fill: theme('colors.blue.600');\r\n}\r\n\r\n.plus-circle:hover :deep(svg.feather-plus-circle circle),\r\n.plus-circle:focus :deep(svg.feather-plus-circle circle) {\r\n  fill: theme('colors.blue.600');\r\n}\r\n\r\n.minus-circle,\r\n.minus-circle:hover :deep(svg.feather-minus-circle circle) {\r\n  fill: theme('colors.red.500');\r\n}\r\n\r\n.minus-circle:hover,\r\n.minus-circle:focus {\r\n  transform: scale(1.25);\r\n}\r\n\r\n.minus-circle:hover :deep(svg.feather-minus-circle),\r\n.minus-circle:focus :deep(svg.feather-minus-circle) {\r\n  @apply transition-all text-white;\r\n\r\n  fill: theme('colors.red.500');\r\n}\r\n</style>\r\n","<script setup lang=\"ts\">\r\nimport { computed } from 'vue';\r\n\r\nimport { useLock } from '@/composables/useLock';\r\nimport useWeb3 from '@/services/web3/useWeb3';\r\n\r\nimport MyVeBalCards from './components/MyVeBalCards.vue';\r\n\r\n/**\r\n * COMPOSABLES\r\n */\r\nconst {\r\n  isLoadingLockPool,\r\n  isLoadingLockInfo,\r\n  lockPool,\r\n  lockPoolToken,\r\n  lock,\r\n  totalLockedValue,\r\n} = useLock();\r\nconst { isWalletReady } = useWeb3();\r\n\r\n/**\r\n * COMPUTED\r\n */\r\n\r\nconst isLoading = computed(() =>\r\n  isWalletReady.value\r\n    ? isLoadingLockPool.value || isLoadingLockInfo.value\r\n    : false\r\n);\r\n</script>\r\n\r\n<template>\r\n  <h3 class=\"mb-3\">\r\n    {{ $t('veBAL.myVeBAL.title') }}\r\n  </h3>\r\n  <div class=\"grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-4 gap-4\">\r\n    <template v-if=\"isLoading\">\r\n      <BalLoadingBlock v-for=\"n in 4\" :key=\"n\" class=\"h-24\" />\r\n    </template>\r\n    <MyVeBalCards\r\n      v-else-if=\"lockPool && lockPoolToken\"\r\n      :veBalLockInfo=\"lock\"\r\n      :lockablePool=\"lockPool\"\r\n      :lockablePoolTokenInfo=\"lockPoolToken\"\r\n      :totalLockedValue=\"totalLockedValue\"\r\n    />\r\n  </div>\r\n</template>\r\n"],"names":["loaded","ref","props","wrapperStyles","computed","onLoaded","coin1","coin2","coin3","useI18n","router","useRouter","benefits","navigateToGetVeBAL","callGaugesIsKilledStatus","gaugeAddresses","multicaller","LiquidityGauge","gaugeAddress","getAddress","useExpiredGaugesQuery","options","networkId","useNetwork","isQueryEnabled","_a","queryKey","reactive","QUERY_KEYS","queryFn","expiredGaugeAddresses","gaugesExpiredStatus","error","address","value","queryOptions","useQuery","useVotingEscrowLocks","account","useWeb3","networkConfig","useConfig","veBalLockInfoQuery","useVeBalLockInfoQuery","allVotingGauges","useVotingGauges","veBalBalance","useVeBal","votingEscrowLocksQueryEnabled","votingEscrowLocksQuery","useGraphQuery","subgraphs","configs","votingEscrowLocks","votingGaugeAddresses","gauge","expiredGauges","gaugesUsingUnderUtilizedVotingPower","bnum","lastReceivedVebal","isVotingTimeLocked","shouldResubmitVotes","_b","isSameAddress","item","useDebouncedRef","delay","timeout","customRef","track","trigger","newValue","shouldRender","nextTick","theme","useTailwind","darkMode","useDarkMode","color","showRemoveVotes","disabled","fNum","useNumbers","votesThisPeriod","formatVotesAsPercent","votesNextPeriod","voteDifference","voteDifferenceText","text","voteTextClass","votes","normalizedVotes","scale","_hoisted_1","_hoisted_2","_createElementVNode","_hoisted_3","_hoisted_4","_sfc_render","_ctx","_cache","t","myVotes","BigNumber","poolHasUnderUtilizedVotingPoewer","sizeClass","upToLargeBreakpoint","useBreakpoints","isWalletReady","columns","dataKey","isInternalUrl","url","redirectToPool","inNewTab","redirectUrl","poolURLFor","route","getNetworkSlug","getPoolExternalUrl","poolUrl","getIsGaugeNew","addedTimestamp","differenceInWeeks","oneSecondInMs","getIsGaugeExpired","getHasUserVotes","userVotes","getTableRowClass","getSelectedTokens","tokens","token","getPickedTokens","useFormValidations","errors","validatable","handleInputErrors","_errors","validateInput","input","findValidatable","children","child","validate","_sfc_main$a","defineComponent","$props","$setup","$data","$options","_openBlock","_createElementBlock","_mergeProps","GaugeControllerService","config","configService","walletService","walletServiceInstance","__publicField","GaugeControllerAbi","weights","weight","gaugeControllerService","State","useActionState","state","confirmedAt","receipt","setInit","setConfirming","setSuccess","successParams","setError","title","description","MINIMUM_LOCK_TIME","addTransaction","useTransactions","txListener","getTxConfirmedAt","useEthers","voteState","voteWeight","voteButtonDisabled","isVeBalGauge","voteError","hasEnoughVotes","voteInputDisabled","currentWeight","currentWeightNormalized","hasVotes","VEBAL_VOTING_GAUGE","votesNextPeriodOverCap","voteTitle","voteButtonText","votedToRecentlyWarning","remainingTime","remainingVoteLockTime","voteLockedUntilText","unlockTime","WEIGHT_VOTE_DELAY","format","toUtcTime","noVeBalWarning","veBalLockTooShortWarning","lpVoteOverLimitWarning","voteWarning","transactionInProgress","isVoteWeightValid","unallocatedVotesFormatted","FNumFormats","unallocatedVotesClass","remainingVotes","remainingVotesText","remainingVotesFormatted","currentVotesFormatted","inputRules","v","isPositive","voteWeight2","submitVote","totalVoteShares","tx","handleTransaction","e","dateTimeLabelFor","emit","onMounted","votingGauges","refetchVotingGauges","visibleVotingGauges","hiddenVotingGauges","allGaugesTotalAllocation","underUtilizedAddresses","total","bpsToPct","hasMoreThan8VotingGauges","hiddenVotesTotalAllocation","totalUnscaled","totalAllocationClass","zeroAddresses","POOLS","zeroWeights","getTransactionSummaryMsg","gauges","acc","i","watchEffect","isModalOpen","networkFiltersArr","isExpiredFilterActive","activeNetworksArr","activeFiltersNum","handleExpInput","checked","updateNetwork","network","index","arr","tokenFilter","showExpiredGauges","activeNetworkFilters","activeVotingGauge","networkFilters","Network","isLoading","unallocatedVotes","votingPeriodEnd","votingPeriodLastHour","unallocatedVoteWeight","hasLock","hasExpiredLock","gaugesTableKey","gaugesFilteredByExpiring","expGauge","filteredVotingGauges","showByNetwork","setActiveGaugeVote","votingGauge","handleModalClose","handleVoteSuccess","showUnlockPreviewModal","balanceFor","useTokens","lockablePoolId","networkSlug","poolShares","bptBalance","fiatTotal","lockedUntil","PRETTY_DATE_FORMAT","totalExpiredLpTokens","fiatTotalExpiredLpTokens","cards","hasExistingLock","isExpired","_c","differenceInDays","isLoadingLockPool","isLoadingLockInfo","lockPool","lockPoolToken","lock","totalLockedValue","useLock"],"mappings":"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"}