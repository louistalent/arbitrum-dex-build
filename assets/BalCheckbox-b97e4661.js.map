{"version":3,"file":"BalCheckbox-b97e4661.js","sources":["../../src/components/_global/BalCheckbox/BalCheckbox.vue","../../src/components/_global/BalCheckbox/BalCheckbox.vue"],"sourcesContent":["<template>\r\n  <div :class=\"['bal-checkbox', wrapperClasses]\">\r\n    <div class=\"flex\">\r\n      <div :class=\"['flex', alignCheckbox]\">\r\n        <input\r\n          type=\"checkbox\"\r\n          :name=\"name\"\r\n          :checked=\"modelValue\"\r\n          :class=\"[\r\n            'bal-checkbox-input hover:border-blue-600 dark:hover:border-blue-400 cursor-pointer transition-colors',\r\n            alignCheckbox === 'items-start' && 'relative top-2',\r\n            inputClasses,\r\n          ]\"\r\n          @change=\"onChange\"\r\n        />\r\n      </div>\r\n      <div class=\"relative flex-col ml-3\">\r\n        <label\r\n          v-if=\"$slots.label || label\"\r\n          :for=\"name\"\r\n          :class=\"['bal-checkbox-label', labelClasses]\"\r\n        >\r\n          <slot name=\"label\">\r\n            {{ label }}\r\n          </slot>\r\n        </label>\r\n        <div v-if=\"hasError\" class=\"font-medium bal-checkbox-error\">\r\n          <div class=\"relative\">\r\n            {{ errors[0] }}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { RuleFunction, Rules } from '@/types';\r\n\r\nexport default defineComponent({\r\n  name: 'BalCheckbox',\r\n\r\n  props: {\r\n    name: { type: String, required: true },\r\n    modelValue: { type: Boolean, default: false },\r\n    label: { type: String, default: '' },\r\n    noMargin: { type: Boolean, default: false },\r\n    alignCheckbox: { type: String, default: 'items-start' },\r\n    rules: {\r\n      type: Array as PropType<Rules>,\r\n      default: () => [],\r\n    },\r\n    size: {\r\n      type: String,\r\n      default: 'md',\r\n      validator: (val: string): boolean => ['sm', 'md', 'lg'].includes(val),\r\n    },\r\n    color: {\r\n      type: String,\r\n      default: 'blue',\r\n      validator: (val: string): boolean => ['blue'].includes(val),\r\n    },\r\n  },\r\n\r\n  emits: ['update:modelValue'],\r\n\r\n  setup(props, { emit }) {\r\n    const errors = ref([] as Array<string>);\r\n\r\n    const hasError = computed(() => errors.value.length > 0);\r\n\r\n    function validate(val: string | number): void {\r\n      errors.value = [];\r\n      props.rules.forEach((rule: RuleFunction) => {\r\n        const result = rule(val);\r\n        if (typeof result === 'string') errors.value.push(result);\r\n      });\r\n    }\r\n\r\n    function onChange(event) {\r\n      emit('update:modelValue', event.target.checked);\r\n      validate(event.target.checked);\r\n    }\r\n\r\n    const sizeClasses = computed(() => {\r\n      switch (props.size) {\r\n        case 'sm':\r\n          return 'w-4 h-4 -mt-px';\r\n        case 'lg':\r\n          return 'w-6 h-6';\r\n        default:\r\n          return `w-5 h-5 ${\r\n            props.alignCheckbox === 'items-start' ? 'mt-1' : ''\r\n          }`;\r\n      }\r\n    });\r\n\r\n    const textSizeClass = computed(() => {\r\n      switch (props.size) {\r\n        case 'sm':\r\n          return 'text-sm';\r\n        case 'lg':\r\n          return 'text-lg';\r\n        default:\r\n          return 'text-base';\r\n      }\r\n    });\r\n\r\n    const colorClasses = computed(() => {\r\n      return `text-${props.color}-500`;\r\n    });\r\n\r\n    const wrapperClasses = computed(() => {\r\n      return {\r\n        'mb-1': !props.noMargin,\r\n      };\r\n    });\r\n\r\n    const inputClasses = computed(() => {\r\n      return {\r\n        [sizeClasses.value]: true,\r\n        [colorClasses.value]: true,\r\n      };\r\n    });\r\n\r\n    const labelClasses = computed(() => {\r\n      return {\r\n        [textSizeClass.value]: true,\r\n      };\r\n    });\r\n\r\n    return {\r\n      wrapperClasses,\r\n      inputClasses,\r\n      labelClasses,\r\n      validate,\r\n      hasError,\r\n      errors,\r\n      onChange,\r\n    };\r\n  },\r\n});\r\n</script>\r\n\r\n<style>\r\n.bal-checkbox {\r\n  @apply relative;\r\n}\r\n\r\n.bal-checkbox-input {\r\n  @apply text-blue-600 dark:text-blue-400 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600\r\n    rounded leading-none;\r\n\r\n  appearance: none;\r\n  -webkit-print-color-adjust: exact;\r\n  print-color-adjust: exact;\r\n  vertical-align: middle;\r\n  background-origin: border-box;\r\n  user-select: none;\r\n}\r\n\r\n.bal-checkbox-input:checked {\r\n  background-image: url(\"data:image/svg+xml,%3csvg viewBox='0 0 16 16' fill='white' xmlns='http://www.w3.org/2000/svg'%3e%3cpath d='M5.707 7.293a1 1 0 0 0-1.414 1.414l2 2a1 1 0 0 0 1.414 0l4-4a1 1 0 0 0-1.414-1.414L7 8.586 5.707 7.293z'/%3e%3c/svg%3e\");\r\n  border-color: transparent;\r\n  background-color: currentcolor;\r\n  background-size: 100% 100%;\r\n  background-position: center;\r\n  background-repeat: no-repeat;\r\n}\r\n\r\n.bal-checkbox-error {\r\n  @apply text-red-500 text-sm pt-1;\r\n}\r\n</style>\r\n","<template>\r\n  <div :class=\"['bal-checkbox', wrapperClasses]\">\r\n    <div class=\"flex\">\r\n      <div :class=\"['flex', alignCheckbox]\">\r\n        <input\r\n          type=\"checkbox\"\r\n          :name=\"name\"\r\n          :checked=\"modelValue\"\r\n          :class=\"[\r\n            'bal-checkbox-input hover:border-blue-600 dark:hover:border-blue-400 cursor-pointer transition-colors',\r\n            alignCheckbox === 'items-start' && 'relative top-2',\r\n            inputClasses,\r\n          ]\"\r\n          @change=\"onChange\"\r\n        />\r\n      </div>\r\n      <div class=\"relative flex-col ml-3\">\r\n        <label\r\n          v-if=\"$slots.label || label\"\r\n          :for=\"name\"\r\n          :class=\"['bal-checkbox-label', labelClasses]\"\r\n        >\r\n          <slot name=\"label\">\r\n            {{ label }}\r\n          </slot>\r\n        </label>\r\n        <div v-if=\"hasError\" class=\"font-medium bal-checkbox-error\">\r\n          <div class=\"relative\">\r\n            {{ errors[0] }}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { RuleFunction, Rules } from '@/types';\r\n\r\nexport default defineComponent({\r\n  name: 'BalCheckbox',\r\n\r\n  props: {\r\n    name: { type: String, required: true },\r\n    modelValue: { type: Boolean, default: false },\r\n    label: { type: String, default: '' },\r\n    noMargin: { type: Boolean, default: false },\r\n    alignCheckbox: { type: String, default: 'items-start' },\r\n    rules: {\r\n      type: Array as PropType<Rules>,\r\n      default: () => [],\r\n    },\r\n    size: {\r\n      type: String,\r\n      default: 'md',\r\n      validator: (val: string): boolean => ['sm', 'md', 'lg'].includes(val),\r\n    },\r\n    color: {\r\n      type: String,\r\n      default: 'blue',\r\n      validator: (val: string): boolean => ['blue'].includes(val),\r\n    },\r\n  },\r\n\r\n  emits: ['update:modelValue'],\r\n\r\n  setup(props, { emit }) {\r\n    const errors = ref([] as Array<string>);\r\n\r\n    const hasError = computed(() => errors.value.length > 0);\r\n\r\n    function validate(val: string | number): void {\r\n      errors.value = [];\r\n      props.rules.forEach((rule: RuleFunction) => {\r\n        const result = rule(val);\r\n        if (typeof result === 'string') errors.value.push(result);\r\n      });\r\n    }\r\n\r\n    function onChange(event) {\r\n      emit('update:modelValue', event.target.checked);\r\n      validate(event.target.checked);\r\n    }\r\n\r\n    const sizeClasses = computed(() => {\r\n      switch (props.size) {\r\n        case 'sm':\r\n          return 'w-4 h-4 -mt-px';\r\n        case 'lg':\r\n          return 'w-6 h-6';\r\n        default:\r\n          return `w-5 h-5 ${\r\n            props.alignCheckbox === 'items-start' ? 'mt-1' : ''\r\n          }`;\r\n      }\r\n    });\r\n\r\n    const textSizeClass = computed(() => {\r\n      switch (props.size) {\r\n        case 'sm':\r\n          return 'text-sm';\r\n        case 'lg':\r\n          return 'text-lg';\r\n        default:\r\n          return 'text-base';\r\n      }\r\n    });\r\n\r\n    const colorClasses = computed(() => {\r\n      return `text-${props.color}-500`;\r\n    });\r\n\r\n    const wrapperClasses = computed(() => {\r\n      return {\r\n        'mb-1': !props.noMargin,\r\n      };\r\n    });\r\n\r\n    const inputClasses = computed(() => {\r\n      return {\r\n        [sizeClasses.value]: true,\r\n        [colorClasses.value]: true,\r\n      };\r\n    });\r\n\r\n    const labelClasses = computed(() => {\r\n      return {\r\n        [textSizeClass.value]: true,\r\n      };\r\n    });\r\n\r\n    return {\r\n      wrapperClasses,\r\n      inputClasses,\r\n      labelClasses,\r\n      validate,\r\n      hasError,\r\n      errors,\r\n      onChange,\r\n    };\r\n  },\r\n});\r\n</script>\r\n\r\n<style>\r\n.bal-checkbox {\r\n  @apply relative;\r\n}\r\n\r\n.bal-checkbox-input {\r\n  @apply text-blue-600 dark:text-blue-400 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600\r\n    rounded leading-none;\r\n\r\n  appearance: none;\r\n  -webkit-print-color-adjust: exact;\r\n  print-color-adjust: exact;\r\n  vertical-align: middle;\r\n  background-origin: border-box;\r\n  user-select: none;\r\n}\r\n\r\n.bal-checkbox-input:checked {\r\n  background-image: url(\"data:image/svg+xml,%3csvg viewBox='0 0 16 16' fill='white' xmlns='http://www.w3.org/2000/svg'%3e%3cpath d='M5.707 7.293a1 1 0 0 0-1.414 1.414l2 2a1 1 0 0 0 1.414 0l4-4a1 1 0 0 0-1.414-1.414L7 8.586 5.707 7.293z'/%3e%3c/svg%3e\");\r\n  border-color: transparent;\r\n  background-color: currentcolor;\r\n  background-size: 100% 100%;\r\n  background-position: center;\r\n  background-repeat: no-repeat;\r\n}\r\n\r\n.bal-checkbox-error {\r\n  @apply text-red-500 text-sm pt-1;\r\n}\r\n</style>\r\n"],"names":["_sfc_main","defineComponent","val","props","emit","errors","ref","hasError","computed","validate","rule","result","onChange","event","sizeClasses","textSizeClass","colorClasses","wrapperClasses","inputClasses","labelClasses","_sfc_render","_ctx","_cache","$props","$setup","$data","$options","_createElementVNode","_hoisted_3","_openBlock","_createElementBlock","_hoisted_4","_createCommentVNode","_hoisted_5"],"mappings":"yHAuCA,MAAAA,EAAAC,EAAA,CAA+B,KAAA,cACvB,MAAA,CAEC,KAAA,CAAA,KAAA,OAAA,SAAA,EAAA,EACgC,WAAA,CAAA,KAAA,QAAA,QAAA,EAAA,EACO,MAAA,CAAA,KAAA,OAAA,QAAA,EAAA,EACT,SAAA,CAAA,KAAA,QAAA,QAAA,EAAA,EACO,cAAA,CAAA,KAAA,OAAA,QAAA,aAAA,EACY,MAAA,CAC/C,KAAA,MACC,QAAA,IAAA,CAAA,CACU,EAClB,KAAA,CACM,KAAA,OACE,QAAA,KACG,UAAAC,GAAA,CAAA,KAAA,KAAA,IAAA,EAAA,SAAAA,CAAA,CAC2D,EACtE,MAAA,CACO,KAAA,OACC,QAAA,OACG,UAAAA,GAAA,CAAA,MAAA,EAAA,SAAAA,CAAA,CACiD,CAC5D,EACF,MAAA,CAAA,mBAAA,EAE2B,MAAAC,EAAA,CAAA,KAAAC,GAAA,CAGzB,MAAAC,EAAAC,EAAA,CAAA,CAAA,EAEAC,EAAAC,EAAA,IAAAH,EAAA,MAAA,OAAA,CAAA,EAEA,SAAAI,EAAAP,EAAA,CACEG,EAAA,MAAA,GACAF,EAAA,MAAA,QAAAO,GAAA,CACE,MAAAC,EAAAD,EAAAR,CAAA,EACA,OAAAS,GAAA,UAAgCN,EAAA,MAAA,KAAAM,CAAA,CAAwB,CAAA,CACzD,CAGH,SAAAC,EAAAC,EAAA,CACET,EAAA,oBAAAS,EAAA,OAAA,OAAA,EACAJ,EAAAI,EAAA,OAAA,OAAA,CAA6B,CAG/B,MAAAC,EAAAN,EAAA,IAAA,CACE,OAAAL,EAAA,KAAA,CAAoB,IAAA,KAEhB,MAAA,iBAAO,IAAA,KAEP,MAAA,UAAO,QAEP,MAAA,WAAAA,EAAA,gBAAA,cAAA,OAAA,IACmD,CAEvD,CAAA,EAGFY,EAAAP,EAAA,IAAA,CACE,OAAAL,EAAA,KAAA,CAAoB,IAAA,KAEhB,MAAA,UAAO,IAAA,KAEP,MAAA,UAAO,QAEP,MAAA,WAAO,CACX,CAAA,EAGFa,EAAAR,EAAA,IACE,QAAAL,EAAA,WAAqB,EAGvBc,EAAAT,EAAA,KACE,CAAO,OAAA,CAAAL,EAAA,QACU,EACjB,EAGFe,EAAAV,EAAA,KACE,CAAO,CAAAM,EAAA,KAAA,EAAA,GACgB,CAAAE,EAAA,KAAA,EAAA,EACC,EACxB,EAGFG,EAAAX,EAAA,KACE,CAAO,CAAAO,EAAA,KAAA,EAAA,EACkB,EACzB,EAGF,MAAA,CAAO,eAAAE,EACL,aAAAC,EACA,aAAAC,EACA,SAAAV,EACA,SAAAF,EACA,OAAAF,EACA,SAAAO,CACA,CACF,CAEJ,CAAA,8FCnHmC,IAAA,+DAzBtB,SAAAQ,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,+DA+BH,EAAA,YA7BkBC,EAAA,MAAA,kCAWlB,EAAA,CARWA,EAAA,QAAA,CAAA,KAAA,WACV,KAAAN,EAAA,KACK,QAAAA,EAAA,oBAAmJ,uGAAqDA,EAAA,gBAAA,eAAA,iBAK7MA,EAAA,YAAA,CAAA,wEAkBC,EAAA,CAAA,EAbIM,EAAA,MAAAC,EAAA,CADRP,EAAA,OAAA,OAAAA,EAAA,OAAAQ,EAAA,EAAAC,EAAA,QAAA,CAEY,IAAA,EACJ,IAAAT,EAAA,mDAIC,EAAA,6CAEE,EAAA,GAAAU,CAAA,GAAAC,EAAA,GAAA,EAAA,EAAXX,EAAA,UAAAQ,EAAA,EAAAC,EAAA,MAAAG,EAAA"}