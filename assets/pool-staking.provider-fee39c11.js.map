{"version":3,"file":"pool-staking.provider-fee39c11.js","sources":["../../src/components/_global/icons/StarsIcon.vue","../../src/composables/queries/usePoolGaugesQuery.ts","../../src/providers/local/pool-staking.provider.ts"],"sourcesContent":["<script lang=\"ts\" setup>\r\nimport useTailwind from '@/composables/useTailwind';\r\n\r\n/**\r\n * TYPES\r\n */\r\ntype Props = {\r\n  gradFrom?: string;\r\n  gradTo?: string;\r\n};\r\n\r\n/**\r\n * PROPS & EMITS\r\n */\r\nconst props = withDefaults(defineProps<Props>(), {\r\n  gradFrom: 'yellow',\r\n  gradTo: 'pink',\r\n});\r\n\r\n/**\r\n * COMPOSABLES\r\n */\r\nconst { theme } = useTailwind();\r\n\r\n/**\r\n * COMPUTED\r\n */\r\nconst gradientId = computed(\r\n  (): string => `stars-gradient-${props.gradFrom}-${props.gradTo}`\r\n);\r\n</script>\r\n\r\n<template>\r\n  <svg\r\n    width=\"24\"\r\n    height=\"25\"\r\n    viewBox=\"0 0 24 25\"\r\n    fill=\"none\"\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n  >\r\n    <defs>\r\n      <linearGradient\r\n        :id=\"gradientId\"\r\n        x1=\"24\"\r\n        y1=\"-11.5\"\r\n        x2=\"2.7273\"\r\n        y2=\"16.3182\"\r\n        gradientUnits=\"userSpaceOnUse\"\r\n      >\r\n        <stop :stop-color=\"theme.colors[gradTo]['500']\" />\r\n        <stop offset=\"1\" :stop-color=\"theme.colors[gradFrom]['500']\" />\r\n      </linearGradient>\r\n    </defs>\r\n    <path\r\n      fill-rule=\"evenodd\"\r\n      clip-rule=\"evenodd\"\r\n      d=\"M21.7809 7.27232C20.6203 7.70216 19.7081 8.67468 19.305 9.91198L18.5527 12.2203C18.5419 12.2555 18.5111 12.2792 18.4764 12.2792C18.4417 12.2792 18.4109 12.2555 18.4001 12.2203L17.6479 9.91198C17.2447 8.67461 16.3323 7.70207 15.1716 7.27232L13.0065 6.47049C12.9742 6.45851 12.9525 6.42606 12.9525 6.38961C12.9525 6.35316 12.9742 6.32071 13.0065 6.30873L15.1716 5.5069C16.3323 5.07715 17.2447 4.10461 17.6479 2.86724L18.4001 0.558892C18.4109 0.523752 18.4417 0.5 18.4764 0.5C18.5111 0.5 18.5419 0.523752 18.5527 0.558892L19.305 2.86724C19.7081 4.10455 20.6203 5.07707 21.7809 5.5069L23.9461 6.30873C23.9783 6.32071 24 6.35316 24 6.38961C24 6.42606 23.9783 6.45851 23.9461 6.47049L21.7809 7.27232ZM12.2613 14.4746C10.6494 15.0717 9.38251 16.4224 8.82264 18.1409L7.77749 21.3469C7.76214 21.3952 7.71964 21.4276 7.67183 21.4276C7.62402 21.4276 7.58152 21.3952 7.56617 21.3469L6.52102 18.1409C5.96115 16.4224 4.69427 15.0717 3.08238 14.4746L0.0748959 13.361C0.0300526 13.3443 0 13.2993 0 13.2486C0 13.198 0.0300526 13.153 0.0748959 13.1363L3.08238 12.0227C4.69428 11.4256 5.96116 10.0749 6.52102 8.35643L7.56617 5.1504C7.58152 5.10213 7.62402 5.06965 7.67183 5.06965C7.71964 5.06965 7.76214 5.10213 7.77749 5.1504L8.82264 8.35643C9.38251 10.0749 10.6494 11.4256 12.2613 12.0227L15.2688 13.1363C15.3136 13.153 15.3437 13.198 15.3437 13.2486C15.3437 13.2993 15.3136 13.3443 15.2688 13.361L12.2613 14.4746ZM18.4025 22.6042C18.725 21.6144 19.4546 20.8364 20.383 20.4924L22.1159 19.851C22.1417 19.8414 22.1591 19.8154 22.1591 19.7862C22.1591 19.7571 22.1417 19.7311 22.1159 19.7215L20.383 19.0801C19.4546 18.7361 18.725 17.9581 18.4025 16.9683L17.8005 15.1217C17.7925 15.0925 17.7674 15.0725 17.7389 15.0725C17.7104 15.0725 17.6853 15.0925 17.6773 15.1217L17.0768 16.9683C16.754 17.9585 16.0237 18.7365 15.0948 19.0801L13.3634 19.7215C13.3376 19.7311 13.3202 19.7571 13.3202 19.7862C13.3202 19.8154 13.3376 19.8414 13.3634 19.851L15.0948 20.4924C16.0237 20.836 16.754 21.614 17.0768 22.6042L17.6773 24.4509C17.6853 24.48 17.7104 24.5 17.7389 24.5C17.7674 24.5 17.7925 24.48 17.8005 24.4509L18.4025 22.6042Z\"\r\n      :fill=\"`url(#${gradientId})`\"\r\n    />\r\n  </svg>\r\n</template>\r\n","import { computed, reactive, Ref } from 'vue';\r\nimport { useQuery, UseQueryOptions } from '@tanstack/vue-query';\r\n\r\nimport QUERY_KEYS from '@/constants/queryKeys';\r\nimport { subgraphRequest } from '@/lib/utils/subgraph';\r\nimport { configService } from '@/services/config/config.service';\r\nimport { isGnosis } from '../useNetwork';\r\n\r\n/**\r\n * TYPES\r\n */\r\nexport type PoolGauges = {\r\n  pool: {\r\n    preferentialGauge: {\r\n      id: string | null;\r\n    };\r\n    gauges: {\r\n      id: string;\r\n      relativeWeightCap: string;\r\n    }[];\r\n  };\r\n  liquidityGauges: { id: string }[];\r\n};\r\n\r\ntype QueryOptions = UseQueryOptions<PoolGauges>;\r\n\r\n/**\r\n * Fetches all gauges for a given pool and specifies which gauge is the\r\n * preferential gauge.\r\n */\r\nexport default function usePoolGaugesQuery(\r\n  poolAddress: Ref<string | undefined>,\r\n  options: UseQueryOptions<PoolGauges> = {}\r\n) {\r\n  /**\r\n   * QUERY KEY\r\n   */\r\n  const queryKey = reactive(QUERY_KEYS.Pool.Gauges(poolAddress));\r\n\r\n  /**\r\n   * COMPUTED\r\n   */\r\n  const enabled = computed(\r\n    (): boolean => !!poolAddress?.value && !isGnosis.value\r\n  );\r\n\r\n  const subgraphQuery = computed(() => ({\r\n    pool: {\r\n      __args: {\r\n        id: poolAddress.value?.toLowerCase(),\r\n      },\r\n      preferentialGauge: {\r\n        id: true,\r\n      },\r\n      gauges: {\r\n        id: true,\r\n        relativeWeightCap: true,\r\n      },\r\n    },\r\n    liquidityGauges: {\r\n      __args: {\r\n        where: {\r\n          poolAddress: poolAddress.value?.toLowerCase(),\r\n        },\r\n      },\r\n      id: true,\r\n    },\r\n  }));\r\n\r\n  /**\r\n   * QUERY FUNCTION\r\n   */\r\n  const queryFn = async () => {\r\n    try {\r\n      return await subgraphRequest<PoolGauges>({\r\n        url: configService.network.subgraphs.gauge,\r\n        query: subgraphQuery.value,\r\n      });\r\n    } catch (error) {\r\n      console.error(\r\n        `Failed to fetch pool gauge for pool: ${poolAddress.value}`,\r\n        {\r\n          cause: error,\r\n        }\r\n      );\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * QUERY OPTIONS\r\n   */\r\n  const queryOptions = reactive({\r\n    enabled,\r\n    refetchOnWindowFocus: false,\r\n    ...options,\r\n  });\r\n\r\n  return useQuery<PoolGauges>(queryKey, queryFn, queryOptions as QueryOptions);\r\n}\r\n","import usePoolGaugesQuery from '@/composables/queries/usePoolGaugesQuery';\r\nimport { isQueryLoading } from '@/composables/queries/useQueryHelpers';\r\nimport symbolKeys from '@/constants/symbol.keys';\r\nimport { bnum, getAddressFromPoolId, isSameAddress } from '@/lib/utils';\r\nimport { computed, InjectionKey, provide } from 'vue';\r\nimport { LiquidityGauge } from '@/services/balancer/contracts/contracts/liquidity-gauge';\r\nimport { getAddress } from '@ethersproject/address';\r\nimport { parseUnits } from '@ethersproject/units';\r\nimport { useTokens } from '../tokens.provider';\r\nimport { TransactionResponse } from '@ethersproject/abstract-provider';\r\nimport useWeb3 from '@/services/web3/useWeb3';\r\nimport { POOLS } from '@/constants/pools';\r\nimport { safeInject } from '../inject';\r\nimport { useUserData } from '../user-data.provider';\r\nimport { subgraphRequest } from '@/lib/utils/subgraph';\r\nimport { configService } from '@/services/config/config.service';\r\n\r\n/**\r\n * PoolStakingProvider\r\n *\r\n * Fetches data and provides functionality for a specific pool's gauge.\r\n */\r\nconst provider = (_poolId?: string) => {\r\n  /**\r\n   * STATE\r\n   */\r\n  const poolId = ref(_poolId);\r\n  const poolAddress = computed((): string | undefined =>\r\n    poolId.value ? getAddressFromPoolId(poolId.value) : undefined\r\n  );\r\n\r\n  /**\r\n   * COMPOSABLES\r\n   */\r\n  const { balanceFor } = useTokens();\r\n  const { account, isWalletReady } = useWeb3();\r\n\r\n  // Fetches all gauges for specified pool (incl. preferential gauge).\r\n  const poolGaugesQuery = usePoolGaugesQuery(poolAddress);\r\n  const { data: poolGauges, refetch: refetchPoolGauges } = poolGaugesQuery;\r\n\r\n  // Access user data fetched on wallet connection/change.\r\n  const { userGaugeSharesQuery, userBoostsQuery, stakedSharesQuery } =\r\n    useUserData();\r\n  const { data: userGaugeShares, refetch: refetchUserGaugeShares } =\r\n    userGaugeSharesQuery;\r\n  const { data: boostsMap, refetch: refetchUserBoosts } = userBoostsQuery;\r\n  const {\r\n    data: _stakedShares,\r\n    refetch: refetchStakedShares,\r\n    isRefetching: isRefetchingStakedShares,\r\n  } = stakedSharesQuery;\r\n\r\n  /**\r\n   * COMPUTED\r\n   */\r\n  const isLoading = computed(\r\n    (): boolean =>\r\n      isQueryLoading(poolGaugesQuery) ||\r\n      (isWalletReady.value &&\r\n        (isQueryLoading(stakedSharesQuery) ||\r\n          isQueryLoading(userGaugeSharesQuery) ||\r\n          isQueryLoading(userBoostsQuery)))\r\n  );\r\n\r\n  // The current preferential gauge for the specified pool.\r\n  const preferentialGaugeAddress = computed(\r\n    (): string | undefined | null =>\r\n      poolGauges.value?.pool?.preferentialGauge?.id\r\n  );\r\n\r\n  // Is it possible to stake this pool's BPT?\r\n  const isStakablePool = computed(\r\n    (): boolean =>\r\n      !!poolId.value &&\r\n      poolGauges.value?.liquidityGauges?.[0]?.id !== undefined &&\r\n      POOLS.Stakable.AllowList.includes(poolId.value)\r\n  );\r\n\r\n  // User's staked shares for pool (onchain data).\r\n  const stakedShares = computed((): string => {\r\n    if (!poolId.value) return '0';\r\n\r\n    return _stakedShares?.value?.[poolId.value] || '0';\r\n  });\r\n\r\n  // User's boost value for this pool\r\n  const boost = computed((): string => {\r\n    if (!boostsMap.value || !poolId.value) return '1';\r\n\r\n    return boostsMap[poolId.value];\r\n  });\r\n\r\n  // Addresses of all pool gauges.\r\n  const gaugeAddresses = computed(\r\n    (): string[] => poolGauges.value?.pool.gauges.map(gauge => gauge.id) || []\r\n  );\r\n\r\n  // Map of user gauge addresses -> balance.\r\n  const userGaugeSharesMap = computed((): Record<string, string> => {\r\n    if (!userGaugeShares.value) return {};\r\n\r\n    return userGaugeShares.value.reduce((acc, share) => {\r\n      acc[share.gauge.id] = share.balance;\r\n      return acc;\r\n    }, {} as Record<string, string>);\r\n  });\r\n\r\n  // Does the user have a balance in a non-preferential gauge\r\n  const hasNonPrefGaugeBalance = computed((): boolean => {\r\n    if (\r\n      !poolGauges.value ||\r\n      !userGaugeShares.value ||\r\n      !preferentialGaugeAddress.value\r\n    )\r\n      return false;\r\n\r\n    const _preferentialGaugeAddress = preferentialGaugeAddress.value;\r\n\r\n    return gaugeAddresses.value.some(\r\n      gaugeAddress =>\r\n        !isSameAddress(gaugeAddress, _preferentialGaugeAddress) &&\r\n        bnum(userGaugeSharesMap.value[gaugeAddress] || '0').gt(0)\r\n    );\r\n  });\r\n\r\n  /**\r\n   * METHODS\r\n   */\r\n\r\n  /**\r\n   * Set current pool ID for this provider.\r\n   *\r\n   * @param {string} id - The pool ID to get staking data for.\r\n   */\r\n  function setCurrentPool(id: string) {\r\n    poolId.value = id;\r\n  }\r\n\r\n  // Triggers refetch of all queries in this provider.\r\n  async function refetchAllPoolStakingData() {\r\n    return Promise.all([\r\n      refetchPoolGauges(),\r\n      refetchStakedShares(),\r\n      refetchUserGaugeShares(),\r\n      refetchUserBoosts(),\r\n    ]);\r\n  }\r\n\r\n  /**\r\n   * stake\r\n   *\r\n   * Trigger stake transaction using the current user's full BPT balance for\r\n   * this pool.\r\n   */\r\n  async function stake(): Promise<TransactionResponse> {\r\n    if (!poolAddress.value) throw new Error('No pool to stake.');\r\n    if (!preferentialGaugeAddress.value) {\r\n      throw new Error(`No preferential gauge found for this pool.`);\r\n    }\r\n\r\n    console.log('poolAddress.value', poolAddress.value);\r\n    const gauge = new LiquidityGauge(preferentialGaugeAddress.value);\r\n    // User's current full BPT balance for this pool.\r\n    const userBptBalance = parseUnits(\r\n      balanceFor(getAddress(poolAddress.value))\r\n    );\r\n\r\n    return await gauge.stake(userBptBalance);\r\n  }\r\n\r\n  /**\r\n   * unstake\r\n   *\r\n   * Trigger unstake transaction using the first pool gauge that the user has a\r\n   * balance in.\r\n   */\r\n  async function unstake(): Promise<TransactionResponse> {\r\n    if (!poolGauges.value?.pool?.gauges)\r\n      throw new Error('Unable to unstake, no pool gauges');\r\n\r\n    const gaugesWithBalance = await Promise.all(\r\n      poolGauges.value.pool.gauges.map(async gauge => {\r\n        const gaugeInstance = new LiquidityGauge(gauge.id);\r\n        const balance = await gaugeInstance.balance(account.value);\r\n        return { ...gauge, balance: balance?.toString() };\r\n      })\r\n    );\r\n\r\n    const gaugeWithBalance = gaugesWithBalance.find(\r\n      gauge => gauge.balance !== '0'\r\n    );\r\n    if (!gaugeWithBalance) {\r\n      throw new Error(\r\n        `Attempted to call unstake, user doesn't have any balance for any gauges.`\r\n      );\r\n    }\r\n\r\n    const gauge = new LiquidityGauge(gaugeWithBalance.id);\r\n    const balance = await gauge.balance(account.value);\r\n    return await gauge.unstake(balance);\r\n  }\r\n\r\n  /**\r\n   * Fetch preferential gauge address for pool.\r\n   *\r\n   * @param {string} poolAddress - The pool address to get gauge for.\r\n   * @returns {Promise<string>} - The preferential gauge address.\r\n   */\r\n  async function fetchPreferentialGaugeAddress(\r\n    poolAddress: string\r\n  ): Promise<string> {\r\n    try {\r\n      const data = await subgraphRequest<{\r\n        pool: { preferentialGauge: { id: string } };\r\n      }>({\r\n        url: configService.network.subgraphs.gauge,\r\n        query: {\r\n          pool: {\r\n            __args: {\r\n              id: poolAddress.toLowerCase(),\r\n            },\r\n            preferentialGauge: {\r\n              id: true,\r\n            },\r\n          },\r\n        },\r\n      });\r\n\r\n      return data.pool.preferentialGauge.id;\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  return {\r\n    isLoading,\r\n    stakedShares,\r\n    isStakablePool,\r\n    boost,\r\n    hasNonPrefGaugeBalance,\r\n    isRefetchingStakedShares,\r\n    refetchStakedShares,\r\n    preferentialGaugeAddress,\r\n    fetchPreferentialGaugeAddress,\r\n    setCurrentPool,\r\n    refetchAllPoolStakingData,\r\n    stake,\r\n    unstake,\r\n  };\r\n};\r\n\r\n/**\r\n * Provide setup: response type + symbol.\r\n */\r\nexport type PoolStakingProviderResponse = ReturnType<typeof provider>;\r\nexport const PoolStakingProviderSymbol: InjectionKey<PoolStakingProviderResponse> =\r\n  Symbol(symbolKeys.Providers.PoolStaking);\r\n\r\nexport function providePoolStaking(poolId?: string) {\r\n  provide(PoolStakingProviderSymbol, provider(poolId));\r\n}\r\n\r\nexport function usePoolStaking(): PoolStakingProviderResponse {\r\n  return safeInject(PoolStakingProviderSymbol);\r\n}\r\n"],"names":["theme","useTailwind","gradientId","computed","props","usePoolGaugesQuery","poolAddress","options","queryKey","reactive","QUERY_KEYS","enabled","isGnosis","subgraphQuery","_a","_b","queryFn","subgraphRequest","configService","error","queryOptions","useQuery","provider","_poolId","poolId","ref","getAddressFromPoolId","balanceFor","useTokens","account","isWalletReady","useWeb3","poolGaugesQuery","poolGauges","refetchPoolGauges","userGaugeSharesQuery","userBoostsQuery","stakedSharesQuery","useUserData","userGaugeShares","refetchUserGaugeShares","boostsMap","refetchUserBoosts","_stakedShares","refetchStakedShares","isRefetchingStakedShares","isLoading","isQueryLoading","preferentialGaugeAddress","_c","isStakablePool","POOLS","stakedShares","boost","gaugeAddresses","gauge","userGaugeSharesMap","acc","share","hasNonPrefGaugeBalance","_preferentialGaugeAddress","gaugeAddress","isSameAddress","bnum","setCurrentPool","id","refetchAllPoolStakingData","stake","LiquidityGauge","userBptBalance","parseUnits","getAddress","unstake","gaugeWithBalance","gauge2","balance2","balance","fetchPreferentialGaugeAddress","poolAddress2","PoolStakingProviderSymbol","symbolKeys","providePoolStaking","provide","usePoolStaking","safeInject"],"mappings":"+iBAsBA,CAAA,MAAAA,GAAAC,IAKAC,EAAAC,EAAmB,IAAA,kBAAAC,EAAA,YAAAA,EAAA,QACuC,27ECE1D,SAAwBC,GACtBC,EACAC,EAAuC,GACvC,CAIA,MAAMC,EAAWC,EAASC,EAAW,KAAK,OAAOJ,CAAW,CAAC,EAKvDK,EAAUR,EACd,IAAe,CAAC,EAACG,GAAA,MAAAA,EAAa,QAAS,CAACM,GAAS,KAAA,EAG7CC,EAAgBV,EAAS,IAAO,SAAA,OACpC,KAAM,CACJ,OAAQ,CACN,IAAIW,EAAAR,EAAY,QAAZ,YAAAQ,EAAmB,aACzB,EACA,kBAAmB,CACjB,GAAI,EACN,EACA,OAAQ,CACN,GAAI,GACJ,kBAAmB,EACrB,CACF,EACA,gBAAiB,CACf,OAAQ,CACN,MAAO,CACL,aAAaC,EAAAT,EAAY,QAAZ,YAAAS,EAAmB,aAClC,CACF,EACA,GAAI,EACN,CACA,EAAA,EAKIC,EAAU,SAAY,CACtB,GAAA,CACF,OAAO,MAAMC,EAA4B,CACvC,IAAKC,EAAc,QAAQ,UAAU,MACrC,MAAOL,EAAc,KAAA,CACtB,QACMM,GACC,cAAA,MACN,wCAAwCb,EAAY,QACpD,CACE,MAAOa,CACT,CAAA,EAEIA,CACR,CAAA,EAMIC,EAAeX,EAAS,CAC5B,QAAAE,EACA,qBAAsB,GACtB,GAAGJ,CAAA,CACJ,EAEM,OAAAc,GAAqBb,EAAUQ,EAASI,CAA4B,CAC7E,CC7EA,MAAAE,GAAAC,GAAA,CAIE,MAAAC,EAAAC,GAAAF,CAAA,EACAjB,EAAAH,EAAoB,IAAAqB,EAAA,MAAAE,GAAAF,EAAA,KAAA,EAAA,MACkC,EAMtD,CAAA,WAAAG,GAAAC,KACA,CAAA,QAAAC,EAAA,cAAAC,CAAA,EAAAC,GAAA,EAGAC,EAAA3B,GAAAC,CAAA,EACA,CAAA,KAAA2B,EAAA,QAAAC,CAAA,EAAAF,EAGA,CAAA,qBAAAG,EAAA,gBAAAC,EAAA,kBAAAC,CAAA,EAAAC,GAAA,EAEA,CAAA,KAAAC,EAAA,QAAAC,CAAA,EAAAL,EAEA,CAAA,KAAAM,EAAA,QAAAC,CAAA,EAAAN,EACA,CAAM,KAAAO,EACE,QAAAC,EACG,aAAAC,CACK,EAAAR,EAMhBS,EAAA3C,EAAkB,IAAA4C,EAAAf,CAAA,GAAAF,EAAA,QAAAiB,EAAAV,CAAA,GAAAU,EAAAZ,CAAA,GAAAY,EAAAX,CAAA,EAMoB,EAItCY,EAAA7C,EAAiC,IAAA,WAAA,OAAA8C,GAAAlC,GAAAD,EAAAmB,EAAA,QAAA,YAAAnB,EAAA,OAAA,YAAAC,EAAA,oBAAA,YAAAkC,EAAA,GAEc,EAI/CC,EAAA/C,EAAuB,IAAA,WAAA,OAAA,CAAAqB,EAAA,SAAAyB,GAAAlC,GAAAD,EAAAmB,EAAA,QAAA,YAAAnB,EAAA,kBAAA,YAAAC,EAAA,KAAA,YAAAkC,EAAA,MAAA,QAAAE,GAAA,SAAA,UAAA,SAAA3B,EAAA,KAAA,EAI2B,EAIlD4B,EAAAjD,EAAA,IAAA,OACE,OAAAqB,EAAA,SAEAV,EAAA6B,GAAA,YAAAA,EAAA,QAAA,YAAA7B,EAAAU,EAAA,SAAA,GAA+C,CAAA,EAIjD6B,EAAAlD,EAAA,IACE,CAAAsC,EAAA,OAAA,CAAAjB,EAAA,MAAuC,IAEvCiB,EAAAjB,EAAA,KAAA,CAA6B,EAI/B8B,EAAAnD,EAAuB,WAAA,QAAAW,EAAAmB,EAAA,QAAA,YAAAnB,EAAA,KAAA,OAAA,IAAAyC,GAAAA,EAAA,MAAA,CAAA,EACoD,EAI3EC,EAAArD,EAAA,IACEoC,EAAA,MAEAA,EAAA,MAAA,OAAA,CAAAkB,EAAAC,KACED,EAAAC,EAAA,MAAA,EAAA,EAAAA,EAAA,QACAD,GAAO,CAAA,CAAA,EAJmB,EAKG,EAIjCE,EAAAxD,EAAA,IAAA,CACE,GAAA,CAAA8B,EAAA,OAAA,CAAAM,EAAA,OAAA,CAAAS,EAAA,MAKE,MAAA,GAEF,MAAAY,EAAAZ,EAAA,MAEA,OAAAM,EAAA,MAAA,KAA4BO,GAAA,CAAAC,GAAAD,EAAAD,CAAA,GAAAG,GAAAP,EAAA,MAAAK,CAAA,GAAA,GAAA,EAAA,GAAA,CAAA,CAGgC,CAC5D,CAAA,EAYF,SAAAG,EAAAC,EAAA,CACEzC,EAAA,MAAAyC,CAAe,CAIjB,eAAAC,GAAA,CACE,OAAA,QAAA,IAAA,CAAmBhC,EAAA,EACCU,EAAA,EACEJ,EAAA,EACGE,EAAA,CACL,CAAA,CACnB,CASH,eAAAyB,GAAA,CACE,GAAA,CAAA7D,EAAA,MAAwB,MAAA,IAAA,MAAA,mBAAA,EACxB,GAAA,CAAA0C,EAAA,MACE,MAAA,IAAA,MAAA,4CAAA,EAGF,QAAA,IAAA,oBAAA1C,EAAA,KAAA,EACA,MAAAiD,EAAA,IAAAa,EAAApB,EAAA,KAAA,EAEAqB,EAAAC,GAAuB3C,EAAA4C,GAAAjE,EAAA,KAAA,CAAA,CACmB,EAG1C,OAAA,MAAAiD,EAAA,MAAAc,CAAA,CAAuC,CASzC,eAAAG,GAAA,SACE,GAAA,GAAAzD,GAAAD,EAAAmB,EAAA,QAAA,YAAAnB,EAAA,OAAA,MAAAC,EAAA,QACE,MAAA,IAAA,MAAA,mCAAA,EAUF,MAAA0D,GARA,MAAA,QAAA,IAAwCxC,EAAA,MAAA,KAAA,OAAA,IAAA,MAAAyC,GAAA,CAGpC,MAAAC,EAAA,MADA,IAAAP,EAAAM,EAAA,EAAA,EACA,QAAA7C,EAAA,KAAA,EACA,MAAA,CAAA,GAAA6C,EAAA,QAAAC,GAAA,YAAAA,EAAA,UAAA,CAAgD,CAAA,CACjD,GAGH,KAA2CD,GAAAA,EAAA,UAAA,GACd,EAE7B,GAAA,CAAAD,EACE,MAAA,IAAA,MAAU,0EACR,EAIJ,MAAAlB,EAAA,IAAAa,EAAAK,EAAA,EAAA,EACAG,EAAA,MAAArB,EAAA,QAAA1B,EAAA,KAAA,EACA,OAAA,MAAA0B,EAAA,QAAAqB,CAAA,CAAkC,CASpC,eAAAC,EAAAC,EAAA,CAGE,GAAA,CAiBE,OAhBA,MAAA7D,EAAA,CAEG,IAAAC,EAAA,QAAA,UAAA,MACoC,MAAA,CAC9B,KAAA,CACC,OAAA,CACI,GAAA4D,EAAA,YAAA,CACsB,EAC9B,kBAAA,CACmB,GAAA,EACb,CACN,CACF,CACF,CAAA,GAGF,KAAA,kBAAA,EAAmC,OAAA3D,EAAA,CAEnC,cAAA,MAAAA,CAAA,EACAA,CAAM,CACR,CAGF,MAAA,CAAO,UAAA2B,EACL,aAAAM,EACA,eAAAF,EACA,MAAAG,EACA,uBAAAM,EACA,yBAAAd,EACA,oBAAAD,EACA,yBAAAI,EACA,8BAAA6B,EACA,eAAAb,EACA,0BAAAE,EACA,MAAAC,EACA,QAAAK,CACA,CAEJ,EAMOO,EAAA,OAAAC,GAAA,UAAA,WAAA,EAGA,SAAAC,GAAAzD,EAAA,CACL0D,GAAAH,EAAAzD,GAAAE,CAAA,CAAA,CACF,CAEO,SAAA2D,IAAA,CACL,OAAAC,GAAAL,CAAA,CACF"}