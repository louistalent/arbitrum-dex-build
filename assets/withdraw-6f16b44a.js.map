{"version":3,"file":"withdraw-6f16b44a.js","sources":["../../src/components/forms/pool_actions/WithdrawForm/components/WithdrawalTokenSelect.vue","../../src/components/forms/pool_actions/WithdrawForm/components/ProportionalWithdrawalInput.vue","../../src/components/forms/pool_actions/WithdrawForm/components/WithdrawPreviewModal/components/WithdrawActions.vue","../../src/components/forms/pool_actions/WithdrawForm/components/WithdrawPreviewModal/components/WithdrawSummary.vue","../../src/components/forms/pool_actions/WithdrawForm/components/WithdrawPreviewModal/WithdrawPreviewModal.vue","../../src/components/forms/pool_actions/WithdrawForm/components/WithdrawTotals.vue","../../src/components/forms/pool_actions/WithdrawForm/WithdrawForm.vue","../../src/services/balancer/pools/exits/handlers/exit-pool.handler.ts","../../src/services/balancer/pools/exits/handlers/swap-exit.handler.ts","../../src/services/balancer/pools/exits/handlers/generalised-exit.handler.ts","../../src/services/balancer/pools/exits/handlers/exact-in-exit.handler.ts","../../src/services/balancer/pools/exits/handlers/exact-out-exit.handler.ts","../../src/services/balancer/pools/exits/exit-pool.service.ts","../../src/providers/local/exit-pool.provider.ts","../../src/components/forms/pool_actions/WithdrawForm/components/ProportionalWithdrawalTokenInfoV2.vue","../../src/components/forms/pool_actions/WithdrawForm/components/ProportionalWithdrawalInputV2.vue","../../src/components/forms/pool_actions/WithdrawForm/components/WithdrawTotalsV2.vue","../../src/components/forms/pool_actions/WithdrawForm/components/WithdrawPreviewModal/components/WithdrawActionsV2.vue","../../src/components/forms/pool_actions/WithdrawForm/components/WithdrawPreviewModal/WithdrawPreviewModalV2.vue","../../src/components/forms/pool_actions/WithdrawForm/WithdrawFormV2.vue","../../src/composables/pools/useWithdrawPageTabs.ts","../../src/components/contextual/pages/pool/withdraw/WithdrawPageTabs.vue","../../src/components/contextual/pages/pool/withdraw/WithdrawPage.vue","../../src/pages/pool/withdraw.vue"],"sourcesContent":["<script setup lang=\"ts\">\r\nimport { computed, ref, toRef } from 'vue';\r\n\r\nimport { tokensListExclBpt, usePool } from '@/composables/usePool';\r\nimport { useTokens } from '@/providers/tokens.provider';\r\nimport { isSameAddress } from '@/lib/utils';\r\nimport { Pool } from '@/services/pool/types';\r\nimport { TokenInfo } from '@/types/TokenList';\r\n\r\nimport useWithdrawalState from '../composables/useWithdrawalState';\r\n\r\n/**\r\n * TYPES\r\n */\r\ntype Props = {\r\n  pool: Pool;\r\n  initToken?: string;\r\n};\r\n\r\n/**\r\n * Props\r\n */\r\nconst props = withDefaults(defineProps<Props>(), {\r\n  initToken: 'all',\r\n});\r\n\r\n/**\r\n * STATE\r\n */\r\nconst selectedOption = ref(props.initToken);\r\n\r\n/**\r\n * COMPOSABLES\r\n */\r\nconst { getToken, nativeAsset } = useTokens();\r\nconst { isProportional, tokenOut } = useWithdrawalState(toRef(props, 'pool'));\r\nconst { isWethPool, isDeepPool } = usePool(toRef(props, 'pool'));\r\n\r\n/**\r\n * COMPUTED\r\n */\r\nconst tokenAddresses = computed(() => {\r\n  const tokensList = tokensListExclBpt(props.pool);\r\n  if (isDeepPool.value) return props.pool?.mainTokens || [];\r\n  if (isWethPool.value) return [nativeAsset.address, ...tokensList];\r\n  return tokensList;\r\n});\r\n\r\nconst options = computed(() => {\r\n  return ['all', ...tokenAddresses.value];\r\n});\r\n\r\nconst selectedToken = computed((): TokenInfo => getToken(selectedOption.value));\r\n\r\nconst assetSetWidth = computed(\r\n  () => 40 + (tokenAddresses.value.length - 2) * 10\r\n);\r\n\r\nfunction isOptionSelected(option: string): boolean {\r\n  if (selectedOption.value === 'all' || option === 'all') {\r\n    return selectedOption.value === option;\r\n  }\r\n  return isSameAddress(selectedOption.value, option);\r\n}\r\n\r\n/**\r\n * METHODS\r\n */\r\nfunction handleSelected(newToken: string): void {\r\n  if (newToken === 'all') {\r\n    isProportional.value = true;\r\n    selectedOption.value = 'all';\r\n  } else {\r\n    isProportional.value = false;\r\n    selectedOption.value = newToken;\r\n    tokenOut.value = newToken;\r\n  }\r\n}\r\n</script>\r\n\r\n<template>\r\n  <BalDropdown :options=\"options\" minWidth=\"44\" @selected=\"handleSelected\">\r\n    <template #activator>\r\n      <div class=\"group token-select-input selected selectable\">\r\n        <div>\r\n          <BalAssetSet\r\n            v-if=\"isProportional\"\r\n            :addresses=\"tokenAddresses\"\r\n            :width=\"50\"\r\n          />\r\n          <BalAsset\r\n            v-else\r\n            :address=\"selectedToken.address\"\r\n            class=\"mr-2 shadow\"\r\n          />\r\n        </div>\r\n        <span class=\"text-base font-medium\">\r\n          <span v-if=\"isProportional\">All tokens</span>\r\n          <span v-else>{{ selectedToken.symbol }}</span>\r\n        </span>\r\n        <BalIcon\r\n          name=\"chevron-down\"\r\n          size=\"sm\"\r\n          class=\"ml-2 text-blue-500 group-hover:text-pink-500 dark:text-blue-400 dark:group-hover:text-yellow-500 transition-colors\"\r\n        />\r\n      </div>\r\n    </template>\r\n    <template #option=\"{ option }\">\r\n      <div v-if=\"option === 'all'\" class=\"flex justify-between items-center\">\r\n        <div class=\"flex items-center\">\r\n          <BalAssetSet :addresses=\"tokenAddresses\" :width=\"assetSetWidth\" />\r\n          {{ $t('allTokens') }}\r\n        </div>\r\n        <BalIcon\r\n          v-if=\"isOptionSelected(option)\"\r\n          name=\"check\"\r\n          class=\"ml-2 text-blue-500 dark:text-blue-400\"\r\n        />\r\n      </div>\r\n      <div v-else class=\"flex justify-between items-center\">\r\n        <div class=\"flex items-center\">\r\n          <BalAsset :address=\"option\" class=\"mr-2\" />\r\n          {{ getToken(option)?.symbol }}\r\n        </div>\r\n        <BalIcon\r\n          v-if=\"isOptionSelected(option)\"\r\n          name=\"check\"\r\n          class=\"ml-2 text-blue-500 dark:text-blue-400\"\r\n        />\r\n      </div>\r\n    </template>\r\n  </BalDropdown>\r\n</template>\r\n\r\n<style scoped>\r\n.token-select-input {\r\n  @apply shadow rounded-lg flex items-center h-10 px-2 whitespace-nowrap;\r\n  @apply text-sm;\r\n\r\n  font-variation-settings: 'wght' 700;\r\n}\r\n\r\n.selectable {\r\n  @apply cursor-pointer hover:shadow-none transition-shadow;\r\n}\r\n\r\n.selected {\r\n  @apply bg-gray-50 dark:bg-gray-700 text-black dark:text-white;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n</style>\r\n","<script setup lang=\"ts\">\r\nimport BigNumber from 'bignumber.js';\r\nimport { computed, onBeforeMount, toRef, toRefs, watch } from 'vue';\r\n\r\nimport usePoolTransfers from '@/composables/contextual/pool-transfers/usePoolTransfers';\r\n// Composables\r\nimport useNumbers, { FNumFormats } from '@/composables/useNumbers';\r\nimport { isDeep, tokensListExclBpt, usePool } from '@/composables/usePool';\r\nimport { useTokens } from '@/providers/tokens.provider';\r\nimport { bnum } from '@/lib/utils';\r\n// Types\r\nimport { Pool } from '@/services/pool/types';\r\nimport useWeb3 from '@/services/web3/useWeb3';\r\nimport { TokenInfoMap } from '@/types/TokenList';\r\n\r\nimport useWithdrawalState from '../composables/useWithdrawalState';\r\nimport { WithdrawMathResponse } from '../composables/useWithdrawMath';\r\n// Components\r\nimport WithdrawalTokenSelect from './WithdrawalTokenSelect.vue';\r\nimport { debounce } from 'lodash';\r\n\r\n/**\r\n * TYPES\r\n */\r\ntype Props = {\r\n  pool: Pool;\r\n  tokenAddresses: string[];\r\n  math: WithdrawMathResponse;\r\n};\r\n\r\n/**\r\n * Props\r\n */\r\nconst props = defineProps<Props>();\r\n\r\n/**\r\n * COMPOSABLES\r\n */\r\nconst {\r\n  propBptIn,\r\n  bptBalance,\r\n  hasBpt,\r\n  fiatTotalLabel,\r\n  fiatAmounts,\r\n  proportionalAmounts,\r\n  shouldFetchBatchSwap,\r\n  loadingData,\r\n} = toRefs(props.math);\r\n\r\nconst { slider } = useWithdrawalState(toRef(props, 'pool'));\r\n\r\nconst { isWalletReady } = useWeb3();\r\nconst { missingPrices } = usePoolTransfers();\r\nconst { getTokens } = useTokens();\r\nconst { isStableLikePool } = usePool(toRef(props, 'pool'));\r\nconst { fNum } = useNumbers();\r\n\r\n/**\r\n * COMPUTED\r\n */\r\nconst tokens = computed((): TokenInfoMap => {\r\n  if (isDeep(props.pool)) {\r\n    return getTokens(props.pool.mainTokens || []);\r\n  }\r\n  return getTokens(tokensListExclBpt(props.pool));\r\n});\r\n\r\nconst percentageLabel = computed(() => {\r\n  try {\r\n    if (!hasBpt.value) return '100';\r\n\r\n    return bnum(propBptIn.value)\r\n      .div(bptBalance.value)\r\n      .times(100)\r\n      .integerValue(BigNumber.ROUND_CEIL)\r\n      .toString();\r\n  } catch (error) {\r\n    console.error(error);\r\n    return '0';\r\n  }\r\n});\r\n\r\nconst seedTokens = computed((): number[] =>\r\n  Object.values(props.pool?.onchain?.tokens || []).map(token => token.weight)\r\n);\r\n\r\n/**\r\n * METHODS\r\n */\r\nfunction handleSliderChange(newVal: number): void {\r\n  const fractionBasisPoints = (newVal / slider.value.max) * 10000;\r\n  propBptIn.value = bnum(bptBalance.value)\r\n    .times(fractionBasisPoints)\r\n    .div(10000)\r\n    .toFixed(props.pool?.onchain?.decimals || 18);\r\n\r\n  if (shouldFetchBatchSwap.value) {\r\n    delayedExitDataFetch();\r\n  }\r\n}\r\n\r\nconst delayedExitDataFetch = debounce(() => {\r\n  void props.math.fetchExitData();\r\n}, 500);\r\n\r\n/**\r\n * WATCHERS\r\n */\r\nwatch(isWalletReady, () => {\r\n  propBptIn.value = bptBalance.value;\r\n});\r\n\r\n/**\r\n * CALLBACKS\r\n */\r\nonBeforeMount(() => {\r\n  propBptIn.value = bptBalance.value;\r\n});\r\n</script>\r\n\r\n<template>\r\n  <div>\r\n    <div class=\"proportional-input\">\r\n      <div class=\"proportional-input-container\">\r\n        <div class=\"flex\">\r\n          <WithdrawalTokenSelect :pool=\"pool\" />\r\n          <div class=\"text-xl text-right grow font-numeric\">\r\n            <BalLoadingBlock v-if=\"loadingData\" class=\"float-right w-20 h-8\" />\r\n            <span v-else>{{ missingPrices ? '-' : fiatTotalLabel }}</span>\r\n          </div>\r\n        </div>\r\n        <div class=\"flex mt-2 text-sm text-secondary\">\r\n          <span>\r\n            {{ $t('proportionalWithdrawal') }}\r\n          </span>\r\n          <span class=\"text-right grow\">{{ percentageLabel }}%</span>\r\n        </div>\r\n        <BalRangeInput\r\n          v-model=\"slider.val\"\r\n          :max=\"slider.max\"\r\n          :interval=\"slider.interval\"\r\n          :min=\"slider.min\"\r\n          tooltip=\"none\"\r\n          :disabled=\"!hasBpt\"\r\n          @update:model-value=\"handleSliderChange\"\r\n        />\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"token-amounts\">\r\n      <div\r\n        v-for=\"(token, address, i) in tokens\"\r\n        :key=\"address\"\r\n        class=\"p-4 last:mb-0\"\r\n      >\r\n        <div class=\"flex justify-between items-center\">\r\n          <div class=\"flex items-center\">\r\n            <BalAsset :address=\"address\" class=\"mr-2\" />\r\n            <div class=\"flex flex-col leading-none\">\r\n              <span class=\"text-lg font-medium\">\r\n                {{ token.symbol }}\r\n                <span v-if=\"!isStableLikePool\">\r\n                  {{\r\n                    fNum(seedTokens[i], {\r\n                      style: 'percent',\r\n                      maximumFractionDigits: 0,\r\n                    })\r\n                  }}\r\n                </span>\r\n              </span>\r\n            </div>\r\n          </div>\r\n          <div\r\n            class=\"flex flex-col items-end pl-2 text-right grow font-numeric\"\r\n          >\r\n            <BalLoadingBlock v-if=\"loadingData\" class=\"w-20 h-12\" />\r\n            <template v-else>\r\n              <span class=\"text-xl break-words\">\r\n                {{ fNum(proportionalAmounts[i], FNumFormats.token) }}\r\n              </span>\r\n              <span class=\"text-sm text-gray-400\">\r\n                {{ fNum(fiatAmounts[i], FNumFormats.fiat) }}\r\n              </span>\r\n            </template>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.proportional-input {\r\n  @apply shadow-lg rounded-lg mb-4 w-full dark:bg-gray-800;\r\n}\r\n\r\n.proportional-input-container {\r\n  @apply shadow-inner p-3 pb-1 rounded-lg;\r\n  @apply border border-gray-100 dark:border-gray-800;\r\n}\r\n\r\n.token-amounts {\r\n  @apply rounded-lg;\r\n  @apply bg-gray-50 dark:bg-gray-800;\r\n  @apply border dark:border-gray-900 divide-y dark:divide-gray-900;\r\n}\r\n</style>\r\n","<script setup lang=\"ts\">\r\nimport {\r\n  TransactionReceipt,\r\n  TransactionResponse,\r\n} from '@ethersproject/abstract-provider';\r\nimport { formatUnits } from '@ethersproject/units';\r\nimport { onBeforeMount, ref, toRef, toRefs, watch } from 'vue';\r\nimport { useI18n } from 'vue-i18n';\r\n\r\nimport ConfirmationIndicator from '@/components/web3/ConfirmationIndicator.vue';\r\nimport useEthers from '@/composables/useEthers';\r\nimport { usePool } from '@/composables/usePool';\r\nimport { dateTimeLabelFor } from '@/composables/useTime';\r\nimport useNetwork from '@/composables/useNetwork';\r\nimport useTransactions from '@/composables/useTransactions';\r\nimport { boostedExitBatchSwap } from '@/lib/utils/balancer/swapper';\r\nimport { balancerContractsService } from '@/services/balancer/contracts/balancer-contracts.service';\r\n// Services\r\nimport PoolExchange from '@/services/pool/exchange/exchange.service';\r\n// Types\r\nimport { Pool } from '@/services/pool/types';\r\n// Composables\r\nimport useWeb3 from '@/services/web3/useWeb3';\r\nimport { TransactionActionInfo } from '@/types/transactions';\r\n\r\nimport useWithdrawalState from '../../../composables/useWithdrawalState';\r\nimport { WithdrawMathResponse } from '../../../composables/useWithdrawMath';\r\nimport router from '@/plugins/router';\r\nimport { Goals, trackGoal } from '@/composables/useFathom';\r\nimport { bnum } from '@/lib/utils';\r\nimport { useTokens } from '@/providers/tokens.provider';\r\n\r\n/**\r\n * TYPES\r\n */\r\ntype Props = {\r\n  pool: Pool;\r\n  math: WithdrawMathResponse;\r\n};\r\n\r\n/**\r\n * PROPS & EMITS\r\n */\r\nconst props = defineProps<Props>();\r\n\r\nconst emit = defineEmits<{\r\n  (e: 'success', value: TransactionReceipt): void;\r\n  (e: 'error'): void;\r\n}>();\r\n\r\n/**\r\n * COMPOSABLES\r\n */\r\nconst { t } = useI18n();\r\nconst { getSigner, getProvider, blockNumber } = useWeb3();\r\nconst { addTransaction } = useTransactions();\r\nconst { txListener, getTxConfirmedAt } = useEthers();\r\nconst { poolWeightsLabel } = usePool(toRef(props, 'pool'));\r\nconst {\r\n  tokenOutIndex,\r\n  tokensOut,\r\n  batchRelayerApproval,\r\n  txInProgress,\r\n  tx: txState,\r\n  resetTxState,\r\n} = useWithdrawalState(toRef(props, 'pool'));\r\nconst { networkSlug } = useNetwork();\r\nconst { refetchBalances } = useTokens();\r\n\r\nconst {\r\n  bptIn,\r\n  fiatTotalLabel,\r\n  fiatTotal,\r\n  amountsOut,\r\n  exactOut,\r\n  singleAssetMaxOut,\r\n  batchSwap,\r\n  batchSwapAmountsOutMap,\r\n  batchSwapKind,\r\n  shouldUseBatchRelayer,\r\n  batchRelayerSwap,\r\n  shouldFetchBatchSwap,\r\n} = toRefs(props.math);\r\n\r\nconst withdrawalAction: TransactionActionInfo = {\r\n  label: t('withdraw.label'),\r\n  loadingLabel: t('withdraw.preview.loadingLabel.withdraw'),\r\n  confirmingLabel: t('confirming'),\r\n  action: submit,\r\n  stepTooltip: t('withdraw.preview.tooltips.withdrawStep'),\r\n};\r\n\r\nconst actions = ref<TransactionActionInfo[]>([withdrawalAction]);\r\n\r\n/**\r\n * SERVICES\r\n */\r\nconst poolExchange = new PoolExchange(toRef(props, 'pool'));\r\n\r\n/**\r\n * METHODS\r\n */\r\nasync function handleTransaction(tx): Promise<void> {\r\n  addTransaction({\r\n    id: tx.hash,\r\n    type: 'tx',\r\n    action: 'withdraw',\r\n    summary: t('transactionSummary.withdrawFromPool', [\r\n      fiatTotalLabel.value,\r\n      poolWeightsLabel(props.pool),\r\n    ]),\r\n    details: {\r\n      total: fiatTotalLabel.value,\r\n      pool: props.pool,\r\n    },\r\n  });\r\n\r\n  txState.value.confirmed = await txListener(tx, {\r\n    onTxConfirmed: async (receipt: TransactionReceipt) => {\r\n      emit('success', receipt);\r\n      txState.value.confirming = false;\r\n      txState.value.receipt = receipt;\r\n\r\n      const confirmedAt = await getTxConfirmedAt(receipt);\r\n      txState.value.confirmedAt = dateTimeLabelFor(confirmedAt);\r\n      trackGoal(\r\n        Goals.Withdrawal,\r\n        bnum(fiatTotal.value).times(100).toNumber() || 0\r\n      );\r\n      await refetchBalances();\r\n    },\r\n    onTxFailed: () => {\r\n      txState.value.confirming = false;\r\n    },\r\n  });\r\n}\r\n\r\nasync function submit(): Promise<TransactionResponse> {\r\n  try {\r\n    let tx;\r\n    txState.value.init = true;\r\n\r\n    if (shouldUseBatchRelayer.value && batchRelayerSwap.value) {\r\n      tx = await balancerContractsService.batchRelayer.execute(\r\n        batchRelayerSwap.value,\r\n        getProvider()\r\n      );\r\n    } else if (batchSwap.value) {\r\n      tx = await boostedExitBatchSwap(\r\n        batchSwap.value.swaps,\r\n        batchSwap.value.assets,\r\n        props.pool.address,\r\n        bptIn.value,\r\n        batchSwapAmountsOutMap.value,\r\n        batchSwapKind.value\r\n      );\r\n    } else {\r\n      tx = await poolExchange.exit(\r\n        getSigner(),\r\n        amountsOut.value,\r\n        tokensOut.value,\r\n        formatUnits(bptIn.value, props.pool?.onchain?.decimals || 18),\r\n        singleAssetMaxOut.value ? tokenOutIndex.value : null,\r\n        exactOut.value\r\n      );\r\n    }\r\n\r\n    txState.value.init = false;\r\n    txState.value.confirming = true;\r\n\r\n    console.log('Receipt', tx);\r\n\r\n    handleTransaction(tx);\r\n    return tx;\r\n  } catch (error) {\r\n    txState.value.init = false;\r\n    txState.value.confirming = false;\r\n    console.error(error);\r\n    throw new Error('Failed to submit withdrawal transaction.', {\r\n      cause: error,\r\n    });\r\n  }\r\n}\r\n\r\nfunction redirectToPool() {\r\n  resetTxState();\r\n  router.push({ name: 'pool', params: { networkSlug, id: props.pool.id } });\r\n}\r\n\r\n/**\r\n * CALLBACKS\r\n */\r\nonBeforeMount(() => {\r\n  if (shouldUseBatchRelayer.value && !batchRelayerApproval.isUnlocked.value) {\r\n    // Prepend relayer approval action if batch relayer not approved\r\n    actions.value.unshift(batchRelayerApproval.action.value);\r\n  }\r\n});\r\n\r\n/**\r\n * WATCHERS\r\n */\r\nwatch(blockNumber, async () => {\r\n  if (shouldFetchBatchSwap.value && !txInProgress.value) {\r\n    await props.math.fetchExitData();\r\n    if (\r\n      batchSwap.value &&\r\n      (batchSwap.value.assets.length === 0 ||\r\n        batchSwap.value.swaps.length === 0)\r\n    )\r\n      emit('error');\r\n  }\r\n});\r\n</script>\r\n\r\n<template>\r\n  <transition>\r\n    <BalActionSteps\r\n      v-if=\"!txState.confirmed || !txState.receipt\"\r\n      :actions=\"actions\"\r\n    />\r\n    <div v-else>\r\n      <ConfirmationIndicator :txReceipt=\"txState.receipt\" />\r\n      <BalBtn color=\"gray\" outline block class=\"mt-2\" @click=\"redirectToPool\">\r\n        {{ $t('returnToPool') }}\r\n      </BalBtn>\r\n    </div>\r\n  </transition>\r\n</template>\r\n","<script setup lang=\"ts\">\r\nimport useNumbers, { FNumFormats } from '@/composables/useNumbers';\r\nimport { useUserSettings } from '@/providers/user-settings.provider';\r\nimport { Pool } from '@/services/pool/types';\r\n\r\n/**\r\n * TYPES\r\n */\r\ntype Props = {\r\n  pool: Pool;\r\n  fiatTotal: string;\r\n  priceImpact: number;\r\n};\r\n\r\n/**\r\n * PROPS & EMITS\r\n */\r\ndefineProps<Props>();\r\n\r\n/**\r\n * COMPOSABLES\r\n */\r\nconst { fNum } = useNumbers();\r\nconst { currency } = useUserSettings();\r\n</script>\r\n\r\n<template>\r\n  <BalDataList :title=\"$t('summary')\">\r\n    <BalDataListRow :label=\"$t('total')\">\r\n      <template #value>\r\n        {{ fNum(fiatTotal, FNumFormats.fiat) }}\r\n        <BalTooltip\r\n          :text=\"$t('tooltips.withdraw.total', [currency.toUpperCase()])\"\r\n          iconSize=\"sm\"\r\n          class=\"ml-2\"\r\n        />\r\n      </template>\r\n    </BalDataListRow>\r\n    <BalDataListRow :label=\"$t('priceImpact')\">\r\n      <template #value>\r\n        {{ fNum(priceImpact, FNumFormats.percent) }}\r\n        <BalTooltip\r\n          :text=\"$t('tooltips.withdraw.priceImpact')\"\r\n          iconSize=\"sm\"\r\n          width=\"72\"\r\n          class=\"ml-2\"\r\n        />\r\n      </template>\r\n    </BalDataListRow>\r\n  </BalDataList>\r\n</template>\r\n","<script setup lang=\"ts\">\r\nimport { computed, ref, toRef, toRefs, watch } from 'vue';\r\nimport { useI18n } from 'vue-i18n';\r\n\r\n// Composables\r\nimport useNumbers from '@/composables/useNumbers';\r\nimport { useTokens } from '@/providers/tokens.provider';\r\nimport { bnum } from '@/lib/utils';\r\nimport { Pool } from '@/services/pool/types';\r\nimport { TokenInfoMap } from '@/types/TokenList';\r\n\r\nimport useWithdrawalState from '../../composables/useWithdrawalState';\r\n// Types\r\nimport { WithdrawMathResponse } from '../../composables/useWithdrawMath';\r\nimport TokenAmounts from '@/components/forms/pool_actions/shared/TokenAmounts.vue';\r\nimport WithdrawActions from './components/WithdrawActions.vue';\r\n// Components\r\nimport WithdrawSummary from './components/WithdrawSummary.vue';\r\nimport useWeb3 from '@/services/web3/useWeb3';\r\n\r\n/**\r\n * TYPES\r\n */\r\ntype Props = {\r\n  pool: Pool;\r\n  math: WithdrawMathResponse;\r\n};\r\n\r\ntype AmountMap = {\r\n  [address: string]: string;\r\n};\r\n\r\n/**\r\n * PROPS & EMITS\r\n */\r\nconst props = withDefaults(defineProps<Props>(), {});\r\n\r\nconst emit = defineEmits<{\r\n  (e: 'close'): void;\r\n}>();\r\n\r\n/**\r\n * COMPOSABLES\r\n */\r\nconst { t } = useI18n();\r\nconst { getToken } = useTokens();\r\nconst { toFiat } = useNumbers();\r\nconst { fullAmounts, priceImpact, resetMath } = toRefs(props.math);\r\nconst { tokensOut, maxSlider, resetTxState } = useWithdrawalState(\r\n  toRef(props, 'pool')\r\n);\r\nconst { account } = useWeb3();\r\n\r\n/**\r\n * STATE\r\n */\r\nconst withdrawalConfirmed = ref(false);\r\n// Internal priceImpact - priceImpact from useWithdrawMaths can be dependent on\r\n// bptBalance which is updated when a tx is successful. This can result in\r\n// priceImpact becoming NaN. So in the preview modal we want it to be static.\r\nconst _priceImpact = ref(priceImpact.value);\r\n\r\n/**\r\n * COMPUTED\r\n */\r\nconst title = computed((): string =>\r\n  withdrawalConfirmed.value\r\n    ? t('withdraw.preview.titles.confirmed')\r\n    : t('withdraw.preview.titles.default')\r\n);\r\n\r\nconst amountMap = computed((): AmountMap => {\r\n  const amountMap = {};\r\n  fullAmounts.value.forEach((amount, i) => {\r\n    if (hasAmount(i)) amountMap[tokensOut.value[i]] = amount;\r\n  });\r\n  return amountMap;\r\n});\r\n\r\nconst tokenMap = computed((): TokenInfoMap => {\r\n  const tokenMap = {};\r\n  Object.keys(amountMap.value).forEach(address => {\r\n    tokenMap[address] = getToken(address);\r\n  });\r\n  return tokenMap;\r\n});\r\n\r\nconst fiatAmountMap = computed((): AmountMap => {\r\n  const fiatAmountMap = {};\r\n  Object.keys(amountMap.value).forEach(address => {\r\n    fiatAmountMap[address] = toFiat(amountMap.value[address], address);\r\n  });\r\n  return fiatAmountMap;\r\n});\r\n\r\nconst fiatTotal = computed((): string =>\r\n  Object.values(fiatAmountMap.value).reduce(\r\n    (total, amount) => bnum(total).plus(amount).toString(),\r\n    '0'\r\n  )\r\n);\r\n\r\n/**\r\n * METHODS\r\n */\r\nfunction hasAmount(index: number): boolean {\r\n  return bnum(fullAmounts.value[index]).gt(0);\r\n}\r\n\r\nfunction handleClose(): void {\r\n  resetTxState();\r\n  if (withdrawalConfirmed.value) {\r\n    resetMath.value();\r\n    maxSlider();\r\n  }\r\n  emit('close');\r\n}\r\n\r\n/**\r\n * WATCHERS\r\n */\r\nwatch(account, () => emit('close'));\r\n</script>\r\n\r\n<template>\r\n  <BalModal show :fireworks=\"withdrawalConfirmed\" @close=\"handleClose\">\r\n    <template #header>\r\n      <div class=\"flex items-center\">\r\n        <BalCircle\r\n          v-if=\"withdrawalConfirmed\"\r\n          size=\"8\"\r\n          color=\"green\"\r\n          class=\"mr-2 text-white\"\r\n        >\r\n          <BalIcon name=\"check\" />\r\n        </BalCircle>\r\n        <h4>\r\n          {{ title }}\r\n        </h4>\r\n      </div>\r\n    </template>\r\n\r\n    <TokenAmounts\r\n      :amountMap=\"amountMap\"\r\n      :tokenMap=\"tokenMap\"\r\n      :fiatAmountMap=\"fiatAmountMap\"\r\n      :fiatTotal=\"fiatTotal\"\r\n    />\r\n\r\n    <WithdrawSummary\r\n      :pool=\"pool\"\r\n      :fiatTotal=\"fiatTotal\"\r\n      :priceImpact=\"_priceImpact\"\r\n    />\r\n\r\n    <WithdrawActions\r\n      :pool=\"pool\"\r\n      :math=\"math\"\r\n      class=\"mt-4\"\r\n      @error=\"$emit('close')\"\r\n      @success=\"withdrawalConfirmed = true\"\r\n    />\r\n  </BalModal>\r\n</template>\r\n","<script setup lang=\"ts\">\r\nimport { computed, toRefs } from 'vue';\r\n\r\nimport useNumbers, { FNumFormats } from '@/composables/useNumbers';\r\n\r\nimport { WithdrawMathResponse } from '../composables/useWithdrawMath';\r\n\r\n/**\r\n * TYPES\r\n */\r\ntype Props = {\r\n  math: WithdrawMathResponse;\r\n};\r\n\r\n/**\r\n * Props\r\n */\r\nconst props = defineProps<Props>();\r\n\r\n/**\r\n * COMPOSABLES\r\n */\r\nconst { fNum } = useNumbers();\r\n\r\nconst { priceImpact, highPriceImpact, loadingData } = toRefs(props.math);\r\n\r\n/**\r\n * COMPUTED\r\n */\r\nconst priceImpactClasses = computed(() => ({\r\n  'bg-red-500 text-white divide-red-400 border-none': highPriceImpact.value,\r\n}));\r\n</script>\r\n\r\n<template>\r\n  <div class=\"data-table\">\r\n    <div :class=\"['data-table-row', priceImpactClasses]\">\r\n      <div class=\"p-2\">\r\n        {{ $t('priceImpact') }}\r\n      </div>\r\n      <div class=\"data-table-number-col\">\r\n        <div class=\"flex items-center\">\r\n          <BalLoadingBlock v-if=\"loadingData\" class=\"w-10 h-6\" />\r\n          <span v-else>{{ fNum(priceImpact, FNumFormats.percent) }}</span>\r\n\r\n          <BalTooltip :text=\"$t('withdraw.tooltips.priceImpact')\">\r\n            <template #activator>\r\n              <BalIcon\r\n                v-if=\"highPriceImpact\"\r\n                name=\"alert-triangle\"\r\n                size=\"xs\"\r\n                class=\"-mb-px ml-1\"\r\n              />\r\n              <BalIcon\r\n                v-else\r\n                name=\"info\"\r\n                size=\"xs\"\r\n                class=\"-mb-px ml-1 text-gray-400\"\r\n              />\r\n            </template>\r\n          </BalTooltip>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.data-table {\r\n  @apply rounded-lg divide-y dark:divide-gray-700;\r\n}\r\n\r\n.data-table-row {\r\n  @apply flex;\r\n  @apply rounded-lg;\r\n  @apply divide-x dark:divide-gray-900 border dark:border-gray-900;\r\n  @apply dark:bg-gray-800;\r\n}\r\n\r\n.data-table-number-col {\r\n  @apply p-2 flex grow items-center justify-between;\r\n}\r\n\r\n.total-row {\r\n  @apply text-lg font-semibold;\r\n}\r\n</style>\r\n","<script setup lang=\"ts\">\r\nimport { computed, onBeforeMount, ref, toRef, watch } from 'vue';\r\nimport { useI18n } from 'vue-i18n';\r\n\r\n// Components\r\nimport TokenInput from '@/components/inputs/TokenInput/TokenInput.vue';\r\nimport { isLessThanOrEqualTo, isRequired } from '@/lib/utils/validations';\r\nimport { Pool } from '@/services/pool/types';\r\nimport useWeb3 from '@/services/web3/useWeb3';\r\n\r\nimport ProportionalWithdrawalInput from './components/ProportionalWithdrawalInput.vue';\r\nimport WithdrawalTokenSelect from './components/WithdrawalTokenSelect.vue';\r\nimport WithdrawPreviewModal from './components/WithdrawPreviewModal/WithdrawPreviewModal.vue';\r\nimport WithdrawTotals from './components/WithdrawTotals.vue';\r\nimport useWithdrawalState from './composables/useWithdrawalState';\r\n// Composables\r\nimport useWithdrawMath from './composables/useWithdrawMath';\r\n\r\n/**\r\n * TYPES\r\n */\r\ntype Props = {\r\n  pool: Pool;\r\n};\r\n\r\n/**\r\n * PROPS & EMITS\r\n */\r\nconst props = defineProps<Props>();\r\n\r\nconst showPreview = ref(false);\r\n\r\n/**\r\n * COMPOSABLES\r\n */\r\nconst { t } = useI18n();\r\n\r\nconst {\r\n  isProportional,\r\n  tokenOut,\r\n  tokenOutIndex,\r\n  highPriceImpactAccepted,\r\n  validInput,\r\n  maxSlider,\r\n  tokensOut,\r\n  error,\r\n  parseError,\r\n  setError,\r\n  txInProgress,\r\n} = useWithdrawalState(toRef(props, 'pool'));\r\n\r\nconst withdrawMath = useWithdrawMath(\r\n  toRef(props, 'pool'),\r\n  isProportional,\r\n  tokensOut,\r\n  tokenOut,\r\n  tokenOutIndex\r\n);\r\n\r\nconst {\r\n  hasAmounts,\r\n  highPriceImpact,\r\n  singleAssetMaxes,\r\n  tokenOutAmount,\r\n  tokenOutPoolBalance,\r\n  loadingData,\r\n  bptBalance,\r\n  initMath,\r\n  resetMath,\r\n} = withdrawMath;\r\n\r\nconst { isWalletReady, startConnectWithInjectedProvider, isMismatchedNetwork } =\r\n  useWeb3();\r\n\r\n/**\r\n * COMPUTED\r\n */\r\nconst hasAcceptedHighPriceImpact = computed((): boolean =>\r\n  highPriceImpact.value ? highPriceImpactAccepted.value : true\r\n);\r\n\r\nconst hasValidInputs = computed(\r\n  (): boolean => validInput.value && hasAcceptedHighPriceImpact.value\r\n);\r\n\r\nconst singleAssetRules = computed(() => [\r\n  isLessThanOrEqualTo(tokenOutPoolBalance.value, t('exceedsPoolBalance')),\r\n]);\r\n\r\n/**\r\n * WATCHERS\r\n */\r\nwatch(isProportional, newVal => {\r\n  // If user selects to withdraw all tokens proportionally\r\n  // reset the slider to max.\r\n  if (newVal) {\r\n    initMath();\r\n    maxSlider();\r\n  }\r\n});\r\n\r\nwatch(bptBalance, () => {\r\n  if (!txInProgress.value) {\r\n    // The user's BPT balance has changed in the background. Reset maths so\r\n    // they're working with up to date values.\r\n    resetMath();\r\n  }\r\n});\r\n\r\n/**\r\n * CALLBACKS\r\n */\r\nonBeforeMount(() => {\r\n  isProportional.value = true;\r\n  initMath();\r\n  maxSlider();\r\n});\r\n</script>\r\n\r\n<template>\r\n  <div>\r\n    <ProportionalWithdrawalInput\r\n      v-if=\"isProportional\"\r\n      :pool=\"pool\"\r\n      :tokenAddresses=\"tokensOut\"\r\n      :math=\"withdrawMath\"\r\n    />\r\n    <TokenInput\r\n      v-else\r\n      v-model:amount=\"tokenOutAmount\"\r\n      v-model:isValid=\"validInput\"\r\n      :name=\"tokenOut\"\r\n      :address=\"tokenOut\"\r\n      :disableBalance=\"singleAssetMaxes[tokenOutIndex] === '-'\"\r\n      :customBalance=\"singleAssetMaxes[tokenOutIndex] || '0'\"\r\n      :rules=\"singleAssetRules\"\r\n      :balanceLabel=\"$t('singleTokenMax')\"\r\n      :balanceLoading=\"loadingData\"\r\n      fixedToken\r\n      disableNativeAssetBuffer\r\n    >\r\n      <template #tokenSelect>\r\n        <WithdrawalTokenSelect :pool=\"pool\" :initToken=\"tokenOut\" />\r\n      </template>\r\n    </TokenInput>\r\n\r\n    <WithdrawTotals :math=\"withdrawMath\" class=\"mt-4\" />\r\n\r\n    <div\r\n      v-if=\"highPriceImpact\"\r\n      class=\"p-2 pb-2 mt-4 rounded-lg border dark:border-gray-700\"\r\n    >\r\n      <BalCheckbox\r\n        v-model=\"highPriceImpactAccepted\"\r\n        :rules=\"[isRequired($t('priceImpactCheckbox'))]\"\r\n        name=\"highPriceImpactAccepted\"\r\n        size=\"sm\"\r\n        :label=\"$t('priceImpactAccept', [$t('withdrawing')])\"\r\n      />\r\n    </div>\r\n\r\n    <BalAlert\r\n      v-if=\"error !== null\"\r\n      type=\"error\"\r\n      :title=\"parseError(error).title\"\r\n      :description=\"parseError(error).description\"\r\n      class=\"mt-4\"\r\n      block\r\n      actionLabel=\"Dismiss\"\r\n      @action-click=\"setError(null)\"\r\n    />\r\n\r\n    <div class=\"mt-4\">\r\n      <BalBtn\r\n        v-if=\"!isWalletReady\"\r\n        :label=\"$t('connectWallet')\"\r\n        color=\"gradient\"\r\n        block\r\n        @click=\"startConnectWithInjectedProvider\"\r\n      />\r\n      <BalBtn\r\n        v-else\r\n        :label=\"$t('preview')\"\r\n        color=\"gradient\"\r\n        :disabled=\"\r\n          !hasAmounts || !hasValidInputs || isMismatchedNetwork || loadingData\r\n        \"\r\n        block\r\n        @click=\"showPreview = true\"\r\n      />\r\n    </div>\r\n\r\n    <teleport to=\"#modal\">\r\n      <WithdrawPreviewModal\r\n        v-if=\"showPreview\"\r\n        :pool=\"pool\"\r\n        :math=\"withdrawMath\"\r\n        @close=\"showPreview = false\"\r\n      />\r\n    </teleport>\r\n  </div>\r\n</template>\r\n","import { Address, BalancerSDK } from '@balancer-labs/sdk';\r\nimport { AmountOut } from '@/providers/local/exit-pool.provider';\r\nimport { TokenPrices } from '@/services/coingecko/api/price.service';\r\nimport { GasPriceService } from '@/services/gas-price/gas-price.service';\r\nimport { Pool } from '@/services/pool/types';\r\nimport { TokenInfoMap } from '@/types/TokenList';\r\nimport { TransactionResponse } from '@ethersproject/abstract-provider';\r\nimport { Ref } from 'vue';\r\nimport { JsonRpcSigner } from '@ethersproject/providers';\r\nimport { TransactionActionInfo } from '@/types/transactions';\r\n\r\nexport type AmountsOut = Record<Address, string>;\r\n\r\nexport enum ExitType {\r\n  GivenIn, // When BPT in is specified.\r\n  GivenOut, // When an amount out is specified.\r\n}\r\n\r\nexport type ExitParams = {\r\n  exitType: ExitType;\r\n  bptIn: string;\r\n  amountsOut: AmountOut[];\r\n  tokenInfo: TokenInfoMap;\r\n  prices: TokenPrices;\r\n  signer: JsonRpcSigner;\r\n  slippageBsp: number;\r\n  relayerSignature?: string;\r\n  bptInValid: boolean;\r\n  approvalActions: TransactionActionInfo[];\r\n  transactionDeadline: number;\r\n};\r\n\r\nexport type QueryOutput = {\r\n  priceImpact: number;\r\n  amountsOut: AmountsOut;\r\n};\r\n\r\nexport abstract class ExitPoolHandler {\r\n  constructor(\r\n    public readonly pool: Ref<Pool>,\r\n    public readonly sdk: BalancerSDK,\r\n    public readonly gasPriceService: GasPriceService\r\n  ) {}\r\n\r\n  abstract exit(params: ExitParams): Promise<TransactionResponse>;\r\n\r\n  abstract queryExit(params: ExitParams): Promise<QueryOutput>;\r\n}\r\n","import { overflowProtected } from '@/components/_global/BalTextInput/helpers';\r\nimport { getTimestampSecondsFromNow } from '@/composables/useTime';\r\nimport { POOLS } from '@/constants/pools';\r\nimport { NATIVE_ASSET_ADDRESS } from '@/constants/tokens';\r\nimport { fetchPoolsForSor, hasFetchedPoolsForSor } from '@/lib/balancer.sdk';\r\nimport { bnum, isSameAddress, selectByAddress } from '@/lib/utils';\r\nimport { vaultService } from '@/services/contracts/vault.service';\r\nimport { GasPriceService } from '@/services/gas-price/gas-price.service';\r\nimport { Pool } from '@/services/pool/types';\r\nimport { BalancerSDK, BatchSwap, SwapInfo, SwapType } from '@balancer-labs/sdk';\r\nimport { TransactionResponse } from '@ethersproject/abstract-provider';\r\nimport { BigNumber, formatFixed, parseFixed } from '@ethersproject/bignumber';\r\nimport { JsonRpcSigner } from '@ethersproject/providers';\r\nimport { Ref } from 'vue';\r\nimport {\r\n  ExitParams,\r\n  ExitPoolHandler,\r\n  ExitType,\r\n  QueryOutput,\r\n} from './exit-pool.handler';\r\n\r\n/**\r\n * Handles exits for single asset flows where we need to use a BatchSwap to exit\r\n * the pool.\r\n */\r\nexport class SwapExitHandler implements ExitPoolHandler {\r\n  private lastSwapRoute?: SwapInfo;\r\n\r\n  constructor(\r\n    public readonly pool: Ref<Pool>,\r\n    public readonly sdk: BalancerSDK,\r\n    public readonly gasPriceService: GasPriceService\r\n  ) {}\r\n\r\n  async exit(params: ExitParams): Promise<TransactionResponse> {\r\n    const userAddress = await params.signer.getAddress();\r\n    await this.queryExit(params);\r\n    if (!this.lastSwapRoute)\r\n      throw new Error('Could not fetch swap route for join.');\r\n\r\n    const swap = this.getSwapAttributes(\r\n      params.exitType,\r\n      this.lastSwapRoute,\r\n      params.slippageBsp,\r\n      userAddress\r\n    );\r\n\r\n    const { kind, swaps, assets, funds, limits } = swap.attributes as BatchSwap;\r\n    return vaultService.batchSwap(\r\n      kind,\r\n      swaps,\r\n      assets,\r\n      funds,\r\n      limits as string[],\r\n      params.transactionDeadline\r\n    );\r\n  }\r\n\r\n  async queryExit(params: ExitParams): Promise<QueryOutput> {\r\n    if (params.exitType === ExitType.GivenIn) {\r\n      return this.queryOutGivenIn(params);\r\n    } else {\r\n      return this.queryInGivenOut(params);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * PRIVATE\r\n   */\r\n\r\n  /**\r\n   * Get swap given bptIn, this only used in exits when the user clicks to\r\n   * maximize their withdrawal, i.e. we have to send their full BPT balance.\r\n   */\r\n  private async queryOutGivenIn({\r\n    bptIn,\r\n    tokenInfo,\r\n    amountsOut,\r\n    signer,\r\n  }: ExitParams): Promise<QueryOutput> {\r\n    const amountIn = bptIn;\r\n    const tokenIn = selectByAddress(tokenInfo, this.pool.value.address);\r\n\r\n    const tokenOut = tokenInfo[amountsOut[0].address];\r\n\r\n    if (!tokenIn || !tokenOut)\r\n      throw new Error('Missing critical token metadata.');\r\n    if (!amountIn || bnum(amountIn).eq(0))\r\n      return { amountsOut: { [tokenOut.address]: '0' }, priceImpact: 0 };\r\n\r\n    if (!hasFetchedPoolsForSor.value) await fetchPoolsForSor();\r\n\r\n    const safeAmountIn = overflowProtected(bptIn, tokenIn.decimals);\r\n    const bnumAmountIn = parseFixed(safeAmountIn, tokenIn.decimals);\r\n    const gasPrice = await this.getGasPrice(signer);\r\n\r\n    this.lastSwapRoute = await this.sdk.swaps.findRouteGivenIn({\r\n      tokenIn: tokenIn.address,\r\n      tokenOut: this.formatAddressForSor(tokenOut.address),\r\n      amount: bnumAmountIn,\r\n      gasPrice,\r\n      maxPools: 4,\r\n    });\r\n\r\n    const amountOut = formatFixed(\r\n      this.lastSwapRoute.returnAmount,\r\n      tokenOut.decimals\r\n    );\r\n    if (bnum(amountOut).eq(0)) throw new Error('Not enough liquidity.');\r\n\r\n    const priceImpact = this.calcPriceImpact(\r\n      amountIn,\r\n      amountOut,\r\n      this.lastSwapRoute.marketSp\r\n    );\r\n\r\n    return { amountsOut: { [tokenOut.address]: amountOut }, priceImpact };\r\n  }\r\n\r\n  /**\r\n   * Get swap given specified amount out.\r\n   */\r\n  private async queryInGivenOut({\r\n    tokenInfo,\r\n    amountsOut,\r\n    signer,\r\n  }: ExitParams): Promise<QueryOutput> {\r\n    const tokenIn = selectByAddress(tokenInfo, this.pool.value.address);\r\n    const tokenOut = selectByAddress(tokenInfo, amountsOut[0].address);\r\n    if (!tokenIn || !tokenOut)\r\n      throw new Error('Missing critical token metadata.');\r\n\r\n    const amountOut = amountsOut[0].value;\r\n    if (!amountOut || bnum(amountOut).eq(0))\r\n      return { amountsOut: {}, priceImpact: 0 };\r\n\r\n    if (!hasFetchedPoolsForSor.value) await fetchPoolsForSor();\r\n\r\n    const safeAmountOut = overflowProtected(\r\n      amountsOut[0].value,\r\n      tokenOut.decimals\r\n    );\r\n    const bnumAmountOut = parseFixed(safeAmountOut, tokenOut.decimals);\r\n    const gasPrice = await this.getGasPrice(signer);\r\n\r\n    this.lastSwapRoute = await this.sdk.swaps.findRouteGivenOut({\r\n      tokenIn: tokenIn.address,\r\n      tokenOut: this.formatAddressForSor(tokenOut.address),\r\n      amount: bnumAmountOut,\r\n      gasPrice,\r\n      maxPools: 4,\r\n    });\r\n\r\n    const amountIn = formatFixed(\r\n      this.lastSwapRoute.returnAmount,\r\n      tokenIn.decimals\r\n    );\r\n    if (bnum(amountIn).eq(0)) throw new Error('Not enough liquidity.');\r\n\r\n    const priceImpact = this.calcPriceImpact(\r\n      amountIn,\r\n      amountOut,\r\n      this.lastSwapRoute.marketSp\r\n    );\r\n\r\n    return { amountsOut: { [tokenOut.address]: amountOut }, priceImpact };\r\n  }\r\n\r\n  private async getGasPrice(signer: JsonRpcSigner): Promise<BigNumber> {\r\n    let price: number;\r\n\r\n    const gasPriceParams = await this.gasPriceService.getGasPrice();\r\n    if (gasPriceParams) {\r\n      price = gasPriceParams.price;\r\n    } else {\r\n      price = (await signer.getGasPrice()).toNumber();\r\n    }\r\n\r\n    if (!price) throw new Error('Failed to fetch gas price.');\r\n\r\n    return BigNumber.from(price);\r\n  }\r\n\r\n  private calcPriceImpact(\r\n    amountIn: string,\r\n    amountOut: string,\r\n    marketSp: string\r\n  ): number {\r\n    const effectivePrice = bnum(amountIn).div(amountOut);\r\n    const priceImpact = effectivePrice.div(marketSp).minus(1) || 1; // If fails to calculate return error value of 100%\r\n\r\n    // Don't return negative price impact\r\n    return Math.max(0, priceImpact.toNumber());\r\n  }\r\n\r\n  private getSwapAttributes(\r\n    exitType: ExitType,\r\n    swapInfo: SwapInfo,\r\n    maxSlippage: number,\r\n    userAddress: string\r\n  ) {\r\n    const deadline = BigNumber.from(getTimestampSecondsFromNow(60)); // 60 seconds from now\r\n    const kind =\r\n      exitType === ExitType.GivenIn\r\n        ? SwapType.SwapExactIn\r\n        : SwapType.SwapExactOut;\r\n\r\n    return this.sdk.swaps.buildSwap({\r\n      userAddress,\r\n      swapInfo,\r\n      kind,\r\n      deadline,\r\n      maxSlippage,\r\n    });\r\n  }\r\n\r\n  private formatAddressForSor(address: string): string {\r\n    return isSameAddress(address, NATIVE_ASSET_ADDRESS)\r\n      ? POOLS.ZeroAddress\r\n      : address;\r\n  }\r\n}\r\n","import { GasPriceService } from '@/services/gas-price/gas-price.service';\r\nimport { Pool } from '@/services/pool/types';\r\nimport { BalancerSDK, SimulationType } from '@balancer-labs/sdk';\r\nimport { TransactionResponse } from '@ethersproject/abstract-provider';\r\nimport { Ref } from 'vue';\r\nimport {\r\n  ExitParams,\r\n  ExitPoolHandler,\r\n  QueryOutput,\r\n  AmountsOut,\r\n} from './exit-pool.handler';\r\nimport { getBalancer } from '@/dependencies/balancer-sdk';\r\nimport { formatFixed, parseFixed } from '@ethersproject/bignumber';\r\nimport { bnum, isSameAddress } from '@/lib/utils';\r\nimport { flatTokenTree } from '@/composables/usePool';\r\nimport { getAddress } from '@ethersproject/address';\r\nimport { TransactionBuilder } from '@/services/web3/transactions/transaction.builder';\r\n\r\nconst balancer = getBalancer();\r\ntype ExitResponse = Awaited<ReturnType<typeof balancer.pools.generalisedExit>>;\r\n\r\n/**\r\n * Handles exits using SDK's generalisedExit function.\r\n */\r\nexport class GeneralisedExitHandler implements ExitPoolHandler {\r\n  private lastExitRes?: ExitResponse;\r\n\r\n  constructor(\r\n    public readonly pool: Ref<Pool>,\r\n    public readonly sdk: BalancerSDK,\r\n    public readonly gasPriceService: GasPriceService\r\n  ) {}\r\n\r\n  async exit(params: ExitParams): Promise<TransactionResponse> {\r\n    await this.queryExit(params);\r\n\r\n    if (!this.lastExitRes) {\r\n      throw new Error('Could not query generalised exit');\r\n    }\r\n\r\n    const txBuilder = new TransactionBuilder(params.signer);\r\n    const { to, encodedCall } = this.lastExitRes;\r\n\r\n    return txBuilder.raw.sendTransaction({ to, data: encodedCall });\r\n  }\r\n\r\n  async queryExit({\r\n    bptIn,\r\n    signer,\r\n    slippageBsp,\r\n    relayerSignature,\r\n    approvalActions,\r\n    bptInValid,\r\n  }: ExitParams): Promise<QueryOutput> {\r\n    const evmAmountIn = parseFixed(\r\n      bptIn || '0',\r\n      this.pool.value.onchain?.decimals ?? 18\r\n    );\r\n\r\n    if (evmAmountIn.lte(0)) throw new Error('BPT in amount is 0.');\r\n\r\n    const signerAddress = await signer.getAddress();\r\n    const slippage = slippageBsp.toString();\r\n\r\n    // Static call simulation is more accurate than VaultModel, but requires relayer approval and\r\n    // account to have enough BPT balance\r\n    const simulationType: SimulationType =\r\n      bptInValid && !approvalActions.length\r\n        ? SimulationType.Static\r\n        : SimulationType.VaultModel;\r\n\r\n    console.log({ simulationType });\r\n\r\n    this.lastExitRes = await balancer.pools\r\n      .generalisedExit(\r\n        this.pool.value.id,\r\n        evmAmountIn.toString(),\r\n        signerAddress,\r\n        slippage,\r\n        signer,\r\n        simulationType,\r\n        relayerSignature\r\n      )\r\n      .catch(err => {\r\n        console.error(err);\r\n        throw new Error('Failed to query exit.');\r\n      });\r\n\r\n    if (!this.lastExitRes) throw new Error('Failed to query exit.');\r\n\r\n    const priceImpact: number = bnum(\r\n      formatFixed(this.lastExitRes.priceImpact, 18)\r\n    ).toNumber();\r\n\r\n    return {\r\n      priceImpact,\r\n      amountsOut: this.formatAmountsOut(this.lastExitRes),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * PRIVATE METHODS\r\n   */\r\n  private formatAmountsOut(exitRes: ExitResponse): AmountsOut {\r\n    const amountsOut: AmountsOut = {};\r\n    const allPoolTokens = flatTokenTree(this.pool.value);\r\n\r\n    exitRes.expectedAmountsOut.forEach((amount, i) => {\r\n      const token = allPoolTokens.find(poolToken =>\r\n        isSameAddress(poolToken.address, exitRes.tokensOut[i])\r\n      );\r\n\r\n      if (token) {\r\n        const realAddress = getAddress(token.address);\r\n        const scaledAmount = formatFixed(\r\n          amount,\r\n          token.decimals ?? 18\r\n        ).toString();\r\n        amountsOut[realAddress] = scaledAmount;\r\n      }\r\n    });\r\n\r\n    return amountsOut;\r\n  }\r\n}\r\n","import { getBalancer } from '@/dependencies/balancer-sdk';\r\nimport { GasPriceService } from '@/services/gas-price/gas-price.service';\r\nimport { Pool } from '@/services/pool/types';\r\nimport { BalancerSDK, PoolWithMethods } from '@balancer-labs/sdk';\r\nimport { TransactionResponse } from '@ethersproject/abstract-provider';\r\nimport { Ref } from 'vue';\r\nimport { ExitParams, ExitPoolHandler, QueryOutput } from './exit-pool.handler';\r\nimport { formatFixed, parseFixed } from '@ethersproject/bignumber';\r\nimport { indexOfAddress, selectByAddress } from '@/lib/utils';\r\nimport { TransactionBuilder } from '@/services/web3/transactions/transaction.builder';\r\nimport { TokenInfo } from '@/types/TokenList';\r\n\r\n/**\r\n * Handles cases where BPT in is set for the exit using SDK's\r\n * buildExitExactBPTIn function.\r\n */\r\nexport class ExactInExitHandler implements ExitPoolHandler {\r\n  private lastExitRes?: ReturnType<PoolWithMethods['buildExitExactBPTIn']>;\r\n\r\n  constructor(\r\n    public readonly pool: Ref<Pool>,\r\n    public readonly sdk: BalancerSDK,\r\n    public readonly gasPriceService: GasPriceService\r\n  ) {}\r\n\r\n  async exit(params: ExitParams): Promise<TransactionResponse> {\r\n    await this.queryExit(params);\r\n\r\n    if (!this.lastExitRes) throw new Error('Failed to construct exit.');\r\n\r\n    const txBuilder = new TransactionBuilder(params.signer);\r\n    const { to, data } = this.lastExitRes;\r\n\r\n    return txBuilder.raw.sendTransaction({ to, data });\r\n  }\r\n\r\n  async queryExit(params: ExitParams): Promise<QueryOutput> {\r\n    const { signer, tokenInfo, bptIn, slippageBsp, amountsOut } = params;\r\n    const shouldUnwrapNativeAsset = false;\r\n    const exiter = await signer.getAddress();\r\n    const slippage = slippageBsp.toString();\r\n    const sdkPool = await getBalancer().pools.find(this.pool.value.id);\r\n    const tokenOut = selectByAddress(tokenInfo, amountsOut[0].address);\r\n\r\n    if (!sdkPool) throw new Error('Failed to find pool: ' + this.pool.value.id);\r\n    if (!tokenOut)\r\n      throw new Error('Could not find exit token in pool tokens list.');\r\n\r\n    const tokenOutAddress = tokenOut.address;\r\n    const tokenOutIndex = indexOfAddress(\r\n      this.pool.value.tokensList,\r\n      tokenOutAddress\r\n    );\r\n\r\n    const evmBptIn = parseFixed(bptIn, 18).toString();\r\n    const singleTokenMaxOut =\r\n      amountsOut.length === 1\r\n        ? // TODO: Fix this in the SDK, then remove this toLowerCase\r\n          tokenOutAddress.toLowerCase()\r\n        : undefined;\r\n\r\n    this.lastExitRes = await sdkPool.buildExitExactBPTIn(\r\n      exiter,\r\n      evmBptIn,\r\n      slippage,\r\n      shouldUnwrapNativeAsset,\r\n      singleTokenMaxOut\r\n    );\r\n    if (!this.lastExitRes) throw new Error('Failed to construct exit.');\r\n\r\n    const expectedAmountsOut = this.lastExitRes.expectedAmountsOut;\r\n\r\n    // Because this is an exit we need to pass amountsOut as the amountsIn and\r\n    // bptIn as the minBptOut to this calcPriceImpact function.\r\n    const evmPriceImpact = await sdkPool.calcPriceImpact(\r\n      expectedAmountsOut,\r\n      evmBptIn,\r\n      false\r\n    );\r\n\r\n    const priceImpact = Number(formatFixed(evmPriceImpact, 18));\r\n    const normalizedAmountOut = this.normalizeAmountOut(\r\n      expectedAmountsOut,\r\n      tokenOutIndex,\r\n      tokenOut\r\n    );\r\n\r\n    return {\r\n      amountsOut: { [tokenOutAddress]: normalizedAmountOut },\r\n      priceImpact,\r\n    };\r\n  }\r\n\r\n  private normalizeAmountOut(\r\n    amountsOut: string[],\r\n    tokenOutIndex: number,\r\n    tokenOut: TokenInfo\r\n  ) {\r\n    const amountOut = amountsOut[tokenOutIndex];\r\n    return formatFixed(amountOut, tokenOut.decimals).toString();\r\n  }\r\n}\r\n","import { getBalancer } from '@/dependencies/balancer-sdk';\r\nimport { indexOfAddress, selectByAddress } from '@/lib/utils';\r\nimport { GasPriceService } from '@/services/gas-price/gas-price.service';\r\nimport { Pool } from '@/services/pool/types';\r\nimport { TransactionBuilder } from '@/services/web3/transactions/transaction.builder';\r\nimport { BalancerSDK, PoolWithMethods } from '@balancer-labs/sdk';\r\nimport { TransactionResponse } from '@ethersproject/abstract-provider';\r\nimport { formatFixed, parseFixed } from '@ethersproject/bignumber';\r\nimport { Ref } from 'vue';\r\nimport { ExitParams, ExitPoolHandler, QueryOutput } from './exit-pool.handler';\r\n\r\n/**\r\n * Handles cases where tokens out are specified for the exit using SDK's\r\n * buildExitExactTokensOut function.\r\n */\r\nexport class ExactOutExitHandler implements ExitPoolHandler {\r\n  private lastExitRes?: ReturnType<PoolWithMethods['buildExitExactTokensOut']>;\r\n\r\n  constructor(\r\n    public readonly pool: Ref<Pool>,\r\n    public readonly sdk: BalancerSDK,\r\n    public readonly gasPriceService: GasPriceService\r\n  ) {}\r\n\r\n  async exit(params: ExitParams): Promise<TransactionResponse> {\r\n    await this.queryExit(params);\r\n\r\n    if (!this.lastExitRes) throw new Error('Failed to construct exit.');\r\n\r\n    const txBuilder = new TransactionBuilder(params.signer);\r\n    const { to, data } = this.lastExitRes;\r\n\r\n    return txBuilder.raw.sendTransaction({ to, data });\r\n  }\r\n\r\n  async queryExit(params: ExitParams): Promise<QueryOutput> {\r\n    const { signer, tokenInfo, slippageBsp, amountsOut } = params;\r\n    const exiter = await signer.getAddress();\r\n    const slippage = slippageBsp.toString();\r\n    const sdkPool = await getBalancer().pools.find(this.pool.value.id);\r\n    const tokenOut = selectByAddress(tokenInfo, amountsOut[0].address);\r\n\r\n    if (!sdkPool) throw new Error('Failed to find pool: ' + this.pool.value.id);\r\n    if (!tokenOut)\r\n      throw new Error('Could not find exit token in pool tokens list.');\r\n\r\n    const tokenOutAddress = tokenOut.address;\r\n    const tokenOutIndex = indexOfAddress(\r\n      this.pool.value.tokensList,\r\n      tokenOutAddress\r\n    );\r\n\r\n    const amountOut = amountsOut[0].value;\r\n    const evmAmountOut = parseFixed(amountOut, tokenOut.decimals).toString();\r\n\r\n    const fullAmountsOut = this.getFullAmounts(\r\n      this.pool.value.tokensList,\r\n      tokenOutIndex,\r\n      evmAmountOut\r\n    );\r\n\r\n    this.lastExitRes = await sdkPool.buildExitExactTokensOut(\r\n      exiter,\r\n      this.pool.value.tokensList,\r\n      fullAmountsOut,\r\n      slippage\r\n    );\r\n    if (!this.lastExitRes) throw new Error('Failed to construct exit.');\r\n\r\n    // Because this is an exit we need to pass amountsOut as the amountsIn and\r\n    // bptIn as the minBptOut to this calcPriceImpact function.\r\n    const evmPriceImpact = await sdkPool.calcPriceImpact(\r\n      fullAmountsOut,\r\n      this.lastExitRes.expectedBPTIn,\r\n      false\r\n    );\r\n\r\n    const priceImpact = Number(formatFixed(evmPriceImpact, 18));\r\n\r\n    return {\r\n      amountsOut: { [tokenOutAddress]: amountOut },\r\n      priceImpact,\r\n    };\r\n  }\r\n\r\n  private getFullAmounts(\r\n    poolTokens: string[],\r\n    tokenOutIndex: number,\r\n    tokenOutAmount: string\r\n  ): string[] {\r\n    // Set token amounts to 0\r\n    const allPoolTokensAmounts = poolTokens.map(() => '0');\r\n    // Set the exit token amount to tokenOutAmount\r\n    allPoolTokensAmounts[tokenOutIndex] = tokenOutAmount || '0';\r\n    return allPoolTokensAmounts;\r\n  }\r\n}\r\n","import { getBalancer } from '@/dependencies/balancer-sdk';\r\nimport {\r\n  GasPriceService,\r\n  gasPriceService,\r\n} from '@/services/gas-price/gas-price.service';\r\nimport { Pool } from '@/services/pool/types';\r\nimport { TransactionResponse } from '@ethersproject/abstract-provider';\r\nimport { Ref } from 'vue';\r\nimport { SwapExitHandler } from './handlers/swap-exit.handler';\r\nimport { GeneralisedExitHandler } from './handlers/generalised-exit.handler';\r\nimport {\r\n  ExitParams,\r\n  ExitPoolHandler,\r\n  QueryOutput,\r\n} from './handlers/exit-pool.handler';\r\nimport { BalancerSDK } from '@balancer-labs/sdk';\r\nimport { ExactInExitHandler } from './handlers/exact-in-exit.handler';\r\nimport { ExactOutExitHandler } from './handlers/exact-out-exit.handler';\r\n\r\nexport enum ExitHandler {\r\n  Swap,\r\n  Generalised,\r\n  ExactOut,\r\n  ExactIn,\r\n}\r\n\r\ntype HandlerParams = [Ref<Pool>, BalancerSDK, GasPriceService];\r\n\r\n/**\r\n * ExitPoolService acts as an adapter to underlying handlers based on the pool\r\n * type or other criteria. It wraps calls to the functions defined in the\r\n * ExitPoolHandler interface.\r\n */\r\nexport class ExitPoolService {\r\n  // The exit pool handler class to call exit pool interface functions.\r\n  public exitHandler: ExitPoolHandler;\r\n\r\n  /**\r\n   * Initialize the ExitPoolService\r\n   *\r\n   * @param {Pool} pool - The pool you want to exit.\r\n   * @param {BalancerSDK} sdk - Balancers SDK.\r\n   * @param {GasPriceService} gasPriceServ - Gas price service for fetching gas price.\r\n   */\r\n  constructor(\r\n    public readonly pool: Ref<Pool>,\r\n    public readonly sdk = getBalancer(),\r\n    public readonly gasPriceServ = gasPriceService\r\n  ) {\r\n    this.exitHandler = this.setExitHandler(ExitHandler.Generalised);\r\n  }\r\n\r\n  /**\r\n   * Sets ExitHandler class on instance.\r\n   *\r\n   * @param {ExitHandler} type - The type of exit handler to use.\r\n   * @returns {ExitPoolHandler} The ExitPoolHandler class to be used.\r\n   */\r\n  setExitHandler(type: ExitHandler): ExitPoolHandler {\r\n    const { pool, sdk, gasPriceServ } = this;\r\n    const handlerParams: HandlerParams = [pool, sdk, gasPriceServ];\r\n\r\n    switch (type) {\r\n      case ExitHandler.Swap:\r\n        return (this.exitHandler = new SwapExitHandler(...handlerParams));\r\n      case ExitHandler.Generalised:\r\n        return (this.exitHandler = new GeneralisedExitHandler(\r\n          ...handlerParams\r\n        ));\r\n      case ExitHandler.ExactIn:\r\n        return (this.exitHandler = new ExactInExitHandler(...handlerParams));\r\n      case ExitHandler.ExactOut:\r\n        return (this.exitHandler = new ExactOutExitHandler(...handlerParams));\r\n      default:\r\n        throw new Error(`Pool type not handled: ${pool.value.poolType}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Executes an exit pool transaction.\r\n   *\r\n   * @param ...\r\n   * @returns {TransactionResponse} The ethers transaction response object.\r\n   */\r\n  async exit(params: ExitParams): Promise<TransactionResponse> {\r\n    return this.exitHandler.exit(params);\r\n  }\r\n\r\n  /**\r\n   * Performs a query join to fetch the expected output from a join transaction.\r\n   *\r\n   * @param ...\r\n   */\r\n  async queryExit(params: ExitParams): Promise<QueryOutput> {\r\n    return this.exitHandler.queryExit(params);\r\n  }\r\n}\r\n","import useRelayerApprovalTx from '@/composables/approvals/useRelayerApprovalTx';\r\nimport useNumbers from '@/composables/useNumbers';\r\nimport {\r\n  fiatValueOf,\r\n  flatTokenTree,\r\n  isDeep,\r\n  isPreMintedBptType,\r\n  tokenTreeLeafs,\r\n  tokenTreeNodes,\r\n  usePool,\r\n} from '@/composables/usePool';\r\nimport useRelayerApproval, {\r\n  RelayerType,\r\n} from '@/composables/approvals/useRelayerApproval';\r\nimport { useTokens } from '@/providers/tokens.provider';\r\nimport { useTxState } from '@/composables/useTxState';\r\nimport { useUserSettings } from '@/providers/user-settings.provider';\r\nimport {\r\n  HIGH_PRICE_IMPACT,\r\n  REKT_PRICE_IMPACT,\r\n} from '@/constants/poolLiquidity';\r\nimport QUERY_KEYS from '@/constants/queryKeys';\r\nimport symbolKeys from '@/constants/symbol.keys';\r\nimport { hasFetchedPoolsForSor } from '@/lib/balancer.sdk';\r\nimport {\r\n  bnSum,\r\n  bnum,\r\n  isSameAddress,\r\n  removeAddress,\r\n  selectByAddress,\r\n} from '@/lib/utils';\r\nimport {\r\n  ExitHandler,\r\n  ExitPoolService,\r\n} from '@/services/balancer/pools/exits/exit-pool.service';\r\nimport { ExitType } from '@/services/balancer/pools/exits/handlers/exit-pool.handler';\r\nimport { Pool, PoolToken } from '@/services/pool/types';\r\nimport useWeb3 from '@/services/web3/useWeb3';\r\nimport { TokenInfoMap } from '@/types/TokenList';\r\nimport { TransactionActionInfo } from '@/types/transactions';\r\nimport { TransactionResponse } from '@ethersproject/abstract-provider';\r\nimport {\r\n  computed,\r\n  InjectionKey,\r\n  onBeforeMount,\r\n  provide,\r\n  ref,\r\n  reactive,\r\n  toRef,\r\n  watch,\r\n  onMounted,\r\n  Ref,\r\n  readonly,\r\n} from 'vue';\r\nimport { useQuery } from '@tanstack/vue-query';\r\nimport debounce from 'debounce-promise';\r\nimport { captureException } from '@sentry/browser';\r\nimport { safeInject } from '../inject';\r\nimport { useApp } from '@/composables/useApp';\r\n\r\n/**\r\n * TYPES\r\n */\r\nexport type AmountOut = {\r\n  address: string;\r\n  value: string;\r\n  valid: boolean;\r\n  max: string;\r\n};\r\n\r\n/**\r\n * ExitPoolProvider\r\n *\r\n * Handles pool exiting state and transaction execution.\r\n */\r\nexport const exitPoolProvider = (pool: Ref<Pool>) => {\r\n  /**\r\n   * STATE\r\n   */\r\n  const isMounted = ref(false);\r\n  const isSingleAssetExit = ref<boolean>(false);\r\n  const priceImpact = ref<number>(0);\r\n  const highPriceImpactAccepted = ref<boolean>(false);\r\n  const bptIn = ref<string>('0');\r\n  const bptInValid = ref<boolean>(true);\r\n  const txError = ref<string>('');\r\n  const singleAmountOut = reactive<AmountOut>({\r\n    address: '',\r\n    value: '',\r\n    max: '',\r\n    valid: true,\r\n  });\r\n  const propAmountsOut = ref<AmountOut[]>([]);\r\n\r\n  /**\r\n   * SERVICES\r\n   */\r\n  const exitPoolService = new ExitPoolService(pool);\r\n\r\n  /**\r\n   * COMPOSABLES\r\n   */\r\n  const { toFiat } = useNumbers();\r\n  const { injectTokens, getTokens, prices, balanceFor } = useTokens();\r\n  const { txState, txInProgress } = useTxState();\r\n  const { transactionDeadline } = useApp();\r\n  const { slippageBsp } = useUserSettings();\r\n  const { getSigner } = useWeb3();\r\n  const relayerApproval = useRelayerApprovalTx(RelayerType.BATCH_V4);\r\n  const { relayerSignature, relayerApprovalAction } = useRelayerApproval(\r\n    RelayerType.BATCH_V4\r\n  );\r\n\r\n  const { isWeightedPool } = usePool(pool);\r\n\r\n  const debounceQueryExit = debounce(queryExit, 1000);\r\n  const debounceGetSingleAssetMax = debounce(getSingleAssetMax, 1000, {\r\n    leading: true,\r\n  });\r\n\r\n  const queriesEnabled = computed(\r\n    (): boolean => isMounted.value && !txInProgress.value\r\n  );\r\n\r\n  const queryExitQuery = useQuery<\r\n    Awaited<ReturnType<typeof debounceQueryExit>>,\r\n    Error\r\n  >(\r\n    QUERY_KEYS.Pools.Exits.QueryExit(\r\n      bptIn,\r\n      hasFetchedPoolsForSor,\r\n      isSingleAssetExit,\r\n      singleAmountOut\r\n    ),\r\n    debounceQueryExit,\r\n    reactive({ enabled: queriesEnabled, refetchOnWindowFocus: false })\r\n  );\r\n\r\n  const singleAssetMaxQuery = useQuery<\r\n    Awaited<ReturnType<typeof debounceGetSingleAssetMax>>,\r\n    Error\r\n  >(\r\n    QUERY_KEYS.Pools.Exits.SingleAssetMax(\r\n      hasFetchedPoolsForSor,\r\n      isSingleAssetExit,\r\n      toRef(singleAmountOut, 'address')\r\n    ),\r\n    debounceGetSingleAssetMax,\r\n    reactive({ enabled: queriesEnabled, refetchOnWindowFocus: false })\r\n  );\r\n\r\n  /**\r\n   * COMPUTED\r\n   */\r\n  const isLoadingQuery = computed(\r\n    (): boolean =>\r\n      !hasFetchedPoolsForSor.value || queryExitQuery.isFetching.value\r\n  );\r\n\r\n  const queryError = computed(\r\n    (): string | undefined => queryExitQuery.error.value?.message\r\n  );\r\n\r\n  const isLoadingMax = computed(\r\n    (): boolean =>\r\n      singleAssetMaxQuery.isFetching.value ||\r\n      !queriesEnabled.value ||\r\n      !hasFetchedPoolsForSor.value\r\n  );\r\n\r\n  const maxError = computed(\r\n    (): string | undefined => singleAssetMaxQuery.error.value?.message\r\n  );\r\n\r\n  const isDeepPool = computed((): boolean => isDeep(pool.value));\r\n\r\n  const shouldSignRelayer = computed(\r\n    (): boolean =>\r\n      isDeepPool.value &&\r\n      !isSingleAssetExit.value &&\r\n      // Check if Batch Relayer is either approved, or signed\r\n      !(relayerApproval.isUnlocked.value || relayerSignature.value)\r\n  );\r\n\r\n  const approvalActions = computed((): TransactionActionInfo[] =>\r\n    shouldSignRelayer.value ? [relayerApprovalAction.value] : []\r\n  );\r\n\r\n  const shouldUseSwapExit = computed(\r\n    (): boolean =>\r\n      isSingleAssetExit.value &&\r\n      isDeep(pool.value) &&\r\n      isPreMintedBptType(pool.value.poolType)\r\n  );\r\n\r\n  const exitHandlerType = computed((): ExitHandler => {\r\n    if (shouldUseSwapExit.value) return ExitHandler.Swap;\r\n    if (isWeightedPool.value && isSingleAssetExit.value) {\r\n      if (singleAssetMaxed.value) return ExitHandler.ExactIn;\r\n      return ExitHandler.ExactOut;\r\n    }\r\n\r\n    return ExitHandler.Generalised;\r\n  });\r\n\r\n  // All token addresses (excl. pre-minted BPT) in the pool token tree that can be used in exit functions.\r\n  const exitTokenAddresses = computed((): string[] => {\r\n    let addresses: string[] = [];\r\n\r\n    addresses = isDeep(pool.value)\r\n      ? tokenTreeNodes(pool.value.tokens)\r\n      : pool.value.tokensList;\r\n\r\n    return removeAddress(pool.value.address, addresses);\r\n  });\r\n\r\n  // Token meta data for all relevant exit tokens including pool BPT.\r\n  const exitTokenInfo = computed(\r\n    (): TokenInfoMap =>\r\n      getTokens([\r\n        ...exitTokenAddresses.value,\r\n        pool.value.address,\r\n        ...amountsOut.value.map(ao => ao.address),\r\n      ])\r\n  );\r\n\r\n  // All tokens extracted from the token tree, excl. pre-minted BPT.\r\n  const exitTokens = computed((): PoolToken[] => {\r\n    let tokens: PoolToken[] = [];\r\n\r\n    tokens = isDeep(pool.value) ? flatTokenTree(pool.value) : pool.value.tokens;\r\n\r\n    return tokens.filter(\r\n      token => !isSameAddress(token.address, pool.value.address)\r\n    );\r\n  });\r\n\r\n  // Amounts out to pass into exit functions\r\n  const amountsOut = computed((): AmountOut[] => {\r\n    if (isSingleAssetExit.value) return [singleAmountOut];\r\n    return propAmountsOut.value;\r\n  });\r\n\r\n  // Is the single asset out value equal to it's maximum?\r\n  const singleAssetMaxed = computed((): boolean => {\r\n    return bnum(singleAmountOut.value).eq(singleAmountOut.max);\r\n  });\r\n\r\n  // High price impact if value greater than 1%.\r\n  const highPriceImpact = computed((): boolean => {\r\n    return bnum(priceImpact.value).isGreaterThanOrEqualTo(HIGH_PRICE_IMPACT);\r\n  });\r\n\r\n  // rekt price impact if value greater than 20%.\r\n  const rektPriceImpact = computed((): boolean => {\r\n    return bnum(priceImpact.value).isGreaterThanOrEqualTo(REKT_PRICE_IMPACT);\r\n  });\r\n\r\n  // If price impact is high (> 1%), user has checked acceptance checkbox.\r\n  const hasAcceptedHighPriceImpact = computed((): boolean =>\r\n    highPriceImpact.value ? highPriceImpactAccepted.value : true\r\n  );\r\n\r\n  // The type of exit to perform, is the user specifying the bptIn or the amount\r\n  // of a token they want out?\r\n  const exitType = computed((): ExitType => {\r\n    if (isSingleAssetExit.value && !singleAssetMaxed.value)\r\n      // It's a single asset exit but the user has not maximized the withdrawal.\r\n      // So they are specifying an amount out.\r\n      return ExitType.GivenOut;\r\n\r\n    // It's either a single asset exit where the user has maxed their amount out\r\n    // so we should use their BPT balance or it's a proportional exit and they\r\n    // have specified bptIn via the slider.\r\n    return ExitType.GivenIn;\r\n  });\r\n\r\n  // Internal bptIn value, some cases require bptBalance to be used when they\r\n  // have maxed out the amountOut they want.\r\n  const _bptIn = computed((): string => {\r\n    if (isSingleAssetExit.value && singleAssetMaxed.value)\r\n      // The user has chosen to withdraw the maximum they can in a single token\r\n      // exit. To ensure no dust, use bptBalance.\r\n      return bptBalance.value;\r\n\r\n    return bptIn.value;\r\n  });\r\n\r\n  // The user's BPT balance.\r\n  const bptBalance = computed((): string => balanceFor(pool.value.address));\r\n\r\n  // User has a balance of BPT.\r\n  const hasBpt = computed(() => bnum(bptBalance.value).gt(0));\r\n\r\n  // Checks if amountsIn has any values > 0.\r\n  const hasAmountsOut = computed(() =>\r\n    amountsOut.value.some(amountOut => bnum(amountOut.value).gt(0))\r\n  );\r\n\r\n  // Checks if BPT in is > 0\r\n  const hasBptIn = computed(() => bnum(bptIn.value).gt(0));\r\n\r\n  // Are amounts valid for transaction? That is bptIn and amountsOut.\r\n  const validAmounts = computed((): boolean => {\r\n    return isSingleAssetExit.value\r\n      ? amountsOut.value.every(ao => ao.valid)\r\n      : bptInValid.value;\r\n  });\r\n\r\n  // Map of amount out address to value as fiat amount.\r\n  const fiatAmountsOut = computed((): Record<string, string> => {\r\n    return Object.fromEntries(\r\n      amountsOut.value.map(({ address, value }) => [\r\n        address,\r\n        toFiat(value, address),\r\n      ])\r\n    );\r\n  });\r\n\r\n  // Sum of all amountsOut fiat values.\r\n  const fiatTotalOut = computed((): string => {\r\n    return bnSum(Object.values(fiatAmountsOut.value)).toString();\r\n  });\r\n\r\n  const fiatValueIn = computed(() => fiatValueOf(pool.value, bptIn.value));\r\n\r\n  /**\r\n   * METHODS\r\n   */\r\n\r\n  /**\r\n   * Simulate exit transaction to get expected output and calculate price impact.\r\n   */\r\n  async function queryExit() {\r\n    if (!hasFetchedPoolsForSor.value) return null;\r\n\r\n    // Single asset exit, and token out amount is 0 or less\r\n    if (isSingleAssetExit.value && !hasAmountsOut.value) return null;\r\n\r\n    // Proportional exit, and BPT in is 0 or less\r\n    if (!isSingleAssetExit.value && !hasBptIn.value) return null;\r\n\r\n    exitPoolService.setExitHandler(exitHandlerType.value);\r\n\r\n    try {\r\n      const output = await exitPoolService.queryExit({\r\n        exitType: exitType.value,\r\n        bptIn: _bptIn.value,\r\n        amountsOut: amountsOut.value,\r\n        signer: getSigner(),\r\n        slippageBsp: slippageBsp.value,\r\n        tokenInfo: exitTokenInfo.value,\r\n        prices: prices.value,\r\n        approvalActions: approvalActions.value,\r\n        bptInValid: bptInValid.value,\r\n        relayerSignature: relayerSignature.value,\r\n        transactionDeadline,\r\n      });\r\n\r\n      priceImpact.value = output.priceImpact;\r\n      propAmountsOut.value = Object.keys(output.amountsOut).map(address => ({\r\n        address,\r\n        value: output.amountsOut[address],\r\n        max: '',\r\n        valid: true,\r\n      }));\r\n      return output;\r\n    } catch (error) {\r\n      captureException(error);\r\n      throw new Error('Failed to construct exit.', { cause: error });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fetch maximum amount out given bptBalance as bptIn.\r\n   */\r\n  async function getSingleAssetMax() {\r\n    if (!hasFetchedPoolsForSor.value) return null;\r\n    if (!isSingleAssetExit.value) return null;\r\n\r\n    // If the user has not BPT, there is no maximum amount out.\r\n    if (!hasBpt.value) return null;\r\n\r\n    const singleAssetMaxedExitHandler = shouldUseSwapExit.value\r\n      ? ExitHandler.Swap\r\n      : ExitHandler.ExactIn;\r\n\r\n    exitPoolService.setExitHandler(singleAssetMaxedExitHandler);\r\n    singleAmountOut.max = '';\r\n\r\n    try {\r\n      const output = await exitPoolService.queryExit({\r\n        exitType: ExitType.GivenIn,\r\n        bptIn: bptBalance.value,\r\n        amountsOut: [singleAmountOut],\r\n        signer: getSigner(),\r\n        slippageBsp: slippageBsp.value,\r\n        tokenInfo: exitTokenInfo.value,\r\n        prices: prices.value,\r\n        approvalActions: approvalActions.value,\r\n        bptInValid: bptInValid.value,\r\n        relayerSignature: relayerSignature.value,\r\n        transactionDeadline: transactionDeadline,\r\n      });\r\n      const newMax =\r\n        selectByAddress(output.amountsOut, singleAmountOut.address) || '0';\r\n      singleAmountOut.max = newMax;\r\n\r\n      return newMax;\r\n    } catch (error) {\r\n      captureException(error);\r\n      throw new Error('Failed to calculate max.', { cause: error });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Executes exit transaction.\r\n   */\r\n  async function exit(): Promise<TransactionResponse> {\r\n    try {\r\n      txError.value = '';\r\n      exitPoolService.setExitHandler(exitHandlerType.value);\r\n\r\n      return exitPoolService.exit({\r\n        exitType: exitType.value,\r\n        bptIn: _bptIn.value,\r\n        amountsOut: amountsOut.value,\r\n        signer: getSigner(),\r\n        slippageBsp: slippageBsp.value,\r\n        tokenInfo: exitTokenInfo.value,\r\n        prices: prices.value,\r\n        approvalActions: approvalActions.value,\r\n        bptInValid: bptInValid.value,\r\n        relayerSignature: relayerSignature.value,\r\n        transactionDeadline: transactionDeadline,\r\n      });\r\n    } catch (error) {\r\n      txError.value = (error as Error).message;\r\n      throw new Error('Failed to submit exit transaction.', { cause: error });\r\n    }\r\n  }\r\n\r\n  function setInitialPropAmountsOut() {\r\n    const leafNodes = tokenTreeLeafs(pool.value.tokens);\r\n    propAmountsOut.value = leafNodes.map(address => ({\r\n      address,\r\n      value: '0',\r\n      max: '',\r\n      valid: true,\r\n    }));\r\n  }\r\n\r\n  function setIsSingleAssetExit(value: boolean) {\r\n    isSingleAssetExit.value = value;\r\n  }\r\n\r\n  /**\r\n   * WATCHERS\r\n   */\r\n  watch(isSingleAssetExit, _isSingleAssetExit => {\r\n    bptIn.value = '';\r\n    exitPoolService.setExitHandler(exitHandlerType.value);\r\n    if (!_isSingleAssetExit) {\r\n      setInitialPropAmountsOut();\r\n    }\r\n  });\r\n\r\n  /**\r\n   * LIFECYCLE\r\n   */\r\n  onBeforeMount(() => {\r\n    // Ensure prices are fetched for token tree. When pool architecture is\r\n    // refactoted probably won't be required.\r\n    injectTokens([...exitTokenAddresses.value, pool.value.address]);\r\n\r\n    exitPoolService.setExitHandler(exitHandlerType.value);\r\n\r\n    if (!isSingleAssetExit.value) {\r\n      setInitialPropAmountsOut();\r\n    }\r\n  });\r\n\r\n  onMounted(() => {\r\n    isMounted.value = true;\r\n  });\r\n\r\n  return {\r\n    // state\r\n    txState,\r\n    singleAmountOut,\r\n    highPriceImpactAccepted,\r\n    bptIn,\r\n    bptInValid,\r\n    pool,\r\n    isSingleAssetExit: readonly(isSingleAssetExit),\r\n    propAmountsOut: readonly(propAmountsOut),\r\n    priceImpact: readonly(priceImpact),\r\n\r\n    // computed\r\n    exitTokenAddresses,\r\n    exitTokens,\r\n    isLoadingQuery,\r\n    isLoadingMax,\r\n    highPriceImpact,\r\n    rektPriceImpact,\r\n    hasAcceptedHighPriceImpact,\r\n    txInProgress,\r\n    queryError,\r\n    maxError,\r\n    amountsOut,\r\n    validAmounts,\r\n    hasAmountsOut,\r\n    bptBalance,\r\n    hasBpt,\r\n    fiatTotalOut,\r\n    fiatValueIn,\r\n    fiatAmountsOut,\r\n    exitTokenInfo,\r\n    queryExitQuery,\r\n    approvalActions,\r\n    transactionDeadline,\r\n\r\n    // methods\r\n    setIsSingleAssetExit,\r\n    exit,\r\n  };\r\n};\r\n\r\nexport type ExitPoolProviderResponse = ReturnType<typeof exitPoolProvider>;\r\nexport const ExitPoolProviderSymbol: InjectionKey<ExitPoolProviderResponse> =\r\n  Symbol(symbolKeys.Providers.ExitPool);\r\n\r\nexport function provideExitPool(pool: Ref<Pool>) {\r\n  const exitPoolResponse = isDeep(pool.value) ? exitPoolProvider(pool) : {};\r\n\r\n  provide(ExitPoolProviderSymbol, exitPoolResponse);\r\n  return exitPoolResponse;\r\n}\r\n\r\nexport function useExitPool(): ExitPoolProviderResponse {\r\n  return safeInject(ExitPoolProviderSymbol);\r\n}\r\n","<script setup lang=\"ts\">\r\nimport useNumbers, { FNumFormats } from '@/composables/useNumbers';\r\nimport { isDeep, isStableLike } from '@/composables/usePool';\r\nimport { Pool } from '@/services/pool/types';\r\nimport { TokenInfo } from '@/types/TokenList';\r\n\r\n/**\r\n * TYPES\r\n */\r\ntype Props = {\r\n  token: TokenInfo | undefined;\r\n  weight: string;\r\n  address: string;\r\n  fiatAmountOut: string | undefined;\r\n  loading: boolean;\r\n  pool: Pool;\r\n  value: string;\r\n};\r\n\r\n/**\r\n * Props\r\n */\r\nconst props = defineProps<Props>();\r\n\r\n/**\r\n * COMPOSABLES\r\n */\r\nconst { fNum } = useNumbers();\r\n</script>\r\n\r\n<template>\r\n  <div class=\"flex justify-between items-center p-4\">\r\n    <div class=\"flex items-center\">\r\n      <BalAsset :address=\"address\" class=\"mr-2\" />\r\n      <div class=\"flex flex-col leading-none\">\r\n        <div class=\"text-lg font-medium\">\r\n          {{ props.token?.symbol }}\r\n          <span v-if=\"!isStableLike(pool.poolType) && !isDeep(pool)\">\r\n            {{\r\n              fNum(weight, {\r\n                style: 'percent',\r\n                maximumFractionDigits: 0,\r\n              })\r\n            }}\r\n          </span>\r\n        </div>\r\n        <div class=\"flex w-52 text-sm text-gray-600 dark:text-gray-400\">\r\n          <span class=\"truncate\">\r\n            {{ props.token?.name }}\r\n          </span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"flex flex-col flex-grow items-end pl-2 text-right font-numeric\">\r\n      <BalLoadingBlock v-if=\"loading\" class=\"w-20 h-12\" />\r\n      <template v-else>\r\n        <span class=\"text-xl font-medium break-words\">\r\n          {{ fNum(value, FNumFormats.token) }}\r\n        </span>\r\n        <span class=\"text-sm text-gray-600 dark:text-gray-400\">\r\n          {{ fNum(fiatAmountOut || '0', FNumFormats.fiat) }}\r\n        </span>\r\n      </template>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n\r\n","<script setup lang=\"ts\">\r\nimport BigNumber from 'bignumber.js';\r\nimport { computed, onBeforeMount, reactive, watch } from 'vue';\r\nimport { bnum, isSameAddress, selectByAddress } from '@/lib/utils';\r\nimport { Pool, PoolToken } from '@/services/pool/types';\r\nimport useWeb3 from '@/services/web3/useWeb3';\r\nimport TokenInput from '@/components/inputs/TokenInput/TokenInput.vue';\r\nimport { useExitPool } from '@/providers/local/exit-pool.provider';\r\nimport { useI18n } from 'vue-i18n';\r\nimport ProportionalWithdrawalTokenInfoV2 from './ProportionalWithdrawalTokenInfoV2.vue';\r\n\r\n/**\r\n * TYPES\r\n */\r\ntype Props = {\r\n  pool: Pool;\r\n};\r\n\r\n/**\r\n * Props\r\n */\r\nconst props = defineProps<Props>();\r\n\r\n/**\r\n * STATE\r\n */\r\nconst slider = reactive({\r\n  val: 1000,\r\n  max: 1000,\r\n  min: 0,\r\n  interval: 1,\r\n});\r\n\r\n/**\r\n * COMPOSABLES\r\n */\r\n\r\nconst { isWalletReady } = useWeb3();\r\nconst {\r\n  bptIn,\r\n  bptInValid,\r\n  bptBalance,\r\n  hasBpt,\r\n  isLoadingQuery,\r\n  exitTokens,\r\n  propAmountsOut,\r\n  exitTokenInfo,\r\n  fiatAmountsOut,\r\n  fiatTotalOut,\r\n} = useExitPool();\r\nconst { t } = useI18n();\r\n\r\n/**\r\n * COMPUTED\r\n */\r\nconst sliderProps = computed(() => {\r\n  return {\r\n    modelValue: slider.val,\r\n    max: slider.max,\r\n    interval: slider.interval,\r\n    min: slider.min,\r\n    tooltip: 'none',\r\n    disabled: !hasBpt.value,\r\n  };\r\n});\r\n\r\n/**\r\n * METHODS\r\n */\r\nfunction handleSliderChange(newVal: number): void {\r\n  const fractionBasisPoints = (newVal / slider.max) * 10000;\r\n  bptIn.value = bnum(bptBalance.value)\r\n    .times(fractionBasisPoints)\r\n    .div(10000)\r\n    .toFixed(props.pool.onchain?.decimals || 18);\r\n}\r\n\r\nfunction handleAmountChange(value: string): void {\r\n  const percentageOfBalance = bnum(value)\r\n    .div(bptBalance.value)\r\n    .times(100)\r\n    .integerValue(BigNumber.ROUND_CEIL);\r\n\r\n  const sliderRangeScaled: number = percentageOfBalance.times(10).toNumber();\r\n\r\n  if (sliderRangeScaled > slider.max) slider.val = slider.max;\r\n  else if (sliderRangeScaled < slider.min) slider.val = slider.min;\r\n  else slider.val = sliderRangeScaled;\r\n}\r\n\r\nfunction getPoolToken(address: string): PoolToken | undefined {\r\n  return exitTokens.value.find(token => isSameAddress(token.address, address));\r\n}\r\n\r\n/**\r\n * WATCHERS\r\n */\r\nwatch(isWalletReady, () => {\r\n  bptIn.value = bptBalance.value;\r\n});\r\n\r\n/**\r\n * CALLBACKS\r\n */\r\nonBeforeMount(() => {\r\n  bptIn.value = bptBalance.value;\r\n});\r\n</script>\r\n\r\n<template>\r\n  <div>\r\n    <div class=\"label\">{{ t('youProvide') }}</div>\r\n    <TokenInput\r\n      v-model:amount=\"bptIn\"\r\n      v-model:isValid=\"bptInValid\"\r\n      :address=\"pool.address\"\r\n      :name=\"pool.address\"\r\n      class=\"mb-4\"\r\n      fixedToken\r\n      slider\r\n      :sliderProps=\"sliderProps\"\r\n      :tokenValue=\"fiatTotalOut\"\r\n      @update:amount=\"handleAmountChange\"\r\n      @update:slider=\"handleSliderChange\"\r\n    />\r\n    <div class=\"label\">{{ t('youReceive') }}</div>\r\n    <div class=\"token-amounts\">\r\n      <ProportionalWithdrawalTokenInfoV2\r\n        v-for=\"{ address, value } in propAmountsOut\"\r\n        :key=\"address\"\r\n        :token=\"selectByAddress(exitTokenInfo, address)\"\r\n        :weight=\"getPoolToken(address)?.weight || '0'\"\r\n        :address=\"address\"\r\n        :fiatAmountOut=\"selectByAddress(fiatAmountsOut, address)\"\r\n        :loading=\"isLoadingQuery\"\r\n        :pool=\"pool\"\r\n        :value=\"value\"\r\n        class=\"last:mb-0\"\r\n      />\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.label {\r\n  @apply mb-3 text-sm font-bold;\r\n}\r\n\r\n.token-amounts {\r\n  @apply rounded-lg;\r\n  @apply bg-gray-50 dark:bg-gray-800;\r\n  @apply border dark:border-gray-900 divide-y dark:divide-gray-900;\r\n}\r\n</style>\r\n","<script setup lang=\"ts\">\r\nimport { computed } from 'vue';\r\n\r\nimport useNumbers, { FNumFormats } from '@/composables/useNumbers';\r\n\r\nimport { useExitPool } from '@/providers/local/exit-pool.provider';\r\n\r\n/**\r\n * COMPOSABLES\r\n */\r\nconst { fNum } = useNumbers();\r\n\r\nconst { priceImpact, highPriceImpact, isLoadingQuery } = useExitPool();\r\n\r\n/**\r\n * COMPUTED\r\n */\r\nconst priceImpactClasses = computed(() => ({\r\n  'bg-red-500 dark:bg-red-500 text-white divide-red-400 border-none':\r\n    highPriceImpact.value,\r\n}));\r\n</script>\r\n\r\n<template>\r\n  <div class=\"data-table\">\r\n    <div :class=\"['data-table-row', priceImpactClasses, 'dark:bg-gray-800']\">\r\n      <div class=\"p-2\">\r\n        {{ $t('priceImpact') }}\r\n      </div>\r\n      <div class=\"data-table-number-col\">\r\n        <div class=\"flex items-center\">\r\n          <BalLoadingBlock v-if=\"isLoadingQuery\" class=\"w-10 h-6\" />\r\n          <span v-else>{{ fNum(priceImpact, FNumFormats.percent) }}</span>\r\n\r\n          <BalTooltip :text=\"$t('withdraw.tooltips.priceImpact')\">\r\n            <template #activator>\r\n              <BalIcon\r\n                v-if=\"highPriceImpact\"\r\n                name=\"alert-triangle\"\r\n                size=\"xs\"\r\n                class=\"-mb-px ml-1\"\r\n              />\r\n              <BalIcon\r\n                v-else\r\n                name=\"info\"\r\n                size=\"xs\"\r\n                class=\"-mb-px ml-1 text-gray-400\"\r\n              />\r\n            </template>\r\n          </BalTooltip>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.data-table {\r\n  @apply rounded-lg divide-y dark:divide-gray-700;\r\n}\r\n\r\n.data-table-row {\r\n  @apply flex;\r\n  @apply rounded-lg;\r\n  @apply divide-x dark:divide-gray-900 border dark:border-gray-900;\r\n}\r\n\r\n.data-table-number-col {\r\n  @apply p-2 flex flex-grow items-center justify-between;\r\n}\r\n\r\n.total-row {\r\n  @apply text-lg font-semibold;\r\n}\r\n</style>\r\n","<script setup lang=\"ts\">\r\nimport {\r\n  TransactionReceipt,\r\n  TransactionResponse,\r\n} from '@ethersproject/abstract-provider';\r\nimport { ref, toRef, watch } from 'vue';\r\nimport { useI18n } from 'vue-i18n';\r\n\r\nimport ConfirmationIndicator from '@/components/web3/ConfirmationIndicator.vue';\r\nimport useEthers from '@/composables/useEthers';\r\nimport { usePool } from '@/composables/usePool';\r\nimport { dateTimeLabelFor } from '@/composables/useTime';\r\nimport useNetwork from '@/composables/useNetwork';\r\nimport useTransactions from '@/composables/useTransactions';\r\n// Types\r\nimport { Pool } from '@/services/pool/types';\r\n// Composables\r\nimport useWeb3 from '@/services/web3/useWeb3';\r\nimport { TransactionActionInfo } from '@/types/transactions';\r\n\r\nimport router from '@/plugins/router';\r\nimport { useExitPool } from '@/providers/local/exit-pool.provider';\r\nimport useNumbers, { FNumFormats } from '@/composables/useNumbers';\r\n\r\n/**\r\n * TYPES\r\n */\r\ntype Props = {\r\n  pool: Pool;\r\n};\r\n\r\n/**\r\n * PROPS & EMITS\r\n */\r\nconst props = defineProps<Props>();\r\n\r\nconst emit = defineEmits<{\r\n  (e: 'success', value: TransactionReceipt): void;\r\n  (e: 'error'): void;\r\n}>();\r\n\r\n/**\r\n * COMPOSABLES\r\n */\r\nconst { t } = useI18n();\r\nconst { blockNumber } = useWeb3();\r\nconst { addTransaction } = useTransactions();\r\nconst { txListener, getTxConfirmedAt } = useEthers();\r\nconst { poolWeightsLabel } = usePool(toRef(props, 'pool'));\r\nconst { networkSlug } = useNetwork();\r\nconst { fNum } = useNumbers();\r\n\r\nconst {\r\n  txState,\r\n  txInProgress,\r\n  exit,\r\n  isLoadingQuery,\r\n  queryExitQuery,\r\n  fiatTotalOut,\r\n  approvalActions: exitPoolApprovalActions,\r\n} = useExitPool();\r\n\r\nconst withdrawalAction: TransactionActionInfo = {\r\n  label: t('withdraw.label'),\r\n  loadingLabel: t('withdraw.preview.loadingLabel.withdraw'),\r\n  confirmingLabel: t('confirming'),\r\n  action: submit,\r\n  stepTooltip: t('withdraw.preview.tooltips.withdrawStep'),\r\n};\r\n\r\nconst actions = ref<TransactionActionInfo[]>([\r\n  ...exitPoolApprovalActions.value,\r\n  withdrawalAction,\r\n]);\r\n\r\n/**\r\n * METHODS\r\n */\r\nasync function handleTransaction(tx): Promise<void> {\r\n  addTransaction({\r\n    id: tx.hash,\r\n    type: 'tx',\r\n    action: 'withdraw',\r\n    summary: t('transactionSummary.withdrawFromPool', [\r\n      fNum(fiatTotalOut.value, FNumFormats.fiat),\r\n      poolWeightsLabel(props.pool),\r\n    ]),\r\n    details: {\r\n      total: fNum(fiatTotalOut.value, FNumFormats.fiat),\r\n      pool: props.pool,\r\n    },\r\n  });\r\n\r\n  txState.confirmed = await txListener(tx, {\r\n    onTxConfirmed: async (receipt: TransactionReceipt) => {\r\n      emit('success', receipt);\r\n      txState.confirming = false;\r\n      txState.receipt = receipt;\r\n\r\n      const confirmedAt = await getTxConfirmedAt(receipt);\r\n      txState.confirmedAt = dateTimeLabelFor(confirmedAt);\r\n    },\r\n    onTxFailed: () => {\r\n      txState.confirming = false;\r\n    },\r\n  });\r\n}\r\n\r\nasync function submit(): Promise<TransactionResponse> {\r\n  try {\r\n    const tx = await exit();\r\n\r\n    txState.confirming = true;\r\n\r\n    handleTransaction(tx);\r\n    return tx;\r\n  } catch (error) {\r\n    txState.confirming = false;\r\n    throw new Error('Failed to submit withdrawal transaction.', {\r\n      cause: error,\r\n    });\r\n  } finally {\r\n    txState.init = false;\r\n  }\r\n}\r\n\r\nfunction redirectToPool() {\r\n  // resetTxState();\r\n  router.push({ name: 'pool', params: { networkSlug, id: props.pool.id } });\r\n}\r\n\r\n/**\r\n * WATCHERS\r\n */\r\nwatch(blockNumber, () => {\r\n  if (!isLoadingQuery.value && !txInProgress.value) {\r\n    queryExitQuery.refetch();\r\n  }\r\n});\r\n</script>\r\n\r\n\r\n<template>\r\n  <transition>\r\n    <BalActionSteps\r\n      v-if=\"!txState.confirmed || !txState.receipt\"\r\n      :actions=\"actions\"\r\n    />\r\n    <div v-else>\r\n      <ConfirmationIndicator :txReceipt=\"txState.receipt\" />\r\n      <BalBtn color=\"gray\" outline block class=\"mt-2\" @click=\"redirectToPool\">\r\n        {{ $t('returnToPool') }}\r\n      </BalBtn>\r\n    </div>\r\n  </transition>\r\n</template>\r\n","<script setup lang=\"ts\">\r\nimport { computed, ref } from 'vue';\r\nimport { useI18n } from 'vue-i18n';\r\nimport { useTokens } from '@/providers/tokens.provider';\r\nimport { Pool } from '@/services/pool/types';\r\nimport { TokenInfoMap } from '@/types/TokenList';\r\n\r\nimport WithdrawSummary from './components/WithdrawSummary.vue';\r\nimport { useExitPool } from '@/providers/local/exit-pool.provider';\r\nimport WithdrawActionsV2 from './components/WithdrawActionsV2.vue';\r\nimport TokenAmounts from '@/components/forms/pool_actions/shared/TokenAmounts.vue';\r\n\r\n/**\r\n * TYPES\r\n */\r\ntype Props = {\r\n  pool: Pool;\r\n};\r\n\r\ntype AmountMap = {\r\n  [address: string]: string;\r\n};\r\n\r\n/**\r\n * PROPS & EMITS\r\n */\r\nconst props = withDefaults(defineProps<Props>(), {});\r\n\r\nconst emit = defineEmits<{\r\n  (e: 'close'): void;\r\n}>();\r\n\r\n/**\r\n * STATE\r\n */\r\nconst withdrawalConfirmed = ref(false);\r\n\r\n/**\r\n * COMPOSABLES\r\n */\r\nconst { t } = useI18n();\r\nconst { getToken } = useTokens();\r\n\r\nconst {\r\n  bptIn,\r\n  fiatValueIn,\r\n  fiatTotalOut,\r\n  amountsOut,\r\n  priceImpact,\r\n  fiatAmountsOut,\r\n  isSingleAssetExit,\r\n} = useExitPool();\r\n\r\n/**\r\n * COMPUTED\r\n */\r\nconst title = computed((): string =>\r\n  withdrawalConfirmed.value\r\n    ? t('withdraw.preview.titles.confirmed')\r\n    : t('withdraw.preview.titles.default')\r\n);\r\n\r\nconst showTokensIn = computed<boolean>(() => !isSingleAssetExit.value);\r\n\r\nconst amountInMap = computed((): AmountMap => {\r\n  const amountMap = {\r\n    [props.pool.address]: bptIn.value,\r\n  };\r\n  return amountMap;\r\n});\r\n\r\nconst tokenInMap = computed((): TokenInfoMap => {\r\n  const tokenMap = {\r\n    [props.pool.address]: getToken(props.pool.address),\r\n  };\r\n  return tokenMap;\r\n});\r\n\r\nconst fiatAmountInMap = computed((): AmountMap => {\r\n  const fiatAmountMap = {\r\n    [props.pool.address]: fiatValueIn.value,\r\n  };\r\n  return fiatAmountMap;\r\n});\r\n\r\nconst tokenOutMap = computed((): TokenInfoMap => {\r\n  const tokenMap = {};\r\n  amountsOut.value.forEach(item => {\r\n    tokenMap[item.address] = getToken(item.address);\r\n  });\r\n  return tokenMap;\r\n});\r\n\r\nconst amountsOutMap = computed((): AmountMap => {\r\n  const tokenMap = {};\r\n  amountsOut.value.forEach(item => {\r\n    tokenMap[item.address] = item.value;\r\n  });\r\n  return tokenMap;\r\n});\r\n\r\n/**\r\n * METHODS\r\n */\r\nfunction handleClose(): void {\r\n  emit('close');\r\n}\r\n</script>\r\n\r\n<template>\r\n  <BalModal show :fireworks=\"withdrawalConfirmed\" @close=\"handleClose\">\r\n    <template #header>\r\n      <div class=\"flex items-center\">\r\n        <BalCircle\r\n          v-if=\"withdrawalConfirmed\"\r\n          size=\"8\"\r\n          color=\"green\"\r\n          class=\"mr-2 text-white\"\r\n        >\r\n          <BalIcon name=\"check\" />\r\n        </BalCircle>\r\n        <h4>\r\n          {{ title }}\r\n        </h4>\r\n      </div>\r\n    </template>\r\n\r\n    <TokenAmounts\r\n      v-if=\"showTokensIn\"\r\n      :title=\"$t('investment.preview.titles.tokenIn')\"\r\n      :amountMap=\"amountInMap\"\r\n      :tokenMap=\"tokenInMap\"\r\n      :fiatAmountMap=\"fiatAmountInMap\"\r\n      :fiatTotal=\"fiatValueIn\"\r\n    />\r\n\r\n    <TokenAmounts\r\n      :title=\"$t('investment.preview.titles.tokenOut')\"\r\n      class=\"mt-4\"\r\n      :amountMap=\"amountsOutMap\"\r\n      :tokenMap=\"tokenOutMap\"\r\n      :fiatAmountMap=\"fiatAmountsOut\"\r\n      :fiatTotal=\"fiatTotalOut\"\r\n    />\r\n\r\n    <WithdrawSummary\r\n      :pool=\"pool\"\r\n      :fiatTotal=\"fiatTotalOut\"\r\n      :priceImpact=\"priceImpact\"\r\n    />\r\n\r\n    <WithdrawActionsV2\r\n      :pool=\"pool\"\r\n      class=\"mt-4\"\r\n      @error=\"$emit('close')\"\r\n      @success=\"withdrawalConfirmed = true\"\r\n    />\r\n  </BalModal>\r\n</template>\r\n","<script setup lang=\"ts\">\r\nimport { onBeforeMount, computed } from 'vue';\r\n// import { useI18n } from 'vue-i18n';\r\nimport TokenInput from '@/components/inputs/TokenInput/TokenInput.vue';\r\nimport { isLessThanOrEqualTo, isRequired } from '@/lib/utils/validations';\r\nimport useWeb3 from '@/services/web3/useWeb3';\r\nimport ProportionalWithdrawalInputV2 from './components/ProportionalWithdrawalInputV2.vue';\r\nimport WithdrawTotalsV2 from './components/WithdrawTotalsV2.vue';\r\nimport { useExitPool } from '@/providers/local/exit-pool.provider';\r\nimport useVeBal from '@/composables/useVeBAL';\r\nimport WithdrawPreviewModalV2 from './components/WithdrawPreviewModal/WithdrawPreviewModalV2.vue';\r\nimport { useTokens } from '@/providers/tokens.provider';\r\nimport { isDeep, isPreMintedBptType } from '@/composables/usePool';\r\nimport { useI18n } from 'vue-i18n';\r\n\r\n/**\r\n * STATE\r\n */\r\nconst showPreview = ref(false);\r\n\r\n/**\r\n * COMPOSABLES\r\n */\r\nconst { t } = useI18n();\r\nconst { veBalTokenInfo } = useVeBal();\r\nconst { wrappedNativeAsset } = useTokens();\r\n\r\nconst { isWalletReady, startConnectWithInjectedProvider, isMismatchedNetwork } =\r\n  useWeb3();\r\n\r\nconst {\r\n  pool,\r\n  isSingleAssetExit,\r\n  singleAmountOut,\r\n  isLoadingMax,\r\n  queryError,\r\n  maxError,\r\n  isLoadingQuery,\r\n  highPriceImpact,\r\n  highPriceImpactAccepted,\r\n  hasAcceptedHighPriceImpact,\r\n  hasAmountsOut,\r\n  validAmounts,\r\n} = useExitPool();\r\n\r\n/**\r\n * COMPUTED\r\n */\r\nconst singleAssetRules = computed(() => [\r\n  isLessThanOrEqualTo(singleAmountOut.max, t('exceedsPoolBalance')),\r\n]);\r\n\r\nconst hasValidInputs = computed(\r\n  (): boolean => validAmounts.value && hasAcceptedHighPriceImpact.value\r\n);\r\n\r\n// Limit token select modal to a subset.\r\nconst subsetTokens = computed((): string[] => {\r\n  if (isPreMintedBptType(pool.value.poolType)) return [];\r\n\r\n  return pool.value.tokensList;\r\n});\r\n\r\n/**\r\n * CALLBACKS\r\n */\r\nonBeforeMount(() => {\r\n  singleAmountOut.address = isPreMintedBptType(pool.value.poolType)\r\n    ? wrappedNativeAsset.value.address\r\n    : pool.value.tokensList[0];\r\n});\r\n</script>\r\n\r\n<template>\r\n  <div>\r\n    <ProportionalWithdrawalInputV2 v-if=\"!isSingleAssetExit\" :pool=\"pool\" />\r\n    <template v-else>\r\n      <template v-if=\"isDeep(pool)\">\r\n        <TokenInput\r\n          v-model:isValid=\"singleAmountOut.valid\"\r\n          v-model:address=\"singleAmountOut.address\"\r\n          v-model:amount=\"singleAmountOut.value\"\r\n          :name=\"singleAmountOut.address\"\r\n          :rules=\"singleAssetRules\"\r\n          :customBalance=\"singleAmountOut.max || '0'\"\r\n          :balanceLabel=\"$t('max')\"\r\n          :balanceLoading=\"isLoadingMax\"\r\n          disableNativeAssetBuffer\r\n          :excludedTokens=\"[veBalTokenInfo?.address, pool.address]\"\r\n          :tokenSelectProps=\"{ ignoreBalances: true, subsetTokens }\"\r\n          ignoreWalletBalance\r\n        />\r\n      </template>\r\n    </template>\r\n\r\n    <WithdrawTotalsV2 class=\"mt-4\" />\r\n\r\n    <div\r\n      v-if=\"highPriceImpact\"\r\n      class=\"p-2 pb-2 mt-4 rounded-lg border dark:border-gray-700\"\r\n    >\r\n      <BalCheckbox\r\n        v-model=\"highPriceImpactAccepted\"\r\n        :rules=\"[isRequired($t('priceImpactCheckbox'))]\"\r\n        name=\"highPriceImpactAccepted\"\r\n        size=\"sm\"\r\n        :label=\"$t('priceImpactAccept', [$t('withdrawing')])\"\r\n      />\r\n    </div>\r\n\r\n    <BalAlert\r\n      v-if=\"queryError || maxError\"\r\n      type=\"error\"\r\n      :title=\"$t('thereWasAnError')\"\r\n      :description=\"queryError || maxError\"\r\n      class=\"mt-4\"\r\n      block\r\n    />\r\n\r\n    <div class=\"mt-4\">\r\n      <BalBtn\r\n        v-if=\"!isWalletReady\"\r\n        :label=\"$t('connectWallet')\"\r\n        color=\"gradient\"\r\n        block\r\n        @click=\"startConnectWithInjectedProvider\"\r\n      />\r\n      <BalBtn\r\n        v-else\r\n        :label=\"$t('preview')\"\r\n        color=\"gradient\"\r\n        :disabled=\"\r\n          !hasAmountsOut ||\r\n          !hasValidInputs ||\r\n          isMismatchedNetwork ||\r\n          isLoadingQuery ||\r\n          isLoadingMax\r\n        \"\r\n        block\r\n        @click=\"showPreview = true\"\r\n      />\r\n    </div>\r\n\r\n    <teleport to=\"#modal\">\r\n      <WithdrawPreviewModalV2\r\n        v-if=\"showPreview\"\r\n        :pool=\"pool\"\r\n        @close=\"showPreview = false\"\r\n      />\r\n    </teleport>\r\n  </div>\r\n</template>\r\n","import { ref } from 'vue';\r\nimport i18n from '@/plugins/i18n';\r\n\r\nexport enum Tab {\r\n  PoolTokens,\r\n  SingleToken,\r\n}\r\n\r\nexport const tabs = [\r\n  { value: Tab.PoolTokens, label: i18n.global.t('withdraw.tabs.poolTokens') },\r\n  {\r\n    value: Tab.SingleToken,\r\n    label: i18n.global.t('withdraw.tabs.singleToken'),\r\n  },\r\n];\r\n\r\nconst activeTab = ref(tabs[0].value);\r\n\r\nfunction resetTabs() {\r\n  activeTab.value = tabs[0].value;\r\n}\r\n\r\nexport default function useWithdrawPageTabs() {\r\n  return { activeTab, resetTabs };\r\n}\r\n","<script setup lang=\"ts\">\r\nimport useWithdrawPageTabs, {\r\n  tabs,\r\n  Tab,\r\n} from '@/composables/pools/useWithdrawPageTabs';\r\n\r\nimport { useExitPool } from '@/providers/local/exit-pool.provider';\r\n\r\n/**\r\n * COMPOSABLES\r\n */\r\nconst { activeTab } = useWithdrawPageTabs();\r\nconst { setIsSingleAssetExit } = useExitPool();\r\n\r\nwatch(activeTab, value => {\r\n  setIsSingleAssetExit(value === Tab.SingleToken);\r\n});\r\n</script>\r\n\r\n<template>\r\n  <BalTabs\r\n    v-model=\"activeTab\"\r\n    :tabs=\"tabs\"\r\n    class=\"p-0 m-0 -mb-px whitespace-nowrap\"\r\n    noPad\r\n  />\r\n</template>\r\n","<script setup lang=\"ts\">\r\nimport WithdrawForm from '@/components/forms/pool_actions/WithdrawForm/WithdrawForm.vue';\r\nimport WithdrawFormV2 from '@/components/forms/pool_actions/WithdrawForm/WithdrawFormV2.vue';\r\nimport SwapSettingsPopover, {\r\n  SwapSettingsContext,\r\n} from '@/components/popovers/SwapSettingsPopover.vue';\r\nimport { configService } from '@/services/config/config.service';\r\nimport { usePool } from '@/composables/usePool';\r\nimport useWithdrawPageTabs from '@/composables/pools/useWithdrawPageTabs';\r\nimport { Pool } from '@balancer-labs/sdk';\r\nimport WithdrawPageTabs from './WithdrawPageTabs.vue';\r\nimport { provideExitPool } from '@/providers/local/exit-pool.provider';\r\n\r\ntype Props = {\r\n  pool: Pool;\r\n};\r\n\r\n/**\r\n * PROPS & EMITS\r\n */\r\nconst props = defineProps<Props>();\r\n\r\n/**\r\n * COMPUTED\r\n */\r\nconst pool = computed(() => props.pool);\r\n\r\n/**\r\n * COMPOSABLES\r\n */\r\nconst { network } = configService;\r\nconst { isDeepPool } = usePool(pool);\r\nconst { resetTabs } = useWithdrawPageTabs();\r\nprovideExitPool(pool);\r\n\r\nonMounted(() => resetTabs());\r\n</script>\r\n\r\n<template>\r\n  <BalCard shadow=\"xl\" exposeOverflow noBorder>\r\n    <template #header>\r\n      <div class=\"w-full\">\r\n        <div class=\"text-xs leading-none text-secondary\">\r\n          {{ network.chainName }}\r\n        </div>\r\n        <div class=\"flex justify-between items-center\">\r\n          <h4>{{ $t('withdrawFromPool') }}</h4>\r\n          <SwapSettingsPopover :context=\"SwapSettingsContext.invest\" />\r\n        </div>\r\n        <WithdrawPageTabs v-if=\"isDeepPool\" />\r\n      </div>\r\n    </template>\r\n    <WithdrawFormV2 v-if=\"isDeepPool\" />\r\n    <WithdrawForm v-else :pool=\"pool\" />\r\n  </BalCard>\r\n</template>\r\n","<script setup lang=\"ts\">\r\nimport usePoolTransfers from '@/composables/contextual/pool-transfers/usePoolTransfers';\r\nimport { usePool } from '@/composables/usePool';\r\nimport { oneSecondInMs } from '@/composables/useTime';\r\nimport { useIntervalFn } from '@vueuse/core';\r\nimport { computed } from 'vue';\r\nimport { hasFetchedPoolsForSor } from '@/lib/balancer.sdk';\r\nimport WithdrawPage from '@/components/contextual/pages/pool/withdraw/WithdrawPage.vue';\r\nimport { useTokens } from '@/providers/tokens.provider';\r\nimport usePoolTransfersGuard from '@/composables/contextual/pool-transfers/usePoolTransfersGuard';\r\n\r\n/**\r\n * COMPOSABLES\r\n */\r\nconst { pool, poolDecorationQuery, loadingPool, transfersAllowed } =\r\n  usePoolTransfers();\r\nconst { isDeepPool } = usePool(pool);\r\nconst { balanceQueryLoading } = useTokens();\r\nusePoolTransfersGuard();\r\n\r\n// Instead of refetching pool data on every block, we refetch every 20s to prevent\r\n// overfetching a request on short blocktime networks like Polygon.\r\nuseIntervalFn(poolDecorationQuery.refetch, oneSecondInMs * 20);\r\n\r\n/**\r\n * COMPUTED\r\n */\r\n// We only need to wait for SOR if it's a deep pool.\r\nconst isLoadingSor = computed(\r\n  (): boolean => isDeepPool.value && !hasFetchedPoolsForSor.value\r\n);\r\n\r\nconst isLoading = computed(\r\n  (): boolean =>\r\n    loadingPool.value ||\r\n    !transfersAllowed.value ||\r\n    isLoadingSor.value ||\r\n    balanceQueryLoading.value\r\n);\r\n</script>\r\n\r\n<template>\r\n  <div class=\"px-4 sm:px-0 mx-auto max-w-md\">\r\n    <BalLoadingBlock v-if=\"isLoading || !pool\" class=\"h-96\" />\r\n    <WithdrawPage v-else :pool=\"pool\"></WithdrawPage>\r\n  </div>\r\n</template>\r\n"],"names":["selectedOption","ref","props","getToken","nativeAsset","useTokens","isProportional","tokenOut","useWithdrawalState","toRef","isWethPool","isDeepPool","usePool","tokenAddresses","computed","tokensList","tokensListExclBpt","_a","options","selectedToken","assetSetWidth","isOptionSelected","option","isSameAddress","handleSelected","newToken","propBptIn","bptBalance","hasBpt","fiatTotalLabel","fiatAmounts","proportionalAmounts","shouldFetchBatchSwap","loadingData","toRefs","slider","isWalletReady","useWeb3","missingPrices","usePoolTransfers","getTokens","isStableLikePool","fNum","useNumbers","tokens","isDeep","percentageLabel","bnum","BigNumber","error","seedTokens","_b","token","handleSliderChange","newVal","fractionBasisPoints","delayedExitDataFetch","debounce","watch","onBeforeMount","t","useI18n","getSigner","getProvider","blockNumber","addTransaction","useTransactions","txListener","getTxConfirmedAt","useEthers","poolWeightsLabel","tokenOutIndex","tokensOut","batchRelayerApproval","txInProgress","txState","resetTxState","networkSlug","useNetwork","refetchBalances","bptIn","fiatTotal","amountsOut","exactOut","singleAssetMaxOut","batchSwap","batchSwapAmountsOutMap","batchSwapKind","shouldUseBatchRelayer","batchRelayerSwap","withdrawalAction","submit","actions","poolExchange","PoolExchange","handleTransaction","tx","receipt","emit","confirmedAt","dateTimeLabelFor","trackGoal","Goals","balancerContractsService","boostedExitBatchSwap","formatUnits","redirectToPool","router","currency","useUserSettings","toFiat","fullAmounts","priceImpact","resetMath","maxSlider","account","withdrawalConfirmed","_priceImpact","title","amountMap","amountMap2","amount","i","hasAmount","tokenMap","tokenMap2","address","fiatAmountMap","fiatAmountMap2","total","index","handleClose","highPriceImpact","priceImpactClasses","showPreview","highPriceImpactAccepted","validInput","parseError","setError","withdrawMath","useWithdrawMath","hasAmounts","singleAssetMaxes","tokenOutAmount","tokenOutPoolBalance","initMath","startConnectWithInjectedProvider","isMismatchedNetwork","hasAcceptedHighPriceImpact","hasValidInputs","singleAssetRules","isLessThanOrEqualTo","ExitType","ExitType2","SwapExitHandler","pool","sdk","gasPriceService","__publicField","params","userAddress","swap","kind","swaps","assets","funds","limits","vaultService","tokenInfo","signer","amountIn","tokenIn","selectByAddress","hasFetchedPoolsForSor","fetchPoolsForSor","safeAmountIn","overflowProtected","bnumAmountIn","parseFixed","gasPrice","amountOut","formatFixed","safeAmountOut","bnumAmountOut","price","gasPriceParams","marketSp","exitType","swapInfo","maxSlippage","deadline","getTimestampSecondsFromNow","SwapType","NATIVE_ASSET_ADDRESS","POOLS","balancer","getBalancer","GeneralisedExitHandler","txBuilder","TransactionBuilder","to","encodedCall","slippageBsp","relayerSignature","approvalActions","bptInValid","evmAmountIn","signerAddress","slippage","simulationType","SimulationType","err","exitRes","allPoolTokens","flatTokenTree","poolToken","realAddress","getAddress","scaledAmount","ExactInExitHandler","data","shouldUnwrapNativeAsset","exiter","sdkPool","tokenOutAddress","indexOfAddress","evmBptIn","singleTokenMaxOut","expectedAmountsOut","evmPriceImpact","normalizedAmountOut","ExactOutExitHandler","evmAmountOut","fullAmountsOut","poolTokens","allPoolTokensAmounts","ExitHandler","ExitHandler2","ExitPoolService","gasPriceServ","type","handlerParams","exitPoolProvider","isMounted","isSingleAssetExit","txError","singleAmountOut","reactive","propAmountsOut","exitPoolService","injectTokens","prices","balanceFor","useTxState","transactionDeadline","useApp","relayerApproval","useRelayerApprovalTx","RelayerType","relayerApprovalAction","useRelayerApproval","isWeightedPool","debounceQueryExit","queryExit","debounceGetSingleAssetMax","getSingleAssetMax","queriesEnabled","queryExitQuery","useQuery","QUERY_KEYS","singleAssetMaxQuery","isLoadingQuery","queryError","isLoadingMax","maxError","shouldSignRelayer","shouldUseSwapExit","isPreMintedBptType","exitHandlerType","singleAssetMaxed","exitTokenAddresses","addresses","tokenTreeNodes","removeAddress","exitTokenInfo","ao","exitTokens","HIGH_PRICE_IMPACT","rektPriceImpact","REKT_PRICE_IMPACT","_bptIn","hasAmountsOut","hasBptIn","validAmounts","fiatAmountsOut","value","fiatTotalOut","bnSum","fiatValueIn","fiatValueOf","output","captureException","singleAssetMaxedExitHandler","newMax","exit","setInitialPropAmountsOut","leafNodes","tokenTreeLeafs","setIsSingleAssetExit","_isSingleAssetExit","onMounted","readonly","ExitPoolProviderSymbol","symbolKeys","provideExitPool","exitPoolResponse","provide","useExitPool","safeInject","sliderProps","handleAmountChange","sliderRangeScaled","getPoolToken","exitPoolApprovalActions","FNumFormats","showTokensIn","amountInMap","tokenInMap","fiatAmountInMap","tokenOutMap","item","amountsOutMap","veBalTokenInfo","useVeBal","wrappedNativeAsset","subsetTokens","Tab","Tab2","tabs","i18n","activeTab","resetTabs","useWithdrawPageTabs","network","configService","poolDecorationQuery","loadingPool","transfersAllowed","balanceQueryLoading","usePoolTransfersGuard","useIntervalFn","oneSecondInMs","isLoadingSor","isLoading"],"mappings":"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"}