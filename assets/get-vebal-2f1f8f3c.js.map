{"version":3,"file":"get-vebal-2f1f8f3c.js","sources":["../../node_modules/date-fns/esm/addWeeks/index.js","../../node_modules/date-fns/esm/isThursday/index.js","../../node_modules/date-fns/esm/previousDay/index.js","../../node_modules/date-fns/esm/previousThursday/index.js","../../src/components/forms/lock_actions/LockForm/components/HowToLock.vue","../../src/components/forms/lock_actions/LockForm/components/LockableTokens.vue","../../src/components/forms/lock_actions/LockForm/types.ts","../../src/components/forms/lock_actions/LockForm/composables/useLockState.ts","../../src/components/forms/lock_actions/LockForm/composables/useLockAmount.ts","../../src/components/forms/lock_actions/LockForm/composables/useLockEndDate.ts","../../src/components/forms/lock_actions/LockForm/components/LockPreviewModal/components/LockActions.vue","../../src/components/forms/lock_actions/LockForm/components/LockPreviewModal/components/LockAmount.vue","../../src/components/forms/lock_actions/LockForm/components/LockPreviewModal/components/VeBalTooltipExplainer.vue","../../src/components/forms/lock_actions/LockForm/components/LockPreviewModal/components/LockSummary.vue","../../src/components/forms/lock_actions/LockForm/components/LockPreviewModal/LockPreviewModal.vue","../../src/components/forms/lock_actions/LockForm/components/VeBalForm/components/LockAmount.vue","../../src/components/forms/lock_actions/LockForm/components/VeBalForm/components/LockEndDate.vue","../../src/components/forms/lock_actions/LockForm/components/VeBalForm/components/Summary.vue","../../src/components/forms/lock_actions/LockForm/components/VeBalForm/VeBalForm.vue","../../src/components/forms/lock_actions/LockForm/LockForm.vue"],"sourcesContent":["import toInteger from \"../_lib/toInteger/index.js\";\nimport addDays from \"../addDays/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addWeeks\n * @category Week Helpers\n * @summary Add the specified number of weeks to the given date.\n *\n * @description\n * Add the specified number of week to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of weeks to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the weeks added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 4 weeks to 1 September 2014:\n * const result = addWeeks(new Date(2014, 8, 1), 4)\n * //=> Mon Sep 29 2014 00:00:00\n */\n\nexport default function addWeeks(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  var days = amount * 7;\n  return addDays(dirtyDate, days);\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isThursday\n * @category Weekday Helpers\n * @summary Is the given date Thursday?\n *\n * @description\n * Is the given date Thursday?\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is Thursday\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Is 25 September 2014 Thursday?\n * const result = isThursday(new Date(2014, 8, 25))\n * //=> true\n */\n\nexport default function isThursday(dirtyDate) {\n  requiredArgs(1, arguments);\n  return toDate(dirtyDate).getDay() === 4;\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport getDay from \"../getDay/index.js\";\nimport subDays from \"../subDays/index.js\";\n\n/**\n * @name previousDay\n * @category Weekday Helpers\n * @summary When is the previous day of the week?\n *\n * @description\n * When is the previous day of the week? 0-6 the day of the week, 0 represents Sunday.\n *\n * @param {Date | number} date - the date to check\n * @param {number} day - day of the week\n * @returns {Date} - the date is the previous day of week\n * @throws {TypeError} - 2 arguments required\n *\n * @example\n * // When is the previous Monday before Mar, 20, 2020?\n * const result = previousDay(new Date(2020, 2, 20), 1)\n * //=> Mon Mar 16 2020 00:00:00\n *\n * @example\n * // When is the previous Tuesday before Mar, 21, 2020?\n * const result = previousDay(new Date(2020, 2, 21), 2)\n * //=> Tue Mar 17 2020 00:00:00\n */\nexport default function previousDay(date, day) {\n  requiredArgs(2, arguments);\n  var delta = getDay(date) - day;\n  if (delta <= 0) delta += 7;\n  return subDays(date, delta);\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport previousDay from \"../previousDay/index.js\";\n/**\n * @name previousThursday\n * @category Weekday Helpers\n * @summary When is the previous Thursday?\n *\n * @description\n * When is the previous Thursday?\n *\n * @param {Date | number} date - the date to start counting from\n * @returns {Date} the previous Thursday\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // When is the previous Thursday before Jun, 18, 2021?\n * const result = previousThursday(new Date(2021, 5, 18))\n * //=> Thu June 17 2021 00:00:00\n */\n\nexport default function previousThursday(date) {\n  requiredArgs(1, arguments);\n  return previousDay(date, 4);\n}","<script setup lang=\"ts\">\r\nimport { computed } from 'vue';\r\nimport { useI18n } from 'vue-i18n';\r\n\r\nimport { Pool } from '@/services/pool/types';\r\nimport { TokenInfo } from '@/types/TokenList';\r\n\r\nimport useNetwork from '@/composables/useNetwork';\r\n\r\n/**\r\n * TYPES\r\n */\r\ntype Props = {\r\n  lockablePool: Pool;\r\n  lockablePoolTokenInfo: TokenInfo;\r\n};\r\n\r\n/**\r\n * PROPS\r\n */\r\nconst props = defineProps<Props>();\r\n\r\n/**\r\n * COMPOSABLES\r\n */\r\nconst { t } = useI18n();\r\nconst { networkSlug } = useNetwork();\r\n\r\n/**\r\n * COMPUTED\r\n */\r\nconst steps = computed(() => [\r\n  t('getVeBAL.howToLock.steps.lock', [props.lockablePoolTokenInfo.symbol]),\r\n  t('getVeBAL.howToLock.earn.boost'),\r\n  t('getVeBAL.howToLock.earn.voting'),\r\n]);\r\n</script>\r\n\r\n<template>\r\n  <BalAccordion\r\n    class=\"mt-4\"\r\n    :showSectionBorder=\"false\"\r\n    :sections=\"[\r\n      {\r\n        title: $t('getVeBAL.howToLock.title'),\r\n        id: 'how-to-lock',\r\n        handle: 'how-to-lock-handle',\r\n      },\r\n    ]\"\r\n  >\r\n    <template #how-to-lock-handle>\r\n      <button\r\n        class=\"group flex justify-between items-center p-4 w-full rounded-xl\"\r\n      >\r\n        <h6 class=\"group-hover:text-blue-500 transition-colors\">\r\n          {{ $t('getVeBAL.howToLock.title') }}\r\n        </h6>\r\n        <BalIcon\r\n          name=\"chevron-down\"\r\n          class=\"text-blue-500 group-hover:text-pink-500 transition-colors\"\r\n        />\r\n      </button>\r\n    </template>\r\n    <template #how-to-lock>\r\n      <div class=\"p-4 border-t dark:border-gray-900\">\r\n        <div class=\"text-secondary\">\r\n          <ol class=\"text-sm steps\">\r\n            <li>\r\n              {{ $t('getVeBAL.howToLock.steps.investPart1') }}\r\n              <BalLink\r\n                tag=\"router-link\"\r\n                :to=\"{\r\n                  name: 'add-liquidity',\r\n                  params: { networkSlug, id: lockablePool.id },\r\n                }\"\r\n                external\r\n              >\r\n                {{ lockablePoolTokenInfo.symbol }}\r\n              </BalLink>\r\n              {{ $t('getVeBAL.howToLock.steps.investPart2') }}\r\n            </li>\r\n            <li v-for=\"(step, i) in steps\" :key=\"i\" v-html=\"step\" />\r\n          </ol>\r\n        </div>\r\n      </div>\r\n    </template>\r\n  </BalAccordion>\r\n</template>\r\n<style scoped>\r\n.steps {\r\n  @apply list-decimal px-4;\r\n}\r\n\r\n.steps li {\r\n  @apply pb-2;\r\n}\r\n</style>\r\n","<script setup lang=\"ts\">\r\nimport { computed } from 'vue';\r\n\r\nimport useNumbers, { FNumFormats } from '@/composables/useNumbers';\r\nimport { useTokens } from '@/providers/tokens.provider';\r\nimport useNetwork from '@/composables/useNetwork';\r\nimport { bnum } from '@/lib/utils';\r\nimport { VeBalLockInfo } from '@/services/balancer/contracts/contracts/veBAL';\r\nimport { Pool } from '@/services/pool/types';\r\nimport { TokenInfo } from '@/types/TokenList';\r\n\r\n/**\r\n * TYPES\r\n */\r\ntype Props = {\r\n  lockablePool: Pool;\r\n  lockablePoolTokenInfo: TokenInfo;\r\n  veBalLockInfo?: VeBalLockInfo;\r\n};\r\n\r\n/**\r\n * PROPS\r\n */\r\nconst props = defineProps<Props>();\r\n\r\n/**\r\n * COMPOSABLES\r\n */\r\nconst { balanceFor } = useTokens();\r\nconst { fNum } = useNumbers();\r\nconst { networkSlug } = useNetwork();\r\n\r\n/**\r\n * COMPUTED\r\n */\r\nconst bptBalance = computed(() => balanceFor(props.lockablePool.address));\r\n\r\nconst fiatTotal = computed((): string =>\r\n  bnum(props.lockablePool.totalLiquidity)\r\n    .div(props.lockablePool.totalShares)\r\n    .times(bptBalance.value)\r\n    .toString()\r\n);\r\n</script>\r\n\r\n<template>\r\n  <BalCard noPad shadow=\"none\">\r\n    <div class=\"p-4 w-full border-b dark:border-gray-900\">\r\n      <h6>\r\n        {{ $t('getVeBAL.lockableTokens.title') }}\r\n      </h6>\r\n    </div>\r\n    <div class=\"p-4 -mt-2\">\r\n      <div class=\"flex justify-between\">\r\n        <div>{{ lockablePoolTokenInfo.symbol }}</div>\r\n        <div>{{ fNum(bptBalance, FNumFormats.token) }}</div>\r\n      </div>\r\n      <div class=\"flex justify-between text-secondary\">\r\n        <div>{{ lockablePoolTokenInfo.name }}</div>\r\n        <div>{{ fNum(fiatTotal, FNumFormats.fiat) }}</div>\r\n      </div>\r\n      <BalLink\r\n        tag=\"router-link\"\r\n        :to=\"{\r\n          name: 'add-liquidity',\r\n          params: { networkSlug, id: lockablePool.id },\r\n        }\"\r\n        external\r\n        class=\"block mt-2 text-sm\"\r\n      >\r\n        {{\r\n          $t('getVeBAL.lockableTokens.getMoreVeBAL', [\r\n            lockablePoolTokenInfo.symbol,\r\n          ])\r\n        }}\r\n      </BalLink>\r\n    </div>\r\n  </BalCard>\r\n</template>\r\n","export enum LockType {\r\n  CREATE_LOCK = 'createLock',\r\n  EXTEND_LOCK = 'extendLock',\r\n  INCREASE_LOCK = 'increaseLock',\r\n}\r\n","import { reactive, toRefs } from 'vue';\r\n\r\ntype LockState = {\r\n  lockAmount: string;\r\n  lockEndDate: string;\r\n};\r\n\r\n/**\r\n * STATE\r\n */\r\nconst state = reactive<LockState>({\r\n  lockAmount: '',\r\n  lockEndDate: '',\r\n});\r\n\r\n/**\r\n * METHODS\r\n */\r\nfunction resetState(): void {\r\n  state.lockAmount = '';\r\n}\r\n\r\nexport default function useLockState() {\r\n  return {\r\n    ...toRefs(state),\r\n    resetState,\r\n  };\r\n}\r\n","import { computed, Ref } from 'vue';\r\n\r\nimport { bnum } from '@/lib/utils';\r\nimport { VeBalLockInfo } from '@/services/balancer/contracts/contracts/veBAL';\r\n\r\nimport useLockState from './useLockState';\r\n\r\nexport default function useLockAmount(\r\n  veBalLockInfo?: Ref<VeBalLockInfo> | Ref<undefined>\r\n) {\r\n  /**\r\n   * COMPOSABLES\r\n   */\r\n  const { lockAmount } = useLockState();\r\n\r\n  /**\r\n   * COMPUTED\r\n   */\r\n  const isValidLockAmount = computed(() => bnum(lockAmount.value || '0').gt(0));\r\n\r\n  const isIncreasedLockAmount = computed(\r\n    () => veBalLockInfo?.value?.hasExistingLock && isValidLockAmount.value\r\n  );\r\n\r\n  const totalLpTokens = computed(() => {\r\n    return veBalLockInfo?.value?.hasExistingLock\r\n      ? bnum(veBalLockInfo.value.lockedAmount)\r\n          .plus(lockAmount.value || '0')\r\n          .toString()\r\n      : lockAmount.value || '0';\r\n  });\r\n\r\n  return {\r\n    // computed\r\n    isValidLockAmount,\r\n    isIncreasedLockAmount,\r\n    totalLpTokens,\r\n  };\r\n}\r\n","import {\r\n  addDays,\r\n  isThursday,\r\n  nextThursday,\r\n  previousThursday,\r\n  startOfDay,\r\n} from 'date-fns';\r\nimport { computed } from 'vue';\r\n\r\nimport {\r\n  MAX_LOCK_PERIOD_IN_DAYS,\r\n  MIN_LOCK_PERIOD_IN_DAYS,\r\n} from '@/components/forms/lock_actions/constants';\r\nimport { toUtcTime } from '@/composables/useTime';\r\nimport { VeBalLockInfo } from '@/services/balancer/contracts/contracts/veBAL';\r\n\r\nimport useLockState from './useLockState';\r\n\r\nfunction getMaxLockEndDateTimestamp(date: number) {\r\n  const maxLockTimestamp = addDays(date, MAX_LOCK_PERIOD_IN_DAYS);\r\n\r\n  const timestamp = isThursday(maxLockTimestamp)\r\n    ? maxLockTimestamp\r\n    : previousThursday(maxLockTimestamp);\r\n\r\n  return startOfDay(timestamp).getTime();\r\n}\r\n\r\nexport default function useLockEndDate(veBalLockInfo?: VeBalLockInfo) {\r\n  /**\r\n   * STATE\r\n   */\r\n  const todaysDate = toUtcTime(new Date());\r\n\r\n  const minLockEndDateTimestamp = startOfDay(\r\n    nextThursday(\r\n      addDays(\r\n        veBalLockInfo?.hasExistingLock\r\n          ? veBalLockInfo.lockedEndDate\r\n          : todaysDate,\r\n        MIN_LOCK_PERIOD_IN_DAYS\r\n      )\r\n    )\r\n  ).getTime();\r\n\r\n  const maxLockEndDateTimestamp = getMaxLockEndDateTimestamp(todaysDate);\r\n\r\n  /**\r\n   * COMPOSABLES\r\n   */\r\n  const { lockEndDate } = useLockState();\r\n\r\n  /**\r\n   * COMPUTED\r\n   */\r\n  const lockEndDateTimestamp = computed(() =>\r\n    lockEndDate.value === ''\r\n      ? 0\r\n      : startOfDay(new Date(lockEndDate.value)).getTime()\r\n  );\r\n\r\n  const isValidLockEndDate = computed(\r\n    () =>\r\n      lockEndDateTimestamp.value >= minLockEndDateTimestamp &&\r\n      lockEndDateTimestamp.value <= maxLockEndDateTimestamp\r\n  );\r\n\r\n  const isExtendedLockEndDate = computed(\r\n    () => veBalLockInfo?.hasExistingLock && isValidLockEndDate.value\r\n  );\r\n\r\n  return {\r\n    // state\r\n    todaysDate,\r\n\r\n    // computed\r\n    minLockEndDateTimestamp,\r\n    maxLockEndDateTimestamp,\r\n    isValidLockEndDate,\r\n    isExtendedLockEndDate,\r\n  };\r\n}\r\n","<script setup lang=\"ts\">\r\nimport {\r\n  TransactionReceipt,\r\n  TransactionResponse,\r\n} from '@ethersproject/abstract-provider';\r\nimport { parseUnits } from '@ethersproject/units';\r\nimport { format } from 'date-fns';\r\nimport { computed, onBeforeMount, reactive, ref, watch } from 'vue';\r\nimport { useI18n } from 'vue-i18n';\r\n\r\nimport { PRETTY_DATE_FORMAT } from '@/components/forms/lock_actions/constants';\r\nimport { LockType } from '@/components/forms/lock_actions/LockForm/types';\r\nimport useConfig from '@/composables/useConfig';\r\nimport useEthers from '@/composables/useEthers';\r\nimport useNumbers, { FNumFormats } from '@/composables/useNumbers';\r\nimport { dateTimeLabelFor } from '@/composables/useTime';\r\nimport useTokenApprovalActions from '@/composables/approvals/useTokenApprovalActions';\r\nimport useTransactions from '@/composables/useTransactions';\r\nimport useNetwork from '@/composables/useNetwork';\r\nimport { balancerContractsService } from '@/services/balancer/contracts/balancer-contracts.service';\r\nimport { configService } from '@/services/config/config.service';\r\nimport useWeb3 from '@/services/web3/useWeb3';\r\nimport { TokenInfo } from '@/types/TokenList';\r\nimport { TransactionActionInfo } from '@/types/transactions';\r\nimport useVotingGauges from '@/composables/useVotingGauges';\r\nimport { VeBalLockInfo } from '@/services/balancer/contracts/contracts/veBAL';\r\nimport { ApprovalAction } from '@/composables/approvals/types';\r\n\r\n/**\r\n * TYPES\r\n */\r\ntype Props = {\r\n  lockablePoolTokenInfo: TokenInfo;\r\n  lockAmount: string;\r\n  lockEndDate: string;\r\n  lockType: LockType[];\r\n  lockConfirmed: boolean;\r\n  veBalLockInfo: VeBalLockInfo;\r\n};\r\n\r\ntype LockActionState = {\r\n  init: boolean;\r\n  confirming: boolean;\r\n  confirmed: boolean;\r\n  confirmedAt: string;\r\n  receipt?: TransactionReceipt;\r\n};\r\n\r\n/**\r\n * PROPS & EMITS\r\n */\r\nconst props = defineProps<Props>();\r\n\r\nconst emit = defineEmits<{\r\n  (e: 'success', value: LockActionState[]): void;\r\n}>();\r\n\r\n/**\r\n * STATE\r\n */\r\nconst lockActionStates = reactive<LockActionState[]>(\r\n  props.lockType.map(() => ({\r\n    init: false,\r\n    confirming: false,\r\n    confirmed: false,\r\n    confirmedAt: '',\r\n  }))\r\n);\r\n\r\n/**\r\n * COMPOSABLES\r\n */\r\nconst { t } = useI18n();\r\nconst { networkConfig } = useConfig();\r\nconst { getProvider, explorerLinks } = useWeb3();\r\nconst { addTransaction } = useTransactions();\r\nconst { txListener, getTxConfirmedAt } = useEthers();\r\nconst { getTokenApprovalActionsForSpender } = useTokenApprovalActions(\r\n  ref<string[]>([props.lockablePoolTokenInfo.address]),\r\n  ref<string[]>([props.lockAmount]),\r\n  ApprovalAction.Locking\r\n);\r\nconst { fNum } = useNumbers();\r\nconst { totalVotes, unallocatedVotes } = useVotingGauges();\r\nconst { networkSlug } = useNetwork();\r\n\r\nconst lockActions = props.lockType.map((lockType, actionIndex) => ({\r\n  label: t(`getVeBAL.previewModal.actions.${lockType}.label`, [\r\n    format(new Date(props.lockEndDate), PRETTY_DATE_FORMAT),\r\n  ]),\r\n  loadingLabel: t(`getVeBAL.previewModal.actions.${lockType}.loadingLabel`),\r\n  confirmingLabel: t(`getVeBAL.previewModal.actions.${lockType}.confirming`),\r\n  action: () => submit(lockType, actionIndex),\r\n  stepTooltip: t(`getVeBAL.previewModal.actions.${lockType}.tooltip`),\r\n}));\r\n\r\nconst actions = ref<TransactionActionInfo[]>([...lockActions]);\r\n\r\n/**\r\n * COMPUTED\r\n */\r\nconst lockActionStatesConfirmed = computed(() =>\r\n  lockActionStates.every(lockActionState => lockActionState.confirmed)\r\n);\r\n\r\nconst shouldResubmitVotes = computed<boolean>(\r\n  () => totalVotes !== unallocatedVotes.value\r\n);\r\n\r\n/**\r\n * METHODS\r\n */\r\nasync function handleTransaction(\r\n  tx: TransactionResponse,\r\n  lockType: LockType,\r\n  actionIndex: number\r\n): Promise<void> {\r\n  addTransaction({\r\n    id: tx.hash,\r\n    type: 'tx',\r\n    action: lockType,\r\n    summary:\r\n      lockType === LockType.EXTEND_LOCK\r\n        ? t('transactionSummary.extendLock', [\r\n            format(new Date(props.lockEndDate), PRETTY_DATE_FORMAT),\r\n          ])\r\n        : `${fNum(props.lockAmount, FNumFormats.token)} ${\r\n            props.lockablePoolTokenInfo.symbol\r\n          }`,\r\n    details: {\r\n      lockAmount: props.lockAmount,\r\n      lockEndDate: props.lockEndDate,\r\n      lockType,\r\n    },\r\n  });\r\n\r\n  lockActionStates[actionIndex].confirmed = await txListener(tx, {\r\n    onTxConfirmed: async (receipt: TransactionReceipt) => {\r\n      lockActionStates[actionIndex].confirming = false;\r\n      lockActionStates[actionIndex].receipt = receipt;\r\n\r\n      const confirmedAt = await getTxConfirmedAt(receipt);\r\n      lockActionStates[actionIndex].confirmedAt = dateTimeLabelFor(confirmedAt);\r\n    },\r\n    onTxFailed: () => {\r\n      lockActionStates[actionIndex].confirming = false;\r\n    },\r\n  });\r\n}\r\n\r\nasync function submit(lockType: LockType, actionIndex: number) {\r\n  try {\r\n    let tx: TransactionResponse;\r\n    lockActionStates[actionIndex].init = true;\r\n\r\n    if (lockType === LockType.CREATE_LOCK) {\r\n      tx = await balancerContractsService.veBAL.createLock(\r\n        getProvider(),\r\n        props.lockAmount,\r\n        props.lockEndDate\r\n      );\r\n    } else if (lockType === LockType.EXTEND_LOCK) {\r\n      tx = await balancerContractsService.veBAL.extendLock(\r\n        getProvider(),\r\n        props.lockEndDate\r\n      );\r\n    } else if (lockType === LockType.INCREASE_LOCK) {\r\n      tx = await balancerContractsService.veBAL.increaseLock(\r\n        getProvider(),\r\n        props.lockAmount\r\n      );\r\n    } else {\r\n      throw new Error('Unsupported lockType provided');\r\n    }\r\n\r\n    lockActionStates[actionIndex].init = false;\r\n    lockActionStates[actionIndex].confirming = true;\r\n\r\n    console.log('Receipt', tx);\r\n\r\n    handleTransaction(tx, lockType, actionIndex);\r\n    return tx;\r\n  } catch (error) {\r\n    console.error(error);\r\n    return Promise.reject(error);\r\n  }\r\n}\r\n\r\n/**\r\n * WATCHERS\r\n */\r\nwatch(lockActionStatesConfirmed, () => {\r\n  if (lockActionStatesConfirmed.value) {\r\n    emit('success', lockActionStates);\r\n  }\r\n});\r\n\r\n/**\r\n * LIFECYCLE\r\n */\r\nonBeforeMount(async () => {\r\n  const approvalAmount = parseUnits(\r\n    props.lockAmount,\r\n    props.lockablePoolTokenInfo.decimals\r\n  ).toString();\r\n\r\n  const approvalActions = await getTokenApprovalActionsForSpender(\r\n    configService.network.addresses.veBAL,\r\n    approvalAmount\r\n  );\r\n\r\n  actions.value.unshift(...approvalActions);\r\n});\r\n</script>\r\n\r\n<template>\r\n  <div>\r\n    <BalActionSteps v-if=\"!lockActionStatesConfirmed\" :actions=\"actions\" />\r\n    <template v-else>\r\n      <div\r\n        v-for=\"(lockActionState, i) in lockActionStates\"\r\n        :key=\"i\"\r\n        class=\"flex justify-between items-center mt-4 text-sm text-gray-400 dark:text-gray-600\"\r\n      >\r\n        <div class=\"flex items-center\">\r\n          <BalIcon name=\"clock\" />\r\n          <span class=\"ml-2\">\r\n            {{ lockActionState.confirmedAt }}\r\n          </span>\r\n        </div>\r\n        <BalLink\r\n          v-if=\"lockActionState.receipt\"\r\n          :href=\"explorerLinks.txLink(lockActionState.receipt.transactionHash)\"\r\n          external\r\n          noStyle\r\n          class=\"group flex items-center\"\r\n        >\r\n          {{ networkConfig.explorerName }}\r\n          <BalIcon\r\n            name=\"arrow-up-right\"\r\n            size=\"sm\"\r\n            class=\"ml-px group-hover:text-pink-500 transition-colors\"\r\n          />\r\n        </BalLink>\r\n      </div>\r\n      <BalAlert\r\n        v-if=\"lockConfirmed && !veBalLockInfo.hasExistingLock\"\r\n        class=\"mt-4\"\r\n        type=\"tip\"\r\n        :title=\"t('getVeBAL.previewModal.firstVeBALReceived.title')\"\r\n        :description=\"t('getVeBAL.previewModal.firstVeBALReceived.description')\"\r\n      >\r\n      </BalAlert>\r\n      <BalAlert\r\n        v-else-if=\"shouldResubmitVotes\"\r\n        class=\"mt-4\"\r\n        type=\"warning\"\r\n        :title=\"t('veBAL.liquidityMining.resubmit.hint.title')\"\r\n        :description=\"t('veBAL.liquidityMining.resubmit.hint.description')\"\r\n      >\r\n      </BalAlert>\r\n      <BalBtn\r\n        tag=\"router-link\"\r\n        :to=\"{ name: 'vebal', params: { networkSlug } }\"\r\n        color=\"gray\"\r\n        outline\r\n        block\r\n        class=\"mt-4\"\r\n      >\r\n        {{ $t('getVeBAL.previewModal.returnToVeBalPage') }}\r\n      </BalBtn>\r\n    </template>\r\n  </div>\r\n</template>\r\n","<script setup lang=\"ts\">\r\nimport { computed } from 'vue';\r\n\r\nimport useNumbers, { FNumFormats } from '@/composables/useNumbers';\r\nimport { useTokens } from '@/providers/tokens.provider';\r\nimport { Pool } from '@/services/pool/types';\r\nimport { PoolToken } from '@balancer-labs/sdk';\r\n\r\n/**\r\n * TYPES\r\n */\r\ntype Props = {\r\n  lockablePool: Pool;\r\n  totalLpTokens: string;\r\n};\r\n\r\n/**\r\n * PROPS\r\n */\r\nconst props = defineProps<Props>();\r\n\r\n/**\r\n * COMPOSABLES\r\n */\r\nconst { getToken } = useTokens();\r\nconst { fNum } = useNumbers();\r\n\r\n/**\r\n * COMPUTED\r\n */\r\nconst poolWeightsLabel = computed(() =>\r\n  props.lockablePool.tokens\r\n    .map(token => {\r\n      const weightLabel = formatWeightLabel(token.weight);\r\n      const symbol = token.symbol ?? getToken(token.address).symbol;\r\n\r\n      return `${weightLabel} ${symbol}`;\r\n    })\r\n    .join(' / ')\r\n);\r\n\r\n/**\r\n * METHODS\r\n */\r\nfunction formatWeightLabel(weight: PoolToken['weight']) {\r\n  return fNum(weight || '0', {\r\n    style: 'percent',\r\n    maximumFractionDigits: 0,\r\n  });\r\n}\r\n</script>\r\n\r\n<template>\r\n  <div class=\"container\">\r\n    <div class=\"flex justify-between items-center p-3\">\r\n      <div>\r\n        <div class=\"font-semibold\">\r\n          {{\r\n            $t('getVeBAL.previewModal.lpTokens', [\r\n              fNum(totalLpTokens, FNumFormats.token),\r\n            ])\r\n          }}\r\n        </div>\r\n        <div class=\"text-gray-400 dark:text-gray-600\">\r\n          {{ poolWeightsLabel }}\r\n        </div>\r\n      </div>\r\n      <div class=\"grid grid-cols-2 gap-1\">\r\n        <BalAsset\r\n          v-for=\"tokenAddress in lockablePool.tokensList\"\r\n          :key=\"tokenAddress\"\r\n          :address=\"tokenAddress\"\r\n          :size=\"30\"\r\n        />\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.container {\r\n  @apply shadow-lg border dark:border-gray-700 divide-y dark:divide-gray-700 rounded-lg;\r\n}\r\n</style>\r\n","<script setup lang=\"ts\">\r\nimport { computed } from 'vue';\r\nimport { useI18n } from 'vue-i18n';\r\n\r\nimport useNumbers, { FNumFormats } from '@/composables/useNumbers';\r\nimport useVeBal from '@/composables/useVeBAL';\r\n\r\n/**\r\n * TYPES\r\n */\r\ntype Props = {\r\n  totalLpTokens: string;\r\n  lockEndDate: string;\r\n  expectedVeBalAmount: string;\r\n};\r\n\r\n/**\r\n * PROPS\r\n */\r\ndefineProps<Props>();\r\n\r\n/**\r\n * COMPOSABLES\r\n */\r\nconst { fNum } = useNumbers();\r\nconst { veBalTokenInfo } = useVeBal();\r\nconst { t } = useI18n();\r\n\r\n/**\r\n * COMPUTED\r\n */\r\nconst conversationTableRows = computed(() => [\r\n  {\r\n    label: t('getVeBAL.lockForm.lockPeriods.1y'),\r\n    value: `~1 ${veBalTokenInfo.value.symbol}`,\r\n  },\r\n  {\r\n    label: t('getVeBAL.lockForm.lockPeriods.6m'),\r\n    value: `~0.5 ${veBalTokenInfo.value.symbol}`,\r\n  },\r\n  {\r\n    label: t('getVeBAL.lockForm.lockPeriods.3m'),\r\n    value: `~0.25 ${veBalTokenInfo.value.symbol}`,\r\n  },\r\n]);\r\n</script>\r\n\r\n<template>\r\n  <BalTooltip width=\"72\" noPad class=\"ml-2\">\r\n    <template #activator>\r\n      <BalIcon name=\"info\" size=\"sm\" class=\"text-secondary\" />\r\n    </template>\r\n    <div class=\"text-sm divide-y dark:divide-gray-900\">\r\n      <div class=\"p-3 bg-gray-50 dark:bg-gray-700 rounded-t\">\r\n        <h5>\r\n          {{ fNum(expectedVeBalAmount, FNumFormats.token) }}\r\n          {{ veBalTokenInfo.symbol }}\r\n        </h5>\r\n      </div>\r\n      <div class=\"p-3\">\r\n        <div class=\"mb-3 text-secondary\">\r\n          {{\r\n            $t(\r\n              'getVeBAL.previewModal.summary.totalVotingEscrowTooltip.explainer'\r\n            )\r\n          }}\r\n        </div>\r\n        <div class=\"flex items-center mb-1 whitespace-nowrap\">\r\n          <table class=\"w-full table-fixed\">\r\n            <thead>\r\n              <tr>\r\n                <th class=\"table-header-cell\">\r\n                  {{\r\n                    $t(\r\n                      'getVeBAL.previewModal.summary.totalVotingEscrowTooltip.table.lockPeriod'\r\n                    )\r\n                  }}\r\n                </th>\r\n                <th class=\"table-header-cell\">\r\n                  {{\r\n                    $t(\r\n                      'getVeBAL.previewModal.summary.totalVotingEscrowTooltip.table.totalVeBAL'\r\n                    )\r\n                  }}\r\n                </th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              <tr v-for=\"(row, i) in conversationTableRows\" :key=\"i\">\r\n                <td class=\"table-body-cell\">\r\n                  {{ row.label }}\r\n                </td>\r\n                <td class=\"table-body-cell\">\r\n                  {{ row.value }}\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </BalTooltip>\r\n</template>\r\n\r\n<style scoped>\r\n.table-header-cell {\r\n  @apply border dark:border-gray-700 p-2 text-left;\r\n}\r\n\r\n.table-body-cell {\r\n  @apply border dark:border-gray-700 p-2;\r\n}\r\n</style>\r\n","<script setup lang=\"ts\">\r\nimport { format } from 'date-fns';\r\nimport { computed } from 'vue';\r\n\r\nimport { PRETTY_DATE_FORMAT } from '@/components/forms/lock_actions/constants';\r\nimport { LockType } from '@/components/forms/lock_actions/LockForm/types';\r\nimport useNumbers, { FNumFormats } from '@/composables/useNumbers';\r\nimport useVeBal from '@/composables/useVeBAL';\r\nimport { bnum } from '@/lib/utils';\r\nimport { VeBalLockInfo } from '@/services/balancer/contracts/contracts/veBAL';\r\nimport { Pool } from '@/services/pool/types';\r\n\r\nimport VeBalTooltipExplainer from './VeBalTooltipExplainer.vue';\r\n\r\n/**\r\n * TYPES\r\n */\r\ntype Props = {\r\n  lockablePool: Pool;\r\n  totalLpTokens: string;\r\n  lockEndDate: string;\r\n  lockAmount: string;\r\n  expectedVeBalAmount: string;\r\n  lockType: LockType[];\r\n  veBalLockInfo: VeBalLockInfo;\r\n};\r\n\r\n/**\r\n * PROPS\r\n */\r\nconst props = defineProps<Props>();\r\n\r\n/**\r\n * COMPOSABLES\r\n */\r\nconst { fNum } = useNumbers();\r\nconst { veBalTokenInfo } = useVeBal();\r\n\r\n/**\r\n * COMPUTED\r\n */\r\nconst poolShares = computed(() =>\r\n  bnum(props.lockablePool.totalLiquidity).div(props.lockablePool.totalShares)\r\n);\r\n\r\nconst fiatTotalLockedAmount = computed(() =>\r\n  poolShares.value.times(props.veBalLockInfo.lockedAmount).toString()\r\n);\r\n\r\nconst fiatTotalLockAmount = computed(() =>\r\n  poolShares.value.times(props.lockAmount).toString()\r\n);\r\n\r\nconst fiatTotalLpTokens = computed(() =>\r\n  poolShares.value.times(props.totalLpTokens).toString()\r\n);\r\n\r\nconst isExtendLockOnly = computed(\r\n  () =>\r\n    props.lockType.length === 1 && props.lockType.includes(LockType.EXTEND_LOCK)\r\n);\r\n\r\nconst isIncreaseLockOnly = computed(\r\n  () =>\r\n    props.lockType.length === 1 &&\r\n    props.lockType.includes(LockType.INCREASE_LOCK)\r\n);\r\n\r\n// const fiatWeeklyYield = computed(() => '0');\r\n</script>\r\n\r\n<template>\r\n  <div class=\"summary-table\">\r\n    <h6 class=\"p-2\">\r\n      {{ $t('getVeBAL.previewModal.summary.title') }}\r\n    </h6>\r\n    <div class=\"p-2\">\r\n      <div class=\"summary-item-row\">\r\n        <div>\r\n          {{\r\n            isExtendLockOnly || isIncreaseLockOnly\r\n              ? $t('getVeBAL.previewModal.summary.totalAlreadyLocked')\r\n              : $t('getVeBAL.previewModal.summary.totalToLock')\r\n          }}\r\n        </div>\r\n        <div>\r\n          {{\r\n            fNum(\r\n              isIncreaseLockOnly ? fiatTotalLockedAmount : fiatTotalLpTokens,\r\n              FNumFormats.fiat\r\n            )\r\n          }}\r\n        </div>\r\n      </div>\r\n      <div v-if=\"isIncreaseLockOnly\" class=\"summary-item-row\">\r\n        <div>\r\n          {{ $t('getVeBAL.previewModal.summary.increasedLockAmount') }}\r\n        </div>\r\n        <div>{{ fNum(fiatTotalLockAmount, FNumFormats.fiat) }}</div>\r\n      </div>\r\n      <div class=\"summary-item-row\">\r\n        <div>\r\n          {{\r\n            isExtendLockOnly\r\n              ? $t('getVeBAL.previewModal.summary.newLockEndDate')\r\n              : $t('getVeBAL.previewModal.summary.lockEndDate')\r\n          }}\r\n        </div>\r\n        <div>{{ format(new Date(lockEndDate), PRETTY_DATE_FORMAT) }}</div>\r\n      </div>\r\n      <div class=\"summary-item-row\">\r\n        <div>{{ $t('getVeBAL.previewModal.summary.totalVotingEscrow') }}</div>\r\n        <div class=\"flex items-center\">\r\n          {{ fNum(expectedVeBalAmount, FNumFormats.token) }}\r\n          {{ veBalTokenInfo.symbol }}\r\n          <VeBalTooltipExplainer\r\n            :expectedVeBalAmount=\"expectedVeBalAmount\"\r\n            :lockEndDate=\"lockEndDate\"\r\n            :totalLpTokens=\"totalLpTokens\"\r\n          />\r\n        </div>\r\n      </div>\r\n      <!-- <div class=\"summary-item-row\">\r\n        <div>\r\n          {{ $t('getVeBAL.previewModal.summary.potentialWeeklyYield') }}\r\n        </div>\r\n        <div>{{ fNum(fiatWeeklyYield, FNumFormats.fiat) }}</div>\r\n      </div> -->\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.summary-table {\r\n  @apply border dark:border-gray-700 divide-y dark:divide-gray-700 rounded-lg mt-4;\r\n}\r\n\r\n.summary-item-row {\r\n  @apply flex justify-between pb-2;\r\n}\r\n</style>\r\n","<script setup lang=\"ts\">\r\nimport { computed, ref } from 'vue';\r\nimport { useI18n } from 'vue-i18n';\r\n\r\nimport { LockType } from '@/components/forms/lock_actions/LockForm/types';\r\nimport useVeBalLockInfoQuery from '@/composables/queries/useVeBalLockInfoQuery';\r\nimport { expectedVeBal } from '@/composables/useVeBAL';\r\nimport { VeBalLockInfo } from '@/services/balancer/contracts/contracts/veBAL';\r\nimport { Pool } from '@/services/pool/types';\r\nimport { TokenInfo } from '@/types/TokenList';\r\n\r\nimport useLockState from '../../composables/useLockState';\r\nimport LockActions from './components/LockActions.vue';\r\nimport LockAmount from './components/LockAmount.vue';\r\nimport LockSummary from './components/LockSummary.vue';\r\n\r\n/**\r\n * TYPES\r\n */\r\ntype Props = {\r\n  lockablePool: Pool;\r\n  lockablePoolTokenInfo: TokenInfo;\r\n  lockAmount: string;\r\n  lockEndDate: string;\r\n  lockType: LockType[];\r\n  veBalLockInfo: VeBalLockInfo;\r\n  totalLpTokens: string;\r\n};\r\n\r\n/**\r\n * PROPS & EMITS\r\n */\r\nconst props = defineProps<Props>();\r\n\r\nconst emit = defineEmits<{\r\n  (e: 'close'): void;\r\n}>();\r\n\r\n/**\r\n * STATE\r\n */\r\nconst lockConfirmed = ref(false);\r\nconst lockablePool = ref(props.lockablePool);\r\nconst lockablePoolTokenInfo = ref(props.lockablePoolTokenInfo);\r\nconst lockAmount = ref(props.lockAmount);\r\nconst lockEndDate = ref(props.lockEndDate);\r\nconst lockType = ref(props.lockType);\r\nconst veBalLockInfo = ref(props.veBalLockInfo);\r\nconst totalLpTokens = ref(props.totalLpTokens);\r\n\r\n// This value should be static when modal is opened.\r\nconst expectedVeBalAmount = expectedVeBal(\r\n  totalLpTokens.value,\r\n  lockEndDate.value\r\n);\r\n\r\n/**\r\n * COMPOSABLES\r\n */\r\nconst { t } = useI18n();\r\nconst { refetch: refetchLockInfo } = useVeBalLockInfoQuery();\r\nconst { resetState } = useLockState();\r\n\r\n/**\r\n * COMPUTED\r\n */\r\nconst title = computed(() => {\r\n  if (lockType.value.length === 1) {\r\n    return lockConfirmed.value\r\n      ? t(`getVeBAL.previewModal.titles.${lockType.value[0]}.confirmed`)\r\n      : t(`getVeBAL.previewModal.titles.${lockType.value[0]}.default`);\r\n  }\r\n  return lockConfirmed.value\r\n    ? t(`getVeBAL.previewModal.titles.${LockType.CREATE_LOCK}.confirmed`)\r\n    : t(`getVeBAL.previewModal.titles.${LockType.CREATE_LOCK}.default`);\r\n});\r\n\r\n/**\r\n * METHODS\r\n */\r\nfunction handleClose() {\r\n  emit('close');\r\n}\r\n\r\nfunction handleSuccess() {\r\n  lockConfirmed.value = true;\r\n  refetchLockInfo();\r\n  resetState();\r\n}\r\n</script>\r\n\r\n<template>\r\n  <BalModal show :fireworks=\"lockConfirmed\" @close=\"handleClose\">\r\n    <template #header>\r\n      <div class=\"flex items-center\">\r\n        <BalCircle\r\n          v-if=\"lockConfirmed\"\r\n          size=\"8\"\r\n          color=\"green\"\r\n          class=\"mr-2 text-white\"\r\n        >\r\n          <BalIcon name=\"check\" />\r\n        </BalCircle>\r\n        <h4>\r\n          {{ title }}\r\n        </h4>\r\n      </div>\r\n    </template>\r\n\r\n    <LockAmount :lockablePool=\"lockablePool\" :totalLpTokens=\"totalLpTokens\" />\r\n\r\n    <LockSummary\r\n      :lockablePool=\"lockablePool\"\r\n      :totalLpTokens=\"totalLpTokens\"\r\n      :lockAmount=\"lockAmount\"\r\n      :lockEndDate=\"lockEndDate\"\r\n      :expectedVeBalAmount=\"expectedVeBalAmount\"\r\n      :lockType=\"lockType\"\r\n      :veBalLockInfo=\"veBalLockInfo\"\r\n    />\r\n    <LockActions\r\n      :veBalLockInfo=\"veBalLockInfo\"\r\n      :lockConfirmed=\"lockConfirmed\"\r\n      :lockAmount=\"lockAmount\"\r\n      :lockEndDate=\"lockEndDate\"\r\n      :lockType=\"lockType\"\r\n      :lockablePoolTokenInfo=\"lockablePoolTokenInfo\"\r\n      class=\"mt-4\"\r\n      @success=\"handleSuccess\"\r\n    />\r\n  </BalModal>\r\n</template>\r\n","<script setup lang=\"ts\">\r\nimport { computed } from 'vue';\r\n\r\nimport TokenInput from '@/components/inputs/TokenInput/TokenInput.vue';\r\nimport { bnum } from '@/lib/utils';\r\nimport { Pool } from '@/services/pool/types';\r\nimport { TokenInfo } from '@/types/TokenList';\r\n\r\nimport useLockState from '../../../composables/useLockState';\r\n\r\n/**\r\n * TYPES\r\n */\r\ntype Props = {\r\n  lockablePool: Pool;\r\n  lockablePoolTokenInfo: TokenInfo;\r\n};\r\n\r\n/**\r\n * PROPS\r\n */\r\nconst props = defineProps<Props>();\r\n\r\n/**\r\n * COMPOSABLES\r\n */\r\nconst { lockAmount } = useLockState();\r\n\r\n/**\r\n * COMPUTED\r\n */\r\nconst lockAmountFiatValue = computed(() =>\r\n  bnum(props.lockablePool.totalLiquidity)\r\n    .div(props.lockablePool.totalShares)\r\n    .times(lockAmount.value)\r\n    .toString()\r\n);\r\n</script>\r\n\r\n<template>\r\n  <div class=\"mb-6\">\r\n    <div>\r\n      <p class=\"pb-2 font-semibold\">\r\n        {{ $t('getVeBAL.lockForm.lockAmount.title') }}\r\n      </p>\r\n    </div>\r\n    <TokenInput\r\n      v-model:amount=\"lockAmount\"\r\n      :address=\"lockablePoolTokenInfo.address\"\r\n      :tokenValue=\"lockAmountFiatValue\"\r\n      fixedToken\r\n      name=\"lockAmount\"\r\n    />\r\n  </div>\r\n</template>\r\n","<script setup lang=\"ts\">\r\nimport { addWeeks, format } from 'date-fns';\r\nimport { computed, onBeforeMount } from 'vue';\r\nimport { useI18n } from 'vue-i18n';\r\n\r\nimport { INPUT_DATE_FORMAT } from '@/components/forms/lock_actions/constants';\r\nimport { VeBalLockInfo } from '@/services/balancer/contracts/contracts/veBAL';\r\n\r\nimport useLockState from '../../../composables/useLockState';\r\n\r\n/**\r\n * TYPES\r\n */\r\ntype Props = {\r\n  minLockEndDateTimestamp: number;\r\n  maxLockEndDateTimestamp: number;\r\n  veBalLockInfo?: VeBalLockInfo | null;\r\n};\r\n\r\n/**\r\n * COMPOSABLES\r\n */\r\n\r\nconst { t } = useI18n();\r\n\r\n/**\r\n * PROPS\r\n */\r\nconst props = withDefaults(defineProps<Props>(), {\r\n  veBalLockInfo: null,\r\n});\r\n/**\r\n * STATE\r\n */\r\nconst { lockEndDate } = useLockState();\r\n\r\n/**\r\n * COMPUTED\r\n */\r\nconst lockDates = computed(() => [\r\n  {\r\n    label: t('getVeBAL.lockForm.lockPeriods.2w'),\r\n    action: () => updateLockEndDate(props.minLockEndDateTimestamp),\r\n  },\r\n  {\r\n    label: t('getVeBAL.lockForm.lockPeriods.1m'),\r\n    action: () =>\r\n      updateLockEndDate(addWeeks(props.minLockEndDateTimestamp, 4).getTime()),\r\n  },\r\n  {\r\n    label: t('getVeBAL.lockForm.lockPeriods.3m'),\r\n    action: () =>\r\n      updateLockEndDate(addWeeks(props.minLockEndDateTimestamp, 12).getTime()),\r\n  },\r\n  {\r\n    label: t('getVeBAL.lockForm.lockPeriods.6m'),\r\n    action: () =>\r\n      updateLockEndDate(addWeeks(props.minLockEndDateTimestamp, 24).getTime()),\r\n  },\r\n  {\r\n    label: t('getVeBAL.lockForm.lockPeriods.1y'),\r\n    action: () => {\r\n      lockEndDate.value = formatDateInput(props.maxLockEndDateTimestamp);\r\n    },\r\n  },\r\n]);\r\n\r\n/**\r\n * CALLBACKS\r\n */\r\nonBeforeMount(() => {\r\n  lockEndDate.value = props.veBalLockInfo?.hasExistingLock\r\n    ? formatDateInput(props.veBalLockInfo.lockedEndDate)\r\n    : formatDateInput(props.maxLockEndDateTimestamp);\r\n});\r\n\r\n/**\r\n * METHODS\r\n */\r\nfunction updateLockEndDate(timestamp: number) {\r\n  lockEndDate.value = formatDateInput(\r\n    Math.min(timestamp, props.maxLockEndDateTimestamp)\r\n  );\r\n}\r\n\r\nfunction formatDateInput(date: Date | number) {\r\n  return format(date, INPUT_DATE_FORMAT);\r\n}\r\n</script>\r\n\r\n<template>\r\n  <div class=\"mb-6\">\r\n    <div>\r\n      <p class=\"pb-2 font-semibold\">\r\n        {{ $t('getVeBAL.lockForm.lockEndDate.title') }}\r\n      </p>\r\n    </div>\r\n    <BalTextInput\r\n      v-model=\"lockEndDate\"\r\n      name=\"lockEndDate\"\r\n      type=\"date\"\r\n      :min=\"formatDateInput(minLockEndDateTimestamp)\"\r\n      :max=\"formatDateInput(maxLockEndDateTimestamp)\"\r\n      step=\"7\"\r\n    />\r\n    <div class=\"flex px-1 mt-2 text-sm text-secondary\">\r\n      <div\r\n        v-for=\"(lockDate, index) in lockDates\"\r\n        :key=\"index\"\r\n        class=\"mr-3 hover:text-pink-500 focus:text-pink-500 cursor-pointer\"\r\n        @click=\"lockDate.action\"\r\n      >\r\n        ~{{ lockDate.label }}\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n","<script setup lang=\"ts\">\r\nimport useNumbers, { FNumFormats } from '@/composables/useNumbers';\r\nimport useVeBal from '@/composables/useVeBAL';\r\n\r\n/**\r\n * TYPES\r\n */\r\ntype Props = {\r\n  expectedVeBalAmount: string;\r\n};\r\n\r\n/**\r\n * PROPS\r\n */\r\ndefineProps<Props>();\r\n\r\n/**\r\n * COMPOSABLES\r\n */\r\nconst { fNum } = useNumbers();\r\nconst { veBalTokenInfo } = useVeBal();\r\n</script>\r\n\r\n<template>\r\n  <div class=\"container\">\r\n    <div class=\"row\">\r\n      <div>{{ $t('getVeBAL.lockForm.summary.receive.title') }}</div>\r\n      <div>\r\n        {{\r\n          expectedVeBalAmount != null\r\n            ? fNum(expectedVeBalAmount, FNumFormats.token)\r\n            : '-'\r\n        }}\r\n        {{ veBalTokenInfo.symbol }}\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.container {\r\n  @apply border dark:border-gray-800 bg-gray-50 dark:bg-gray-800 divide-y dark:divide-gray-850 rounded-lg text-sm;\r\n}\r\n\r\n.row {\r\n  @apply p-3 flex justify-between;\r\n}\r\n</style>\r\n","<script setup lang=\"ts\">\r\nimport { computed, ref, toRef } from 'vue';\r\n\r\nimport { LockType } from '@/components/forms/lock_actions/LockForm/types';\r\nimport { useTokens } from '@/providers/tokens.provider';\r\nimport { expectedVeBal } from '@/composables/useVeBAL';\r\nimport { bnum } from '@/lib/utils';\r\nimport { VeBalLockInfo } from '@/services/balancer/contracts/contracts/veBAL';\r\nimport { configService } from '@/services/config/config.service';\r\nimport { Pool } from '@/services/pool/types';\r\nimport useWeb3 from '@/services/web3/useWeb3';\r\nimport { TokenInfo } from '@/types/TokenList';\r\n\r\nimport useLockAmount from '../../composables/useLockAmount';\r\nimport useLockEndDate from '../../composables/useLockEndDate';\r\nimport useLockState from '../../composables/useLockState';\r\nimport LockPreviewModal from '../LockPreviewModal/LockPreviewModal.vue';\r\nimport LockAmount from './components/LockAmount.vue';\r\nimport LockEndDate from './components/LockEndDate.vue';\r\nimport Summary from './components/Summary.vue';\r\n\r\n/**\r\n * TYPES\r\n */\r\ntype Props = {\r\n  lockablePool: Pool;\r\n  lockablePoolTokenInfo: TokenInfo;\r\n  veBalLockInfo?: VeBalLockInfo;\r\n};\r\n\r\n/**\r\n * PROPS\r\n */\r\nconst props = defineProps<Props>();\r\n\r\n/**\r\n * STATE\r\n */\r\nconst showPreviewModal = ref(false);\r\n\r\nconst { lockEndDate, lockAmount } = useLockState();\r\nconst { isWalletReady, startConnectWithInjectedProvider, isMismatchedNetwork } =\r\n  useWeb3();\r\n\r\nconst { isValidLockAmount, isIncreasedLockAmount, totalLpTokens } =\r\n  useLockAmount(toRef(props, 'veBalLockInfo'));\r\n\r\nconst {\r\n  minLockEndDateTimestamp,\r\n  maxLockEndDateTimestamp,\r\n  isValidLockEndDate,\r\n  isExtendedLockEndDate,\r\n} = useLockEndDate(props.veBalLockInfo);\r\n\r\n/**\r\n * COMPOSABLES\r\n */\r\nconst { balanceFor } = useTokens();\r\n\r\n/**\r\n * COMPUTED\r\n */\r\nconst lockablePoolBptBalance = computed(() =>\r\n  balanceFor(props.lockablePool.address)\r\n);\r\n\r\nconst submissionDisabled = computed(() => {\r\n  if (isMismatchedNetwork.value) {\r\n    return true;\r\n  }\r\n\r\n  if (props.veBalLockInfo?.hasExistingLock && !props.veBalLockInfo?.isExpired) {\r\n    return !isIncreasedLockAmount.value && !isExtendedLockEndDate.value;\r\n  }\r\n\r\n  return (\r\n    !bnum(lockablePoolBptBalance.value).gt(0) ||\r\n    !isValidLockAmount.value ||\r\n    !isValidLockEndDate.value\r\n  );\r\n});\r\n\r\nconst expectedVeBalAmount = computed(() => {\r\n  if (submissionDisabled.value) {\r\n    return '0';\r\n  }\r\n\r\n  return expectedVeBal(totalLpTokens.value, lockEndDate.value);\r\n});\r\n\r\nconst lockType = computed(() => {\r\n  if (props.veBalLockInfo?.hasExistingLock && !props.veBalLockInfo?.isExpired) {\r\n    if (isIncreasedLockAmount.value && isExtendedLockEndDate.value) {\r\n      return [LockType.INCREASE_LOCK, LockType.EXTEND_LOCK];\r\n    }\r\n    if (isExtendedLockEndDate.value) {\r\n      return [LockType.EXTEND_LOCK];\r\n    }\r\n    if (isIncreasedLockAmount.value) {\r\n      return [LockType.INCREASE_LOCK];\r\n    }\r\n  }\r\n  return [LockType.CREATE_LOCK];\r\n});\r\n\r\n/**\r\n * METHODS\r\n */\r\nfunction handleClosePreviewModal() {\r\n  showPreviewModal.value = false;\r\n}\r\n\r\nfunction handleShowPreviewModal() {\r\n  if (submissionDisabled.value) return;\r\n  showPreviewModal.value = true;\r\n}\r\n</script>\r\n\r\n<template>\r\n  <BalCard shadow=\"xl\" exposeOverflow noBorder>\r\n    <template #header>\r\n      <div class=\"w-full\">\r\n        <div class=\"pb-1.5 text-xs leading-none text-secondary\">\r\n          {{ configService.network.chainName }}\r\n        </div>\r\n        <div class=\"flex justify-between items-center\">\r\n          <h4>\r\n            {{ $t('getVeBAL.lockForm.title') }}\r\n          </h4>\r\n        </div>\r\n      </div>\r\n    </template>\r\n\r\n    <LockAmount\r\n      :lockablePool=\"lockablePool\"\r\n      :lockablePoolTokenInfo=\"lockablePoolTokenInfo\"\r\n    />\r\n\r\n    <LockEndDate\r\n      :minLockEndDateTimestamp=\"minLockEndDateTimestamp\"\r\n      :maxLockEndDateTimestamp=\"maxLockEndDateTimestamp\"\r\n      :veBalLockInfo=\"veBalLockInfo\"\r\n    />\r\n\r\n    <Summary :expectedVeBalAmount=\"expectedVeBalAmount\" />\r\n\r\n    <div class=\"mt-6\">\r\n      <BalBtn\r\n        v-if=\"!isWalletReady\"\r\n        :label=\"$t('connectWallet')\"\r\n        color=\"gradient\"\r\n        block\r\n        @click=\"startConnectWithInjectedProvider\"\r\n      />\r\n      <BalBtn\r\n        v-else\r\n        color=\"gradient\"\r\n        block\r\n        :disabled=\"submissionDisabled\"\r\n        @click=\"handleShowPreviewModal\"\r\n      >\r\n        {{ $t('preview') }}\r\n      </BalBtn>\r\n    </div>\r\n  </BalCard>\r\n  <teleport to=\"#modal\">\r\n    <LockPreviewModal\r\n      v-if=\"showPreviewModal && veBalLockInfo\"\r\n      :lockablePool=\"lockablePool\"\r\n      :lockablePoolTokenInfo=\"lockablePoolTokenInfo\"\r\n      :lockAmount=\"lockAmount\"\r\n      :lockEndDate=\"lockEndDate\"\r\n      :lockType=\"lockType\"\r\n      :veBalLockInfo=\"veBalLockInfo\"\r\n      :totalLpTokens=\"totalLpTokens\"\r\n      @close=\"handleClosePreviewModal\"\r\n    />\r\n  </teleport>\r\n</template>\r\n","<script setup lang=\"ts\">\r\nimport { computed } from 'vue';\r\n\r\nimport Col3Layout from '@/components/layouts/Col3Layout.vue';\r\nimport usePoolQuery from '@/composables/queries/usePoolQuery';\r\nimport useVeBalLockInfoQuery from '@/composables/queries/useVeBalLockInfoQuery';\r\nimport useBreakpoints from '@/composables/useBreakpoints';\r\nimport { useTokens } from '@/providers/tokens.provider';\r\nimport useVeBal from '@/composables/useVeBAL';\r\nimport { Pool } from '@/services/pool/types';\r\nimport useWeb3 from '@/services/web3/useWeb3';\r\n\r\nimport HowToLock from './components/HowToLock.vue';\r\nimport LockableTokens from './components/LockableTokens.vue';\r\nimport MyVeBAL from './components/MyVeBAL.vue';\r\nimport VeBalForm from './components/VeBalForm/VeBalForm.vue';\r\n\r\n/**\r\n * COMPOSABLES\r\n */\r\nconst { getToken } = useTokens();\r\nconst { isWalletReady } = useWeb3();\r\nconst { lockablePoolId } = useVeBal();\r\nconst { isDesktop, isMobile } = useBreakpoints();\r\n\r\n/**\r\n * QUERIES\r\n */\r\nconst lockablePoolQuery = usePoolQuery(lockablePoolId.value as string);\r\nconst veBalLockInfoQuery = useVeBalLockInfoQuery();\r\n\r\n/**\r\n * COMPUTED\r\n */\r\nconst lockablePoolLoading = computed(() => lockablePoolQuery.isLoading.value);\r\n\r\nconst veBalQueryLoading = computed(() => veBalLockInfoQuery.isLoading.value);\r\n\r\nconst lockablePool = computed<Pool | undefined>(\r\n  () => lockablePoolQuery.data.value\r\n);\r\n\r\nconst lockablePoolTokenInfo = computed(() =>\r\n  lockablePool.value != null ? getToken(lockablePool.value.address) : null\r\n);\r\n\r\nconst veBalLockInfo = computed(() => veBalLockInfoQuery.data.value);\r\n\r\nconst isLoading = computed(() =>\r\n  isWalletReady.value\r\n    ? lockablePoolLoading.value || veBalQueryLoading.value\r\n    : lockablePoolLoading.value\r\n);\r\n</script>\r\n\r\n<template>\r\n  <Col3Layout offsetGutters>\r\n    <template #gutterLeft>\r\n      <BalLoadingBlock\r\n        v-if=\"isLoading || !lockablePool || !lockablePoolTokenInfo\"\r\n        class=\"h-36\"\r\n      />\r\n      <LockableTokens\r\n        v-else\r\n        :lockablePool=\"lockablePool\"\r\n        :lockablePoolTokenInfo=\"lockablePoolTokenInfo\"\r\n      />\r\n      <template v-if=\"isDesktop\">\r\n        <BalLoadingBlock\r\n          v-if=\"isLoading || !lockablePool || !lockablePoolTokenInfo\"\r\n          class=\"mt-4 h-12\"\r\n        />\r\n        <HowToLock\r\n          v-else\r\n          :lockablePool=\"lockablePool\"\r\n          :lockablePoolTokenInfo=\"lockablePoolTokenInfo\"\r\n        />\r\n      </template>\r\n    </template>\r\n\r\n    <BalLoadingBlock\r\n      v-if=\"isLoading || !lockablePool || !lockablePoolTokenInfo\"\r\n      class=\"h-96\"\r\n    />\r\n    <VeBalForm\r\n      v-else\r\n      :lockablePool=\"lockablePool\"\r\n      :lockablePoolTokenInfo=\"lockablePoolTokenInfo\"\r\n      :veBalLockInfo=\"veBalLockInfo\"\r\n    />\r\n\r\n    <template #gutterRight>\r\n      <BalLoadingBlock v-if=\"isLoading\" class=\"h-64\" />\r\n      <MyVeBAL v-else :veBalLockInfo=\"veBalLockInfo\" />\r\n      <template v-if=\"isMobile\">\r\n        <BalLoadingBlock\r\n          v-if=\"isLoading || !lockablePool || !lockablePoolTokenInfo\"\r\n          class=\"mt-4 h-12\"\r\n        />\r\n        <HowToLock\r\n          v-else\r\n          :lockablePool=\"lockablePool\"\r\n          :lockablePoolTokenInfo=\"lockablePoolTokenInfo\"\r\n        />\r\n      </template>\r\n    </template>\r\n  </Col3Layout>\r\n</template>\r\n"],"names":["addWeeks","dirtyDate","dirtyAmount","requiredArgs","amount","toInteger","days","addDays","isThursday","toDate","previousDay","date","day","delta","getDay","subDays","previousThursday","useI18n","networkSlug","useNetwork","steps","computed","props","balanceFor","useTokens","fNum","useNumbers","bptBalance","fiatTotal","bnum","LockType","state","reactive","resetState","useLockState","toRefs","useLockAmount","veBalLockInfo","lockAmount","isValidLockAmount","isIncreasedLockAmount","_a","totalLpTokens","getMaxLockEndDateTimestamp","maxLockTimestamp","MAX_LOCK_PERIOD_IN_DAYS","timestamp","startOfDay","useLockEndDate","todaysDate","toUtcTime","minLockEndDateTimestamp","nextThursday","MIN_LOCK_PERIOD_IN_DAYS","maxLockEndDateTimestamp","lockEndDate","lockEndDateTimestamp","isValidLockEndDate","isExtendedLockEndDate","lockActionStates","t","networkConfig","useConfig","getProvider","explorerLinks","useWeb3","addTransaction","useTransactions","txListener","getTxConfirmedAt","useEthers","getTokenApprovalActionsForSpender","useTokenApprovalActions","ref","ApprovalAction","totalVotes","unallocatedVotes","useVotingGauges","lockActions","lockType","actionIndex","format","PRETTY_DATE_FORMAT","submit","actions","lockActionStatesConfirmed","lockActionState","shouldResubmitVotes","handleTransaction","tx","FNumFormats","receipt","confirmedAt","dateTimeLabelFor","balancerContractsService","error","watch","emit","onBeforeMount","approvalAmount","parseUnits","approvalActions","configService","getToken","poolWeightsLabel","token","weightLabel","formatWeightLabel","symbol","weight","veBalTokenInfo","useVeBal","conversationTableRows","poolShares","fiatTotalLockedAmount","fiatTotalLockAmount","fiatTotalLpTokens","isExtendLockOnly","isIncreaseLockOnly","lockConfirmed","lockablePool","lockablePoolTokenInfo","expectedVeBalAmount","expectedVeBal","refetchLockInfo","useVeBalLockInfoQuery","title","handleClose","handleSuccess","lockAmountFiatValue","lockDates","updateLockEndDate","formatDateInput","INPUT_DATE_FORMAT","showPreviewModal","isWalletReady","startConnectWithInjectedProvider","isMismatchedNetwork","toRef","lockablePoolBptBalance","submissionDisabled","_b","handleClosePreviewModal","handleShowPreviewModal","lockablePoolId","isDesktop","isMobile","useBreakpoints","lockablePoolQuery","usePoolQuery","veBalLockInfoQuery","lockablePoolLoading","veBalQueryLoading","isLoading"],"mappings":"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","x_google_ignoreList":[0,1,2,3]}