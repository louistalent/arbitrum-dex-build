{"version":3,"file":"portfolio-4879a482.js","sources":["../../src/components/heros/AppHero.vue","../../src/components/heros/HeroConnectWalletButton.vue","../../src/components/tables/PoolsTable/PoolsTableActionsCell.vue","../../src/assets/images/icons/tokens_white.svg","../../src/assets/images/icons/tokens_black.svg","../../src/components/tables/PoolsTable/PoolsTable.vue","../../src/providers/local/user-staking.provider.ts","../../src/providers/local/user-pools.provider.ts","../../src/components/contextual/pages/pools/StakedPoolsTable.vue","../../src/components/contextual/pages/pools/UnstakedPoolsTable.vue","../../src/components/contextual/pages/pools/VeBalPoolTable.vue","../../src/components/heros/PortfolioPageHero.vue","../../src/pages/portfolio.vue"],"sourcesContent":["<template>\r\n  <div class=\"app-hero\">\r\n    <div class=\"mx-auto w-full max-w-lg\">\r\n      <slot />\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style>\r\n.app-hero {\r\n  @apply bg-cover bg-center flex items-center justify-center text-center px-4;\r\n\r\n  transition: all 0.3s ease-in-out;\r\n  background-image: url('/images/backgrounds/bg-header.svg');\r\n}\r\n</style>\r\n","<script lang=\"ts\" setup>\r\nimport useDarkMode from '@/composables/useDarkMode';\r\nimport useFathom from '@/composables/useFathom';\r\nimport useWeb3 from '@/services/web3/useWeb3';\r\n\r\n/**\r\n * COMPOSABLES\r\n */\r\nconst { startConnectWithInjectedProvider } = useWeb3();\r\nconst { trackGoal, Goals } = useFathom();\r\nconst { darkMode } = useDarkMode();\r\n\r\n/**\r\n * METHODS\r\n */\r\nfunction onClickConnect() {\r\n  startConnectWithInjectedProvider();\r\n  trackGoal(Goals.ClickHeroConnectWallet);\r\n}\r\n</script>\r\n\r\n<template>\r\n  <BalBtn :color=\"darkMode ? 'blue' : 'white'\" @click=\"onClickConnect\">\r\n    {{ $t('connectWallet') }}\r\n  </BalBtn>\r\n</template>\r\n","<script setup lang=\"ts\">\r\nimport { computed, toRef } from 'vue';\r\n\r\nimport { isVeBalPool, usePool } from '@/composables/usePool';\r\nimport useNetwork from '@/composables/useNetwork';\r\nimport { POOLS } from '@/constants/pools';\r\nimport { Pool } from '@/services/pool/types';\r\n\r\n/**\r\n * TYPES\r\n */\r\ntype Props = {\r\n  pool: Pool;\r\n  poolsType?: 'unstaked' | 'staked';\r\n};\r\n\r\n/**\r\n * PROPS & EMITS\r\n */\r\nconst props = withDefaults(defineProps<Props>(), {\r\n  poolsType: 'unstaked',\r\n});\r\n\r\nconst emit = defineEmits<{\r\n  (e: 'click:stake', value: Pool): void;\r\n  (e: 'click:unstake', value: Pool): void;\r\n  (e: 'click:migrate', value: Pool): void;\r\n}>();\r\n/**\r\n * COMPOSABLES\r\n */\r\nconst { isMigratablePool } = usePool(toRef(props, 'pool'));\r\nconst { networkSlug } = useNetwork();\r\n\r\n/** COMPUTED */\r\nconst stakablePoolIds = computed((): string[] => POOLS.Stakable.AllowList);\r\nconst showVeBalLock = computed(() => isVeBalPool(props.pool.id));\r\n</script>\r\n\r\n<template>\r\n  <div class=\"flex justify-center py-4 px-2\">\r\n    <BalBtn\r\n      v-if=\"isMigratablePool(pool)\"\r\n      color=\"gradient\"\r\n      size=\"sm\"\r\n      @click.prevent.stop=\"emit('click:migrate', pool)\"\r\n    >\r\n      {{ $t('migrate') }}\r\n    </BalBtn>\r\n    <BalBtn\r\n      v-else-if=\"poolsType === 'unstaked' && stakablePoolIds.includes(pool.id)\"\r\n      color=\"gradient\"\r\n      size=\"sm\"\r\n      :disabled=\"isMigratablePool(pool)\"\r\n      @click.prevent.stop=\"emit('click:stake', pool)\"\r\n    >\r\n      {{ $t('stake') }}\r\n    </BalBtn>\r\n    <BalBtn\r\n      v-else-if=\"poolsType === 'staked'\"\r\n      color=\"gradient\"\r\n      size=\"sm\"\r\n      @click.prevent.stop=\"emit('click:unstake', pool)\"\r\n    >\r\n      {{ $t('unstake') }}\r\n    </BalBtn>\r\n    <BalBtn\r\n      v-else-if=\"showVeBalLock\"\r\n      tag=\"router-link\"\r\n      :to=\"{\r\n        name: 'get-vebal',\r\n        query: { networkSlug, returnRoute: $route.name },\r\n      }\"\r\n      color=\"gradient-pink-yellow\"\r\n      size=\"sm\"\r\n    >\r\n      {{ $t('transactionAction.createLock') }}\r\n    </BalBtn>\r\n    <div v-else>-</div>\r\n  </div>\r\n</template>\r\n","export default \"__VITE_ASSET__5c787288__\"","export default \"__VITE_ASSET__25774a4f__\"","<script setup lang=\"ts\">\r\nimport { format } from 'date-fns';\r\nimport { computed } from 'vue';\r\nimport { useI18n } from 'vue-i18n';\r\nimport { useRouter } from 'vue-router';\r\n\r\nimport { ColumnDefinition } from '@/components/_global/BalTable/types';\r\n\r\nimport BalChipNew from '@/components/chips/BalChipNew.vue';\r\n\r\nimport { PRETTY_DATE_FORMAT } from '@/components/forms/lock_actions/constants';\r\nimport { POOL_MIGRATIONS_MAP } from '@/components/forms/pool_actions/MigrateForm/constants';\r\nimport APRTooltip from '@/components/tooltips/APRTooltip/APRTooltip.vue';\r\nimport useBreakpoints from '@/composables/useBreakpoints';\r\nimport useDarkMode from '@/composables/useDarkMode';\r\nimport useFathom from '@/composables/useFathom';\r\nimport useNumbers from '@/composables/useNumbers';\r\nimport useNetwork from '@/composables/useNetwork';\r\nimport {\r\n  absMaxApr,\r\n  fiatValueOf,\r\n  isLiquidityBootstrapping,\r\n  isMigratablePool,\r\n  isStableLike,\r\n  orderedPoolTokens,\r\n  orderedTokenAddresses,\r\n  totalAprLabel,\r\n  isLBP,\r\n} from '@/composables/usePool';\r\nimport { bnum } from '@/lib/utils';\r\nimport { Pool } from '@/services/pool/types';\r\nimport { POOLS, APR_THRESHOLD, VOLUME_THRESHOLD } from '@/constants/pools';\r\n\r\nimport PoolsTableActionsCell from './PoolsTableActionsCell.vue';\r\nimport TokenPills from './TokenPills/TokenPills.vue';\r\nimport PoolWarningTooltip from '@/components/pool/PoolWarningTooltip.vue';\r\nimport TokensWhite from '@/assets/images/icons/tokens_white.svg';\r\nimport TokensBlack from '@/assets/images/icons/tokens_black.svg';\r\n\r\n/**\r\n * TYPES\r\n */\r\ntype Props = {\r\n  data?: Pool[];\r\n  poolsType?: 'unstaked' | 'staked';\r\n  isLoading?: boolean;\r\n  isLoadingMore?: boolean;\r\n  showPoolShares?: boolean;\r\n  noPoolsLabel?: string;\r\n  isPaginated?: boolean;\r\n  sortColumn?: string;\r\n  selectedTokens?: string[];\r\n  hiddenColumns?: string[];\r\n  showBoost?: boolean;\r\n  showActions?: boolean;\r\n  columnStates?: Record<string, string>;\r\n  skeletonClass?: string;\r\n  shares?: Record<string, string>;\r\n  boosts?: Record<string, string>;\r\n};\r\n\r\n/**\r\n * PROPS & EMITS\r\n */\r\n\r\nconst props = withDefaults(defineProps<Props>(), {\r\n  poolsType: 'unstaked',\r\n  isLoadingMore: false,\r\n  showPoolShares: false,\r\n  noPoolsLabel: 'No pools',\r\n  isPaginated: false,\r\n  sortColumn: 'totalLiquidity',\r\n  hiddenColumns: () => [],\r\n  showBoost: false,\r\n  showActions: false,\r\n  columnStates: () => ({}),\r\n  data: () => [],\r\n  selectedTokens: () => [],\r\n  skeletonClass: 'h-64',\r\n});\r\n\r\nconst emit = defineEmits<{\r\n  (e: 'loadMore'): void;\r\n  (e: 'triggerStake', value: Pool): void;\r\n  (e: 'triggerUnstake', value: Pool): void;\r\n  (e: 'onColumnSort', value: string): void;\r\n}>();\r\n/**\r\n * COMPOSABLES\r\n */\r\nconst { fNum } = useNumbers();\r\nconst router = useRouter();\r\nconst { t } = useI18n();\r\nconst { trackGoal, Goals } = useFathom();\r\nconst { darkMode } = useDarkMode();\r\nconst { upToLargeBreakpoint, upToSmallBreakpoint } = useBreakpoints();\r\nconst { networkSlug } = useNetwork();\r\n\r\nconst wideCompositionWidth = computed(() => {\r\n  if (upToSmallBreakpoint.value) return 250;\r\n  return 350;\r\n});\r\n\r\n/**\r\n * DATA\r\n */\r\nconst columns = computed<ColumnDefinition<Pool>[]>(() => [\r\n  {\r\n    name: 'Icons',\r\n    id: 'icons',\r\n    accessor: 'uri',\r\n    Header: 'iconColumnHeader',\r\n    Cell: 'iconColumnCell',\r\n    width: 125,\r\n    noGrow: true,\r\n  },\r\n  {\r\n    name: t('composition'),\r\n    id: 'poolName',\r\n    accessor: 'id',\r\n    Cell: 'poolNameCell',\r\n    width: props.hiddenColumns.length >= 2 ? wideCompositionWidth.value : 350,\r\n  },\r\n  {\r\n    name: t('myBoost'),\r\n    accessor: pool => `${bnum(boostFor(pool)).toFixed(3)}x`,\r\n    align: 'right',\r\n    id: 'myBoost',\r\n    hidden: !props.showBoost,\r\n    sortKey: pool => Number(boostFor(pool)),\r\n    width: 150,\r\n    cellClassName: 'font-numeric',\r\n  },\r\n  {\r\n    name: t('myBalance'),\r\n    accessor: pool =>\r\n      fNum(balanceValue(pool), {\r\n        style: 'currency',\r\n        maximumFractionDigits: 0,\r\n        fixedFormat: true,\r\n      }),\r\n    align: 'right',\r\n    id: 'myBalance',\r\n    hidden: !props.showPoolShares,\r\n    sortKey: pool => Number(balanceValue(pool)),\r\n    width: 160,\r\n    cellClassName: 'font-numeric',\r\n  },\r\n  {\r\n    name: t('poolValue'),\r\n    accessor: pool =>\r\n      fNum(pool.totalLiquidity || 0, {\r\n        style: 'currency',\r\n        maximumFractionDigits: 0,\r\n      }),\r\n    align: 'right',\r\n    id: 'totalLiquidity',\r\n    sortKey: pool => {\r\n      const apr = Number(pool.totalLiquidity);\r\n      if (apr === Infinity || isNaN(apr)) return 0;\r\n      return apr;\r\n    },\r\n    width: 150,\r\n    cellClassName: 'font-numeric',\r\n  },\r\n  {\r\n    name: t('volume24h', [t('hourAbbrev')]),\r\n    accessor: pool => pool?.volumeSnapshot || '0',\r\n    align: 'right',\r\n    id: 'volume',\r\n    Cell: 'volumeCell',\r\n    sortKey: pool => {\r\n      const volume = Number(pool?.volumeSnapshot);\r\n      if (volume === Infinity || isNaN(volume) || volume > VOLUME_THRESHOLD)\r\n        return 0;\r\n      return volume;\r\n    },\r\n    width: 175,\r\n    cellClassName: 'font-numeric',\r\n  },\r\n  {\r\n    name: props.showPoolShares ? t('myApr') : t('apr'),\r\n    Cell: 'aprCell',\r\n    accessor: pool => pool?.apr?.min.toString() || '0',\r\n    align: 'right',\r\n    id: 'apr',\r\n    sortKey: pool => {\r\n      let apr = 0;\r\n\r\n      if (pool?.apr) {\r\n        apr = Number(absMaxApr(pool.apr, pool.boost));\r\n      }\r\n\r\n      return isFinite(apr) && (pool.apr?.swapFees || 0) < APR_THRESHOLD\r\n        ? apr\r\n        : 0;\r\n    },\r\n    width: 220,\r\n  },\r\n  {\r\n    name: t('expiryDate'),\r\n    Cell: 'lockEndDateCell',\r\n    accessor: 'lockedEndDate',\r\n    align: 'right',\r\n    id: 'lockEndDate',\r\n    width: 150,\r\n  },\r\n  {\r\n    name: t('migrate'),\r\n    Cell: 'migrateCell',\r\n    accessor: 'migrate',\r\n    align: 'center',\r\n    id: 'migrate',\r\n    width: 150,\r\n  },\r\n  {\r\n    name: t('actions'),\r\n    Cell: 'actionsCell',\r\n    accessor: 'actions',\r\n    align: 'center',\r\n    id: 'actions',\r\n    hidden: !props.showActions,\r\n    width: 150,\r\n  },\r\n]);\r\n\r\nconst visibleColumns = computed(() =>\r\n  columns.value.filter(column => !props.hiddenColumns.includes(column.id))\r\n);\r\n\r\n/**\r\n * METHODS\r\n */\r\nfunction handleRowClick(pool: Pool, inNewTab?: boolean) {\r\n  trackGoal(Goals.ClickPoolsTableRow);\r\n  const route = router.resolve({\r\n    name: 'pool',\r\n    params: { id: pool.id, networkSlug },\r\n  });\r\n  inNewTab ? window.open(route.href) : router.push(route);\r\n}\r\n\r\nfunction navigateToPoolMigration(pool: Pool) {\r\n  router.push({\r\n    name: 'migrate-pool',\r\n    params: {\r\n      from: pool.id,\r\n      to: POOL_MIGRATIONS_MAP[pool.id].toPoolId,\r\n    },\r\n    query: { returnRoute: 'home' },\r\n  });\r\n}\r\n\r\nfunction balanceValue(pool: Pool): string {\r\n  const bpt = props?.shares?.[pool.id] || '0';\r\n  return fiatValueOf(pool, bpt);\r\n}\r\n\r\nfunction boostFor(pool: Pool): string {\r\n  return props?.boosts?.[pool.id] || '1';\r\n}\r\n\r\nfunction aprLabelFor(pool: Pool): string {\r\n  const poolAPRs = pool?.apr;\r\n  if (!poolAPRs) return '0';\r\n\r\n  return totalAprLabel(poolAPRs, pool.boost);\r\n}\r\n\r\nfunction lockedUntil(lockEndDate?: number) {\r\n  return lockEndDate ? format(lockEndDate, PRETTY_DATE_FORMAT) : '—';\r\n}\r\n\r\nfunction iconAddresses(pool: Pool) {\r\n  return POOLS.Metadata[pool.id]?.hasIcon\r\n    ? [pool.address]\r\n    : orderedTokenAddresses(pool);\r\n}\r\n</script>\r\n\r\n<template>\r\n  <BalCard\r\n    shadow=\"lg\"\r\n    :square=\"upToLargeBreakpoint\"\r\n    :noBorder=\"upToLargeBreakpoint\"\r\n    noPad\r\n  >\r\n    <BalTable\r\n      :columns=\"visibleColumns\"\r\n      :data=\"data\"\r\n      :noResultsLabel=\"noPoolsLabel\"\r\n      :isLoading=\"isLoading\"\r\n      :isLoadingMore=\"isLoadingMore\"\r\n      :skeletonClass=\"skeletonClass\"\r\n      sticky=\"both\"\r\n      :square=\"upToLargeBreakpoint\"\r\n      :onRowClick=\"handleRowClick\"\r\n      :isPaginated=\"isPaginated\"\r\n      isOnlyDescSort\r\n      :initialState=\"{\r\n        sortColumn: sortColumn,\r\n        sortDirection: 'desc',\r\n      }\"\r\n      @on-column-sort=\"emit('onColumnSort', $event)\"\r\n      @load-more=\"emit('loadMore')\"\r\n    >\r\n      <template #iconColumnHeader>\r\n        <div class=\"flex items-center\">\r\n          <img v-if=\"darkMode\" :src=\"TokensWhite\" alt=\"token\" />\r\n          <img v-else :src=\"TokensBlack\" alt=\"token\" />\r\n        </div>\r\n      </template>\r\n      <template #iconColumnCell=\"pool\">\r\n        <div v-if=\"!isLoading\" class=\"py-4 px-6\">\r\n          <BalAssetSet :addresses=\"iconAddresses(pool)\" :width=\"100\" />\r\n        </div>\r\n      </template>\r\n      <template #poolNameCell=\"pool\">\r\n        <div v-if=\"!isLoading\" class=\"flex items-center py-4 px-6\">\r\n          <div v-if=\"POOLS.Metadata[pool.id]\" class=\"text-left\">\r\n            {{ POOLS.Metadata[pool.id].name }}\r\n          </div>\r\n          <div v-else>\r\n            <TokenPills\r\n              :tokens=\"orderedPoolTokens(pool, pool.tokens)\"\r\n              :isStablePool=\"isStableLike(pool.poolType)\"\r\n              :selectedTokens=\"selectedTokens\"\r\n              :pickedTokens=\"selectedTokens\"\r\n            />\r\n          </div>\r\n          <BalChip\r\n            v-if=\"isLiquidityBootstrapping(pool.poolType)\"\r\n            label=\"LBP\"\r\n            color=\"amber\"\r\n          />\r\n          <BalChipNew v-else-if=\"pool?.isNew\" class=\"mt-1\" />\r\n          <PoolWarningTooltip :pool=\"pool\" />\r\n        </div>\r\n      </template>\r\n      <template #volumeCell=\"pool\">\r\n        <div\r\n          :key=\"columnStates.volume\"\r\n          class=\"flex justify-end py-4 px-6 -mt-1 font-numeric\"\r\n        >\r\n          <BalLoadingBlock v-if=\"!pool?.volumeSnapshot\" class=\"w-12 h-4\" />\r\n          <span v-else class=\"text-right\">\r\n            {{\r\n              fNum(\r\n                pool?.volumeSnapshot < VOLUME_THRESHOLD\r\n                  ? pool?.volumeSnapshot\r\n                  : '-',\r\n                {\r\n                  style: 'currency',\r\n                  maximumFractionDigits: 0,\r\n                }\r\n              )\r\n            }}\r\n          </span>\r\n        </div>\r\n      </template>\r\n      <template #aprCell=\"pool\">\r\n        <div\r\n          :key=\"columnStates.aprs\"\r\n          :class=\"[\r\n            'flex justify-end py-4 px-6 -mt-1 font-numeric text-right',\r\n            {\r\n              'text-gray-300 dark:text-gray-600 line-through': isLBP(\r\n                pool.poolType\r\n              ),\r\n            },\r\n          ]\"\r\n        >\r\n          <BalLoadingBlock v-if=\"!pool?.apr\" class=\"w-12 h-4\" />\r\n          <template v-else>\r\n            {{ aprLabelFor(pool) }}\r\n            <BalTooltip\r\n              v-if=\"isLBP(pool.poolType)\"\r\n              width=\"36\"\r\n              :text=\"$t('lbpAprTooltip')\"\r\n              iconSize=\"sm\"\r\n              iconClass=\"ml-1\"\r\n            />\r\n            <APRTooltip v-else-if=\"pool?.apr\" :pool=\"pool\" />\r\n          </template>\r\n        </div>\r\n      </template>\r\n      <template #migrateCell=\"pool\">\r\n        <div class=\"flex justify-center py-4 px-2\">\r\n          <BalBtn\r\n            v-if=\"isMigratablePool(pool)\"\r\n            color=\"gradient\"\r\n            size=\"sm\"\r\n            @click.prevent=\"navigateToPoolMigration(pool)\"\r\n          >\r\n            {{ $t('migrate') }}\r\n          </BalBtn>\r\n        </div>\r\n      </template>\r\n      <template #lockEndDateCell=\"pool\">\r\n        <div class=\"py-4 px-6 text-right\">\r\n          {{ lockedUntil(pool.lockedEndDate) }}\r\n        </div>\r\n      </template>\r\n      <template #actionsCell=\"pool\">\r\n        <PoolsTableActionsCell\r\n          :pool=\"pool\"\r\n          :poolsType=\"poolsType\"\r\n          @click:stake=\"pool => emit('triggerStake', pool)\"\r\n          @click:unstake=\"pool => emit('triggerUnstake', pool)\"\r\n          @click:migrate=\"pool => navigateToPoolMigration(pool)\"\r\n        />\r\n      </template>\r\n    </BalTable>\r\n  </BalCard>\r\n</template>\r\n","/**\r\n * Provides all user staking related data.\r\n */\r\nimport usePoolsQuery from '@/composables/queries/usePoolsQuery';\r\nimport { isQueryLoading } from '@/composables/queries/useQueryHelpers';\r\nimport { isGnosis } from '@/composables/useNetwork';\r\nimport { fiatValueOf } from '@/composables/usePool';\r\nimport symbolKeys from '@/constants/symbol.keys';\r\nimport { Pool } from '@/services/pool/types';\r\nimport { computed, InjectionKey, provide, reactive, ref } from 'vue';\r\nimport { safeInject } from '../inject';\r\nimport { useUserData } from '../user-data.provider';\r\n\r\nconst provider = () => {\r\n  /**\r\n   * COMPOSABLES\r\n   */\r\n  const { userGaugeSharesQuery, userBoostsQuery, stakedSharesQuery } =\r\n    useUserData();\r\n\r\n  /**\r\n   * COMPUTED\r\n   */\r\n  const { data: userGaugeShares } = userGaugeSharesQuery;\r\n  const { data: poolBoostsMap } = userBoostsQuery;\r\n  const { data: stakedShares } = stakedSharesQuery;\r\n\r\n  // Array of all the pools a user has staked BPT for.\r\n  const stakedPoolIds = computed((): string[] => {\r\n    if (!userGaugeShares.value) return [];\r\n\r\n    return userGaugeShares.value.map(gaugeShare => gaugeShare.gauge.poolId);\r\n  });\r\n\r\n  const isPoolsQueryEnabled = computed(\r\n    (): boolean => stakedPoolIds.value.length > 0\r\n  );\r\n\r\n  const stakedPoolsQuery = usePoolsQuery(\r\n    ref([]),\r\n    reactive({\r\n      enabled: isPoolsQueryEnabled,\r\n    }),\r\n    {\r\n      poolIds: stakedPoolIds,\r\n      pageSize: 999,\r\n    }\r\n  );\r\n  const { data: _stakedPools, refetch: refetchStakedPools } = stakedPoolsQuery;\r\n\r\n  // Pool records for all the pools where a user has staked BPT.\r\n  const stakedPools = computed(\r\n    (): Pool[] => _stakedPools.value?.pages[0].pools || []\r\n  );\r\n\r\n  // Total fiat value of staked shares.\r\n  const totalStakedValue = computed((): string => {\r\n    return Object.keys(stakedShares.value || {})\r\n      .reduce((acc, poolId) => {\r\n        const pool = stakedPools.value.find(pool => pool.id === poolId);\r\n        if (!pool) return acc;\r\n        const bpt = stakedShares?.value?.[poolId] || '0';\r\n        return acc + Number(fiatValueOf(pool, bpt));\r\n      }, 0)\r\n      .toString();\r\n  });\r\n\r\n  // Is loading any user staking data?\r\n  const isLoading = computed((): boolean => {\r\n    return isGnosis.value\r\n      ? isQueryLoading(stakedPoolsQuery)\r\n      : isQueryLoading(userGaugeSharesQuery) ||\r\n          isQueryLoading(stakedSharesQuery) ||\r\n          isQueryLoading(userBoostsQuery) ||\r\n          isQueryLoading(stakedPoolsQuery);\r\n  });\r\n\r\n  /**\r\n   * Gets a user's staked BPT balance for a given pool.\r\n   *\r\n   * @param {string} poolId - The pool to get the staked balance for.\r\n   * @returns The staked balance.\r\n   */\r\n  function stakedSharesFor(poolId: string): string {\r\n    return stakedShares?.value?.[poolId] || '0';\r\n  }\r\n\r\n  return {\r\n    stakedPools,\r\n    stakedShares,\r\n    poolBoostsMap,\r\n    totalStakedValue,\r\n    isLoading,\r\n    refetchStakedPools,\r\n    stakedSharesFor,\r\n  };\r\n};\r\n\r\n/**\r\n * Provide setup: response type + symbol.\r\n */\r\nexport type UserStakingResponse = ReturnType<typeof provider>;\r\nexport const UserStakingProviderSymbol: InjectionKey<UserStakingResponse> =\r\n  Symbol(symbolKeys.Providers.UserStaking);\r\n\r\nexport function provideUserStaking(): UserStakingResponse {\r\n  const _provider = provider();\r\n  provide(UserStakingProviderSymbol, _provider);\r\n  return _provider;\r\n}\r\n\r\nexport function useUserStaking(): UserStakingResponse {\r\n  return safeInject(UserStakingProviderSymbol);\r\n}\r\n","import { InjectionKey } from 'vue';\r\nimport { UserStakingResponse } from '@/providers/local/user-staking.provider';\r\nimport { useUserData } from '@/providers/user-data.provider';\r\nimport { Pool } from '@/services/pool/types';\r\nimport { bnSum } from '@/lib/utils';\r\nimport symbolKeys from '@/constants/symbol.keys';\r\nimport { safeInject } from '../inject';\r\nimport { useLock } from '@/composables/useLock';\r\nimport usePoolsQuery from '@/composables/queries/usePoolsQuery';\r\nimport { fiatValueOf } from '@/composables/usePool';\r\nimport { isQueryLoading } from '@/composables/queries/useQueryHelpers';\r\nimport { isVeBalSupported } from '@/composables/useVeBAL';\r\nimport { useTokens } from '../tokens.provider';\r\n\r\n/**\r\n * Provides user pools data. Primarily for the portfolio page.\r\n */\r\nexport const provider = (userStaking: UserStakingResponse) => {\r\n  const {\r\n    stakedPools,\r\n    totalStakedValue,\r\n    refetchStakedPools,\r\n    isLoading: isStakedDataLoading,\r\n  } = userStaking;\r\n\r\n  // Access user data fetched on wallet connection/change.\r\n  const { userPoolSharesQuery, lockQuery } = useUserData();\r\n  const { data: userPoolShares, refetch: refetchUserPoolShares } =\r\n    userPoolSharesQuery;\r\n\r\n  const { totalLockedValue } = useLock();\r\n  const { injectTokens } = useTokens();\r\n\r\n  // Array of pool IDs that the user hasn't staked.\r\n  const unstakedPoolIds = computed((): string[] =>\r\n    Object.keys(userPoolShares.value || {})\r\n  );\r\n\r\n  // Only fetch unstaked pools if the user has pool shares.\r\n  const isPoolsQueryEnabled = computed(\r\n    (): boolean => unstakedPoolIds.value.length > 0\r\n  );\r\n\r\n  // Fetch pools that the user hasn't staked.\r\n  const unstakedPoolsQuery = usePoolsQuery(\r\n    ref([]),\r\n    reactive({\r\n      enabled: isPoolsQueryEnabled,\r\n    }),\r\n    {\r\n      poolIds: unstakedPoolIds,\r\n      pageSize: 999,\r\n    }\r\n  );\r\n  const { data: _unstakedPools } = unstakedPoolsQuery;\r\n\r\n  // Helper property to drill down to first page of results.\r\n  const unstakedPools = computed(\r\n    (): Pool[] => _unstakedPools.value?.pages[0].pools || []\r\n  );\r\n\r\n  // Combine staked and unstaked pools.\r\n  const userPools = computed((): Pool[] => [\r\n    ...unstakedPools.value,\r\n    ...stakedPools.value,\r\n  ]);\r\n\r\n  // Total fiat value of unstaked positions.\r\n  const totalUnstakedValue = computed((): string => {\r\n    return Object.keys(userPoolShares.value || {})\r\n      .reduce((acc, poolId) => {\r\n        const pool = userPools.value.find(pool => pool.id === poolId);\r\n        if (!pool) return acc;\r\n        const bpt = userPoolShares?.value?.[poolId] || '0';\r\n        return acc + Number(fiatValueOf(pool, bpt));\r\n      }, 0)\r\n      .toString();\r\n  });\r\n\r\n  // Total portfolio fiat value, including staked, unstaked, and locked positions.\r\n  const totalFiatValue = computed((): string =>\r\n    bnSum([\r\n      totalUnstakedValue.value,\r\n      totalStakedValue.value,\r\n      totalLockedValue.value,\r\n    ]).toString()\r\n  );\r\n\r\n  const isLoading = computed(\r\n    (): boolean =>\r\n      isStakedDataLoading.value ||\r\n      isQueryLoading(userPoolSharesQuery) ||\r\n      isQueryLoading(unstakedPoolsQuery) ||\r\n      (isVeBalSupported.value && isQueryLoading(lockQuery))\r\n  );\r\n\r\n  // Trigger refetch of queries for staked and unstaked pools.\r\n  async function refetchAllUserPools() {\r\n    await Promise.all([refetchUserPoolShares(), refetchStakedPools()]);\r\n  }\r\n\r\n  // Whenever new pools show up in the user pools array, inject their tokens so\r\n  // that we can add the user's balance to the token registry.\r\n  watch(userPools, newUserPools => {\r\n    injectTokens(newUserPools.map(pool => pool.address));\r\n  });\r\n\r\n  return {\r\n    stakedPools,\r\n    unstakedPools,\r\n    userPoolShares,\r\n    totalFiatValue,\r\n    isLoading,\r\n    refetchAllUserPools,\r\n  };\r\n};\r\n\r\nexport type UserPoolsProviderResponse = ReturnType<typeof provider>;\r\nexport const UserPoolsProviderSymbol: InjectionKey<UserPoolsProviderResponse> =\r\n  Symbol(symbolKeys.Providers.UserPools);\r\n\r\nexport function providerUserPools(userStaking: UserStakingResponse) {\r\n  provide(UserPoolsProviderSymbol, provider(userStaking));\r\n}\r\n\r\nexport function useUserPools(): UserPoolsProviderResponse {\r\n  return safeInject(UserPoolsProviderSymbol);\r\n}\r\n","<script setup lang=\"ts\">\r\nimport { useI18n } from 'vue-i18n';\r\nimport PoolsTable from '@/components/tables/PoolsTable/PoolsTable.vue';\r\nimport { isL2 } from '@/composables/useNetwork';\r\nimport { configService } from '@/services/config/config.service';\r\nimport useWeb3 from '@/services/web3/useWeb3';\r\nimport { useUserStaking } from '@/providers/local/user-staking.provider';\r\nimport { Pool } from '@/services/pool/types';\r\nimport { useUserPools } from '@/providers/local/user-pools.provider';\r\nimport StakePreviewModal from '../pool/staking/StakePreviewModal.vue';\r\nimport { providePoolStaking } from '@/providers/local/pool-staking.provider';\r\n\r\n/**\r\n * STATE\r\n */\r\nconst showUnstakeModal = ref(false);\r\nconst poolToUnstake = ref<Pool | undefined>();\r\n\r\n/**\r\n * PROVIDERS\r\n */\r\nprovidePoolStaking();\r\n\r\n/**\r\n * COMPOSABLES\r\n */\r\nconst { stakedPools, poolBoostsMap, stakedShares, isLoading } =\r\n  useUserStaking();\r\nconst { refetchAllUserPools } = useUserPools();\r\nconst { isWalletReady, isWalletConnecting } = useWeb3();\r\nconst { t } = useI18n();\r\nconst networkName = configService.network.shortName;\r\n\r\n/**\r\n * COMPUTED\r\n */\r\nconst noPoolsLabel = computed(() => {\r\n  return isWalletReady.value || isWalletConnecting.value\r\n    ? t('noStakedInvestments', [networkName])\r\n    : t('connectYourWallet');\r\n});\r\n\r\nconst hiddenColumns = computed(() => {\r\n  const _hiddenColumns = ['poolVolume', 'migrate', 'lockEndDate'];\r\n  if (isL2.value) _hiddenColumns.push('myBoost');\r\n\r\n  return _hiddenColumns;\r\n});\r\n\r\nconst poolsToRenderKey = computed(() => JSON.stringify(stakedPools.value));\r\n\r\n/**\r\n * METHODS\r\n */\r\nfunction handleUnstake(pool: Pool) {\r\n  showUnstakeModal.value = true;\r\n  poolToUnstake.value = pool;\r\n}\r\n\r\nfunction handleModalClose() {\r\n  refetchAllUserPools();\r\n  showUnstakeModal.value = false;\r\n}\r\n\r\nasync function handleUnstakeSuccess() {\r\n  await refetchAllUserPools();\r\n}\r\n</script>\r\n\r\n<template>\r\n  <div>\r\n    <BalStack vertical spacing=\"sm\">\r\n      <h5 class=\"px-4 xl:px-0\">\r\n        {{ $t('staking.stakedPools') }}\r\n      </h5>\r\n      <PoolsTable\r\n        :key=\"poolsToRenderKey\"\r\n        :data=\"stakedPools\"\r\n        :shares=\"stakedShares\"\r\n        :boosts=\"poolBoostsMap\"\r\n        poolsType=\"staked\"\r\n        :noPoolsLabel=\"noPoolsLabel\"\r\n        :hiddenColumns=\"hiddenColumns\"\r\n        sortColumn=\"myBalance\"\r\n        :isLoading=\"isWalletReady && isLoading\"\r\n        showPoolShares\r\n        showActions\r\n        :showBoost=\"!isL2\"\r\n        @trigger-unstake=\"handleUnstake\"\r\n      />\r\n    </BalStack>\r\n    <StakePreviewModal\r\n      v-if=\"poolToUnstake\"\r\n      :pool=\"poolToUnstake\"\r\n      :isVisible=\"showUnstakeModal\"\r\n      action=\"unstake\"\r\n      @close=\"handleModalClose\"\r\n      @success=\"handleUnstakeSuccess\"\r\n    />\r\n  </div>\r\n</template>\r\n","<script setup lang=\"ts\">\r\nimport { useI18n } from 'vue-i18n';\r\nimport PoolsTable from '@/components/tables/PoolsTable/PoolsTable.vue';\r\nimport { configService } from '@/services/config/config.service';\r\nimport { Pool } from '@/services/pool/types';\r\nimport useWeb3 from '@/services/web3/useWeb3';\r\nimport { useUserPools } from '@/providers/local/user-pools.provider';\r\nimport StakePreviewModal from '@/components/contextual/pages/pool/staking/StakePreviewModal.vue';\r\nimport { providePoolStaking } from '@/providers/local/pool-staking.provider';\r\n\r\n/**\r\n * STATE\r\n */\r\nconst showStakeModal = ref(false);\r\nconst stakePool = ref<Pool | undefined>();\r\nconst networkName = configService.network.shortName;\r\nconst hiddenColumns = ['poolVolume', 'migrate', 'lockEndDate'];\r\n\r\n/**\r\n * PROVIDERS\r\n */\r\nprovidePoolStaking();\r\n\r\n/**\r\n * COMPOSABLES\r\n */\r\nconst { isWalletReady, isWalletConnecting } = useWeb3();\r\nconst { t } = useI18n();\r\nconst {\r\n  unstakedPools,\r\n  userPoolShares,\r\n  refetchAllUserPools,\r\n  isLoading: isLoadingPools,\r\n} = useUserPools();\r\n\r\n/**\r\n * COMPUTED\r\n */\r\nconst noPoolsLabel = computed(() => {\r\n  return isWalletReady.value || isWalletConnecting.value\r\n    ? t('noUnstakedInvestments', [networkName])\r\n    : t('connectYourWallet');\r\n});\r\n\r\nconst poolsToRenderKey = computed(() => JSON.stringify(unstakedPools.value));\r\n\r\n/**\r\n * METHODS\r\n */\r\nfunction handleStake(pool: Pool) {\r\n  showStakeModal.value = true;\r\n  stakePool.value = pool;\r\n}\r\n\r\nfunction handleModalClose() {\r\n  refetchAllUserPools();\r\n  showStakeModal.value = false;\r\n}\r\n\r\nasync function handleStakeSuccess() {\r\n  await refetchAllUserPools();\r\n}\r\n\r\nonMounted(() => {\r\n  refetchAllUserPools();\r\n});\r\n</script>\r\n\r\n<template>\r\n  <div>\r\n    <BalStack vertical spacing=\"sm\">\r\n      <h5 class=\"px-4 xl:px-0\">\r\n        {{ $t('staking.unstakedPools') }}\r\n      </h5>\r\n      <PoolsTable\r\n        :key=\"poolsToRenderKey\"\r\n        :isLoading=\"isWalletReady && isLoadingPools\"\r\n        :data=\"unstakedPools\"\r\n        :shares=\"userPoolShares\"\r\n        :noPoolsLabel=\"noPoolsLabel\"\r\n        sortColumn=\"myBalance\"\r\n        :hiddenColumns=\"hiddenColumns\"\r\n        showPoolShares\r\n        showActions\r\n        @trigger-stake=\"handleStake\"\r\n      />\r\n    </BalStack>\r\n    <StakePreviewModal\r\n      v-if=\"stakePool\"\r\n      :pool=\"stakePool\"\r\n      :isVisible=\"showStakeModal\"\r\n      action=\"stake\"\r\n      @close=\"handleModalClose\"\r\n      @success=\"handleStakeSuccess\"\r\n    />\r\n  </div>\r\n</template>\r\n","<script setup lang=\"ts\">\r\nimport { computed } from 'vue';\r\n\r\nimport PoolsTable from '@/components/tables/PoolsTable/PoolsTable.vue';\r\nimport { useLock } from '@/composables/useLock';\r\nimport { VeBalLockInfo } from '@/services/balancer/contracts/contracts/veBAL';\r\nimport { Pool } from '@/services/pool/types';\r\n\r\n/**\r\n * PROPS\r\n */\r\ntype Props = {\r\n  lockPool: Pool;\r\n  lock?: VeBalLockInfo;\r\n};\r\nconst props = defineProps<Props>();\r\n\r\n/** COMPOSABLES */\r\nconst { totalLockedShares } = useLock();\r\n\r\n/** COMPUTED */\r\nconst lockPools = computed<Pool[]>(() => {\r\n  if (props.lockPool) {\r\n    return [\r\n      {\r\n        ...props.lockPool,\r\n        lockedEndDate:\r\n          props.lock?.hasExistingLock && !props.lock?.isExpired\r\n            ? props.lock?.lockedEndDate\r\n            : undefined,\r\n      },\r\n    ];\r\n  }\r\n  return [];\r\n});\r\n\r\nconst poolShares = computed(\r\n  (): Record<string, string> => ({\r\n    [props.lockPool.id]: totalLockedShares.value,\r\n  })\r\n);\r\n\r\nconst poolsToRenderKey = computed(() => JSON.stringify(lockPools.value));\r\n\r\nconst hiddenColumns = ['poolVolume', 'migrate', 'actions', 'myBoost'];\r\n</script>\r\n\r\n<template>\r\n  <div>\r\n    <BalStack vertical spacing=\"sm\">\r\n      <h5 class=\"px-4 xl:px-0\">\r\n        {{ $t('veBalProtocolLiquidity') }}\r\n      </h5>\r\n      <PoolsTable\r\n        :key=\"poolsToRenderKey\"\r\n        :data=\"lockPools\"\r\n        :shares=\"poolShares\"\r\n        :hiddenColumns=\"hiddenColumns\"\r\n        sortColumn=\"myBalance\"\r\n        showPoolShares\r\n      />\r\n    </BalStack>\r\n  </div>\r\n</template>\r\n","<script lang=\"ts\" setup>\r\nimport { computed } from 'vue';\r\nimport { useRouter } from 'vue-router';\r\n\r\nimport AppHero from '@/components/heros/AppHero.vue';\r\nimport { useLock } from '@/composables/useLock';\r\nimport useNetwork, { isL2 } from '@/composables/useNetwork';\r\nimport useNumbers, { FNumFormats } from '@/composables/useNumbers';\r\nimport useWeb3 from '@/services/web3/useWeb3';\r\n\r\nimport HeroConnectWalletButton from './HeroConnectWalletButton.vue';\r\nimport { useUserPools } from '@/providers/local/user-pools.provider';\r\n\r\n/**\r\n * COMPOSABLES\r\n */\r\nconst router = useRouter();\r\nconst { fNum } = useNumbers();\r\nconst { isWalletReady, isWalletConnecting } = useWeb3();\r\nconst { totalFiatValue, isLoading: isLoadingPools } = useUserPools();\r\nconst { totalLockedValue } = useLock();\r\nconst { networkSlug } = useNetwork();\r\n\r\n/**\r\n * COMPUTED\r\n */\r\nconst classes = computed(() => ({\r\n  ['h-48']: !isWalletReady.value && !isWalletConnecting.value,\r\n  ['h-44']: isWalletReady.value || isWalletConnecting.value,\r\n}));\r\n\r\nconst totalInvestedLabel = computed((): string =>\r\n  fNum(totalFiatValue.value, FNumFormats.fiat)\r\n);\r\n\r\nconst totalVeBalLabel = computed((): string =>\r\n  fNum(totalLockedValue.value, FNumFormats.fiat)\r\n);\r\n\r\nconst isLoadingTotalValue = computed((): boolean => isLoadingPools.value);\r\n</script>\r\n\r\n<template>\r\n  <AppHero :class=\"classes\">\r\n    <h1\r\n      class=\"mb-2 font-body text-base font-medium text-white opacity-90\"\r\n      v-text=\"$t('myBalancerBalance')\"\r\n    />\r\n\r\n    <template v-if=\"isWalletReady || isWalletConnecting\">\r\n      <BalLoadingBlock\r\n        v-if=\"isLoadingTotalValue\"\r\n        class=\"mx-auto w-40 h-10\"\r\n        white\r\n      />\r\n      <div v-else class=\"mb-1 text-3xl font-semibold text-white\">\r\n        {{ totalInvestedLabel }}\r\n      </div>\r\n      <div v-if=\"!isL2\" class=\"inline-block relative mt-2\">\r\n        <BalLoadingBlock\r\n          v-if=\"isLoadingTotalValue\"\r\n          class=\"mx-auto w-40 h-8\"\r\n          white\r\n        />\r\n        <div\r\n          v-else\r\n          class=\"group flex items-center px-3 h-8 text-sm font-medium text-yellow-500 hover:text-white focus:text-white rounded-tr rounded-bl border border-yellow-500 transition-colors cursor-pointer vebal-banner\"\r\n          @click=\"router.push({ name: 'vebal', params: { networkSlug } })\"\r\n        >\r\n          <span v-if=\"totalLockedValue === '0'\"\r\n            >{{ totalLockedValue }} {{ $t('veBAL.hero.tokens.veBAL') }}</span\r\n          >\r\n          <span v-else>{{ $t('inclXInVeBal', [totalVeBalLabel]) }}</span>\r\n        </div>\r\n      </div>\r\n    </template>\r\n    <template v-else>\r\n      <div class=\"text-3xl font-semibold text-white\">\r\n        {{ fNum('0', FNumFormats.fiat) }}\r\n      </div>\r\n      <HeroConnectWalletButton class=\"mt-4\" />\r\n    </template>\r\n  </AppHero>\r\n</template>\r\n\r\n<style>\r\n.vebal-banner::before {\r\n  @apply border border-yellow-500;\r\n\r\n  content: '';\r\n  width: 16px;\r\n  height: 6px;\r\n  left: 0;\r\n  top: -5px;\r\n  position: absolute;\r\n  border-top-left-radius: 8px;\r\n}\r\n\r\n.vebal-banner::after {\r\n  @apply border border-yellow-500;\r\n\r\n  content: '';\r\n  width: 16px;\r\n  height: 6px;\r\n  bottom: -5px;\r\n  right: 0;\r\n  position: absolute;\r\n  border-bottom-right-radius: 8px;\r\n}\r\n</style>\r\n","<script setup lang=\"ts\">\r\nimport StakedPoolsTable from '@/components/contextual/pages/pools/StakedPoolsTable.vue';\r\nimport UnstakedPoolsTable from '@/components/contextual/pages/pools/UnstakedPoolsTable.vue';\r\nimport VeBalPoolTable from '@/components/contextual/pages/pools/VeBalPoolTable.vue';\r\nimport PortfolioPageHero from '@/components/heros/PortfolioPageHero.vue';\r\nimport { useLock } from '@/composables/useLock';\r\nimport { providerUserPools } from '@/providers/local/user-pools.provider';\r\nimport { provideUserStaking } from '@/providers/local/user-staking.provider';\r\n\r\n/**\r\n * PROVIDERS\r\n */\r\nconst userStaking = provideUserStaking();\r\nproviderUserPools(userStaking);\r\n\r\n/**\r\n * COMPOSABLES\r\n */\r\nconst { lockPool, lock } = useLock();\r\n</script>\r\n\r\n<template>\r\n  <div>\r\n    <PortfolioPageHero />\r\n    <div class=\"xl:container xl:px-4 pt-10 md:pt-12 xl:mx-auto\">\r\n      <BalStack vertical>\r\n        <div class=\"px-4 xl:px-0\">\r\n          <BalStack horizontal justify=\"between\" align=\"center\">\r\n            <h3>{{ $t('myLiquidityInBalancerPools') }}</h3>\r\n          </BalStack>\r\n        </div>\r\n        <BalStack vertical spacing=\"2xl\">\r\n          <UnstakedPoolsTable />\r\n          <StakedPoolsTable />\r\n          <VeBalPoolTable\r\n            v-if=\"lockPool && Number(lock?.lockedAmount) > 0\"\r\n            :lock=\"lock\"\r\n            :lockPool=\"lockPool\"\r\n          />\r\n        </BalStack>\r\n      </BalStack>\r\n    </div>\r\n  </div>\r\n</template>\r\n"],"names":["_hoisted_1","_sfc_render","_ctx","_cache","_openBlock","_createElementBlock","startConnectWithInjectedProvider","useWeb3","trackGoal","Goals","useFathom","darkMode","useDarkMode","onClickConnect","isMigratablePool","usePool","toRef","props","networkSlug","useNetwork","stakablePoolIds","computed","POOLS","showVeBalLock","isVeBalPool","TokensWhite","TokensBlack","fNum","useNumbers","router","useRouter","t","useI18n","upToLargeBreakpoint","upToSmallBreakpoint","useBreakpoints","wideCompositionWidth","columns","pool","bnum","boostFor","balanceValue","apr","volume","VOLUME_THRESHOLD","_a","absMaxApr","APR_THRESHOLD","visibleColumns","column","handleRowClick","inNewTab","route","navigateToPoolMigration","POOL_MIGRATIONS_MAP","bpt","fiatValueOf","aprLabelFor","poolAPRs","totalAprLabel","lockedUntil","lockEndDate","format","PRETTY_DATE_FORMAT","iconAddresses","orderedTokenAddresses","provider","userGaugeSharesQuery","userBoostsQuery","stakedSharesQuery","useUserData","userGaugeShares","poolBoostsMap","stakedShares","stakedPoolIds","gaugeShare","isPoolsQueryEnabled","stakedPoolsQuery","usePoolsQuery","ref","reactive","_stakedPools","refetchStakedPools","stakedPools","totalStakedValue","acc","poolId","isLoading","isGnosis","isQueryLoading","stakedSharesFor","UserStakingProviderSymbol","symbolKeys","provideUserStaking","_provider","provide","useUserStaking","safeInject","userStaking","isStakedDataLoading","userPoolSharesQuery","lockQuery","userPoolShares","refetchUserPoolShares","totalLockedValue","useLock","injectTokens","useTokens","unstakedPoolIds","unstakedPoolsQuery","_unstakedPools","unstakedPools","userPools","totalUnstakedValue","pool2","totalFiatValue","bnSum","isVeBalSupported","refetchAllUserPools","watch","newUserPools","UserPoolsProviderSymbol","providerUserPools","useUserPools","showUnstakeModal","poolToUnstake","providePoolStaking","isWalletReady","isWalletConnecting","networkName","configService","noPoolsLabel","hiddenColumns","_hiddenColumns","isL2","poolsToRenderKey","handleUnstake","handleModalClose","handleUnstakeSuccess","showStakeModal","stakePool","isLoadingPools","handleStake","handleStakeSuccess","onMounted","totalLockedShares","lockPools","_b","_c","poolShares","classes","totalInvestedLabel","FNumFormats","totalVeBalLabel","isLoadingTotalValue","lockPool","lock"],"mappings":"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"}