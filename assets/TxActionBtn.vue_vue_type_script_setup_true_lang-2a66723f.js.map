{"version":3,"file":"TxActionBtn.vue_vue_type_script_setup_true_lang-2a66723f.js","sources":["../../src/components/btns/TxActionBtn/TxActionBtn.vue"],"sourcesContent":["<script lang=\"ts\" setup>\r\nimport {\r\n  TransactionReceipt,\r\n  TransactionResponse,\r\n} from '@ethersproject/abstract-provider';\r\nimport { useI18n } from 'vue-i18n';\r\n\r\nimport useEthers from '@/composables/useEthers';\r\nimport useTransactions, {\r\n  TransactionAction,\r\n} from '@/composables/useTransactions';\r\nimport useWeb3 from '@/services/web3/useWeb3';\r\n\r\n/**\r\n * TYPES\r\n */\r\ntype Props = {\r\n  actionFn: () => Promise<TransactionResponse>;\r\n  action: TransactionAction;\r\n  summary: string;\r\n  confirmingLabel: string;\r\n  onConfirmFn?: () => unknown;\r\n  disabled?: boolean;\r\n};\r\n\r\n/**\r\n * PROPS & EMITS\r\n */\r\nconst props = withDefaults(defineProps<Props>(), {\r\n  disabled: false,\r\n});\r\n\r\nconst emit = defineEmits<{\r\n  (e: 'init'): void;\r\n  (e: 'confirming', value: TransactionResponse): void;\r\n  (e: 'confirmed', value: TransactionReceipt): void;\r\n  (e: 'failed'): void;\r\n}>();\r\n\r\n/**\r\n * COMPOSABLES\r\n */\r\nconst { t } = useI18n();\r\nconst { addTransaction } = useTransactions();\r\nconst { txListener } = useEthers();\r\nconst { isMismatchedNetwork } = useWeb3();\r\n\r\n/**\r\n * TYPES\r\n */\r\nenum BtnStates {\r\n  Default,\r\n  Init,\r\n  Confirming,\r\n  Confirmed,\r\n}\r\n\r\n/**\r\n * STATE\r\n */\r\nconst btnState = ref(BtnStates.Default);\r\n\r\n/**\r\n * COMPUTED\r\n */\r\nconst isWaitingOnWallet = computed(() => btnState.value === BtnStates.Init);\r\nconst isConfirming = computed(() => btnState.value === BtnStates.Confirming);\r\n\r\nconst loadingLabel = computed(() =>\r\n  isWaitingOnWallet.value ? t('confirm') : props.confirmingLabel\r\n);\r\n\r\n/**\r\n * METHODS\r\n */\r\nasync function initTx() {\r\n  try {\r\n    btnState.value = BtnStates.Init;\r\n    emit('init');\r\n\r\n    const tx = await props.actionFn();\r\n\r\n    btnState.value = BtnStates.Confirming;\r\n    emit('confirming', tx);\r\n\r\n    addTransaction({\r\n      id: tx.hash,\r\n      type: 'tx',\r\n      action: props.action,\r\n      summary: props.summary,\r\n    });\r\n\r\n    await txListener(tx, {\r\n      onTxConfirmed: async (receipt: TransactionReceipt) => {\r\n        if (props.onConfirmFn) props.onConfirmFn();\r\n\r\n        btnState.value = BtnStates.Confirmed;\r\n        emit('confirmed', receipt);\r\n      },\r\n      onTxFailed: () => {\r\n        console.error('Tx failed');\r\n        btnState.value = BtnStates.Default;\r\n        emit('failed');\r\n      },\r\n    });\r\n  } catch (error) {\r\n    btnState.value = BtnStates.Default;\r\n    console.error(error);\r\n  }\r\n}\r\n</script>\r\n\r\n<template>\r\n  <BalBtn\r\n    :loadingLabel=\"loadingLabel\"\r\n    :loading=\"isWaitingOnWallet || isConfirming\"\r\n    :disabled=\"props.disabled || isMismatchedNetwork\"\r\n    @click.stop=\"initTx\"\r\n  />\r\n</template>\r\n"],"names":["t","useI18n","addTransaction","useTransactions","txListener","useEthers","isMismatchedNetwork","useWeb3","btnState","ref","isWaitingOnWallet","computed","isConfirming","loadingLabel","props","initTx","emit","tx","receipt","error"],"mappings":"8VA0CA,CAAA,EAAAA,GAAAC,IACA,CAAA,eAAAC,GAAAC,IACA,CAAA,WAAAC,GAAAC,IACA,CAAA,oBAAAC,GAAAC,IAeAC,EAAAC,EAAA,GAKAC,EAAAC,EAAA,IAAAH,EAAA,QAAA,CAAA,EACAI,EAAAD,EAAA,IAAAH,EAAA,QAAA,CAAA,EAEAK,EAAAF,EAAqB,IAAAD,EAAA,MAAAV,EAAA,SAAA,EAAAc,EAAA,eAC4B,EAMjD,eAAAC,GAAA,CACE,GAAA,CACEP,EAAA,MAAA,EACAQ,EAAA,MAAA,EAEA,MAAAC,EAAA,MAAAH,EAAA,WAEAN,EAAA,MAAA,EACAQ,EAAA,aAAAC,CAAA,EAEAf,EAAA,CAAe,GAAAe,EAAA,KACN,KAAA,KACD,OAAAH,EAAA,OACQ,QAAAA,EAAA,OACC,CAAA,EAGjB,MAAAV,EAAAa,EAAA,CAAqB,cAAA,MAAAC,GAAA,CAEjBJ,EAAA,aAAuBA,EAAA,YAAA,EAEvBN,EAAA,MAAA,EACAQ,EAAA,YAAAE,CAAA,CAAyB,EAC3B,WAAA,IAAA,CAEE,QAAA,MAAA,WAAA,EACAV,EAAA,MAAA,EACAQ,EAAA,QAAA,CAAa,CACf,CAAA,CACD,OAAAG,EAAA,CAEDX,EAAA,MAAA,EACA,QAAA,MAAAW,CAAA,CAAmB,CACrB"}