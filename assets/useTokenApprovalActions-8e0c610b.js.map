{"version":3,"file":"useTokenApprovalActions-8e0c610b.js","sources":["../../src/composables/approvals/types.ts","../../src/composables/approvals/useTokenApprovals.ts","../../src/composables/approvals/useTokenApprovalActions.ts"],"sourcesContent":["export enum ApprovalAction {\r\n  AddLiquidity,\r\n  Locking,\r\n  Staking,\r\n}\r\n","import { TransactionResponse } from '@ethersproject/abstract-provider';\r\nimport { getAddress } from '@ethersproject/address';\r\nimport { MaxUint256 } from '@ethersproject/constants';\r\nimport { computed, Ref, ref } from 'vue';\r\nimport { useI18n } from 'vue-i18n';\r\n\r\nimport useEthers from '@/composables/useEthers';\r\nimport { useTokens } from '@/providers/tokens.provider';\r\nimport { default as ERC20ABI } from '@/lib/abi/ERC20.json';\r\nimport { bnum } from '@/lib/utils';\r\nimport { tokenService } from '@/services/token/token.service';\r\nimport useWeb3 from '@/services/web3/useWeb3';\r\n\r\nimport useTransactions from '../useTransactions';\r\nimport { TransactionBuilder } from '@/services/web3/transactions/transaction.builder';\r\nimport { ApprovalAction } from './types';\r\n\r\nexport type ApprovalState = {\r\n  init: boolean;\r\n  confirming: boolean;\r\n  approved: boolean;\r\n};\r\n\r\nexport type ApprovalStateMap = {\r\n  [address: string]: ApprovalState;\r\n};\r\n\r\nexport type ApprovalOptions = {\r\n  spender: string;\r\n  amount: string;\r\n  state: ApprovalState;\r\n};\r\n\r\nexport default function useTokenApprovals(\r\n  tokenAddresses: Ref<string[]>,\r\n  amounts: Ref<string[]>,\r\n  actionType: ApprovalAction = ApprovalAction.AddLiquidity\r\n) {\r\n  /**\r\n   * COMPOSABLES\r\n   */\r\n  const { getSigner, appNetworkConfig, account } = useWeb3();\r\n  const { getToken, refetchAllowances, approvalsRequired, getTokens } =\r\n    useTokens();\r\n  const { txListener } = useEthers();\r\n  const { addTransaction } = useTransactions();\r\n  const { t } = useI18n();\r\n\r\n  /**\r\n   * STATE\r\n   */\r\n  const vaultApprovalStateMap = computed(\r\n    (): ApprovalStateMap =>\r\n      Object.fromEntries(\r\n        approvalsRequired(\r\n          tokenAddresses.value,\r\n          amounts.value,\r\n          appNetworkConfig.addresses.vault\r\n        ).map(address => [\r\n          address,\r\n          { init: false, confirming: false, approved: false },\r\n        ])\r\n      )\r\n  );\r\n\r\n  // Depreciate with new investment flow\r\n  const approving = ref(false);\r\n\r\n  /**\r\n   * COMPUTED\r\n   */\r\n  const requiredApprovals = computed(() =>\r\n    approvalsRequired(\r\n      tokenAddresses.value,\r\n      amounts.value,\r\n      appNetworkConfig.addresses.vault\r\n    )\r\n  );\r\n\r\n  /**\r\n   * METHODS\r\n   */\r\n  function txSummaryLabel(address: string): string {\r\n    switch (actionType) {\r\n      case ApprovalAction.Locking:\r\n        return t('transactionSummary.approveForLocking', [\r\n          getToken(address)?.symbol,\r\n        ]);\r\n      case ApprovalAction.Staking:\r\n        return t('transactionSummary.approveForStaking', [\r\n          getToken(address)?.symbol,\r\n        ]);\r\n      default:\r\n        return t('transactionSummary.approveForInvesting', [\r\n          getToken(address)?.symbol,\r\n        ]);\r\n    }\r\n  }\r\n\r\n  async function approveToken(\r\n    address: string,\r\n    options: Partial<ApprovalOptions> = {}\r\n  ): Promise<TransactionResponse> {\r\n    const defaultOptions: ApprovalOptions = {\r\n      spender: appNetworkConfig.addresses.vault,\r\n      amount: MaxUint256.toString(),\r\n      state: vaultApprovalStateMap.value[address],\r\n    };\r\n    const { spender, amount, state } = Object.assign(defaultOptions, options);\r\n\r\n    try {\r\n      state.init = true;\r\n\r\n      const txBuilder = new TransactionBuilder(getSigner());\r\n      const tx = await txBuilder.contract.sendTransaction({\r\n        contractAddress: address,\r\n        abi: ERC20ABI,\r\n        action: 'approve',\r\n        params: [spender, amount],\r\n      });\r\n\r\n      state.init = false;\r\n      state.confirming = true;\r\n\r\n      addTransaction({\r\n        id: tx.hash,\r\n        type: 'tx',\r\n        action: 'approve',\r\n        summary: txSummaryLabel(address),\r\n        details: {\r\n          contractAddress: address,\r\n          spender: spender,\r\n        },\r\n      });\r\n\r\n      txListener(tx, {\r\n        onTxConfirmed: async () => {\r\n          await refetchAllowances();\r\n          state.confirming = false;\r\n          state.approved = true;\r\n        },\r\n        onTxFailed: () => {\r\n          state.confirming = false;\r\n        },\r\n      });\r\n\r\n      return tx;\r\n    } catch (error) {\r\n      state.confirming = false;\r\n      state.init = false;\r\n      console.error(error);\r\n      return Promise.reject(error);\r\n    }\r\n  }\r\n\r\n  async function getApprovalStateMapFor(\r\n    spender: string\r\n  ): Promise<ApprovalStateMap> {\r\n    const customTokenMap = getTokens(tokenAddresses.value);\r\n\r\n    const allowances = await tokenService.allowances.get(\r\n      account.value,\r\n      [spender],\r\n      customTokenMap\r\n    );\r\n\r\n    const requiredApprovals = tokenAddresses.value\r\n      .filter((tokenAddress, i) => {\r\n        const allowance = bnum(\r\n          allowances[getAddress(spender)][getAddress(tokenAddress)]\r\n        );\r\n        return allowance.lt(amounts.value[i]);\r\n      })\r\n      .map(tokenAddress => [\r\n        tokenAddress,\r\n        { init: false, confirming: false, approved: false },\r\n      ]);\r\n\r\n    const approvalMap = Object.fromEntries(requiredApprovals);\r\n    return approvalMap;\r\n  }\r\n\r\n  return {\r\n    // state\r\n    vaultApprovalStateMap,\r\n    approving,\r\n    // computed\r\n    requiredApprovals,\r\n    // methods\r\n    approveToken,\r\n    getApprovalStateMapFor,\r\n  };\r\n}\r\n","import { MaxUint256 } from '@ethersproject/constants';\r\nimport { Ref } from 'vue';\r\nimport { useI18n } from 'vue-i18n';\r\n\r\nimport useTokenApprovals, {\r\n  ApprovalStateMap,\r\n} from '@/composables/approvals/useTokenApprovals';\r\nimport { useTokens } from '@/providers/tokens.provider';\r\nimport useWeb3 from '@/services/web3/useWeb3';\r\nimport { TransactionActionInfo } from '@/types/transactions';\r\nimport { ApprovalAction } from './types';\r\n\r\n/**\r\n * TYPES\r\n */\r\ntype ApprovalActionOptions = {\r\n  spender: string;\r\n  amount: string;\r\n  stateMap: ApprovalStateMap;\r\n};\r\n\r\nexport default function useTokenApprovalActions(\r\n  tokenAddresses: Ref<string[]>,\r\n  amounts: Ref<string[]>,\r\n  actionType: ApprovalAction = ApprovalAction.AddLiquidity\r\n) {\r\n  /**\r\n   * COMPOSABLES\r\n   */\r\n  const { t } = useI18n();\r\n  const { getToken } = useTokens();\r\n  const { vaultApprovalStateMap, approveToken, getApprovalStateMapFor } =\r\n    useTokenApprovals(tokenAddresses, amounts, actionType);\r\n  const { appNetworkConfig } = useWeb3();\r\n  const vaultAddress = appNetworkConfig.addresses.vault;\r\n\r\n  /**\r\n   * STATE\r\n   */\r\n  // Approval actions based on Vault approvals for tokenAddresses\r\n  const tokenApprovalActions: TransactionActionInfo[] =\r\n    getTokenApprovalActions();\r\n\r\n  /**\r\n   * METHODS\r\n   */\r\n  function actionLabel(symbol: string): string {\r\n    switch (actionType) {\r\n      case ApprovalAction.Locking:\r\n        return t('transactionSummary.approveForLocking', [symbol]);\r\n      case ApprovalAction.Staking:\r\n        return t('transactionSummary.approveForStaking', [symbol]);\r\n      default:\r\n        return t('transactionSummary.approveForInvesting', [symbol]);\r\n    }\r\n  }\r\n\r\n  function actionTooltip(symbol: string): string {\r\n    switch (actionType) {\r\n      case ApprovalAction.Locking:\r\n        return t('transactionSummary.tooltips.approveForLocking', [symbol]);\r\n      case ApprovalAction.Staking:\r\n        return t('transactionSummary.tooltips.approveForStaking', [symbol]);\r\n      default:\r\n        return t('transactionSummary.tooltips.approveForInvesting', [symbol]);\r\n    }\r\n  }\r\n\r\n  async function getTokenApprovalActionsForSpender(\r\n    spender: string,\r\n    amount: string = MaxUint256.toString()\r\n  ) {\r\n    const stateMap = await getApprovalStateMapFor(spender);\r\n    return getTokenApprovalActions({ spender, amount, stateMap });\r\n  }\r\n\r\n  async function fetchTokenApprovalActions(\r\n    spender: string\r\n  ): Promise<TransactionActionInfo[]> {\r\n    const stateMap = await getApprovalStateMapFor(spender);\r\n    return getTokenApprovalActions({ stateMap });\r\n  }\r\n\r\n  // Approval actions based on Vault approvals for tokenAddresses\r\n  function getTokenApprovalActions(\r\n    options: Partial<ApprovalActionOptions> = {}\r\n  ): TransactionActionInfo[] {\r\n    const defaultOptions: ApprovalActionOptions = {\r\n      spender: vaultAddress,\r\n      amount: MaxUint256.toString(),\r\n      stateMap: vaultApprovalStateMap.value,\r\n    };\r\n    const { spender, amount, stateMap } = Object.assign(\r\n      defaultOptions,\r\n      options\r\n    );\r\n\r\n    return Object.keys(stateMap).map(address => {\r\n      const token = getToken(address);\r\n      const state = stateMap[address];\r\n      return {\r\n        label: actionLabel(token.symbol),\r\n        loadingLabel: t('investment.preview.loadingLabel.approval'),\r\n        confirmingLabel: t('confirming'),\r\n        stepTooltip: actionTooltip(token.symbol),\r\n        action: () => {\r\n          return approveToken(token.address, { spender, state, amount });\r\n        },\r\n      };\r\n    });\r\n  }\r\n\r\n  return {\r\n    tokenApprovalActions,\r\n    getTokenApprovalActions,\r\n    getTokenApprovalActionsForSpender,\r\n    fetchTokenApprovalActions,\r\n  };\r\n}\r\n"],"names":["ApprovalAction","ApprovalAction2","useTokenApprovals","tokenAddresses","amounts","actionType","getSigner","appNetworkConfig","account","useWeb3","getToken","refetchAllowances","approvalsRequired","getTokens","useTokens","txListener","useEthers","addTransaction","useTransactions","t","useI18n","vaultApprovalStateMap","computed","address","approving","ref","requiredApprovals","txSummaryLabel","_a","_b","_c","approveToken","options","defaultOptions","MaxUint256","spender","amount","state","tx","TransactionBuilder","ERC20ABI","error","getApprovalStateMapFor","customTokenMap","allowances","tokenService","tokenAddress","i","bnum","getAddress","useTokenApprovalActions","vaultAddress","tokenApprovalActions","getTokenApprovalActions","actionLabel","symbol","actionTooltip","getTokenApprovalActionsForSpender","stateMap","fetchTokenApprovalActions","token"],"mappings":"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"}