{"version":3,"file":"BalTable.vue_vue_type_style_index_0_lang-bfff8f7a.js","sources":["../../src/components/_global/BalTable/BalTableRow.vue","../../src/components/_global/BalTable/TotalsRow.vue","../../src/assets/images/icons/pin.svg","../../src/components/_global/BalTable/BalTable.vue"],"sourcesContent":["<script setup lang=\"ts\">\r\nimport { compact } from 'lodash';\r\n\r\nimport {\r\n  ColumnDefinition,\r\n  Data,\r\n  Sticky,\r\n} from '@/components/_global/BalTable/types';\r\n\r\ntype Props = {\r\n  columns: ColumnDefinition<any>[];\r\n  onRowClick?: (data: any, inNewTab?: boolean) => void;\r\n  data: any;\r\n  link?: {\r\n    to: string;\r\n    getParams: (data: any) => Record<string, string>;\r\n  } | null;\r\n  href?: { getHref: (data: any) => string | null } | null;\r\n  sticky?: Sticky;\r\n  isColumnStuck?: boolean;\r\n  pinned?: boolean;\r\n};\r\n\r\nconst props = defineProps<Props>();\r\n\r\nfunction handleRowClick(data: Data, inNewTab = false) {\r\n  if (props.link?.to) return;\r\n  props.onRowClick && props.onRowClick(data, inNewTab);\r\n}\r\n\r\n// Need a method for horizontal stickiness as we need to\r\n// check whether the table item belongs in the first column\r\nfunction getHorizontalStickyClass(index: number) {\r\n  if (index !== 0) return '';\r\n  if (props.sticky === 'horizontal' || props.sticky === 'both') {\r\n    return 'horizontalSticky';\r\n  }\r\n  return '';\r\n}\r\n</script>\r\n\r\n<template>\r\n  <tr\r\n    :class=\"[\r\n      'bg-white z-10 row-bg group',\r\n      {\r\n        'cursor-pointer': handleRowClick,\r\n        'border-b dark:border-gray-700': pinned,\r\n      },\r\n    ]\"\r\n    @click.exact=\"handleRowClick(data)\"\r\n    @click.meta=\"handleRowClick(data, true)\"\r\n    @click.ctrl=\"handleRowClick(data, true)\"\r\n  >\r\n    <td\r\n      v-for=\"(column, columnIndex) in columns\"\r\n      :key=\"column.id\"\r\n      :class=\"[\r\n        column.align === 'right' ? 'text-left' : 'text-right',\r\n        getHorizontalStickyClass(columnIndex),\r\n        isColumnStuck ? 'isSticky' : '',\r\n      ]\"\r\n    >\r\n      <component\r\n        :is=\"href?.getHref(data) ? 'a' : link ? 'router-link' : 'div'\"\r\n        :to=\"\r\n          link\r\n            ? {\r\n                name: link.to,\r\n                params: link.getParams(data),\r\n              }\r\n            : null\r\n        \"\r\n        :href=\"href?.getHref(data)\"\r\n      >\r\n        <slot v-if=\"column.Cell\" v-bind=\"data\" :name=\"column.Cell\" />\r\n        <div\r\n          v-else\r\n          :class=\"\r\n            compact([\r\n              'mr-6 py-4',\r\n              column.align === 'right' ? 'text-right' : 'text-left',\r\n              column.cellClassName,\r\n            ])\r\n          \"\r\n        >\r\n          {{\r\n            typeof column.accessor === 'string'\r\n              ? data[column.accessor]\r\n              : column.accessor(data)\r\n          }}\r\n        </div>\r\n      </component>\r\n    </td>\r\n  </tr>\r\n</template>\r\n","<script setup lang=\"ts\">\r\nimport { tail } from 'lodash';\r\n\r\nimport { ColumnDefinition, Sticky } from '@/components/_global/BalTable/types';\r\n\r\ntype Props = {\r\n  isColumnStuck?: boolean;\r\n  onRowClick?: (data: any) => void;\r\n  sticky?: Sticky;\r\n  columns: ColumnDefinition<any>[];\r\n};\r\n\r\nconst props = defineProps<Props>();\r\n\r\n/** FUNCTIONS */\r\n// Need a method for horizontal stickiness as we need to\r\n// check whether the table item belongs in the first column\r\nfunction getHorizontalStickyClass(index: number) {\r\n  if (index !== 0) return '';\r\n  if (props.sticky === 'horizontal' || props.sticky === 'both') {\r\n    return 'horizontalSticky';\r\n  }\r\n  return '';\r\n}\r\n</script>\r\n\r\n<template>\r\n  <tbody>\r\n    <tr\r\n      :class=\"[\r\n        'bg-white z-10 row-bg group',\r\n        { 'cursor-pointer': !!props.onRowClick },\r\n      ]\"\r\n    >\r\n      <td\r\n        :class=\"[\r\n          getHorizontalStickyClass(0),\r\n          isColumnStuck ? 'isSticky' : '',\r\n          'text-left p-6 bg-white dark:bg-gray-850 border-t dark:border-gray-900 align-top',\r\n        ]\"\r\n      >\r\n        <span class=\"font-semibold text-left\"> Total </span>\r\n      </td>\r\n      <td\r\n        v-for=\"(column, columnIndex) in tail(columns)\"\r\n        :key=\"column.id\"\r\n        :class=\"[\r\n          column.align === 'right' ? 'text-left' : 'text-right',\r\n          getHorizontalStickyClass(columnIndex + 1),\r\n          isColumnStuck ? 'isSticky' : '',\r\n          'p-6 bg-white dark:bg-gray-850 border-t dark:border-gray-900',\r\n        ]\"\r\n      >\r\n        <slot v-if=\"column.totalsCell\" :name=\"column.totalsCell\" />\r\n      </td>\r\n    </tr>\r\n  </tbody>\r\n</template>\r\n","export default \"__VITE_ASSET__b7b71533__\"","<script setup lang=\"ts\">\r\nimport BalIcon from '../BalIcon/BalIcon.vue';\r\nimport BalTableRow from './BalTableRow.vue';\r\nimport TotalsRow from './TotalsRow.vue';\r\nimport { Sticky, Data, ColumnDefinition } from './types';\r\nimport { sortBy, sumBy } from 'lodash';\r\n\r\nimport PinHeader from './PinHeader.vue';\r\n\r\n// Using imported types in template is not supported, so we use alias type\r\ntype DataProp = Data;\r\n\r\ntype InitialState = {\r\n  sortDirection: 'asc' | 'desc' | null;\r\n  sortColumn: string | null;\r\n};\r\n\r\ntype DataPinState = {\r\n  // the key inside each data object that you want to\r\n  // pin by\r\n  pinOn: string;\r\n  pinnedData: string[];\r\n};\r\n\r\nconst emit = defineEmits<{\r\n  (e: 'loadMore'): void;\r\n  (e: 'onColumnSort', value: string): void;\r\n}>();\r\n\r\ntype Props = {\r\n  columns: ColumnDefinition[];\r\n  data: DataProp[];\r\n  isLoading?: boolean;\r\n  isLoadingMore?: boolean;\r\n  skeletonClass?: string;\r\n  onRowClick?: (data: DataProp, inNewTab?: boolean) => void;\r\n  sticky?: Sticky;\r\n  square?: boolean;\r\n  isPaginated?: boolean;\r\n  noResultsLabel?: string;\r\n  link?: {\r\n    to: string;\r\n    getParams: (data: any) => Record<string, string>;\r\n  } | null;\r\n  href?: { getHref: (data: any) => string | null } | null;\r\n  initialState?: InitialState;\r\n  pin?: DataPinState | null;\r\n  getTableRowClass?: (rowData: DataProp, rowIndex: number) => string;\r\n  isOnlyDescSort?: boolean;\r\n};\r\n\r\nconst props = withDefaults(defineProps<Props>(), {\r\n  square: false,\r\n  isPaginated: false,\r\n  noResultsLabel: '',\r\n  link: null,\r\n  href: null,\r\n  initialState: () => ({\r\n    sortColumn: null,\r\n    sortDirection: null,\r\n  }),\r\n  skeletonClass: '',\r\n  isLoading: false,\r\n  isLoadingMore: false,\r\n  getTableRowClass: () => '',\r\n  isOnlyDescSort: false,\r\n});\r\n\r\nconst stickyHeaderRef = ref();\r\nconst isColumnStuck = ref(false);\r\nconst tableData = ref(props.data);\r\nconst currentSortDirection = ref<InitialState['sortDirection']>(\r\n  props.initialState?.sortDirection || null\r\n);\r\nconst currentSortColumn = ref<InitialState['sortColumn']>(\r\n  props.initialState?.sortColumn || null\r\n);\r\nconst headerRef = ref<HTMLElement>();\r\nconst bodyRef = ref<HTMLElement>();\r\n\r\nconst getTableRowClass = toRef(props, 'getTableRowClass');\r\n\r\n// for loading and no results\r\nconst placeholderBlockWidth = computed(() => sumBy(props.columns, 'width'));\r\n\r\n// Need a method for horizontal stickiness as we need to\r\n// check whether the table item belongs in the first column\r\nconst getHorizontalStickyClass = (index: number) => {\r\n  if (index !== 0) return '';\r\n  if (props.sticky === 'horizontal' || props.sticky === 'both') {\r\n    return 'horizontalSticky';\r\n  }\r\n  return '';\r\n};\r\n\r\nconst handleSort = (columnId: string | null, updateDirection = true) => {\r\n  const column = props.columns.find(column => column.id === columnId);\r\n  if (!column?.sortKey) return;\r\n  if (columnId !== currentSortColumn.value) currentSortDirection.value = null;\r\n\r\n  currentSortColumn.value = columnId;\r\n\r\n  if (updateDirection) {\r\n    setCurrenSortDirection();\r\n  }\r\n  if (columnId && currentSortDirection.value) {\r\n    emit('onColumnSort', columnId);\r\n  }\r\n\r\n  const sortedData = sortBy(\r\n    (props.data as any).value || props.data,\r\n    column.sortKey\r\n  );\r\n  if (currentSortDirection.value === 'asc') {\r\n    tableData.value = sortedData;\r\n    return;\r\n  }\r\n  if (currentSortDirection.value === 'desc') {\r\n    tableData.value = sortedData.reverse();\r\n    return;\r\n  }\r\n  tableData.value = props.data;\r\n};\r\n\r\nfunction setCurrenSortDirection(): void {\r\n  if (props.isOnlyDescSort) {\r\n    currentSortDirection.value = 'desc';\r\n    return;\r\n  }\r\n  if (currentSortDirection.value === null) {\r\n    currentSortDirection.value = 'desc';\r\n    return;\r\n  }\r\n  if (currentSortDirection.value === 'desc') {\r\n    currentSortDirection.value = 'asc';\r\n    return;\r\n  }\r\n  currentSortDirection.value = null;\r\n}\r\n\r\nfunction getAlignProperty(align: 'left' | 'right' | 'center' | undefined) {\r\n  switch (align) {\r\n    case 'left':\r\n      return 'justify-start';\r\n    case 'right':\r\n      return 'justify-end';\r\n    case 'center':\r\n      return 'justify-center';\r\n    default:\r\n      return 'justify-start';\r\n  }\r\n}\r\n\r\nonMounted(() => {\r\n  if (bodyRef.value) {\r\n    bodyRef.value.onscroll = () => {\r\n      if (bodyRef.value && stickyHeaderRef.value) {\r\n        const offsetRatio =\r\n          bodyRef.value.offsetWidth / stickyHeaderRef.value.offsetWidth / 10;\r\n        isColumnStuck.value = !!(\r\n          stickyHeaderRef.value.offsetLeft >\r\n          stickyHeaderRef.value.offsetWidth * offsetRatio\r\n        );\r\n      }\r\n    };\r\n    bodyRef.value.addEventListener('scroll', () => {\r\n      if (bodyRef.value && headerRef.value) {\r\n        headerRef.value.scrollLeft = bodyRef.value.scrollLeft;\r\n      }\r\n    });\r\n  }\r\n\r\n  handleSort(currentSortColumn.value, false);\r\n});\r\n\r\n/**\r\n * COMPUTED\r\n */\r\nconst unpinnedData = computed(() => {\r\n  if (!props.pin) return tableData.value;\r\n  return (tableData.value || []).filter(\r\n    data => !props.pin?.pinnedData.includes(data[props.pin.pinOn])\r\n  );\r\n});\r\n\r\nconst pinnedData = computed(() => {\r\n  if (!props.pin) return [];\r\n  return (tableData.value || []).filter(data =>\r\n    props.pin?.pinnedData.includes(data[props.pin.pinOn])\r\n  );\r\n});\r\n\r\nconst filteredColumns = computed(() =>\r\n  props.columns.filter(column => !column.hidden)\r\n);\r\n\r\nconst shouldRenderTotals = computed(() =>\r\n  props.columns.some(column => column.totalsCell !== undefined)\r\n);\r\n\r\nwatch(\r\n  () => props.data,\r\n  newData => {\r\n    if (currentSortColumn.value && currentSortDirection.value !== null) {\r\n      handleSort(currentSortColumn.value, false);\r\n      return;\r\n    }\r\n    tableData.value = newData;\r\n  }\r\n);\r\n</script>\r\n\r\n<template>\r\n  <div\r\n    :class=\"[\r\n      'max-w-full whitespace-nowrap overflow-hidden',\r\n      { 'rounded-lg': !square },\r\n    ]\"\r\n  >\r\n    <div ref=\"headerRef\" class=\"overflow-hidden\">\r\n      <table class=\"w-full whitespace-normal table-fixed\">\r\n        <!-- header width handled by colgroup  -->\r\n        <colgroup>\r\n          <col\r\n            v-for=\"column in filteredColumns\"\r\n            :key=\"column.id\"\r\n            :style=\"{ width: `${column?.width}px` }\"\r\n          />\r\n        </colgroup>\r\n        <!-- header is rendered as a row - seperated by columns -->\r\n        <thead class=\"z-10 bg-white dark:bg-gray-900\">\r\n          <th\r\n            v-for=\"(column, columnIndex) in filteredColumns\"\r\n            :key=\"`header-${column.id}`\"\r\n            :ref=\"columnIndex == 0 ? 'stickyHeaderRef' : undefined\"\r\n            :class=\"[\r\n              'p-6 bg-white dark:bg-gray-850 headingShadow border-b dark:border-gray-900',\r\n              column.className,\r\n              getHorizontalStickyClass(columnIndex),\r\n              isColumnStuck ? 'isSticky' : '',\r\n              column.sortKey &&\r\n              !(props.isOnlyDescSort && currentSortColumn === column.id)\r\n                ? 'cursor-pointer'\r\n                : '',\r\n              column.sortKey && currentSortColumn !== column.id\r\n                ? 'text-gray-800 hover:text-purple-600 focus:text-blue-500 dark:text-gray-100 dark:hover:text-yellow-500 dark:focus:text-yellow-500 transition-colors'\r\n                : '',\r\n              currentSortColumn === column.id && currentSortDirection\r\n                ? 'text-blue-600 hover:text-blue-500 focus:text-purple-600 dark:text-blue-400 dark:hover:text-blue-600 dark:focus:text-blue-600 transition-colors'\r\n                : '',\r\n            ]\"\r\n            @click=\"handleSort(column.id)\"\r\n          >\r\n            <div :class=\"['flex', getAlignProperty(column.align)]\">\r\n              <slot\r\n                v-if=\"column.Header\"\r\n                v-bind=\"column\"\r\n                :name=\"column.Header\"\r\n              />\r\n              <div v-else>\r\n                <h5 class=\"text-base\">\r\n                  {{ column.name }}\r\n                </h5>\r\n              </div>\r\n              <BalIcon\r\n                v-if=\"\r\n                  currentSortColumn === column.id &&\r\n                  currentSortDirection === 'asc'\r\n                \"\r\n                name=\"arrow-up\"\r\n                size=\"sm\"\r\n                class=\"flex items-center ml-1\"\r\n              />\r\n              <BalIcon\r\n                v-if=\"\r\n                  currentSortColumn === column.id &&\r\n                  currentSortDirection === 'desc'\r\n                \"\r\n                name=\"arrow-down\"\r\n                size=\"sm\"\r\n                class=\"flex items-center ml-1\"\r\n              />\r\n            </div>\r\n          </th>\r\n        </thead>\r\n      </table>\r\n    </div>\r\n    <div ref=\"bodyRef\" class=\"overflow-auto\">\r\n      <BalLoadingBlock\r\n        v-if=\"isLoading\"\r\n        :class=\"[skeletonClass, 'min-w-full']\"\r\n        square\r\n        :style=\"{ width: `${placeholderBlockWidth}px` }\"\r\n      />\r\n      <div\r\n        v-else-if=\"!isLoading && !tableData.length\"\r\n        class=\"flex justify-start items-center p-6 max-w-full h-24 bg-white dark:bg-gray-850 row-bg text-secondary\"\r\n      >\r\n        {{ noResultsLabel || $t('noResults') }}\r\n      </div>\r\n      <table v-else class=\"w-full whitespace-normal table-fixed\">\r\n        <colgroup>\r\n          <col\r\n            v-for=\"column in filteredColumns\"\r\n            :key=\"column.id\"\r\n            :style=\"{ width: `${column?.width}px` }\"\r\n          />\r\n        </colgroup>\r\n        <!-- begin measurement row -->\r\n        <tr>\r\n          <td\r\n            v-for=\"(column, columnIndex) in filteredColumns\"\r\n            :key=\"column.id\"\r\n            :class=\"[\r\n              column.align === 'right' ? 'text-left' : 'text-right',\r\n              getHorizontalStickyClass(columnIndex),\r\n              isColumnStuck ? 'isSticky' : '',\r\n              'bg-white dark:bg-gray-850 p-0 m-0 h-0',\r\n            ]\"\r\n          />\r\n        </tr>\r\n        <!-- end measurement row -->\r\n\r\n        <!-- begin pinned rows -->\r\n        <PinHeader v-if=\"pinnedData.length\" />\r\n        <BalTableRow\r\n          v-for=\"(dataItem, index) in pinnedData\"\r\n          :key=\"`tableRow-${dataItem.id ?? index}`\"\r\n          :class=\"getTableRowClass(dataItem, index)\"\r\n          :data=\"dataItem\"\r\n          :columns=\"filteredColumns\"\r\n          :onRowClick=\"onRowClick\"\r\n          :link=\"link\"\r\n          :href=\"href\"\r\n          :sticky=\"sticky\"\r\n          :isColumnStuck=\"isColumnStuck\"\r\n          pinned\r\n        >\r\n          <template v-for=\"(_, name) in $slots\" #[name]>\r\n            <slot :name=\"name\" v-bind=\"dataItem\" />\r\n          </template>\r\n        </BalTableRow>\r\n        <!-- end pinned rows -->\r\n\r\n        <!-- begin data rows -->\r\n        <BalTableRow\r\n          v-for=\"(dataItem, index) in unpinnedData\"\r\n          :key=\"`tableRow-${dataItem.id ?? index}`\"\r\n          :class=\"\r\n            props.getTableRowClass\r\n              ? props.getTableRowClass(dataItem, index)\r\n              : undefined\r\n          \"\r\n          :data=\"dataItem\"\r\n          :columns=\"filteredColumns\"\r\n          :onRowClick=\"onRowClick\"\r\n          :link=\"link\"\r\n          :href=\"href\"\r\n          :sticky=\"sticky\"\r\n          :isColumnStuck=\"isColumnStuck\"\r\n        >\r\n          <slot :name=\"'named'\" v-bind=\"dataItem\"></slot>\r\n          <template v-for=\"(_, name) in $slots\" #[name]>\r\n            <slot :name=\"name\" v-bind=\"dataItem\" />\r\n          </template>\r\n        </BalTableRow>\r\n        <!-- end end data rows -->\r\n        <TotalsRow\r\n          v-if=\"!isLoading && tableData.length && shouldRenderTotals\"\r\n          :columns=\"filteredColumns\"\r\n          :onRowClick=\"onRowClick\"\r\n          :sticky=\"sticky\"\r\n          :isColumnStuck=\"isColumnStuck\"\r\n        >\r\n          <template v-for=\"(_, name) in $slots\" #[name]=\"slotData\">\r\n            <slot :name=\"name\" v-bind=\"(slotData as DataProp)\" />\r\n          </template>\r\n        </TotalsRow>\r\n      </table>\r\n    </div>\r\n  </div>\r\n  <div\r\n    v-if=\"isPaginated && !isLoading\"\r\n    class=\"bal-table-pagination-btn text-secondary\"\r\n    @click=\"!isLoadingMore && $emit('loadMore')\"\r\n  >\r\n    <template v-if=\"isLoadingMore\">\r\n      {{ $t('loading') }}\r\n    </template>\r\n    <template v-else>\r\n      {{ $t('loadMore') }}\r\n      <BalIcon name=\"chevron-down\" size=\"sm\" class=\"ml-2\" />\r\n    </template>\r\n  </div>\r\n</template>\r\n\r\n<style>\r\n.horizontalSticky {\r\n  @apply z-10 opacity-95 xs:opacity-90;\r\n\r\n  /* Set the sticky cell to inherit table row's background-color in order for the opacity property to have an effect */\r\n  background-color: inherit;\r\n  position: sticky;\r\n  left: 0;\r\n  width: 100%;\r\n}\r\n\r\n.horizontalSticky::after {\r\n  position: absolute;\r\n  top: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  width: 30px;\r\n  transform: translateX(100%);\r\n  transition: box-shadow 0.3s;\r\n  content: '';\r\n  pointer-events: none;\r\n}\r\n\r\n.isSticky::after {\r\n  box-shadow: inset 10px 0 8px -8px rgb(0 0 0 / 15%);\r\n}\r\n\r\n.row-bg {\r\n  @apply bg-white dark:bg-gray-850 hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors ease-in duration-300;\r\n}\r\n\r\n.bal-table-pagination-btn {\r\n  @apply flex items-center justify-center h-16 transition-all;\r\n  @apply font-medium hover:text-purple-600 dark:hover:text-yellow-500;\r\n  @apply border-t dark:border-gray-900 rounded-b-lg;\r\n  @apply hover:bg-gray-50 dark:hover:bg-gray-800 cursor-pointer;\r\n}\r\n</style>\r\n"],"names":["handleRowClick","data","inNewTab","_a","props","getHorizontalStickyClass","index","pin","stickyHeaderRef","ref","isColumnStuck","tableData","currentSortDirection","currentSortColumn","_b","headerRef","bodyRef","getTableRowClass","toRef","placeholderBlockWidth","computed","sumBy","handleSort","columnId","updateDirection","column","column2","setCurrenSortDirection","emit","sortedData","sortBy","getAlignProperty","align","onMounted","offsetRatio","unpinnedData","pinnedData","filteredColumns","shouldRenderTotals","watch","newData"],"mappings":"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"}