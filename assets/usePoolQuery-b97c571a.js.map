{"version":3,"file":"usePoolQuery-b97c571a.js","sources":["../../src/services/pool/pool.repository.ts","../../src/composables/queries/usePoolQuery.ts"],"sourcesContent":["import { ComputedRef } from 'vue';\r\nimport { balancerSubgraphService } from '@/services/balancer/subgraph/balancer-subgraph.service';\r\nimport { PoolDecorator } from '@/services/pool/decorators/pool.decorator';\r\nimport {\r\n  GraphQLArgs,\r\n  PoolRepository as SDKPoolRepository,\r\n  PoolsFallbackRepository,\r\n} from '@balancer-labs/sdk';\r\nimport { balancerAPIService } from '@/services/balancer/api/balancer-api.service';\r\nimport { Pool } from '@/services/pool/types';\r\nimport { TokenInfoMap } from '@/types/TokenList';\r\nimport { isBalancerApiDefined } from '@/lib/utils/balancer/api';\r\n\r\nexport default class PoolRepository {\r\n  repository: PoolsFallbackRepository;\r\n  queryArgs: GraphQLArgs;\r\n\r\n  constructor(private tokens: ComputedRef<TokenInfoMap>) {\r\n    this.repository = new PoolsFallbackRepository(this.buildRepositories(), {\r\n      timeout: 30 * 1000,\r\n    });\r\n    this.queryArgs = {};\r\n  }\r\n\r\n  public async fetch(queryArgs: GraphQLArgs): Promise<Pool> {\r\n    this.queryArgs = queryArgs;\r\n    const [pool] = await this.repository.fetch();\r\n    return pool;\r\n  }\r\n\r\n  private initializeDecoratedAPIRepository() {\r\n    return {\r\n      fetch: async (): Promise<Pool[]> => {\r\n        const pool = await balancerAPIService.pool.get(this.queryArgs);\r\n        if (!pool) throw new Error('Cannot find pool via Balancer API');\r\n\r\n        return [pool];\r\n      },\r\n      get skip(): number {\r\n        return 0;\r\n      },\r\n    };\r\n  }\r\n\r\n  private initializeDecoratedSubgraphRepository() {\r\n    return {\r\n      fetch: async (): Promise<Pool[]> => {\r\n        const pools = await balancerSubgraphService.pools.get(this.queryArgs);\r\n\r\n        const poolDecorator = new PoolDecorator(pools);\r\n        const decoratedPools = await poolDecorator.decorate(\r\n          this.tokens.value,\r\n          true\r\n        );\r\n\r\n        return decoratedPools;\r\n      },\r\n      get skip(): number {\r\n        return 0;\r\n      },\r\n    };\r\n  }\r\n\r\n  private buildRepositories() {\r\n    const repositories: SDKPoolRepository[] = [];\r\n    if (isBalancerApiDefined) {\r\n      const balancerApiRepository = this.initializeDecoratedAPIRepository();\r\n      repositories.push(balancerApiRepository);\r\n    }\r\n    const subgraphRepository = this.initializeDecoratedSubgraphRepository();\r\n    repositories.push(subgraphRepository);\r\n\r\n    return repositories;\r\n  }\r\n}\r\n","import { computed, reactive, Ref, ref } from 'vue';\r\nimport { QueryObserverOptions, useQuery } from '@tanstack/vue-query';\r\n\r\nimport { GraphQLArgs } from '@balancer-labs/sdk';\r\n\r\nimport { useTokens } from '@/providers/tokens.provider';\r\nimport QUERY_KEYS from '@/constants/queryKeys';\r\n\r\nimport { poolsStoreService } from '@/services/pool/pools-store.service';\r\nimport { Pool } from '@/services/pool/types';\r\nimport useWeb3 from '@/services/web3/useWeb3';\r\n\r\nimport { isBlocked, tokensListExclBpt, tokenTreeLeafs } from '../usePool';\r\n\r\nimport PoolRepository from '@/services/pool/pool.repository';\r\nimport { configService } from '@/services/config/config.service';\r\nimport { POOLS } from '@/constants/pools';\r\nimport { PoolDecorator } from '@/services/pool/decorators/pool.decorator';\r\n\r\ntype QueryOptions = QueryObserverOptions<Pool>;\r\n\r\nexport default function usePoolQuery(\r\n  id: string,\r\n  isEnabled: Ref<boolean> = ref(true),\r\n  options: QueryOptions = {}\r\n) {\r\n  /**\r\n   * If pool is already downloaded, we can use it instantly\r\n   * it may be if user came to pool page from home page\r\n   */\r\n  const poolInfo = poolsStoreService.findPool(id);\r\n\r\n  /**\r\n   * COMPOSABLES\r\n   */\r\n  const { injectTokens, tokens } = useTokens();\r\n  const { account } = useWeb3();\r\n\r\n  const poolRepository = new PoolRepository(tokens);\r\n\r\n  /**\r\n   * COMPUTED\r\n   */\r\n  const enabled = computed(() => isEnabled.value);\r\n\r\n  /**\r\n   * METHODS\r\n   */\r\n\r\n  function getQueryArgs(): GraphQLArgs {\r\n    const queryArgs: GraphQLArgs = {\r\n      chainId: configService.network.chainId,\r\n      where: {\r\n        id: { eq: id?.toLowerCase() },\r\n        totalShares: { gt: -1 }, // Avoid the filtering for low liquidity pools\r\n        poolType: { not_in: POOLS.ExcludedPoolTypes },\r\n      },\r\n    };\r\n    return queryArgs;\r\n  }\r\n\r\n  /**\r\n   * QUERY INPUTS\r\n   */\r\n  const queryKey = QUERY_KEYS.Pools.Current(id);\r\n\r\n  const queryFn = async () => {\r\n    let pool: Pool;\r\n    if (poolInfo) {\r\n      pool = poolInfo;\r\n    } else {\r\n      pool = await poolRepository.fetch(getQueryArgs());\r\n    }\r\n\r\n    if (!pool) throw new Error('Pool does not exist');\r\n\r\n    if (isBlocked(pool, account.value)) throw new Error('Pool not allowed');\r\n\r\n    // If the pool is cached from homepage it may not have onchain set, so update it\r\n    if (!pool.onchain) {\r\n      const poolDecorator = new PoolDecorator([pool]);\r\n      [pool] = await poolDecorator.decorate(tokens.value, false);\r\n    }\r\n\r\n    // Inject pool tokens into token registry\r\n    await injectTokens([\r\n      ...tokensListExclBpt(pool),\r\n      ...tokenTreeLeafs(pool.tokens),\r\n      pool.address,\r\n    ]);\r\n\r\n    return pool;\r\n  };\r\n\r\n  const queryOptions = reactive({\r\n    enabled,\r\n    ...options,\r\n  });\r\n\r\n  return useQuery<Pool>(queryKey, queryFn, queryOptions as QueryOptions);\r\n}\r\n"],"names":["PoolRepository","tokens","__publicField","PoolsFallbackRepository","queryArgs","pool","balancerAPIService","pools","balancerSubgraphService","PoolDecorator","repositories","isBalancerApiDefined","balancerApiRepository","subgraphRepository","usePoolQuery","id","isEnabled","ref","options","poolInfo","poolsStoreService","injectTokens","useTokens","account","useWeb3","poolRepository","enabled","computed","getQueryArgs","configService","POOLS","queryKey","QUERY_KEYS","queryFn","isBlocked","tokensListExclBpt","tokenTreeLeafs","queryOptions","reactive","useQuery"],"mappings":"gVAaA,MAAqBA,CAAe,CAIlC,YAAoBC,EAAmC,CAHvDC,EAAA,mBACAA,EAAA,kBAEoB,KAAA,OAAAD,EAClB,KAAK,WAAa,IAAIE,EAAwB,KAAK,oBAAqB,CACtE,QAAS,GAAK,GAAA,CACf,EACD,KAAK,UAAY,EACnB,CAEA,MAAa,MAAMC,EAAuC,CACxD,KAAK,UAAYA,EACjB,KAAM,CAACC,CAAI,EAAI,MAAM,KAAK,WAAW,MAAM,EACpC,OAAAA,CACT,CAEQ,kCAAmC,CAClC,MAAA,CACL,MAAO,SAA6B,CAClC,MAAMA,EAAO,MAAMC,EAAmB,KAAK,IAAI,KAAK,SAAS,EAC7D,GAAI,CAACD,EAAY,MAAA,IAAI,MAAM,mCAAmC,EAE9D,MAAO,CAACA,CAAI,CACd,EACA,IAAI,MAAe,CACV,MAAA,EACT,CAAA,CAEJ,CAEQ,uCAAwC,CACvC,MAAA,CACL,MAAO,SAA6B,CAClC,MAAME,EAAQ,MAAMC,EAAwB,MAAM,IAAI,KAAK,SAAS,EAQ7D,OALgB,MADD,IAAIC,EAAcF,CAAK,EACF,SACzC,KAAK,OAAO,MACZ,EAAA,CAIJ,EACA,IAAI,MAAe,CACV,MAAA,EACT,CAAA,CAEJ,CAEQ,mBAAoB,CAC1B,MAAMG,EAAoC,CAAA,EAC1C,GAAIC,EAAsB,CAClB,MAAAC,EAAwB,KAAK,mCACnCF,EAAa,KAAKE,CAAqB,CACzC,CACM,MAAAC,EAAqB,KAAK,wCAChC,OAAAH,EAAa,KAAKG,CAAkB,EAE7BH,CACT,CACF,CCrDwB,SAAAI,EACtBC,EACAC,EAA0BC,EAAI,EAAI,EAClCC,EAAwB,GACxB,CAKM,MAAAC,EAAWC,EAAkB,SAASL,CAAE,EAKxC,CAAE,aAAAM,EAAc,OAAApB,CAAO,EAAIqB,EAAU,EACrC,CAAE,QAAAC,GAAYC,IAEdC,EAAiB,IAAIzB,EAAeC,CAAM,EAK1CyB,EAAUC,EAAS,IAAMX,EAAU,KAAK,EAM9C,SAASY,GAA4B,CAS5B,MARwB,CAC7B,QAASC,EAAc,QAAQ,QAC/B,MAAO,CACL,GAAI,CAAE,GAAId,GAAA,YAAAA,EAAI,aAAc,EAC5B,YAAa,CAAE,GAAI,EAAG,EACtB,SAAU,CAAE,OAAQe,EAAM,iBAAkB,CAC9C,CAAA,CAGJ,CAKA,MAAMC,EAAWC,EAAW,MAAM,QAAQjB,CAAE,EAEtCkB,EAAU,SAAY,CACtB,IAAA5B,EAOJ,GANIc,EACKd,EAAAc,EAEPd,EAAO,MAAMoB,EAAe,MAAMG,EAAc,CAAA,EAG9C,CAACvB,EAAY,MAAA,IAAI,MAAM,qBAAqB,EAE5C,GAAA6B,EAAU7B,EAAMkB,EAAQ,KAAK,EAAS,MAAA,IAAI,MAAM,kBAAkB,EAGlE,OAAClB,EAAK,UAER,CAACA,CAAI,EAAI,MADa,IAAII,EAAc,CAACJ,CAAI,CAAC,EACjB,SAASJ,EAAO,MAAO,EAAK,GAI3D,MAAMoB,EAAa,CACjB,GAAGc,EAAkB9B,CAAI,EACzB,GAAG+B,EAAe/B,EAAK,MAAM,EAC7BA,EAAK,OAAA,CACN,EAEMA,CAAA,EAGHgC,EAAeC,EAAS,CAC5B,QAAAZ,EACA,GAAGR,CAAA,CACJ,EAEM,OAAAqB,EAAeR,EAAUE,EAASI,CAA4B,CACvE"}