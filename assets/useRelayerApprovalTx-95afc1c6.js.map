{"version":3,"file":"useRelayerApprovalTx-95afc1c6.js","sources":["../../src/constants/vue-query.ts","../../src/composables/queries/useRelayerApprovalQuery.ts","../../src/composables/approvals/useRelayerApproval.ts","../../src/composables/approvals/useRelayerApprovalTx.ts"],"sourcesContent":["import { twentyFourHoursInMs } from '@/composables/useTime';\r\n\r\nexport const FETCH_ONCE_OPTIONS = {\r\n  refetchOnMount: false,\r\n  refetchOnWindowFocus: false,\r\n  refetchOnReconnect: false,\r\n  staleTime: twentyFourHoursInMs,\r\n};\r\n","import { Vault__factory } from '@balancer-labs/typechain';\r\nimport { Contract } from '@ethersproject/contracts';\r\nimport { computed, reactive, Ref } from 'vue';\r\nimport { useQuery, UseQueryOptions } from '@tanstack/vue-query';\r\n\r\nimport QUERY_KEYS from '@/constants/queryKeys';\r\nimport { FETCH_ONCE_OPTIONS } from '@/constants/vue-query';\r\nimport { configService } from '@/services/config/config.service';\r\nimport { rpcProviderService } from '@/services/rpc-provider/rpc-provider.service';\r\nimport useWeb3 from '@/services/web3/useWeb3';\r\n\r\nimport useNetwork from '../useNetwork';\r\n\r\n/**\r\n * TYPES\r\n */\r\ntype QueryResponse = boolean;\r\ntype QueryOptions = UseQueryOptions<QueryResponse>;\r\n\r\nexport default function useRelayerApprovalQuery(\r\n  relayer: Ref<string>,\r\n  options: QueryOptions = {}\r\n) {\r\n  /**\r\n   * COMPOSABLES\r\n   */\r\n  const { account, isWalletReady } = useWeb3();\r\n  const { networkId } = useNetwork();\r\n\r\n  /**\r\n   * COMPUTED\r\n   */\r\n  const enabled = computed(() => isWalletReady.value);\r\n\r\n  const vaultContract = computed(\r\n    () =>\r\n      new Contract(\r\n        configService.network.addresses.vault,\r\n        Vault__factory.abi,\r\n        rpcProviderService.jsonProvider\r\n      )\r\n  );\r\n\r\n  /**\r\n   * QUERY INPUTS\r\n   */\r\n  const queryKey = reactive(\r\n    QUERY_KEYS.Account.RelayerApprovals(networkId, account, relayer)\r\n  );\r\n\r\n  const queryFn = async (): Promise<boolean> => {\r\n    if (!relayer.value) {\r\n      return true;\r\n    }\r\n\r\n    const approved = await vaultContract.value.hasApprovedRelayer(\r\n      account.value,\r\n      relayer.value\r\n    );\r\n\r\n    return approved;\r\n  };\r\n\r\n  const queryOptions = reactive({\r\n    enabled,\r\n    ...FETCH_ONCE_OPTIONS,\r\n    ...options,\r\n  });\r\n\r\n  return useQuery<QueryResponse>(\r\n    queryKey,\r\n    queryFn,\r\n    queryOptions as QueryOptions\r\n  );\r\n}\r\n","import useWeb3 from '@/services/web3/useWeb3';\r\nimport { computed, ref, watch } from 'vue';\r\nimport useNetwork from '../useNetwork';\r\nimport { Relayer } from '@balancer-labs/sdk';\r\nimport { configService } from '@/services/config/config.service';\r\nimport { Vault__factory } from '@balancer-labs/typechain';\r\nimport { useI18n } from 'vue-i18n';\r\nimport { TransactionActionInfo } from '@/types/transactions';\r\nimport useRelayerApprovalTx from '@/composables/approvals/useRelayerApprovalTx';\r\nimport useGnosisSafeApp from '@/composables/useGnosisSafeApp';\r\nimport { COW_RELAYER_CONTRACT_ADDRESS } from '@/services/cowswap/constants';\r\n\r\n/**\r\n * TYPES\r\n */\r\nexport enum RelayerType {\r\n  COWSWAP = 'Cowswap',\r\n  LIDO = 'Lido',\r\n  BATCH = 'Batch',\r\n  BATCH_V4 = 'BATCH_V4',\r\n}\r\n\r\nexport const relayerAddressMap = {\r\n  [RelayerType.COWSWAP]: COW_RELAYER_CONTRACT_ADDRESS,\r\n  [RelayerType.LIDO]: configService.network.addresses.lidoRelayer,\r\n  [RelayerType.BATCH]: configService.network.addresses.batchRelayer,\r\n  [RelayerType.BATCH_V4]: configService.network.addresses.batchRelayerV4,\r\n};\r\n\r\n/**\r\n * STATE\r\n */\r\nconst relayerSignature = ref<string>('');\r\n\r\nexport default function useRelayerApproval(relayerType: RelayerType) {\r\n  /**\r\n   * COMPOSABLES\r\n   */\r\n  const { account, getSigner } = useWeb3();\r\n  const { networkId } = useNetwork();\r\n  const { t } = useI18n();\r\n  const { isGnosisSafeApp } = useGnosisSafeApp();\r\n  const { action: transactionAction } = useRelayerApprovalTx(relayerType);\r\n\r\n  const signatureAction: TransactionActionInfo = {\r\n    label: t('approveBatchRelayer'),\r\n    loadingLabel: t('checkWallet'),\r\n    confirmingLabel: t('approvingBatchRelayer'),\r\n    stepTooltip: t('approveBatchRelayerTooltip'),\r\n    action: signRelayerApproval as () => Promise<any>,\r\n    isSignAction: true,\r\n  };\r\n\r\n  /**\r\n   * COMPUTED\r\n   */\r\n  const relayerApprovalAction = computed((): TransactionActionInfo => {\r\n    return isGnosisSafeApp.value ? transactionAction.value : signatureAction;\r\n  });\r\n\r\n  /**\r\n   * METHODS\r\n   */\r\n  async function signRelayerApproval(): Promise<void> {\r\n    const relayerAddress = relayerAddressMap[relayerType];\r\n    const signer = getSigner();\r\n    const signerAddress = await signer.getAddress();\r\n    const signature = await Relayer.signRelayerApproval(\r\n      relayerAddress,\r\n      signerAddress,\r\n      signer,\r\n      Vault__factory.connect(configService.network.addresses.vault, signer)\r\n    );\r\n    relayerSignature.value = signature;\r\n  }\r\n\r\n  /**\r\n   * WATCHERS\r\n   */\r\n  watch([account, networkId], () => {\r\n    relayerSignature.value = '';\r\n  });\r\n\r\n  return {\r\n    relayerSignature,\r\n    relayerApprovalAction,\r\n  };\r\n}\r\n","import { Vault__factory } from '@balancer-labs/typechain';\r\nimport { TransactionResponse } from '@ethersproject/abstract-provider';\r\nimport { computed, Ref, ref } from 'vue';\r\nimport { useI18n } from 'vue-i18n';\r\n\r\nimport { configService } from '@/services/config/config.service';\r\nimport useWeb3 from '@/services/web3/useWeb3';\r\nimport { TransactionActionInfo } from '@/types/transactions';\r\n\r\nimport useRelayerApprovalQuery from '../queries/useRelayerApprovalQuery';\r\nimport useEthers from '../useEthers';\r\nimport useTransactions from '../useTransactions';\r\nimport { TransactionBuilder } from '@/services/web3/transactions/transaction.builder';\r\nimport { relayerAddressMap, RelayerType } from './useRelayerApproval';\r\n\r\nconst vaultAddress = configService.network.addresses.vault;\r\n\r\nexport default function useRelayerApprovalTx(\r\n  relayer: RelayerType,\r\n  isEnabled: Ref<boolean> = ref(true)\r\n) {\r\n  /**\r\n   * STATE\r\n   */\r\n  const init = ref(false);\r\n  const approving = ref(false);\r\n  const approved = ref(false);\r\n\r\n  /**\r\n   * COMPOSABLES\r\n   */\r\n  const { getSigner, account } = useWeb3();\r\n  const relayerAddress = ref(relayerAddressMap[relayer]);\r\n  const { txListener } = useEthers();\r\n  const { addTransaction } = useTransactions();\r\n  const { t } = useI18n();\r\n  const relayerApproval = useRelayerApprovalQuery(relayerAddress);\r\n\r\n  /**\r\n   * COMPUTED\r\n   */\r\n  const isUnlocked = computed(\r\n    () =>\r\n      approved.value || (isEnabled.value ? !!relayerApproval.data.value : true)\r\n  );\r\n\r\n  const loading = computed(\r\n    (): boolean =>\r\n      relayerApproval.isLoading.value || relayerApproval.isError.value\r\n  );\r\n\r\n  const action = computed(\r\n    (): TransactionActionInfo => ({\r\n      label: t('approveBatchRelayer'),\r\n      loadingLabel: t('checkWallet'),\r\n      confirmingLabel: t('approvingBatchRelayer'),\r\n      stepTooltip: t('approveBatchRelayerTooltip'),\r\n      action: approve,\r\n    })\r\n  );\r\n\r\n  /**\r\n   * METHODS\r\n   */\r\n  async function approve(): Promise<TransactionResponse> {\r\n    try {\r\n      init.value = true;\r\n\r\n      const txBuilder = new TransactionBuilder(getSigner());\r\n      const tx = await txBuilder.contract.sendTransaction({\r\n        contractAddress: configService.network.addresses.vault,\r\n        abi: Vault__factory.abi,\r\n        action: 'setRelayerApproval',\r\n        params: [account.value, relayerAddress.value, true],\r\n      });\r\n\r\n      init.value = false;\r\n      approving.value = true;\r\n\r\n      handleTransaction(tx);\r\n      return tx;\r\n    } catch (e) {\r\n      console.log(e);\r\n      init.value = false;\r\n      approving.value = false;\r\n      return Promise.reject(e);\r\n    }\r\n  }\r\n\r\n  async function handleTransaction(tx): Promise<void> {\r\n    addTransaction({\r\n      id: tx.hash,\r\n      type: 'tx',\r\n      action: 'approve',\r\n      summary: t('transactionSummary.approveRelayer', [relayer]),\r\n      details: {\r\n        contractAddress: vaultAddress,\r\n        spender: relayerAddress.value,\r\n      },\r\n    });\r\n\r\n    approved.value = await txListener(tx, {\r\n      onTxConfirmed: () => {\r\n        approving.value = false;\r\n        relayerApproval.refetch();\r\n      },\r\n      onTxFailed: () => {\r\n        approving.value = false;\r\n      },\r\n    });\r\n  }\r\n\r\n  return {\r\n    action,\r\n    init,\r\n    approve,\r\n    approving,\r\n    approved,\r\n    isUnlocked,\r\n    loading,\r\n  };\r\n}\r\n"],"names":["FETCH_ONCE_OPTIONS","twentyFourHoursInMs","useRelayerApprovalQuery","relayer","options","account","isWalletReady","useWeb3","networkId","useNetwork","enabled","computed","vaultContract","Contract","configService","Vault__factory","rpcProviderService","queryKey","reactive","QUERY_KEYS","queryFn","queryOptions","useQuery","RelayerType","relayerAddressMap","COW_RELAYER_CONTRACT_ADDRESS","relayerSignature","ref","useRelayerApproval","relayerType","getSigner","t","useI18n","isGnosisSafeApp","useGnosisSafeApp","transactionAction","useRelayerApprovalTx","signatureAction","signRelayerApproval","relayerApprovalAction","relayerAddress","signer","signerAddress","signature","Relayer","watch","vaultAddress","isEnabled","init","approving","approved","txListener","useEthers","addTransaction","useTransactions","relayerApproval","isUnlocked","loading","action","approve","tx","TransactionBuilder","handleTransaction","e"],"mappings":"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"}