{"version":3,"file":"legacy-7674ba4e.js","sources":["../../node_modules/promise-worker/index.js","../../src/services/claim/claim-worker-pool.service.ts","../../src/services/claim/claim.service.ts","../../src/composables/queries/useUserClaimsQuery.ts","../../src/components/contextual/pages/claim/LegacyClaims.vue","../../src/pages/claim/legacy.vue"],"sourcesContent":["'use strict'\n\nvar messageIds = 0\n\nfunction onMessage (self, e) {\n  var message = e.data\n  if (!Array.isArray(message) || message.length < 2) {\n    // Ignore - this message is not for us.\n    return\n  }\n  var messageId = message[0]\n  var error = message[1]\n  var result = message[2]\n\n  var callback = self._callbacks[messageId]\n\n  if (!callback) {\n    // Ignore - user might have created multiple PromiseWorkers.\n    // This message is not for us.\n    return\n  }\n\n  delete self._callbacks[messageId]\n  callback(error, result)\n}\n\nfunction PromiseWorker (worker) {\n  var self = this\n  self._worker = worker\n  self._callbacks = {}\n\n  worker.addEventListener('message', function (e) {\n    onMessage(self, e)\n  })\n}\n\nPromiseWorker.prototype.postMessage = function (userMessage) {\n  var self = this\n  var messageId = messageIds++\n\n  var messageToSend = [messageId, userMessage]\n\n  return new Promise(function (resolve, reject) {\n    self._callbacks[messageId] = function (error, result) {\n      if (error) {\n        return reject(new Error(error.message))\n      }\n      resolve(result)\n    }\n\n    /* istanbul ignore if */\n    if (typeof self._worker.controller !== 'undefined') {\n      // service worker, use MessageChannels because e.source is broken in Chrome < 51:\n      // https://bugs.chromium.org/p/chromium/issues/detail?id=543198\n      var channel = new MessageChannel()\n      channel.port1.onmessage = function (e) {\n        onMessage(self, e)\n      }\n      self._worker.controller.postMessage(messageToSend, [channel.port2])\n    } else {\n      // web worker\n      self._worker.postMessage(messageToSend)\n    }\n  })\n}\n\nmodule.exports = PromiseWorker\n","import { times } from 'lodash';\r\nimport PromiseWorker from 'promise-worker';\r\n// @ts-ignore\r\nimport ClaimWorker from './claim.worker?worker';\r\n\r\nclass ClaimWorkerPoolService {\r\n  workers: PromiseWorker[];\r\n  workerIndex: number;\r\n\r\n  constructor(numberOfWorkers = 4) {\r\n    this.workers = times(\r\n      numberOfWorkers,\r\n      () => new PromiseWorker(new ClaimWorker())\r\n    );\r\n\r\n    this.workerIndex = 0;\r\n  }\r\n\r\n  public get worker() {\r\n    return this.workers[this.workerIndex++ % this.workers.length];\r\n  }\r\n}\r\n\r\nexport const claimWorkerPoolService = new ClaimWorkerPoolService(8);\r\n","import { getAddress } from '@ethersproject/address';\r\nimport { TransactionResponse } from '@ethersproject/providers';\r\nimport { WalletProvider } from '@/dependencies/wallets/Web3Provider';\r\n\r\nimport axios from 'axios';\r\nimport { ethers } from 'ethers';\r\nimport { chunk, flatten } from 'lodash';\r\n\r\nimport { networkId } from '@/composables/useNetwork';\r\nimport merkleOrchardAbi from '@/lib/abi/MerkleOrchard.json';\r\nimport configs from '@/lib/config';\r\nimport { bnum } from '@/lib/utils';\r\nimport { multicall } from '@/lib/utils/balancer/contract';\r\nimport { ipfsService } from '@/services/ipfs/ipfs.service';\r\nimport { rpcProviderService } from '@/services/rpc-provider/rpc-provider.service';\r\n\r\nimport { configService } from '../config/config.service';\r\nimport { claimWorkerPoolService } from './claim-worker-pool.service';\r\nimport MultiTokenClaim from './MultiTokenClaim.json';\r\nimport TokenDecimals from './TokenDecimals.json';\r\nimport {\r\n  ClaimProofTuple,\r\n  ClaimStatus,\r\n  ClaimWorkerMessage,\r\n  ComputeClaimProofPayload,\r\n  MultiTokenPendingClaims,\r\n  Report,\r\n  Snapshot,\r\n  TokenClaimInfo,\r\n} from './types';\r\nimport { TransactionBuilder } from '../web3/transactions/transaction.builder';\r\n\r\nexport class ClaimService {\r\n  public async getMultiTokensPendingClaims(\r\n    account: string\r\n  ): Promise<MultiTokenPendingClaims[]> {\r\n    const tokenClaimsInfo = this.getTokenClaimsInfo();\r\n    if (tokenClaimsInfo != null) {\r\n      const multiTokenPendingClaims = await Promise.all(\r\n        tokenClaimsInfo.map(tokenClaimInfo =>\r\n          this.getTokenPendingClaims(tokenClaimInfo, account)\r\n        )\r\n      );\r\n\r\n      const multiTokenPendingClaimsWithRewards = multiTokenPendingClaims.filter(\r\n        pendingClaim => Number(pendingClaim.availableToClaim) > 0\r\n      );\r\n\r\n      return multiTokenPendingClaimsWithRewards;\r\n    }\r\n    return [];\r\n  }\r\n\r\n  public async getTokenPendingClaims(\r\n    tokenClaimInfo: TokenClaimInfo,\r\n    account: string\r\n  ): Promise<MultiTokenPendingClaims> {\r\n    const snapshot = await this.getSnapshot(tokenClaimInfo.manifest);\r\n    const weekStart = tokenClaimInfo.weekStart;\r\n    const claimStatus = await this.getClaimStatus(\r\n      Object.keys(snapshot).length,\r\n      account,\r\n      tokenClaimInfo\r\n    );\r\n\r\n    const pendingWeeks = claimStatus\r\n      .map((status, i) => [i + weekStart, status])\r\n      .filter(([, status]) => !status)\r\n      .map(([i]) => i) as number[];\r\n\r\n    const reports = await this.getReports(snapshot, pendingWeeks);\r\n\r\n    const claims = Object.entries(reports)\r\n      .filter((report: Report) => report[1][account])\r\n      .map((report: Report) => {\r\n        return {\r\n          id: report[0],\r\n          amount: report[1][account],\r\n        };\r\n      });\r\n\r\n    const availableToClaim = claims\r\n      .map(claim => parseFloat(claim.amount))\r\n      .reduce((total, amount) => total.plus(amount), bnum(0))\r\n      .toString();\r\n\r\n    return {\r\n      claims,\r\n      reports,\r\n      tokenClaimInfo,\r\n      availableToClaim,\r\n    };\r\n  }\r\n  public async multiTokenClaimRewards(\r\n    provider: WalletProvider,\r\n    account: string,\r\n    multiTokenPendingClaims: MultiTokenPendingClaims[]\r\n  ): Promise<TransactionResponse> {\r\n    try {\r\n      const tokens = multiTokenPendingClaims.map(\r\n        tokenPendingClaims => tokenPendingClaims.tokenClaimInfo.token\r\n      );\r\n\r\n      const multiTokenClaims = await Promise.all(\r\n        multiTokenPendingClaims.map((tokenPendingClaims, tokenIndex) =>\r\n          this.computeClaimProofs(tokenPendingClaims, account, tokenIndex)\r\n        )\r\n      );\r\n\r\n      const txBuilder = new TransactionBuilder(provider.getSigner());\r\n      return await txBuilder.contract.sendTransaction({\r\n        contractAddress: configs[networkId.value].addresses.merkleOrchard,\r\n        abi: merkleOrchardAbi,\r\n        action: 'claimDistributions',\r\n        params: [account, flatten(multiTokenClaims), tokens],\r\n      });\r\n    } catch (e) {\r\n      console.log('[Claim] Claim Rewards Error:', e);\r\n      return Promise.reject(e);\r\n    }\r\n  }\r\n\r\n  private async computeClaimProofs(\r\n    tokenPendingClaims: MultiTokenPendingClaims,\r\n    account: string,\r\n    tokenIndex: number\r\n  ): Promise<Promise<ClaimProofTuple[]>> {\r\n    return Promise.all(\r\n      tokenPendingClaims.claims.map(claim => {\r\n        const payload: ComputeClaimProofPayload = {\r\n          account,\r\n          distributor: tokenPendingClaims.tokenClaimInfo.distributor,\r\n          tokenIndex,\r\n          decimals: tokenPendingClaims.tokenClaimInfo.decimals,\r\n          // objects must be cloned\r\n          report: { ...tokenPendingClaims.reports[claim.id] },\r\n          claim: { ...claim },\r\n        };\r\n\r\n        return this.computeClaimProof(payload);\r\n      })\r\n    );\r\n  }\r\n\r\n  private computeClaimProof(\r\n    payload: ComputeClaimProofPayload\r\n  ): Promise<ClaimProofTuple> {\r\n    const message: ClaimWorkerMessage<ComputeClaimProofPayload> = {\r\n      type: 'computeClaimProof',\r\n      payload,\r\n    };\r\n\r\n    return claimWorkerPoolService.worker.postMessage<ClaimProofTuple>(message);\r\n  }\r\n\r\n  private getTokenClaimsInfo() {\r\n    const tokenClaims = MultiTokenClaim[networkId.value];\r\n    const tokenDecimals = TokenDecimals[networkId.value];\r\n\r\n    if (tokenClaims != null) {\r\n      return (tokenClaims as TokenClaimInfo[]).map(tokenClaim => ({\r\n        ...tokenClaim,\r\n        token: getAddress(tokenClaim.token),\r\n        decimals:\r\n          tokenDecimals != null && tokenDecimals[tokenClaim.token]\r\n            ? tokenDecimals[tokenClaim.token]\r\n            : 18,\r\n      }));\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  private async getSnapshot(manifest: string) {\r\n    try {\r\n      const response = await axios.get<Snapshot>(manifest);\r\n      return response.data || {};\r\n    } catch (error) {\r\n      return {};\r\n    }\r\n  }\r\n\r\n  private async getClaimStatus(\r\n    totalWeeks: number,\r\n    account: string,\r\n    tokenClaimInfo: TokenClaimInfo\r\n  ): Promise<ClaimStatus[]> {\r\n    const { token, distributor, weekStart } = tokenClaimInfo;\r\n\r\n    const claimStatusCalls = Array.from({ length: totalWeeks }).map((_, i) => [\r\n      configService.network.addresses.merkleOrchard,\r\n      'isClaimed',\r\n      [token, distributor, weekStart + i, account],\r\n    ]);\r\n\r\n    const rootCalls = Array.from({ length: totalWeeks }).map((_, i) => [\r\n      configService.network.addresses.merkleOrchard,\r\n      'getDistributionRoot',\r\n      [token, distributor, weekStart + i],\r\n    ]);\r\n\r\n    try {\r\n      const result = (await multicall<boolean | string>(\r\n        String(networkId.value),\r\n        rpcProviderService.jsonProvider,\r\n        merkleOrchardAbi,\r\n        [...claimStatusCalls, ...rootCalls],\r\n        {},\r\n        true\r\n      )) as (boolean | string)[];\r\n\r\n      if (result.length > 0) {\r\n        const chunks = chunk(flatten(result), totalWeeks);\r\n\r\n        const claimedResult = chunks[0] as boolean[];\r\n        const distributionRootResult = chunks[1] as string[];\r\n\r\n        return claimedResult.filter(\r\n          (_, index) =>\r\n            distributionRootResult[index] !== ethers.constants.HashZero\r\n        );\r\n      }\r\n    } catch (e) {\r\n      console.log('[Claim] Claim Status Error:', e);\r\n    }\r\n\r\n    return [];\r\n  }\r\n\r\n  private async getReports(snapshot: Snapshot, weeks: number[]) {\r\n    const reports = await Promise.all<Report>(\r\n      weeks\r\n        .filter(week => snapshot[week] != null)\r\n        .map(week => ipfsService.get(snapshot[week]))\r\n    );\r\n    return Object.fromEntries(reports.map((report, i) => [weeks[i], report]));\r\n  }\r\n}\r\n\r\nexport const claimService = new ClaimService();\r\n","import { computed, reactive } from 'vue';\r\nimport { useQuery, UseQueryOptions } from '@tanstack/vue-query';\r\n\r\nimport useNetwork from '@/composables/useNetwork';\r\nimport QUERY_KEYS from '@/constants/queryKeys';\r\nimport { claimService } from '@/services/claim/claim.service';\r\nimport { MultiTokenPendingClaims } from '@/services/claim/types';\r\nimport useWeb3 from '@/services/web3/useWeb3';\r\n\r\ntype UserClaimsQueryResponse = {\r\n  multiTokenPendingClaims: MultiTokenPendingClaims[];\r\n};\r\n\r\ntype QueryOptions = UseQueryOptions<UserClaimsQueryResponse>;\r\n\r\nexport default function useUserClaimsQuery(options: QueryOptions = {}) {\r\n  // COMPOSABLES\r\n  const { account, isWalletReady } = useWeb3();\r\n  const { networkId } = useNetwork();\r\n\r\n  // DATA\r\n  const queryKey = reactive(QUERY_KEYS.Claims.All(networkId, account));\r\n\r\n  // COMPUTED\r\n  const enabled = computed(() => isWalletReady.value && account.value != null);\r\n\r\n  // METHODS\r\n  const queryFn = async () => {\r\n    const multiTokenPendingClaims =\r\n      await claimService.getMultiTokensPendingClaims(account.value);\r\n\r\n    return {\r\n      multiTokenPendingClaims,\r\n    };\r\n  };\r\n\r\n  const queryOptions = reactive({\r\n    enabled,\r\n    refetchOnMount: false,\r\n    refetchOnWindowFocus: false,\r\n    ...options,\r\n  });\r\n\r\n  return useQuery<UserClaimsQueryResponse>(\r\n    queryKey,\r\n    queryFn,\r\n    queryOptions as QueryOptions\r\n  );\r\n}\r\n","<script setup lang=\"ts\">\r\nimport { getAddress } from '@ethersproject/address';\r\nimport { computed, ref, watch } from 'vue';\r\nimport { useI18n } from 'vue-i18n';\r\n\r\nimport BalLink from '@/components/_global/BalLink/BalLink.vue';\r\nimport useUserClaimsQuery from '@/composables/queries/useUserClaimsQuery';\r\nimport useEthers from '@/composables/useEthers';\r\nimport useNumbers, { FNumFormats } from '@/composables/useNumbers';\r\nimport { useTokens } from '@/providers/tokens.provider';\r\nimport useTranasactionErrors from '@/composables/useTransactionErrors';\r\nimport useTransactions from '@/composables/useTransactions';\r\nimport { TOKENS } from '@/constants/tokens';\r\nimport { bnum } from '@/lib/utils';\r\nimport { claimService } from '@/services/claim/claim.service';\r\nimport useWeb3 from '@/services/web3/useWeb3';\r\nimport { TransactionError } from '@/types/transactions';\r\n\r\ntype ClaimableToken = {\r\n  token: string;\r\n  symbol: string;\r\n  amount: string;\r\n  fiatValue: string;\r\n};\r\n\r\nenum Tabs {\r\n  CLAIMABLE = 'claimable',\r\n}\r\n\r\nconst { t } = useI18n();\r\n\r\nconst tabs = [\r\n  { value: Tabs.CLAIMABLE, label: t('liquidityMiningPopover.tabs.claimable') },\r\n];\r\n\r\nconst activeTab = ref(tabs[0].value);\r\nconst isClaiming = ref(false);\r\nconst claimError = ref<TransactionError | null>(null);\r\n\r\n// COMPOSABLES\r\nconst userClaimsQuery = useUserClaimsQuery();\r\nconst { fNum } = useNumbers();\r\nconst {\r\n  account,\r\n  getProvider,\r\n  isArbitrum,\r\n  isMainnet,\r\n  isGoerli,\r\n  isPolygon,\r\n  isMismatchedNetwork,\r\n} = useWeb3();\r\nconst { txListener } = useEthers();\r\nconst { addTransaction } = useTransactions();\r\nconst { priceFor, getToken } = useTokens();\r\nconst { parseError } = useTranasactionErrors();\r\n\r\nconst BALTokenAddress = getAddress(TOKENS.Addresses.BAL);\r\n\r\n// COMPUTED\r\nconst BALTokenPlaceholder = computed<ClaimableToken>(() => ({\r\n  token: BALTokenAddress,\r\n  symbol: getToken(BALTokenAddress)?.symbol,\r\n  amount: '0',\r\n  fiatValue: '0',\r\n}));\r\n\r\n// Polygon used to be an airdrop, now its claimable - leaving it here in case new networks will need to be airdropped first.\r\nconst isAirdrop = false;\r\n\r\nconst legacyClaimUI = computed(() => {\r\n  if (isMainnet.value) {\r\n    return [\r\n      { token: '$BAL', subdomain: 'claim' },\r\n      { token: '$VITA', subdomain: 'claim-vita' },\r\n      { token: '$LDO', subdomain: 'claim-lido' },\r\n    ];\r\n  } else if (isArbitrum.value) {\r\n    return [\r\n      { token: '$BAL', subdomain: 'claim-arbitrum' },\r\n      { token: '$MCDEX', subdomain: 'claim-mcdex' },\r\n      { token: '$PICKLE', subdomain: 'claim-pickle' },\r\n    ];\r\n  }\r\n\r\n  return [];\r\n});\r\n\r\nconst userClaims = computed(() =>\r\n  userClaimsQuery.isSuccess.value ? userClaimsQuery.data?.value : null\r\n);\r\n\r\nconst claimableTokens = computed<ClaimableToken[]>(() => {\r\n  if (\r\n    userClaims.value != null &&\r\n    userClaims.value.multiTokenPendingClaims.length > 0\r\n  ) {\r\n    return userClaims.value.multiTokenPendingClaims.map(\r\n      ({ availableToClaim, tokenClaimInfo }) => ({\r\n        token: tokenClaimInfo.token,\r\n        symbol: getToken(tokenClaimInfo.token)?.symbol,\r\n        amount: availableToClaim,\r\n        fiatValue: bnum(availableToClaim)\r\n          .times(priceFor(tokenClaimInfo.token))\r\n          .toString(),\r\n      })\r\n    );\r\n  }\r\n  return [BALTokenPlaceholder.value];\r\n});\r\n\r\nconst totalClaimableTokensFiatValue = computed(() =>\r\n  claimableTokens.value\r\n    .reduce((totalValue, { fiatValue }) => totalValue.plus(fiatValue), bnum(0))\r\n    .toString()\r\n);\r\n\r\nconst hasClaimableTokens = computed(() =>\r\n  claimableTokens.value.some(\r\n    claimableToken => Number(claimableToken.amount) > 0\r\n  )\r\n);\r\n\r\nwatch(isMismatchedNetwork, () => {\r\n  userClaimsQuery.refetch();\r\n});\r\n\r\n// METHODS\r\nasync function claimAvailableRewards() {\r\n  if (userClaims.value != null) {\r\n    isClaiming.value = true;\r\n    claimError.value = null;\r\n\r\n    try {\r\n      const tx = await claimService.multiTokenClaimRewards(\r\n        getProvider(),\r\n        account.value,\r\n        userClaims.value.multiTokenPendingClaims\r\n      );\r\n\r\n      const summary = claimableTokens.value\r\n        .map(\r\n          claimableToken =>\r\n            `${fNum(claimableToken.amount, {\r\n              minimumFractionDigits: 4,\r\n              maximumFractionDigits: 4,\r\n            })} ${claimableToken.symbol}`\r\n        )\r\n        .join(', ');\r\n\r\n      addTransaction({\r\n        id: tx.hash,\r\n        type: 'tx',\r\n        action: 'claim',\r\n        summary,\r\n      });\r\n\r\n      txListener(tx, {\r\n        onTxConfirmed: () => {\r\n          isClaiming.value = false;\r\n          userClaimsQuery.refetch();\r\n        },\r\n        onTxFailed: () => {\r\n          isClaiming.value = false;\r\n        },\r\n      });\r\n    } catch (e) {\r\n      console.log(e);\r\n      claimError.value = parseError(e);\r\n      isClaiming.value = false;\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<template>\r\n  <div v-if=\"userClaims != null\" class=\"mt-4 w-full sm:w-3/4 md:w-1/2\">\r\n    <BalAlert\r\n      title=\"Under maintenance\"\r\n      description=\"Legacy claims are temporarily disabled whilst under maintenance. Please try again later.\"\r\n      type=\"warning\"\r\n      class=\"mb-4\"\r\n      block\r\n    />\r\n    <div v-if=\"isAirdrop\" class=\"mb-1 text-sm text-gray-600\">\r\n      {{ $t('liquidityMiningPopover.airdropExplainer', ['Polygon']) }}\r\n    </div>\r\n    <div v-if=\"!isAirdrop\" class=\"\">\r\n      <BalCard noPad class=\"mb-4\">\r\n        <template #header>\r\n          <div\r\n            class=\"px-3 w-full bg-gray-50 dark:bg-gray-800 border-b dark:border-gray-900\"\r\n          >\r\n            <BalTabs\r\n              v-model=\"activeTab\"\r\n              :tabs=\"tabs\"\r\n              class=\"p-0 m-0 -mb-px whitespace-nowrap\"\r\n              noPad\r\n            />\r\n          </div>\r\n        </template>\r\n        <template v-if=\"activeTab === Tabs.CLAIMABLE\">\r\n          <template\r\n            v-for=\"claimableToken in claimableTokens\"\r\n            :key=\"`token-${claimableToken.token}`\"\r\n          >\r\n            <div\r\n              class=\"flex items-center py-2 px-3 mb-2 last:border-0 border-b dark:border-gray-900\"\r\n            >\r\n              <BalAsset\r\n                :address=\"claimableToken.token\"\r\n                :size=\"36\"\r\n                class=\"mr-3\"\r\n              />\r\n              <div>\r\n                <div class=\"font-medium\">\r\n                  {{ fNum(claimableToken.amount, FNumFormats.token) }}\r\n                  {{ claimableToken.symbol }}\r\n                </div>\r\n                <div class=\"text-gray-400 font-sm\">\r\n                  {{ fNum(claimableToken.fiatValue, FNumFormats.fiat) }}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </template>\r\n        </template>\r\n      </BalCard>\r\n      <BalBtn\r\n        v-if=\"!isAirdrop\"\r\n        color=\"gradient\"\r\n        size=\"md\"\r\n        block\r\n        class=\"mb-6\"\r\n        :loading=\"isClaiming\"\r\n        :loadingLabel=\"$t('claiming')\"\r\n        :disabled=\"true\"\r\n        @click=\"claimAvailableRewards\"\r\n      >\r\n        {{ $t('claimAll') }}\r\n        <template v-if=\"hasClaimableTokens\">\r\n          ~{{ fNum(totalClaimableTokensFiatValue, FNumFormats.fiat) }}\r\n        </template>\r\n      </BalBtn>\r\n      <BalAlert\r\n        v-if=\"claimError != null\"\r\n        class=\"-mt-4 mb-6\"\r\n        type=\"error\"\r\n        size=\"md\"\r\n        :title=\"claimError.title\"\r\n        :description=\"claimError.description\"\r\n        block\r\n        actionLabel=\"Dismiss\"\r\n        @action-click=\"claimError = null\"\r\n      />\r\n    </div>\r\n    <div v-if=\"!isAirdrop\">\r\n      <div class=\"mb-4\">\r\n        <div class=\"mb-2 font-semibold\">\r\n          Looking for other claimable tokens?\r\n        </div>\r\n        <ul class=\"pl-8 list-disc\">\r\n          <li v-if=\"legacyClaimUI.length > 0\" class=\"mt-2\">\r\n            Claim\r\n            <span class=\"inline-grid grid-flow-col gap-1\">\r\n              <BalLink\r\n                v-for=\"legacyClaim in legacyClaimUI\"\r\n                :key=\"`token-${legacyClaim.token}`\"\r\n                :href=\"`https://${legacyClaim.subdomain}.balancer.fi/${account}`\"\r\n                external\r\n                >{{ legacyClaim.token }}</BalLink\r\n              >\r\n            </span>\r\n            from legacy liquidity mining contracts distributed before 20 Oct,\r\n            2021.\r\n          </li>\r\n          <li class=\"mt-2\">\r\n            Claim BAL on other networks\r\n            <template v-if=\"isArbitrum\">\r\n              <BalLink\r\n                href=\"https://app.balancer.fi/ethereum/claim/legacy\"\r\n                external\r\n              >\r\n                Ethereum\r\n              </BalLink>\r\n              and\r\n              <BalLink\r\n                href=\"https://app.balancer.fi/polygon/claim/legacy\"\r\n                external\r\n              >\r\n                Polygon </BalLink\r\n              >.\r\n            </template>\r\n            <template v-else-if=\"isPolygon\">\r\n              <BalLink\r\n                href=\"https://app.balancer.fi/ethereum/claim/legacy\"\r\n                external\r\n              >\r\n                Ethereum\r\n              </BalLink>\r\n              and\r\n              <BalLink\r\n                href=\"https://app.balancer.fi/arbitrum/claim/legacy\"\r\n                external\r\n              >\r\n                Arbitrum </BalLink\r\n              >.\r\n            </template>\r\n            <template v-else-if=\"isMainnet || isGoerli\">\r\n              <BalLink\r\n                href=\"https://app.balancer.fi/polygon/claim/legacy\"\r\n                external\r\n              >\r\n                Polygon\r\n              </BalLink>\r\n              and\r\n              <BalLink\r\n                href=\"https://app.balancer.fi/arbitrum/claim/legacy\"\r\n                external\r\n              >\r\n                Arbitrum </BalLink\r\n              >.\r\n            </template>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n    <div v-else class=\"px-3 pb-3 mt-4 text-sm\">\r\n      <div>{{ $t('liquidityMiningPopover.airdropEligibility') }}</div>\r\n    </div>\r\n  </div>\r\n</template>\r\n","<script lang=\"ts\" setup>\r\nimport HeroClaim from '@/components/contextual/pages/claim/HeroClaim.vue';\r\nimport LegacyClaims from '@/components/contextual/pages/claim/LegacyClaims.vue';\r\nimport useWeb3 from '@/services/web3/useWeb3';\r\n\r\n/**\r\n * COMPOSABLES\r\n */\r\nconst { isWalletReady } = useWeb3();\r\n</script>\r\n\r\n<template>\r\n  <div>\r\n    <HeroClaim\r\n      :title=\"$t('claimHero.legacyTitle')\"\r\n      :description=\"$t('claimHero.legacyDescription')\"\r\n    />\r\n    <div class=\"xl:container py-12 xl:px-4 xl:mx-auto\">\r\n      <template v-if=\"isWalletReady\">\r\n        <div class=\"px-4 xl:px-0\">\r\n          <h2 :class=\"['font-body font-semibold text-2xl']\">\r\n            {{ $t('pages.claim.titles.legacyIncentives') }}\r\n          </h2>\r\n          <LegacyClaims />\r\n        </div>\r\n      </template>\r\n    </div>\r\n  </div>\r\n</template>\r\n"],"names":["messageIds","onMessage","self","message","messageId","error","result","callback","PromiseWorker","worker","e","userMessage","messageToSend","resolve","reject","channel","promiseWorker","ClaimWorkerPoolService","numberOfWorkers","__publicField","times","ClaimWorker","claimWorkerPoolService","ClaimService","account","tokenClaimsInfo","tokenClaimInfo","pendingClaim","snapshot","weekStart","pendingWeeks","status","i","reports","claims","report","availableToClaim","claim","total","amount","bnum","provider","multiTokenPendingClaims","tokens","tokenPendingClaims","multiTokenClaims","tokenIndex","TransactionBuilder","configs","networkId","merkleOrchardAbi","flatten","payload","tokenClaims","MultiTokenClaim","tokenDecimals","TokenDecimals","tokenClaim","getAddress","manifest","axios","totalWeeks","token","distributor","claimStatusCalls","_","configService","rootCalls","multicall","rpcProviderService","chunks","chunk","claimedResult","distributionRootResult","index","ethers.constants.HashZero","weeks","week","ipfsService","claimService","useUserClaimsQuery","options","isWalletReady","useWeb3","useNetwork","queryKey","reactive","QUERY_KEYS","enabled","computed","queryFn","queryOptions","useQuery","t","useI18n","tabs","activeTab","ref","isClaiming","claimError","userClaimsQuery","fNum","useNumbers","getProvider","isArbitrum","isMainnet","isGoerli","isPolygon","isMismatchedNetwork","txListener","useEthers","addTransaction","useTransactions","priceFor","getToken","useTokens","parseError","useTranasactionErrors","BALTokenAddress","TOKENS","BALTokenPlaceholder","_a","legacyClaimUI","userClaims","claimableTokens","totalClaimableTokensFiatValue","totalValue","fiatValue","hasClaimableTokens","claimableToken","watch","claimAvailableRewards","tx","summary"],"mappings":"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","x_google_ignoreList":[0]}