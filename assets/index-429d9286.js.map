{"version":3,"file":"index-429d9286.js","sources":["../../src/components/_global/BalFlexGrid/BalFlexGrid.vue","../../src/services/balancer/gauges/gauges.decorator.ts","../../src/composables/queries/useGaugesDecorationQuery.ts","../../src/services/balancer/gauges/entities/gauges/query.ts","../../src/services/balancer/gauges/entities/gauges/gauges.entity.ts","../../src/services/balancer/gauges/gauges-subgraph.client.ts","../../src/services/balancer/gauges/gauges-subgraph.service.ts","../../src/composables/queries/useGaugesQuery.ts","../../src/services/balancer/contracts/contracts/balancer-minter.ts","../../src/components/btns/ClaimBalBtn/ClaimBalBtn.vue","../../src/components/tables/BalClaimsTable.vue","../../src/services/balancer/contracts/contracts/gauge-reward-helper.ts","../../src/components/btns/ClaimRewardsBtn/ClaimRewardsBtn.vue","../../src/components/tables/GaugeRewardsTable.vue","../../src/services/balancer/contracts/contracts/fee-distributor.ts","../../src/composables/queries/useProtocolRewardsQuery.ts","../../src/components/btns/ClaimProtocolRewardsBtn.vue","../../src/components/tables/ProtocolRewardsTable.vue","../../src/composables/useClaimsData.ts","../../src/services/balancer/contracts/contracts/bb-a-usd-token.ts","../../src/pages/claim/index.vue"],"sourcesContent":["<script lang=\"ts\">\r\nimport { VNodeArrayChildren } from 'vue';\r\n\r\nexport default defineComponent({\r\n  name: 'BalFlexGrid',\r\n\r\n  props: {\r\n    gap: { type: Number, default: 4 },\r\n    flexWrap: { type: Boolean, default: false },\r\n  },\r\n\r\n  setup(props, { slots }) {\r\n    const spacing = computed((): string => (props.gap / 2).toString());\r\n\r\n    const flexClasses = computed(() => ({\r\n      'flex-wrap': props.flexWrap,\r\n    }));\r\n\r\n    // @ts-ignore\r\n    const slotChildren = slots.default()[0].children as VNodeArrayChildren;\r\n    const gridItems = slotChildren.map(slotItem =>\r\n      h('div', { class: `px-${spacing.value} mb-${spacing.value}` }, [slotItem])\r\n    );\r\n\r\n    return () =>\r\n      h('div', { class: `px-${spacing.value}` }, [\r\n        h(\r\n          'div',\r\n          { class: [`flex -mx-${props.gap}`, flexClasses.value] },\r\n          gridItems\r\n        ),\r\n      ]);\r\n  },\r\n});\r\n</script>\r\n","import { AddressZero } from '@ethersproject/constants';\r\n\r\nimport { isL2 } from '@/composables/useNetwork';\r\nimport LiquidityGaugeAbi from '@/lib/abi/LiquidityGaugeV5.json';\r\nimport LiquidityGaugeRewardHelperAbi from '@/lib/abi/LiquidityGaugeHelperAbi.json';\r\nimport { configService } from '@/services/config/config.service';\r\nimport { rpcProviderService } from '@/services/rpc-provider/rpc-provider.service';\r\n\r\nimport {\r\n  Gauge,\r\n  OnchainGaugeData,\r\n  OnchainGaugeDataMap,\r\n  SubgraphGauge,\r\n} from './types';\r\nimport { getOldMulticaller } from '@/dependencies/OldMulticaller';\r\n// eslint-disable-next-line no-restricted-imports\r\nimport { Multicaller } from '@/lib/utils/balancer/contract';\r\n\r\nconst MAX_REWARD_TOKENS = 8;\r\n\r\nexport class GaugesDecorator {\r\n  multicaller: Multicaller;\r\n\r\n  constructor(\r\n    private readonly abi = LiquidityGaugeAbi,\r\n    private readonly rewardsHelperAbi = LiquidityGaugeRewardHelperAbi,\r\n    private readonly provider = rpcProviderService.jsonProvider,\r\n    private readonly config = configService\r\n  ) {\r\n    this.multicaller = this.resetMulticaller(abi);\r\n  }\r\n\r\n  /**\r\n   * @summary Combine subgraph gauge schema with onchain data using multicalls.\r\n   */\r\n  async decorate(\r\n    subgraphGauges: SubgraphGauge[],\r\n    userAddress: string\r\n  ): Promise<Gauge[]> {\r\n    this.multicaller = this.resetMulticaller(this.abi);\r\n    this.callRewardTokens(subgraphGauges);\r\n    this.callClaimableTokens(subgraphGauges, userAddress);\r\n\r\n    let gaugesDataMap = await this.multicaller.execute<OnchainGaugeDataMap>();\r\n\r\n    if (isL2.value) {\r\n      this.multicaller = this.resetMulticaller(this.rewardsHelperAbi);\r\n    }\r\n    this.callClaimableRewards(subgraphGauges, userAddress, gaugesDataMap);\r\n    gaugesDataMap = await this.multicaller.execute<OnchainGaugeDataMap>(\r\n      gaugesDataMap\r\n    );\r\n\r\n    return subgraphGauges.map(subgraphGauge => ({\r\n      ...subgraphGauge,\r\n      ...this.format(gaugesDataMap[subgraphGauge.id]),\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * @summary Format raw onchain data fetched from multicalls.\r\n   */\r\n  private format(gaugeData: OnchainGaugeData): OnchainGaugeData {\r\n    return {\r\n      ...gaugeData,\r\n      rewardTokens: this.formatRewardTokens(gaugeData.rewardTokens),\r\n      claimableTokens: gaugeData.claimableTokens?.toString() || '0',\r\n      claimableRewards: this.formatClaimableRewards(gaugeData.claimableRewards),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * @summary Add multicaller calls that fetch list of reward token addresses for each gauge\r\n   * in given array of gauges.\r\n   */\r\n  private callRewardTokens(subgraphGauges: SubgraphGauge[]) {\r\n    subgraphGauges.forEach(gauge => {\r\n      for (let i = 0; i < MAX_REWARD_TOKENS; i++) {\r\n        this.multicaller.call(\r\n          `${gauge.id}.rewardTokens[${i}]`,\r\n          gauge.id,\r\n          'reward_tokens',\r\n          [i]\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @summary Filter out zero addresses from reward tokens array.\r\n   * @description There can be up to 8 reward tokens for a gauge.\r\n   * The onchain call for reward tokens returns an array of length 8\r\n   * with each position filled with the zero address if a reward token\r\n   * has not been added.\r\n   */\r\n  private formatRewardTokens(rewardTokens: string[]): string[] {\r\n    return rewardTokens.filter(token => token !== AddressZero);\r\n  }\r\n\r\n  /**\r\n   * @summary Add multicaller calls that fetch the user's claimable BAL\r\n   * for each gauge in given array of gauges.\r\n   */\r\n  private callClaimableTokens(\r\n    subgraphGauges: SubgraphGauge[],\r\n    userAddress: string\r\n  ) {\r\n    subgraphGauges.forEach(gauge => {\r\n      this.multicaller.call(\r\n        `${gauge.id}.claimableTokens`,\r\n        gauge.id,\r\n        'claimable_tokens',\r\n        [userAddress]\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @summary Add multicaller calls that fetch the claimable amounts for reward tokens,\r\n   * e.g. non BAL rewards on gauge.\r\n   */\r\n  private callClaimableRewards(\r\n    subgraphGauges: SubgraphGauge[],\r\n    userAddress: string,\r\n    gaugesDataMap: OnchainGaugeDataMap\r\n  ) {\r\n    const methodName = isL2.value ? 'getPendingRewards' : 'claimable_reward';\r\n\r\n    subgraphGauges.forEach(gauge => {\r\n      gaugesDataMap[gauge.id].rewardTokens.forEach(rewardToken => {\r\n        if (rewardToken === AddressZero) return;\r\n\r\n        const callArgs = isL2.value\r\n          ? [gauge.id, userAddress, rewardToken]\r\n          : [userAddress, rewardToken];\r\n\r\n        const contractAddress = isL2.value\r\n          ? configService.network.addresses.gaugeRewardsHelper\r\n          : gauge.id;\r\n\r\n        this.multicaller.call(\r\n          `${gauge.id}.claimableRewards.${rewardToken}`,\r\n          contractAddress,\r\n          methodName,\r\n          callArgs\r\n        );\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @summary converts claimable reward values in map to strings from BigNumbers.\r\n   */\r\n  private formatClaimableRewards(\r\n    claimableRewards: Record<string, string>\r\n  ): Record<string, string> {\r\n    if (!claimableRewards) return {};\r\n\r\n    Object.keys(claimableRewards).forEach(rewardToken => {\r\n      claimableRewards[rewardToken] = claimableRewards[rewardToken].toString();\r\n    });\r\n\r\n    return claimableRewards;\r\n  }\r\n\r\n  private resetMulticaller(\r\n    abi: typeof LiquidityGaugeAbi | typeof LiquidityGaugeRewardHelperAbi\r\n  ) {\r\n    const Multicaller = getOldMulticaller();\r\n    return new Multicaller(this.config.network.key, this.provider, abi);\r\n  }\r\n}\r\n\r\nexport const gaugesDecorator = new GaugesDecorator();\r\n","import { computed, reactive, Ref } from 'vue';\r\nimport { useQuery, UseQueryOptions } from '@tanstack/vue-query';\r\n\r\nimport QUERY_KEYS from '@/constants/queryKeys';\r\nimport { gaugesDecorator } from '@/services/balancer/gauges/gauges.decorator';\r\nimport { Gauge, SubgraphGauge } from '@/services/balancer/gauges/types';\r\nimport useWeb3 from '@/services/web3/useWeb3';\r\n\r\nimport useNetwork from '../useNetwork';\r\nimport { useTokens } from '@/providers/tokens.provider';\r\n\r\n/**\r\n * TYPES\r\n */\r\ntype QueryResponse = Gauge[] | null;\r\ntype QueryOptions = UseQueryOptions<QueryResponse>;\r\n\r\n/**\r\n * @summary Fetches onchain data for gauges list.\r\n */\r\nexport default function useGaugesDecorationQuery(\r\n  gauges: Ref<SubgraphGauge[] | undefined>,\r\n  options: QueryOptions = {}\r\n) {\r\n  /**\r\n   * COMPOSABLES\r\n   */\r\n  const { account, isWalletReady } = useWeb3();\r\n  const { networkId } = useNetwork();\r\n  const { injectTokens } = useTokens();\r\n\r\n  /**\r\n   * COMPUTED\r\n   */\r\n  const isQueryEnabled = computed(\r\n    () => gauges?.value && gauges.value?.length > 0 && isWalletReady.value\r\n  );\r\n\r\n  /**\r\n   * QUERY KEY\r\n   */\r\n  const queryKey = reactive(\r\n    QUERY_KEYS.Gauges.All.Onchain(gauges, account, networkId)\r\n  );\r\n\r\n  /**\r\n   * QUERY FUNCTION\r\n   */\r\n  const queryFn = async () => {\r\n    if (!gauges.value) return null;\r\n    const _gauges = await gaugesDecorator.decorate(gauges.value, account.value);\r\n    const tokens = _gauges.map(gauge => gauge.rewardTokens).flat();\r\n    await injectTokens(tokens);\r\n    return _gauges;\r\n  };\r\n\r\n  /**\r\n   * QUERY OPTIONS\r\n   */\r\n  const queryOptions = reactive({\r\n    enabled: isQueryEnabled,\r\n    ...options,\r\n  });\r\n\r\n  return useQuery<QueryResponse>(\r\n    queryKey,\r\n    queryFn,\r\n    queryOptions as QueryOptions\r\n  );\r\n}\r\n","import { merge } from 'lodash';\r\n\r\nconst defaultArgs = {\r\n  first: 999,\r\n};\r\n\r\nconst defaultAttrs = {\r\n  id: true,\r\n  symbol: true,\r\n  poolId: true,\r\n  totalSupply: true,\r\n  isKilled: true,\r\n  factory: {\r\n    id: true,\r\n  },\r\n  isPreferentialGauge: true,\r\n};\r\n\r\nexport const gaugeQueryBuilder = (\r\n  args = {},\r\n  attrs = {},\r\n  name: string | undefined = undefined\r\n) => ({\r\n  __name: name,\r\n  liquidityGauges: {\r\n    __args: merge({}, defaultArgs, args),\r\n    ...merge({}, defaultAttrs, attrs),\r\n  },\r\n});\r\n","import { GaugesSubgraphService } from '../../gauges-subgraph.service';\r\nimport { QueryBuilder, SubgraphGauge } from '../../types';\r\nimport { gaugeQueryBuilder } from './query';\r\n\r\nexport class GaugesEntity {\r\n  constructor(\r\n    private readonly service: GaugesSubgraphService,\r\n    private readonly query: QueryBuilder = gaugeQueryBuilder\r\n  ) {}\r\n\r\n  public async get(args = {}, attrs = {}): Promise<SubgraphGauge[]> {\r\n    const queryName = 'Gauges';\r\n    const query = this.query(args, attrs, queryName);\r\n    const data = await this.service.client.get(query);\r\n    return data.liquidityGauges;\r\n  }\r\n}\r\n","import axios from 'axios';\r\nimport { jsonToGraphQLQuery } from 'json-to-graphql-query';\r\n\r\nimport { configService } from '@/services/config/config.service';\r\nexport class GaugesSubgraphClient {\r\n  constructor(\r\n    public readonly url: string = configService.network.subgraphs.gauge\r\n  ) {}\r\n\r\n  public async get(query) {\r\n    try {\r\n      if (!this.url) {\r\n        return {\r\n          liquidityGauges: [],\r\n        };\r\n      }\r\n      const payload = this.payloadFor(query);\r\n      const {\r\n        data: { data },\r\n      } = await axios.post(this.url, payload);\r\n      return data;\r\n    } catch (error) {\r\n      console.error('GaugesSubgraphClient request failed', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  public payloadFor(query) {\r\n    return { query: jsonToGraphQLQuery({ query }) };\r\n  }\r\n}\r\n\r\nexport const gaugesSubgraphClient = new GaugesSubgraphClient();\r\n","import { GaugesEntity } from './entities/gauges/gauges.entity';\r\nimport { gaugesSubgraphClient } from './gauges-subgraph.client';\r\n\r\nexport class GaugesSubgraphService {\r\n  gauges: GaugesEntity;\r\n\r\n  constructor(readonly client = gaugesSubgraphClient) {\r\n    this.gauges = new GaugesEntity(this);\r\n  }\r\n}\r\n\r\nexport const gaugesSubgraphService = new GaugesSubgraphService();\r\n","import { reactive } from 'vue';\r\nimport { useQuery, UseQueryOptions } from '@tanstack/vue-query';\r\n\r\nimport QUERY_KEYS from '@/constants/queryKeys';\r\nimport { gaugesSubgraphService } from '@/services/balancer/gauges/gauges-subgraph.service';\r\nimport { SubgraphGauge } from '@/services/balancer/gauges/types';\r\nimport { isGnosis } from '../useNetwork';\r\n\r\n/**\r\n * TYPES\r\n */\r\ntype QueryResponse = SubgraphGauge[];\r\ntype QueryOptions = UseQueryOptions<QueryResponse>;\r\n\r\n/**\r\n * @summary Fetches guages list from subgraph\r\n */\r\nexport default function useGaugesQuery(options: QueryOptions = {}) {\r\n  /**\r\n   * QUERY KEY\r\n   */\r\n  const queryKey = reactive(QUERY_KEYS.Gauges.All.Static());\r\n\r\n  /**\r\n   * QUERY FUNCTION\r\n   */\r\n  const queryFn = async () => {\r\n    try {\r\n      return await gaugesSubgraphService.gauges.get();\r\n    } catch (error) {\r\n      console.error('Failed to fetch gauges', error);\r\n      return [];\r\n    }\r\n  };\r\n\r\n  /**\r\n   * QUERY OPTIONS\r\n   */\r\n  const queryOptions = reactive({\r\n    enabled: !isGnosis.value,\r\n    ...options,\r\n  });\r\n\r\n  return useQuery<QueryResponse>(\r\n    queryKey,\r\n    queryFn,\r\n    queryOptions as QueryOptions\r\n  );\r\n}\r\n","import BalancerMinterAbi from '@/lib/abi/BalancerMinter.json';\r\nimport { configService } from '@/services/config/config.service';\r\nimport { walletService as walletServiceInstance } from '@/services/web3/wallet.service';\r\n\r\nexport class BalancerMinter {\r\n  constructor(\r\n    private readonly abi = BalancerMinterAbi,\r\n    private readonly config = configService,\r\n    private readonly walletService = walletServiceInstance,\r\n    public readonly address = config.network.addresses.balancerMinter\r\n  ) {}\r\n\r\n  /**\r\n   * @summary Claim BAL rewards for gauge\r\n   */\r\n  async mint(gaugeAddress: string) {\r\n    return await this.walletService.txBuilder.contract.sendTransaction({\r\n      contractAddress: this.address,\r\n      abi: this.abi,\r\n      action: 'mint',\r\n      params: [gaugeAddress],\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @summary Claim BAL rewards for multiple gauges in one transaction\r\n   */\r\n  async mintMany(gaugeAddresses: string[]) {\r\n    return await this.walletService.txBuilder.contract.sendTransaction({\r\n      contractAddress: this.address,\r\n      abi: this.abi,\r\n      action: 'mintMany',\r\n      params: [gaugeAddresses],\r\n    });\r\n  }\r\n}\r\n\r\nexport const balancerMinter = new BalancerMinter();\r\n","<script lang=\"ts\" setup>\r\nimport { getAddress } from '@ethersproject/address';\r\nimport { useI18n } from 'vue-i18n';\r\n\r\nimport TxActionBtn from '@/components/btns/TxActionBtn/TxActionBtn.vue';\r\nimport useGaugesDecorationQuery from '@/composables/queries/useGaugesDecorationQuery';\r\nimport useGaugesQuery from '@/composables/queries/useGaugesQuery';\r\nimport useNumbers, { FNumFormats } from '@/composables/useNumbers';\r\nimport { balancerMinter } from '@/services/balancer/contracts/contracts/balancer-minter';\r\nimport { Gauge } from '@/services/balancer/gauges/types';\r\n\r\n/**\r\n * TYPES\r\n */\r\ntype Props = {\r\n  gauges: Gauge[];\r\n  label: string;\r\n  amount: string;\r\n};\r\n\r\n/**\r\n * PROPS & EMITS\r\n */\r\nconst props = defineProps<Props>();\r\n\r\n/**\r\n * COMPOSABLES\r\n */\r\nconst { t } = useI18n();\r\nconst { fNum } = useNumbers();\r\nconst { data: subgraphGauges } = useGaugesQuery();\r\nconst gaugesQuery = useGaugesDecorationQuery(subgraphGauges);\r\n\r\n/**\r\n * COMPUTED\r\n */\r\nconst gaugeAddresses = computed((): string[] =>\r\n  props.gauges.map(gauge => getAddress(gauge.id))\r\n);\r\n\r\n/**\r\n * METHODS\r\n */\r\nasync function claimTx() {\r\n  if (props.gauges.length === 1) {\r\n    return await balancerMinter.mint(gaugeAddresses.value[0]);\r\n  } else {\r\n    return await balancerMinter.mintMany(gaugeAddresses.value);\r\n  }\r\n}\r\n</script>\r\n\r\n<template>\r\n  <TxActionBtn\r\n    :label=\"label\"\r\n    color=\"gradient\"\r\n    size=\"sm\"\r\n    :actionFn=\"claimTx\"\r\n    :onConfirmFn=\"gaugesQuery.refetch\"\r\n    action=\"claim\"\r\n    :summary=\"`${t('claim')} ${fNum(props.amount, FNumFormats.token)} BAL`\"\r\n    :confirmingLabel=\"$t('claiming')\"\r\n  />\r\n</template>\r\n","<script lang=\"ts\" setup>\r\nimport { computed, ref } from 'vue';\r\nimport { useI18n } from 'vue-i18n';\r\nimport { useRouter } from 'vue-router';\r\n\r\nimport { ColumnDefinition } from '@/components/_global/BalTable/types';\r\n\r\nimport ClaimBalBtn from '@/components/btns/ClaimBalBtn/ClaimBalBtn.vue';\r\nimport TokenPills from '@/components/tables/PoolsTable/TokenPills/TokenPills.vue';\r\nimport useBreakpoints from '@/composables/useBreakpoints';\r\nimport useNumbers, { FNumFormats } from '@/composables/useNumbers';\r\nimport {\r\n  isStableLike,\r\n  orderedPoolTokens,\r\n  orderedTokenAddresses,\r\n} from '@/composables/usePool';\r\nimport { bnum } from '@/lib/utils';\r\nimport { GaugePool } from '@/composables/useClaimsData';\r\n\r\nimport { Gauge } from '@/services/balancer/gauges/types';\r\nimport { POOLS } from '@/constants/pools';\r\nimport PoolWarningTooltip from '@/components/pool/PoolWarningTooltip.vue';\r\nimport useNetwork from '@/composables/useNetwork';\r\n\r\n/**\r\n * TYPES\r\n */\r\nexport type RewardRow = {\r\n  gauge: Gauge;\r\n  pool: GaugePool;\r\n  amount: string;\r\n  value: string;\r\n};\r\n\r\ntype Props = {\r\n  rewardsData: RewardRow[];\r\n  isLoading: boolean;\r\n};\r\n\r\n/**\r\n * PROPS & EMITS\r\n */\r\nconst props = defineProps<Props>();\r\n\r\n/**\r\n * COMPOSABLES\r\n */\r\nconst { t } = useI18n();\r\nconst { upToLargeBreakpoint } = useBreakpoints();\r\nconst { fNum } = useNumbers();\r\nconst router = useRouter();\r\nconst { networkSlug } = useNetwork();\r\n\r\n/**\r\n * STATE\r\n */\r\nconst columns = ref<ColumnDefinition<RewardRow>[]>([\r\n  {\r\n    name: t('pools'),\r\n    id: 'icons',\r\n    accessor: 'icons',\r\n    Cell: 'iconsColumnCell',\r\n    width: 50,\r\n    noGrow: true,\r\n  },\r\n  {\r\n    name: '',\r\n    id: 'pills',\r\n    accessor: 'pills',\r\n    Cell: 'pillsColumnCell',\r\n    width: 350,\r\n  },\r\n  {\r\n    name: t('amount'),\r\n    id: 'amount',\r\n    align: 'right',\r\n    width: 150,\r\n    totalsCell: 'totalAmountCell',\r\n    accessor: ({ amount }) => `${fNum(amount, FNumFormats.token)} BAL`,\r\n  },\r\n  {\r\n    name: t('value'),\r\n    id: 'value',\r\n    align: 'right',\r\n    width: 150,\r\n    totalsCell: 'totalValueCell',\r\n    accessor: ({ value }) => fNum(value, FNumFormats.fiat),\r\n  },\r\n  {\r\n    name: '',\r\n    id: 'claim',\r\n    accessor: 'claim',\r\n    Cell: 'claimColumnCell',\r\n    totalsCell: 'claimTotalCell',\r\n    width: 150,\r\n  },\r\n]);\r\n\r\n/**\r\n * COMPUTED\r\n */\r\nconst allGauges = computed((): Gauge[] =>\r\n  props.rewardsData.map(row => row.gauge)\r\n);\r\n\r\nconst totalClaimAmount = computed((): string =>\r\n  props.rewardsData\r\n    .reduce((acc, row) => acc.plus(row.amount), bnum('0'))\r\n    .toString()\r\n);\r\n\r\nconst totalClaimValue = computed((): string =>\r\n  props.rewardsData\r\n    .reduce((acc, row) => acc.plus(row.value), bnum('0'))\r\n    .toString()\r\n);\r\n\r\n/**\r\n * METHODS\r\n */\r\nfunction redirectToPool({ pool }: { pool: GaugePool }) {\r\n  router.push({ name: 'pool', params: { id: pool.id, networkSlug } });\r\n}\r\n</script>\r\n\r\n<template>\r\n  <BalCard\r\n    shadow=\"lg\"\r\n    :square=\"upToLargeBreakpoint\"\r\n    :noBorder=\"upToLargeBreakpoint\"\r\n    noPad\r\n  >\r\n    <BalTable\r\n      :columns=\"columns\"\r\n      :data=\"rewardsData\"\r\n      :noResultsLabel=\"$t('noResultsTable.noBalIncentives')\"\r\n      :isLoading=\"isLoading\"\r\n      :onRowClick=\"redirectToPool\"\r\n      skeletonClass=\"h-24\"\r\n      :square=\"upToLargeBreakpoint\"\r\n    >\r\n      <template #iconsColumnCell=\"{ pool }\">\r\n        <div class=\"py-4 px-6\">\r\n          <BalAssetSet :addresses=\"orderedTokenAddresses(pool)\" :width=\"100\" />\r\n        </div>\r\n      </template>\r\n      <template #pillsColumnCell=\"{ pool }\">\r\n        <div class=\"flex items-center py-4 px-6\">\r\n          <div v-if=\"POOLS.Metadata[pool.id]\" class=\"text-left\">\r\n            {{ POOLS.Metadata[pool.id].name }}\r\n          </div>\r\n\r\n          <TokenPills\r\n            v-else\r\n            :tokens=\"orderedPoolTokens(pool, pool.tokens)\"\r\n            :isStablePool=\"isStableLike(pool.poolType)\"\r\n          />\r\n          <PoolWarningTooltip :pool=\"pool\" />\r\n        </div>\r\n      </template>\r\n      <template #claimColumnCell=\"{ gauge, amount }\">\r\n        <div class=\"py-4 px-6\">\r\n          <ClaimBalBtn\r\n            :label=\"$t('claim')\"\r\n            :gauges=\"[gauge]\"\r\n            :amount=\"amount\"\r\n          />\r\n        </div>\r\n      </template>\r\n      <template #totalAmountCell>\r\n        <div class=\"flex justify-end\">\r\n          {{ fNum(totalClaimAmount, FNumFormats.token) }} BAL\r\n        </div>\r\n      </template>\r\n      <template #totalValueCell>\r\n        <div class=\"flex justify-end\">\r\n          {{ fNum(totalClaimValue, FNumFormats.fiat) }}\r\n        </div>\r\n      </template>\r\n      <template #claimTotalCell>\r\n        <ClaimBalBtn\r\n          :label=\"$t('claimAll')\"\r\n          :gauges=\"allGauges\"\r\n          :amount=\"totalClaimAmount\"\r\n        />\r\n      </template>\r\n    </BalTable>\r\n  </BalCard>\r\n</template>\r\n","import { Contract } from '@ethersproject/contracts';\r\nimport { TransactionResponse } from '@ethersproject/providers';\r\n\r\nimport LiquidityGaugeRewardHelperAbi from '@/lib/abi/LiquidityGaugeHelperAbi.json';\r\nimport { rpcProviderService } from '@/services/rpc-provider/rpc-provider.service';\r\nimport { walletService as walletServiceInstance } from '@/services/web3/wallet.service';\r\n\r\nexport class LiquidityGaugeRewardsHelper {\r\n  instance: Contract;\r\n\r\n  constructor(\r\n    public readonly address: string,\r\n    private readonly provider = rpcProviderService.jsonProvider,\r\n    private readonly abi = LiquidityGaugeRewardHelperAbi,\r\n    private readonly walletService = walletServiceInstance\r\n  ) {\r\n    this.instance = new Contract(this.address, this.abi, this.provider);\r\n  }\r\n\r\n  /**\r\n   * @summary Claim all user's reward tokens on L2\r\n   */\r\n  async claimRewardsForGauge(\r\n    gaugeAddress: string,\r\n    userAddress: string\r\n  ): Promise<TransactionResponse> {\r\n    return await this.walletService.txBuilder.contract.sendTransaction({\r\n      contractAddress: this.address,\r\n      abi: this.abi,\r\n      action: 'claimRewardsFromGauge',\r\n      params: [gaugeAddress, userAddress],\r\n    });\r\n  }\r\n}\r\n","<script lang=\"ts\" setup>\r\nimport { getAddress } from '@ethersproject/address';\r\nimport { useI18n } from 'vue-i18n';\r\n\r\nimport useGaugesDecorationQuery from '@/composables/queries/useGaugesDecorationQuery';\r\nimport useGaugesQuery from '@/composables/queries/useGaugesQuery';\r\nimport useNumbers, { FNumFormats } from '@/composables/useNumbers';\r\nimport { LiquidityGauge } from '@/services/balancer/contracts/contracts/liquidity-gauge';\r\nimport { LiquidityGaugeRewardsHelper } from '@/services/balancer/contracts/contracts/gauge-reward-helper';\r\nimport { Gauge } from '@/services/balancer/gauges/types';\r\n\r\nimport TxActionBtn from '../TxActionBtn/TxActionBtn.vue';\r\nimport { configService } from '@/services/config/config.service';\r\nimport { isL2 } from '@/composables/useNetwork';\r\nimport useWeb3 from '@/services/web3/useWeb3';\r\n\r\n/**\r\n * TYPES\r\n */\r\ntype Props = {\r\n  gauge: Gauge;\r\n  fiatValue: string;\r\n};\r\n\r\n/**\r\n * PROPS & EMITS\r\n */\r\nconst props = defineProps<Props>();\r\n\r\n/**\r\n * COMPOSABLES\r\n */\r\nconst { t } = useI18n();\r\nconst { fNum } = useNumbers();\r\nconst { data: subgraphGauges } = useGaugesQuery();\r\nconst { account } = useWeb3();\r\nconst gaugesQuery = useGaugesDecorationQuery(subgraphGauges);\r\n\r\n/**\r\n * STATE\r\n */\r\nconst gaugeAddress = getAddress(props.gauge.id);\r\nconst liquidityGaugeContract = new LiquidityGauge(gaugeAddress);\r\n\r\n/**\r\n * METHODS\r\n */\r\nfunction claimTx() {\r\n  if (isL2.value) {\r\n    const liquidityGaugeRewardsHelperContract = new LiquidityGaugeRewardsHelper(\r\n      configService.network.addresses.gaugeRewardsHelper || ''\r\n    );\r\n    return liquidityGaugeRewardsHelperContract.claimRewardsForGauge(\r\n      gaugeAddress,\r\n      account.value\r\n    );\r\n  }\r\n  return liquidityGaugeContract.claimRewards();\r\n}\r\n</script>\r\n\r\n<template>\r\n  <TxActionBtn\r\n    :label=\"t('claimAll')\"\r\n    color=\"gradient\"\r\n    size=\"sm\"\r\n    :actionFn=\"claimTx\"\r\n    :onConfirmFn=\"gaugesQuery.refetch\"\r\n    action=\"claim\"\r\n    :summary=\"`${t('claim')} ${fNum(props.fiatValue, FNumFormats.fiat)}`\"\r\n    :confirmingLabel=\"t('claiming')\"\r\n  />\r\n</template>\r\n","<script lang=\"ts\" setup>\r\nimport { formatUnits } from '@ethersproject/units';\r\nimport { computed, ref } from 'vue';\r\nimport { useI18n } from 'vue-i18n';\r\n\r\nimport { ColumnDefinition } from '@/components/_global/BalTable/types';\r\n\r\nimport ClaimRewardsBtn from '@/components/btns/ClaimRewardsBtn/ClaimRewardsBtn.vue';\r\nimport useBreakpoints from '@/composables/useBreakpoints';\r\nimport useNumbers, { FNumFormats } from '@/composables/useNumbers';\r\nimport { useTokens } from '@/providers/tokens.provider';\r\nimport { bnum } from '@/lib/utils';\r\nimport { Gauge } from '@/services/balancer/gauges/types';\r\nimport { TokenInfo } from '@/types/TokenList';\r\n\r\n/**\r\n * TYPES\r\n */\r\ntype Props = {\r\n  gauge: Gauge;\r\n  isLoading: boolean;\r\n};\r\n\r\ntype Reward = {\r\n  token: TokenInfo;\r\n  amount: string;\r\n  value: string;\r\n};\r\n\r\n/**\r\n * PROPS & EMITS\r\n */\r\nconst props = defineProps<Props>();\r\n\r\n/**\r\n * COMPOSABLES\r\n */\r\nconst { t } = useI18n();\r\nconst { upToLargeBreakpoint } = useBreakpoints();\r\nconst { fNum, toFiat } = useNumbers();\r\nconst { getToken } = useTokens();\r\n\r\n/**\r\n * STATE\r\n */\r\nconst columns = ref<ColumnDefinition<Reward>[]>([\r\n  {\r\n    name: t('incentiveToken'),\r\n    id: 'token',\r\n    accessor: 'token',\r\n    Cell: 'tokenColumnCell',\r\n    width: 475,\r\n    noGrow: true,\r\n  },\r\n  {\r\n    name: t('amount'),\r\n    id: 'amount',\r\n    align: 'right',\r\n    width: 150,\r\n    accessor: ({ amount, token }) =>\r\n      `${fNum(amount, FNumFormats.token)} ${token.symbol}`,\r\n  },\r\n  {\r\n    name: t('value'),\r\n    id: 'value',\r\n    align: 'right',\r\n    width: 150,\r\n    totalsCell: 'totalValueCell',\r\n    accessor: ({ value }) => fNum(value, FNumFormats.fiat),\r\n  },\r\n  {\r\n    name: '',\r\n    id: 'claim',\r\n    accessor: 'claim',\r\n    Cell: 'claimColumnCell',\r\n    totalsCell: 'totalClaimCell',\r\n    width: 150,\r\n  },\r\n]);\r\n\r\n/**\r\n * COMPUTED\r\n */\r\nconst rewardsData = computed((): Reward[] => {\r\n  return props.gauge.rewardTokens.map(tokenAddress => {\r\n    const token = getToken(tokenAddress);\r\n    const amount = formatUnits(\r\n      props.gauge.claimableRewards[tokenAddress],\r\n      token.decimals\r\n    );\r\n\r\n    return {\r\n      token,\r\n      amount,\r\n      value: toFiat(amount, token.address),\r\n    };\r\n  });\r\n});\r\n\r\nconst totalRewardValue = computed((): string => {\r\n  return rewardsData.value\r\n    .reduce((acc, reward) => acc.plus(reward.value), bnum('0'))\r\n    .toString();\r\n});\r\n</script>\r\n\r\n<template>\r\n  <BalCard\r\n    shadow=\"lg\"\r\n    :square=\"upToLargeBreakpoint\"\r\n    :noBorder=\"upToLargeBreakpoint\"\r\n    noPad\r\n  >\r\n    <BalTable\r\n      :columns=\"columns\"\r\n      :data=\"rewardsData\"\r\n      :isLoading=\"isLoading\"\r\n      skeletonClass=\"h-64\"\r\n      :square=\"upToLargeBreakpoint\"\r\n    >\r\n      <template #tokenColumnCell=\"{ token }\">\r\n        <div class=\"flex items-center py-4 px-6\">\r\n          <BalAsset :iconURI=\"token?.logoURI\" />\r\n          <span class=\"ml-2\">{{ token.name }}</span>\r\n        </div>\r\n      </template>\r\n      <template #totalValueCell>\r\n        <div class=\"flex justify-end\">\r\n          {{ fNum(totalRewardValue, FNumFormats.fiat) }}\r\n        </div>\r\n      </template>\r\n      <template #totalClaimCell>\r\n        <div class=\"\">\r\n          <ClaimRewardsBtn :gauge=\"gauge\" :fiatValue=\"totalRewardValue\" />\r\n        </div>\r\n      </template>\r\n    </BalTable>\r\n  </BalCard>\r\n</template>\r\n","import { TransactionResponse } from '@ethersproject/abstract-provider';\r\nimport { formatUnits } from '@ethersproject/units';\r\nimport { BigNumber, Contract } from 'ethers';\r\nimport { zipObject } from 'lodash';\r\n\r\nimport FeeDistributorABI from '@/lib/abi/FeeDistributor.json';\r\nimport FeeDistributorStaticABI from '@/lib/abi/FeeDistributorStatic.json';\r\nimport { configService } from '@/services/config/config.service';\r\nimport { rpcProviderService } from '@/services/rpc-provider/rpc-provider.service';\r\nimport { BalanceMap } from '@/services/token/concerns/balances.concern';\r\nimport { walletService as walletServiceInstance } from '@/services/web3/wallet.service';\r\nimport { getOldMulticaller } from '@/dependencies/OldMulticaller';\r\n\r\nexport class FeeDistributor {\r\n  public claimableTokens: string[] = [\r\n    '0x7B50775383d3D6f0215A8F290f2C9e2eEBBEceb2', // bb-a-USD v1\r\n    '0xA13a9247ea42D743238089903570127DdA72fE44', // bb-a-USD v2\r\n    '0xba100000625a3754423978a60c9317c58a424e3D', // BAL\r\n  ];\r\n\r\n  constructor(\r\n    public readonly address: string,\r\n    private readonly abi = FeeDistributorABI,\r\n    private readonly staticAbi = FeeDistributorStaticABI,\r\n    private readonly config = configService,\r\n    private readonly walletService = walletServiceInstance,\r\n    private readonly provider = rpcProviderService.jsonProvider\r\n  ) {}\r\n\r\n  /**\r\n   * @summary Instantiates a contract instance for the FeeDistributor.\r\n   * @returns Ethers Contract instance\r\n   */\r\n  public getInstance(): Contract {\r\n    return new Contract(this.address, this.abi, this.provider);\r\n  }\r\n\r\n  /**\r\n   * @summary Instantiates a multicaller instance of the FeeDistributor\r\n   */\r\n  public getMulticaller() {\r\n    const Multicaller = getOldMulticaller();\r\n    return new Multicaller(this.config.network.key, this.provider, this.abi);\r\n  }\r\n\r\n  /**\r\n   * @summary Get claimable protocol fee reward balances\r\n   * @descrition To get claimable balances we have to simulate a transaction to\r\n   * the claimTokens method by modifing the ABI to make it a view function.\r\n   */\r\n  public async getClaimableBalances(userAddress: string): Promise<BalanceMap> {\r\n    const balances = await this.walletService.txBuilder.contract.callStatic<\r\n      BigNumber[]\r\n    >({\r\n      contractAddress: this.address,\r\n      abi: this.staticAbi,\r\n      action: 'claimTokens',\r\n      params: [userAddress, this.claimableTokens],\r\n    });\r\n    const stringBalances = balances.map(balance => balance.toString());\r\n\r\n    return zipObject(this.claimableTokens, stringBalances);\r\n  }\r\n\r\n  /**\r\n   * @summary Claim all protocol reward token balances.\r\n   */\r\n  public async claimBalances(\r\n    userAddress: string\r\n  ): Promise<TransactionResponse> {\r\n    return await this.walletService.txBuilder.contract.sendTransaction({\r\n      contractAddress: this.address,\r\n      abi: this.abi,\r\n      action: 'claimTokens',\r\n      params: [userAddress, this.claimableTokens],\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @summary Claim specific protocol reward token balance.\r\n   */\r\n  public async claimBalance(\r\n    userAddress: string,\r\n    tokenAddress: string\r\n  ): Promise<TransactionResponse> {\r\n    return await this.walletService.txBuilder.contract.sendTransaction({\r\n      contractAddress: this.address,\r\n      abi: this.abi,\r\n      action: 'claimToken',\r\n      params: [userAddress, tokenAddress],\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @summary Get total token distribution in week.\r\n   * @param {string} token address to check distribution for, either bb-a-USD or BAL\r\n   * @param {number} timestamp unix timestamp of epoch to check, has to be exact\r\n   * epoch timestamp\r\n   */\r\n  public async getTokensDistributedInWeek(\r\n    token: string,\r\n    timestamp: number,\r\n    instance?: Contract\r\n  ): Promise<string> {\r\n    if (!instance) instance = this.getInstance();\r\n    const amount = await instance.getTokensDistributedInWeek(token, timestamp);\r\n\r\n    return formatUnits(amount, 18);\r\n  }\r\n\r\n  /**\r\n   * @summary Get total veBAL supply at epoch.\r\n   * @param {number} timestamp unix timestamp of epoch to check, has to be exact\r\n   * epoch timestamp\r\n   */\r\n  public async getTotalSupply(\r\n    timestamp: number,\r\n    instance?: Contract\r\n  ): Promise<string> {\r\n    if (!instance) instance = this.getInstance();\r\n    const amount = await instance.getTotalSupplyAtTimestamp(timestamp);\r\n\r\n    return formatUnits(amount, 18);\r\n  }\r\n}\r\n","import { computed, reactive } from 'vue';\r\nimport { useQuery, UseQueryOptions } from '@tanstack/vue-query';\r\n\r\nimport QUERY_KEYS from '@/constants/queryKeys';\r\nimport { FeeDistributor } from '@/services/balancer/contracts/contracts/fee-distributor';\r\nimport { configService } from '@/services/config/config.service';\r\nimport { BalanceMap } from '@/services/token/concerns/balances.concern';\r\nimport useWeb3 from '@/services/web3/useWeb3';\r\n\r\nimport { isL2, isGoerli, networkId } from '../useNetwork';\r\n\r\n/**\r\n * TYPES\r\n */\r\nexport type ProtocolRewardsQueryResponse = {\r\n  v1?: BalanceMap;\r\n  v2?: BalanceMap;\r\n};\r\n\r\ntype QueryOptions = UseQueryOptions<ProtocolRewardsQueryResponse>;\r\n\r\n/**\r\n * SERVICES\r\n */\r\nconst feeDistributorV1 = new FeeDistributor(\r\n  configService.network.addresses.feeDistributorDeprecated\r\n);\r\nconst feeDistributorV2 = new FeeDistributor(\r\n  configService.network.addresses.feeDistributor\r\n);\r\n\r\n/**\r\n * @summary Fetches claimable protocol reward balances.\r\n */\r\nexport default function useProtocolRewardsQuery(options: QueryOptions = {}) {\r\n  /**\r\n   * COMPOSABLES\r\n   */\r\n  const { account, isWalletReady } = useWeb3();\r\n\r\n  /**\r\n   * COMPUTED\r\n   */\r\n  const enabled = computed(\r\n    () =>\r\n      isWalletReady.value &&\r\n      account.value != null &&\r\n      !isL2.value &&\r\n      !isGoerli.value\r\n  );\r\n\r\n  /**\r\n   * QUERY KEY\r\n   */\r\n  const queryKey = reactive(QUERY_KEYS.Claims.Protocol(networkId, account));\r\n\r\n  /**\r\n   * QUERY FUNCTION\r\n   */\r\n  const queryFn = async () => {\r\n    try {\r\n      const [v1, v2] = await Promise.all([\r\n        feeDistributorV1.getClaimableBalances(account.value),\r\n        feeDistributorV2.getClaimableBalances(account.value),\r\n      ]);\r\n      return { v1, v2 };\r\n    } catch (error) {\r\n      console.error('Failed to fetch claimable protocol balances', error);\r\n      return {};\r\n    }\r\n  };\r\n\r\n  /**\r\n   * QUERY OPTIONS\r\n   */\r\n  const queryOptions = reactive({\r\n    enabled,\r\n    ...options,\r\n  });\r\n\r\n  return useQuery<ProtocolRewardsQueryResponse>(\r\n    queryKey,\r\n    queryFn,\r\n    queryOptions as QueryOptions\r\n  );\r\n}\r\n","<script lang=\"ts\" setup>\r\nimport { useI18n } from 'vue-i18n';\r\n\r\nimport useProtocolRewardsQuery from '@/composables/queries/useProtocolRewardsQuery';\r\nimport useNumbers, { FNumFormats } from '@/composables/useNumbers';\r\nimport { FeeDistributor } from '@/services/balancer/contracts/contracts/fee-distributor';\r\nimport { configService } from '@/services/config/config.service';\r\nimport useWeb3 from '@/services/web3/useWeb3';\r\n\r\nimport TxActionBtn from './TxActionBtn/TxActionBtn.vue';\r\n\r\n/**\r\n * TYPES\r\n */\r\ntype Props = {\r\n  tokenAddress?: string;\r\n  fiatValue: string;\r\n  deprecated?: boolean;\r\n};\r\n\r\n/**\r\n * PROPS & EMITS\r\n */\r\nconst props = defineProps<Props>();\r\n\r\n/**\r\n * SERVICES\r\n */\r\nconst feeDistributorV1 = new FeeDistributor(\r\n  configService.network.addresses.feeDistributorDeprecated\r\n);\r\nconst feeDistributorV2 = new FeeDistributor(\r\n  configService.network.addresses.feeDistributor\r\n);\r\n\r\n/**\r\n * COMPOSABLES\r\n */\r\nconst { t } = useI18n();\r\nconst { fNum } = useNumbers();\r\nconst { account } = useWeb3();\r\nconst protocolRewardsQuery = useProtocolRewardsQuery();\r\n\r\n/**\r\n * METHODS\r\n */\r\nfunction claimTx() {\r\n  const feeDistributor = props.deprecated ? feeDistributorV1 : feeDistributorV2;\r\n\r\n  if (props.tokenAddress)\r\n    return feeDistributor.claimBalance(account.value, props.tokenAddress);\r\n  return feeDistributor.claimBalances(account.value);\r\n}\r\n</script>\r\n\r\n<template>\r\n  <TxActionBtn\r\n    :label=\"tokenAddress ? $t('claim') : $t('claimAll')\"\r\n    color=\"gradient\"\r\n    size=\"sm\"\r\n    :actionFn=\"claimTx\"\r\n    :onConfirmFn=\"protocolRewardsQuery.refetch\"\r\n    action=\"claim\"\r\n    :summary=\"`${t('claim')} ${fNum(fiatValue, FNumFormats.fiat)}`\"\r\n    :confirmingLabel=\"$t('claiming')\"\r\n    v-bind=\"$attrs\"\r\n  />\r\n</template>\r\n","<script lang=\"ts\" setup>\r\nimport { computed, ref } from 'vue';\r\nimport { useI18n } from 'vue-i18n';\r\n\r\nimport { ColumnDefinition } from '@/components/_global/BalTable/types';\r\n\r\nimport ClaimProtocolRewardsBtn from '@/components/btns/ClaimProtocolRewardsBtn.vue';\r\nimport useBreakpoints from '@/composables/useBreakpoints';\r\nimport useNumbers, { FNumFormats } from '@/composables/useNumbers';\r\nimport { bnum } from '@/lib/utils';\r\nimport { TokenInfo } from '@/types/TokenList';\r\n\r\n/**\r\n * TYPES\r\n */\r\nexport type ProtocolRewardRow = {\r\n  token: TokenInfo;\r\n  amount: string;\r\n  value: string;\r\n  deprecated?: boolean;\r\n};\r\n\r\ntype Props = {\r\n  rewardsData: ProtocolRewardRow[];\r\n  isLoading: boolean;\r\n  deprecated?: boolean;\r\n};\r\n\r\n/**\r\n * PROPS & EMITS\r\n */\r\nconst props = withDefaults(defineProps<Props>(), {\r\n  deprecated: false,\r\n});\r\n\r\n/**\r\n * COMPOSABLES\r\n */\r\nconst { t } = useI18n();\r\nconst { upToLargeBreakpoint } = useBreakpoints();\r\nconst { fNum } = useNumbers();\r\n\r\n/**\r\n * STATE\r\n */\r\nconst columns = ref<ColumnDefinition<ProtocolRewardRow>[]>([\r\n  {\r\n    name: t('token'),\r\n    id: 'token',\r\n    accessor: 'token',\r\n    Cell: 'tokenColumnCell',\r\n    align: 'left',\r\n    width: 50,\r\n    noGrow: true,\r\n  },\r\n  {\r\n    name: '',\r\n    id: 'symbol',\r\n    accessor: 'symbol',\r\n    Cell: 'symbolColumnCell',\r\n    width: 350,\r\n  },\r\n  {\r\n    name: t('amount'),\r\n    id: 'amount',\r\n    align: 'right',\r\n    width: 150,\r\n    accessor: ({ amount }) => `${fNum(amount, FNumFormats.token)}`,\r\n  },\r\n  {\r\n    name: t('value'),\r\n    id: 'value',\r\n    align: 'right',\r\n    width: 150,\r\n    totalsCell: 'totalValueCell',\r\n    accessor: ({ value }) => fNum(value, FNumFormats.fiat),\r\n  },\r\n  {\r\n    name: '',\r\n    id: 'claim',\r\n    accessor: 'claim',\r\n    Cell: 'claimColumnCell',\r\n    totalsCell: 'claimTotalCell',\r\n    width: 150,\r\n  },\r\n]);\r\n\r\n/**\r\n * COMPUTED\r\n */\r\nconst totalClaimAmount = computed((): string =>\r\n  props.rewardsData\r\n    .reduce((acc, row) => acc.plus(row.amount), bnum('0'))\r\n    .toString()\r\n);\r\n\r\nconst totalClaimValue = computed((): string =>\r\n  props.rewardsData\r\n    .reduce((acc, row) => acc.plus(row.value), bnum('0'))\r\n    .toString()\r\n);\r\n\r\nconst hasClaimableBalance = computed((): boolean => {\r\n  if (props.isLoading) return true;\r\n  return bnum(totalClaimAmount.value).gt(0);\r\n});\r\n</script>\r\n\r\n<template>\r\n  <div>\r\n    <div\r\n      v-if=\"deprecated && hasClaimableBalance\"\r\n      class=\"px-4 xl:px-0 mt-4 mb-2\"\r\n    >\r\n      <h6 class=\"text-lg\">{{ $t('pastEarnings.title') }}</h6>\r\n      <p class=\"mb-3\">{{ $t('pastEarnings.description') }}</p>\r\n    </div>\r\n    <BalCard\r\n      v-if=\"hasClaimableBalance || !deprecated\"\r\n      shadow=\"lg\"\r\n      :square=\"upToLargeBreakpoint\"\r\n      :noBorder=\"upToLargeBreakpoint\"\r\n      noPad\r\n      class=\"mb-8\"\r\n    >\r\n      <BalTable\r\n        :columns=\"columns\"\r\n        :data=\"rewardsData\"\r\n        :noResultsLabel=\"$t('noResultsTable.noProtocolRevenue')\"\r\n        :isLoading=\"isLoading\"\r\n        skeletonClass=\"h-24\"\r\n        :square=\"upToLargeBreakpoint\"\r\n      >\r\n        <template #tokenColumnCell=\"{ token }\">\r\n          <div class=\"flex justify-center ml-4 xl:ml-0\">\r\n            <BalAsset :address=\"token.address\" />\r\n          </div>\r\n        </template>\r\n        <template #symbolColumnCell=\"{ token }\">\r\n          <div class=\"flex py-4 px-6\">\r\n            {{ token.symbol }}\r\n          </div>\r\n        </template>\r\n\r\n        <template #totalValueCell>\r\n          <div class=\"flex justify-end\">\r\n            {{ fNum(totalClaimValue, FNumFormats.fiat) }}\r\n          </div>\r\n        </template>\r\n        <template #claimColumnCell=\"{ token, amount, value }\">\r\n          <div class=\"py-4 px-6\">\r\n            <ClaimProtocolRewardsBtn\r\n              :tokenAddress=\"token.address\"\r\n              :fiatValue=\"value\"\r\n              :disabled=\"bnum(amount).eq(0)\"\r\n              :deprecated=\"deprecated\"\r\n            />\r\n          </div>\r\n        </template>\r\n        <template #claimTotalCell>\r\n          <ClaimProtocolRewardsBtn\r\n            :fiatValue=\"totalClaimValue\"\r\n            :disabled=\"!hasClaimableBalance\"\r\n            :deprecated=\"deprecated\"\r\n          />\r\n        </template>\r\n      </BalTable>\r\n    </BalCard>\r\n  </div>\r\n</template>\r\n","import { computed, reactive } from 'vue';\r\n\r\nimport { Gauge } from '@/services/balancer/gauges/types';\r\nimport { PoolToken } from '@/services/pool/types';\r\n\r\nimport useGaugesDecorationQuery from './queries/useGaugesDecorationQuery';\r\nimport useGaugesQuery from './queries/useGaugesQuery';\r\nimport useGraphQuery from './queries/useGraphQuery';\r\nimport useProtocolRewardsQuery, {\r\n  ProtocolRewardsQueryResponse,\r\n} from './queries/useProtocolRewardsQuery';\r\nimport { isQueryLoading } from './queries/useQueryHelpers';\r\nimport { isGoerli, isL2 } from './useNetwork';\r\nimport { subgraphFallbackService } from '@/services/balancer/subgraph/subgraph-fallback.service';\r\nimport { PoolType } from '@balancer-labs/sdk';\r\n\r\nexport type GaugePool = {\r\n  id: string;\r\n  address: string;\r\n  poolType: PoolType;\r\n  tokens: PoolToken[];\r\n  tokensList: string[];\r\n};\r\n\r\ntype GaugePoolQueryResponse = {\r\n  pools: GaugePool[];\r\n};\r\n\r\n/**\r\n * @summary Combines queries for fetching claims page gauges and associated pools.\r\n */\r\nexport function useClaimsData() {\r\n  const protocolRewardsQuery = useProtocolRewardsQuery();\r\n  const protocolRewards = computed(\r\n    (): ProtocolRewardsQueryResponse => protocolRewardsQuery.data.value || {}\r\n  );\r\n\r\n  // Fetch subgraph liquidity gauges\r\n  const subgraphGaugesQuery = useGaugesQuery();\r\n\r\n  // Decorate subgraph gauges with current account's claim data, e.g. reward values\r\n  const gaugesQuery = useGaugesDecorationQuery(subgraphGaugesQuery.data);\r\n  const gauges = computed((): Gauge[] => gaugesQuery.data.value || []);\r\n  const gaugePoolIds = computed((): string[] => {\r\n    return gauges.value.map(gauge => gauge.poolId);\r\n  });\r\n\r\n  // Fetch pools associated with gauges\r\n  const gaugePoolQueryEnabled = computed(\r\n    (): boolean => gaugePoolIds?.value && gaugePoolIds.value?.length > 0\r\n  );\r\n  const gaugePoolQuery = useGraphQuery<GaugePoolQueryResponse>(\r\n    subgraphFallbackService.url.value,\r\n    ['claim', 'gauge', 'pools'],\r\n    () => ({\r\n      pools: {\r\n        __args: {\r\n          where: { id_in: gaugePoolIds.value },\r\n          first: 1000,\r\n        },\r\n        id: true,\r\n        address: true,\r\n        poolType: true,\r\n        tokensList: true,\r\n        tokens: {\r\n          address: true,\r\n          weight: true,\r\n        },\r\n      },\r\n    }),\r\n    reactive({ enabled: gaugePoolQueryEnabled })\r\n  );\r\n\r\n  /**\r\n   * COMPUTED\r\n   */\r\n  const gaugePools = computed(\r\n    (): GaugePool[] => gaugePoolQuery.data.value?.pools || []\r\n  );\r\n\r\n  const isLoading = computed(\r\n    (): boolean =>\r\n      isQueryLoading(gaugePoolQuery) ||\r\n      (!isL2.value && !isGoerli.value && isQueryLoading(protocolRewardsQuery))\r\n  );\r\n\r\n  return {\r\n    gauges,\r\n    gaugePools,\r\n    protocolRewards,\r\n    isLoading,\r\n  };\r\n}\r\n","import { formatUnits } from '@ethersproject/units';\r\nimport { Contract } from 'ethers';\r\n\r\nimport { TOKENS } from '@/constants/tokens';\r\nimport StablePhantomAbi from '@/lib/abi/StablePhantomPool.json';\r\nimport { rpcProviderService } from '@/services/rpc-provider/rpc-provider.service';\r\n\r\nexport class BBAUSDToken {\r\n  constructor(\r\n    private readonly abi = StablePhantomAbi,\r\n    public readonly address = TOKENS.Addresses.bbaUSD,\r\n    private readonly provider = rpcProviderService.jsonProvider\r\n  ) {}\r\n\r\n  /**\r\n   * @summary Instantiates a contract instance for the bb-a-USD token.\r\n   * @returns Ethers Contract instance\r\n   */\r\n  public getInstance(): Contract {\r\n    if (!this.address) throw new Error('No bb-a-USD address');\r\n    return new Contract(this.address, this.abi, this.provider);\r\n  }\r\n\r\n  /**\r\n   * @description This function returns the appreciation of one BPT relative to the underlying tokens.\r\n   * This starts at 1 when the pool is created and grows over time. Because of preminted BPT, it uses `\r\n   * getVirtualSupply` instead of `totalSupply`.\r\n   */\r\n  public async getRate(): Promise<string> {\r\n    const instance = this.getInstance();\r\n    const rate = await instance.getRate();\r\n\r\n    return formatUnits(rate, 18);\r\n  }\r\n}\r\n\r\nexport const bbAUSDToken = new BBAUSDToken();\r\n","<script lang=\"ts\" setup>\r\nimport { getAddress } from '@ethersproject/address';\r\nimport { formatUnits } from '@ethersproject/units';\r\nimport { computed, onBeforeMount, watch } from 'vue';\r\n\r\nimport HeroClaim from '@/components/contextual/pages/claim/HeroClaim.vue';\r\nimport BalClaimsTable, {\r\n  RewardRow,\r\n} from '@/components/tables/BalClaimsTable.vue';\r\nimport GaugeRewardsTable from '@/components/tables/GaugeRewardsTable.vue';\r\nimport ProtocolRewardsTable, {\r\n  ProtocolRewardRow,\r\n} from '@/components/tables/ProtocolRewardsTable.vue';\r\nimport { GaugePool, useClaimsData } from '@/composables/useClaimsData';\r\nimport { isGnosis, isL2, isMainnet } from '@/composables/useNetwork';\r\nimport useNumbers from '@/composables/useNumbers';\r\nimport { isStableLike } from '@/composables/usePool';\r\nimport { useTokenHelpers } from '@/composables/useTokenHelpers';\r\nimport { useTokens } from '@/providers/tokens.provider';\r\nimport { FiatCurrency } from '@/constants/currency';\r\nimport { bnum } from '@/lib/utils';\r\nimport { bbAUSDToken } from '@/services/balancer/contracts/contracts/bb-a-usd-token';\r\nimport { Gauge } from '@/services/balancer/gauges/types';\r\nimport { configService } from '@/services/config/config.service';\r\nimport { BalanceMap } from '@/services/token/concerns/balances.concern';\r\nimport useWeb3 from '@/services/web3/useWeb3';\r\nimport { TOKENS } from '@/constants/tokens';\r\nimport { buildNetworkIconURL } from '@/lib/utils/urls';\r\nimport { Network } from '@balancer-labs/sdk';\r\n\r\n/**\r\n * TYPES\r\n */\r\ntype GaugeTable = {\r\n  gauge: Gauge;\r\n  pool: GaugePool;\r\n};\r\n\r\n/**\r\n * COMPOSABLES\r\n */\r\nconst { injectTokens, injectPrices, getToken } = useTokens();\r\nconst { balToken } = useTokenHelpers();\r\nconst { toFiat, fNum } = useNumbers();\r\nconst { isWalletReady } = useWeb3();\r\nconst {\r\n  gauges,\r\n  gaugePools,\r\n  protocolRewards,\r\n  isLoading: isClaimsLoading,\r\n} = useClaimsData();\r\n\r\n/**\r\n * STATE\r\n */\r\ninterface NetworkMetadata {\r\n  id: string;\r\n  name: string;\r\n  key: Network;\r\n}\r\n\r\nconst networks: NetworkMetadata[] = [\r\n  {\r\n    id: 'ethereum',\r\n    name: 'Ethereum',\r\n    key: Network.MAINNET,\r\n  },\r\n  {\r\n    id: 'polygon',\r\n    name: 'Polygon',\r\n    key: Network.POLYGON,\r\n  },\r\n  {\r\n    id: 'arbitrum',\r\n    name: 'Arbitrum',\r\n    key: Network.ARBITRUM,\r\n  },\r\n];\r\n\r\n/**\r\n * COMPUTED\r\n */\r\nconst loading = computed(\r\n  (): boolean => isClaimsLoading.value && isWalletReady.value && !isGnosis.value\r\n);\r\n\r\nconst networkBtns = computed(() => {\r\n  return networks.filter(\r\n    network => network.key.toString() !== configService.network.key\r\n  );\r\n});\r\n\r\nconst balRewardsData = computed((): RewardRow[] => {\r\n  if (!isWalletReady.value || isGnosis.value) return [];\r\n  // Using reduce to filter out gauges we don't have corresponding pools for\r\n  return gauges.value.reduce<RewardRow[]>((arr, gauge) => {\r\n    const amount = formatUnits(gauge.claimableTokens, balToken.value.decimals);\r\n    const pool = gaugePools.value.find(pool => pool.id === gauge.poolId);\r\n\r\n    if (pool && bnum(amount).gt(0))\r\n      arr.push({\r\n        gauge,\r\n        pool,\r\n        amount,\r\n        value: toFiat(amount, balToken.value.address),\r\n      });\r\n\r\n    return arr;\r\n  }, []);\r\n});\r\n\r\nconst protocolRewardsData = computed((): ProtocolRewardRow[] => {\r\n  return formatRewardsData(protocolRewards.value.v2);\r\n});\r\n\r\n/**\r\n * The feeDistributor contract was updated and so we need to support the old\r\n * one so that users can claim their rewards. Eventually we should be able to\r\n * remove this.\r\n */\r\nconst protocolRewardsDataDeprecated = computed((): ProtocolRewardRow[] => {\r\n  return formatRewardsData(protocolRewards.value.v1);\r\n});\r\n\r\nconst gaugesWithRewards = computed((): Gauge[] => {\r\n  return gauges.value.filter(gauge => gauge.rewardTokens.length > 0);\r\n});\r\n\r\nconst gaugeTables = computed((): GaugeTable[] => {\r\n  // Only return gauges if we have a corresponding pool and rewards > 0\r\n  return gaugesWithRewards.value.reduce<GaugeTable[]>((arr, gauge) => {\r\n    const pool = gaugePools.value.find(pool => pool.id === gauge.poolId);\r\n    const totalRewardValue = Object.values(gauge.claimableRewards).reduce(\r\n      (acc, reward) => acc.plus(reward),\r\n      bnum(0)\r\n    );\r\n\r\n    if (pool && totalRewardValue.gt(0))\r\n      arr.push({\r\n        gauge,\r\n        pool,\r\n      });\r\n\r\n    return arr;\r\n  }, []);\r\n});\r\n\r\n/**\r\n * METHODS\r\n */\r\nasync function injectRewardTokens(gauges: Gauge[]): Promise<void> {\r\n  const allRewardTokens = gauges.map(gauge => gauge.rewardTokens).flat();\r\n  return await injectTokens(allRewardTokens);\r\n}\r\n\r\nasync function injectPoolTokens(pools: GaugePool[]): Promise<void> {\r\n  const allPoolTokens = pools.map(pools => pools.tokensList).flat();\r\n  return await injectTokens(allPoolTokens);\r\n}\r\n\r\nfunction gaugeTitle(pool: GaugePool): string {\r\n  const _tokens = pool.tokens.map(token => ({\r\n    ...token,\r\n    ...getToken(getAddress(token.address)),\r\n  }));\r\n\r\n  if (isStableLike(pool.poolType)) {\r\n    return Object.values(_tokens)\r\n      .map(token => token.symbol)\r\n      .join(' / ');\r\n  }\r\n\r\n  return Object.values(_tokens)\r\n    .map(\r\n      token =>\r\n        `${fNum(token.weight || '0', {\r\n          style: 'percent',\r\n          maximumFractionDigits: 0,\r\n        })} ${token.symbol}`\r\n    )\r\n    .join(' / ');\r\n}\r\n\r\nfunction formatRewardsData(data?: BalanceMap): ProtocolRewardRow[] {\r\n  if (!isWalletReady.value || !data || isGnosis.value) return [];\r\n\r\n  return Object.keys(data).map(tokenAddress => {\r\n    const token = getToken(tokenAddress);\r\n    const amount = formatUnits(data[tokenAddress], token.decimals);\r\n\r\n    return {\r\n      token,\r\n      amount,\r\n      value: toFiat(amount, tokenAddress),\r\n    };\r\n  });\r\n}\r\n\r\n/**\r\n * @summary Fetches bb-a-USD rate as an appoximation of USD price.\r\n */\r\nasync function getBBaUSDPrice() {\r\n  if (isMainnet.value) {\r\n    const appoxPrice = bnum(await bbAUSDToken.getRate()).toNumber();\r\n    injectPrices({\r\n      [TOKENS.Addresses.bbaUSD as string]: { [FiatCurrency.usd]: appoxPrice },\r\n      [TOKENS.Addresses.bbaUSDv2 as string]: { [FiatCurrency.usd]: appoxPrice },\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * WATCHERS\r\n */\r\nwatch(gauges, async newGauges => {\r\n  if (newGauges) await injectRewardTokens(newGauges);\r\n});\r\n\r\nwatch(gaugePools, async newPools => {\r\n  if (newPools) await injectPoolTokens(newPools);\r\n});\r\n\r\n/**\r\n * LIFECYCLE\r\n */\r\nonBeforeMount(async () => {\r\n  if (!isL2.value) await getBBaUSDPrice();\r\n});\r\n</script>\r\n\r\n<template>\r\n  <div>\r\n    <HeroClaim\r\n      :title=\"$t('claimHero.title')\"\r\n      :description=\"$t('claimHero.description')\"\r\n    />\r\n    <div>\r\n      <div class=\"xl:container py-12 xl:px-4 xl:mx-auto\">\r\n        <h2 class=\"px-4 xl:px-0 font-body text-2xl font-semibold\">\r\n          {{ configService.network.chainName }} {{ $t('liquidityIncentives') }}\r\n        </h2>\r\n\r\n        <template v-if=\"!isL2\">\r\n          <div class=\"mb-16\">\r\n            <div class=\"px-4 xl:px-0\">\r\n              <div class=\"flex items-center mt-6 mb-2\">\r\n                <h3 class=\"inline-block mr-1.5 text-xl\">\r\n                  BAL {{ $t('incentives') }}\r\n                </h3>\r\n                <BalTooltip\r\n                  iconSize=\"xs\"\r\n                  textAlign=\"left\"\r\n                  class=\"relative top-px\"\r\n                  iconClass=\"text-secondary\"\r\n                  width=\"60\"\r\n                >\r\n                  {{ $t('claimPage.tips.BalIncentives') }}\r\n                </BalTooltip>\r\n              </div>\r\n            </div>\r\n            <BalClaimsTable\r\n              :rewardsData=\"balRewardsData\"\r\n              :isLoading=\"loading\"\r\n            />\r\n          </div>\r\n          <div class=\"mb-16\">\r\n            <h3 class=\"inline-block xl:px-0 pl-4 mt-8 mr-1.5 mb-3 text-xl\">\r\n              {{ $t('protocolIncentives') }}\r\n            </h3>\r\n            <BalTooltip\r\n              iconSize=\"xs\"\r\n              textAlign=\"left\"\r\n              class=\"relative top-px\"\r\n              iconClass=\"text-secondary\"\r\n              width=\"60\"\r\n            >\r\n              {{ $t('claimPage.tips.ProtocolAndVebal') }}\r\n            </BalTooltip>\r\n            <ProtocolRewardsTable\r\n              :rewardsData=\"protocolRewardsData\"\r\n              :isLoading=\"loading\"\r\n            />\r\n            <ProtocolRewardsTable\r\n              v-if=\"!loading\"\r\n              :rewardsData=\"protocolRewardsDataDeprecated\"\r\n              :isLoading=\"loading\"\r\n              deprecated\r\n            />\r\n          </div>\r\n        </template>\r\n        <div v-if=\"!isL2\">\r\n          <h3 class=\"inline-block px-4 xl:px-0 mt-8 mr-1.5 text-xl\">\r\n            {{ $t('otherTokenIncentives') }}\r\n          </h3>\r\n          <BalTooltip\r\n            iconSize=\"xs\"\r\n            textAlign=\"left\"\r\n            class=\"relative top-px\"\r\n            iconClass=\"text-secondary\"\r\n            width=\"60\"\r\n          >\r\n            {{ $t('claimPage.tips.OtherIncentives') }}\r\n          </BalTooltip>\r\n        </div>\r\n        <BalLoadingBlock v-if=\"loading\" class=\"mt-6 mb-2 h-56\" />\r\n        <template v-if=\"!isClaimsLoading && gaugeTables.length > 0\">\r\n          <div v-for=\"{ gauge, pool } in gaugeTables\" :key=\"gauge.id\">\r\n            <div class=\"mb-16\">\r\n              <div class=\"flex px-4 xl:px-0 mt-4\">\r\n                <h4 class=\"mb-2 text-base\">\r\n                  {{ gaugeTitle(pool) }}\r\n                </h4>\r\n              </div>\r\n              <GaugeRewardsTable :gauge=\"gauge\" :isLoading=\"isClaimsLoading\" />\r\n            </div>\r\n          </div>\r\n        </template>\r\n\r\n        <BalBlankSlate v-else-if=\"isGnosis\" class=\"px-4 xl:px-0 mt-4 mb-16\">\r\n          {{ $t('noClaimableIncentivesOnThisChain') }}\r\n        </BalBlankSlate>\r\n        <BalBlankSlate\r\n          v-else-if=\"\r\n            (!isClaimsLoading && gaugeTables.length === 0) || !isWalletReady\r\n          \"\r\n          class=\"px-4 xl:px-0 mt-4 mb-16\"\r\n        >\r\n          {{ $t('noClaimableIncentives') }}\r\n        </BalBlankSlate>\r\n        <div class=\"px-4 xl:px-0 mb-16\">\r\n          <h2 class=\"mt-8 font-body text-2xl font-semibold\">\r\n            {{ $t('pages.claim.titles.incentivesOnOtherNetworks') }}\r\n          </h2>\r\n          <BalFlexGrid class=\"mt-4\" flexWrap>\r\n            <BalBtn\r\n              v-for=\"network in networkBtns\"\r\n              :key=\"network.id\"\r\n              tag=\"a\"\r\n              :href=\"`https://app.balancer.fi/${network.id}/claim`\"\r\n              color=\"white\"\r\n            >\r\n              <img\r\n                :src=\"buildNetworkIconURL(network.id as unknown as  Network)\"\r\n                :alt=\"network.id\"\r\n                class=\"mr-2 w-6 h-6 rounded-full shadow-sm\"\r\n              />\r\n              {{ $t('pages.claim.btns.claimOn') }} {{ network.name }}\r\n            </BalBtn>\r\n          </BalFlexGrid>\r\n          <BalLink\r\n            v-if=\"isWalletReady\"\r\n            tag=\"router-link\"\r\n            to=\"/ethereum/claim/legacy\"\r\n            class=\"flex items-center\"\r\n            >{{ $t('legacyClaims') }}\r\n            <BalIcon name=\"arrow-right\" size=\"sm\" class=\"mx-1\"\r\n          /></BalLink>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n"],"names":["_sfc_main$7","defineComponent","props","slots","spacing","computed","flexClasses","gridItems","slotItem","h","MAX_REWARD_TOKENS","GaugesDecorator","abi","LiquidityGaugeAbi","rewardsHelperAbi","LiquidityGaugeRewardHelperAbi","provider","rpcProviderService","config","configService","__publicField","subgraphGauges","userAddress","gaugesDataMap","isL2","subgraphGauge","gaugeData","_a","gauge","i","rewardTokens","token","AddressZero","methodName","rewardToken","callArgs","contractAddress","claimableRewards","Multicaller","getOldMulticaller","gaugesDecorator","useGaugesDecorationQuery","gauges","options","account","isWalletReady","useWeb3","networkId","useNetwork","injectTokens","useTokens","isQueryEnabled","queryKey","reactive","QUERY_KEYS","queryFn","_gauges","tokens","queryOptions","useQuery","defaultArgs","defaultAttrs","gaugeQueryBuilder","args","attrs","name","merge","GaugesEntity","service","query","queryName","GaugesSubgraphClient","url","payload","data","axios","error","jsonToGraphQLQuery","gaugesSubgraphClient","GaugesSubgraphService","client","gaugesSubgraphService","useGaugesQuery","isGnosis","BalancerMinter","BalancerMinterAbi","walletService","walletServiceInstance","address","gaugeAddress","gaugeAddresses","balancerMinter","useI18n","fNum","useNumbers","gaugesQuery","getAddress","claimTx","upToLargeBreakpoint","useBreakpoints","router","useRouter","networkSlug","columns","ref","amount","FNumFormats","value","allGauges","row","totalClaimAmount","acc","bnum","totalClaimValue","redirectToPool","pool","LiquidityGaugeRewardsHelper","Contract","liquidityGaugeContract","LiquidityGauge","toFiat","getToken","rewardsData","tokenAddress","formatUnits","totalRewardValue","reward","FeeDistributor","FeeDistributorABI","staticAbi","FeeDistributorStaticABI","stringBalances","balance","zipObject","timestamp","instance","feeDistributorV1","feeDistributorV2","useProtocolRewardsQuery","enabled","isGoerli","v1","v2","t","protocolRewardsQuery","feeDistributor","hasClaimableBalance","useClaimsData","protocolRewards","subgraphGaugesQuery","gaugePoolIds","gaugePoolQueryEnabled","gaugePoolQuery","useGraphQuery","subgraphFallbackService","gaugePools","isLoading","isQueryLoading","BBAUSDToken","StablePhantomAbi","TOKENS","rate","bbAUSDToken","injectPrices","balToken","useTokenHelpers","isClaimsLoading","networks","Network","loading","networkBtns","network","balRewardsData","arr","pool2","protocolRewardsData","formatRewardsData","protocolRewardsDataDeprecated","gaugesWithRewards","gaugeTables","injectRewardTokens","gauges2","allRewardTokens","injectPoolTokens","pools","allPoolTokens","pools2","gaugeTitle","_tokens","isStableLike","getBBaUSDPrice","isMainnet","appoxPrice","FiatCurrency","watch","newGauges","newPools","onBeforeMount"],"mappings":"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"}