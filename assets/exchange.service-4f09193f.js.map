{"version":3,"file":"exchange.service-4f09193f.js","sources":["../../src/composables/usePromiseSequence.ts","../../node_modules/@georgeroman/balancer-v2-pools/dist/src/subgraph/index.js","../../node_modules/@georgeroman/balancer-v2-pools/dist/src/utils/big-number.js","../../node_modules/@georgeroman/balancer-v2-pools/dist/src/utils/common.js","../../node_modules/@georgeroman/balancer-v2-pools/dist/src/utils/math/math.js","../../node_modules/@georgeroman/balancer-v2-pools/dist/src/pools/base/index.js","../../node_modules/@georgeroman/balancer-v2-pools/dist/src/utils/math/log-exp.js","../../node_modules/@georgeroman/balancer-v2-pools/dist/src/utils/math/fixed-point.js","../../node_modules/@georgeroman/balancer-v2-pools/dist/src/pools/stable/math.js","../../node_modules/@georgeroman/balancer-v2-pools/dist/src/pools/stable/index.js","../../node_modules/@georgeroman/balancer-v2-pools/dist/src/pools/weighted/math.js","../../node_modules/@georgeroman/balancer-v2-pools/dist/src/pools/weighted/index.js","../../node_modules/@georgeroman/balancer-v2-pools/dist/src/index.js","../../src/services/pool/calculator/stable.ts","../../src/services/pool/calculator/stable-phantom.ts","../../src/services/pool/calculator/weighted.ts","../../src/services/pool/calculator/calculator.sevice.ts","../../src/lib/utils/balancer/stablePoolEncoding.ts","../../src/lib/utils/balancer/weightedPoolEncoding.ts","../../src/lib/utils/balancer/composableStablePoolEncoding.ts","../../src/services/pool/exchange/serializers/ExitParams.ts","../../src/services/pool/exchange/serializers/JoinParams.ts","../../src/services/pool/exchange/exchange.service.ts"],"sourcesContent":["import { ref } from 'vue';\r\n\r\nexport default function usePromiseSequence() {\r\n  const promises = ref<Array<() => Promise<void>>>([]);\r\n  const processing = ref(false);\r\n\r\n  async function processAll(): Promise<void> {\r\n    processing.value = true;\r\n    for (let i = 0; i < promises.value.length; i++) {\r\n      await promises.value[i]();\r\n      promises.value.splice(i, 1);\r\n    }\r\n    processing.value = false;\r\n  }\r\n\r\n  return {\r\n    promises,\r\n    processing,\r\n    processAll,\r\n  };\r\n}\r\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getPool = void 0;\nconst graphql_request_1 = require(\"graphql-request\");\nconst getPool = async (poolId, blockNumber, testnet) => {\n    const data = `\n    id\n    address\n    poolType\n    swapFee\n    totalShares\n    amp\n    tokens {\n      id\n      address\n      symbol\n      balance\n      decimals\n      weight\n    }\n  `;\n    let query;\n    if (blockNumber) {\n        query = graphql_request_1.gql `\n      query getPool($poolId: ID!, $blockNumber: Int!) {\n        pools(where: { id: $poolId }, block: { number: $blockNumber }) {\n          ${data}\n        }\n      }\n    `;\n    }\n    else {\n        query = graphql_request_1.gql `\n      query getPool($poolId: ID!) {\n        pools(where: { id: $poolId }) {\n          ${data}\n        }\n      }\n    `;\n    }\n    const result = await graphql_request_1.request(testnet\n        ? \"https://api.thegraph.com/subgraphs/name/balancer-labs/balancer-kovan-v2\"\n        : \"https://api.thegraph.com/subgraphs/name/balancer-labs/balancer-v2\", query, { poolId, blockNumber });\n    if (result && result.pools && result.pools.length) {\n        return result.pools[0];\n    }\n    return null;\n};\nexports.getPool = getPool;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.scaleAll = exports.scale = exports.bn = void 0;\nconst bignumber_js_1 = require(\"bignumber.js\");\nbignumber_js_1.BigNumber.config({\n    EXPONENTIAL_AT: [-100, 100],\n    ROUNDING_MODE: 1,\n    DECIMAL_PLACES: 18,\n});\nexports.default = bignumber_js_1.BigNumber;\nconst bn = (value) => new bignumber_js_1.BigNumber(value);\nexports.bn = bn;\nconst scale = (value, decimalPlaces) => exports.bn(value).times(exports.bn(10).pow(decimalPlaces));\nexports.scale = scale;\nconst scaleAll = (values, decimalPlaces) => values.map((x) => exports.scale(x, decimalPlaces));\nexports.scaleAll = scaleAll;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.shallowCopyAll = exports.shallowCopy = void 0;\nconst shallowCopy = (obj) => {\n    return Object.assign({}, obj);\n};\nexports.shallowCopy = shallowCopy;\nconst shallowCopyAll = (objs) => {\n    return objs.map(exports.shallowCopy);\n};\nexports.shallowCopyAll = shallowCopyAll;\n","\"use strict\";\n// Ported from Solidity:\n// https://github.com/balancer-labs/balancer-v2-monorepo/blob/ce70f7663e0ac94b25ed60cb86faaa8199fd9e13/pkg/solidity-utils/contracts/math/Math.sol\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.divUp = exports.divDown = exports.div = exports.mul = exports.min = exports.max = exports.sub = exports.add = exports.TWO = exports.ONE = exports.ZERO = void 0;\nconst big_number_1 = require(\"../big-number\");\nexports.ZERO = big_number_1.bn(0);\nexports.ONE = big_number_1.bn(1);\nexports.TWO = big_number_1.bn(2);\nconst add = (a, b) => {\n    return a.plus(b);\n};\nexports.add = add;\nconst sub = (a, b) => {\n    if (b.gt(a)) {\n        throw new Error(\"SUB_OVERFLOW\");\n    }\n    return a.minus(b);\n};\nexports.sub = sub;\nconst max = (a, b) => {\n    return a.gte(b) ? a : b;\n};\nexports.max = max;\nconst min = (a, b) => {\n    return a.lt(b) ? a : b;\n};\nexports.min = min;\nconst mul = (a, b) => {\n    return a.times(b);\n};\nexports.mul = mul;\nconst div = (a, b, roundUp) => {\n    return roundUp ? exports.divUp(a, b) : exports.divDown(a, b);\n};\nexports.div = div;\nconst divDown = (a, b) => {\n    if (b.isZero()) {\n        throw new Error(\"ZERO_DIVISION\");\n    }\n    return a.idiv(b);\n};\nexports.divDown = divDown;\nconst divUp = (a, b) => {\n    if (b.isZero()) {\n        throw new Error(\"ZERO_DIVISION\");\n    }\n    return a.isZero() ? exports.ZERO : exports.ONE.plus(a.minus(exports.ONE).idiv(b));\n};\nexports.divUp = divUp;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst big_number_1 = require(\"../../utils/big-number\");\nconst math = require(\"../../utils/math/math\");\nclass BasePool {\n    // ---------------------- Constructor ----------------------\n    constructor(params) {\n        this.MIN_SWAP_FEE_PERCENTAGE = big_number_1.bn(\"0.000001\"); // 0.0001%\n        this.MAX_SWAP_FEE_PERCENTAGE = big_number_1.bn(\"0.1\"); // 10%\n        this._query = false;\n        this._id = params.id;\n        this._address = params.address;\n        this._bptTotalSupply = params.bptTotalSupply;\n        this.setSwapFeePercentage(params.swapFeePercentage);\n        if (params.query) {\n            this._query = params.query;\n        }\n    }\n    // ---------------------- Getters ----------------------\n    get id() {\n        return this._id;\n    }\n    get address() {\n        return this._address;\n    }\n    get bptTotalSupply() {\n        return this._bptTotalSupply;\n    }\n    get swapFeePercentage() {\n        return this._swapFeePercentage;\n    }\n    get query() {\n        return this._query;\n    }\n    // ---------------------- Setters ----------------------\n    setSwapFeePercentage(swapFeePercentage) {\n        if (big_number_1.bn(swapFeePercentage).lt(this.MIN_SWAP_FEE_PERCENTAGE)) {\n            throw new Error(\"MIN_SWAP_FEE_PERCENTAGE\");\n        }\n        if (big_number_1.bn(swapFeePercentage).gt(this.MAX_SWAP_FEE_PERCENTAGE)) {\n            throw new Error(\"MAX_SWAP_FEE_PERCENTAGE\");\n        }\n        this._swapFeePercentage = swapFeePercentage;\n    }\n    setQuery(query) {\n        this._query = query;\n    }\n    // ---------------------- Internal ----------------------\n    _upScale(amount, decimals) {\n        return math.mul(big_number_1.scale(amount, decimals), big_number_1.bn(10).pow(18 - decimals));\n    }\n    _downScaleDown(amount, decimals) {\n        return big_number_1.scale(math.divDown(big_number_1.bn(amount), big_number_1.bn(10).pow(18 - decimals)), -decimals);\n    }\n    _downScaleUp(amount, decimals) {\n        return big_number_1.scale(math.divUp(big_number_1.bn(amount), big_number_1.bn(10).pow(18 - decimals)), -decimals);\n    }\n}\nexports.default = BasePool;\n","\"use strict\";\n// Ported from Solidity:\n// https://github.com/balancer-labs/balancer-core-v2/blob/70843e6a61ad11208c1cfabf5cfe15be216ca8d3/pkg/solidity-utils/contracts/math/LogExpMath.sol\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ln = exports.log = exports.exp = exports.pow = void 0;\nconst big_number_1 = require(\"../big-number\");\n// All fixed point multiplications and divisions are inlined\n// This means we need to divide by ONE when multiplying two numbers, and multiply by ONE when dividing them\n// All arguments and return values are 18 decimal fixed point numbers\nconst ONE_18 = big_number_1.bn(\"1000000000000000000\"); // 1e18\n// Internally, intermediate values are computed with higher precision as 20 decimal fixed point numbers, and in the case of ln36, 36 decimals\nconst ONE_20 = big_number_1.bn(\"100000000000000000000\"); // 1e20\nconst ONE_36 = big_number_1.bn(\"1000000000000000000000000000000000000\"); // 1e36\n// The domain of natural exponentiation is bound by the word size and number of decimals used\n// Because internally the result will be stored using 20 decimals, the largest possible result is\n// (2^255 - 1) / 10^20, which makes the largest exponent ln((2^255 - 1) / 10^20) = 130.700829182905140221\n// The smallest possible result is 10^(-18), which makes largest negative argument\n// ln(10^(-18)) = -41.446531673892822312.\n// We use 130.0 and -41.0 to have some safety margin\nconst MAX_NATURAL_EXPONENT = big_number_1.bn(\"130000000000000000000\"); // 130e18\nconst MIN_NATURAL_EXPONENT = big_number_1.bn(\"-41000000000000000000\"); // (-41)e18\n// Bounds for ln_36's argument\n// Both ln(0.9) and ln(1.1) can be represented with 36 decimal places in a fixed point 256 bit integer\nconst LN_36_LOWER_BOUND = ONE_18.minus(big_number_1.bn(\"100000000000000000\")); // 1e18 - 1e17\nconst LN_36_UPPER_BOUND = ONE_18.plus(big_number_1.bn(\"100000000000000000\")); // 1e18 + 1e17\nconst MILD_EXPONENT_BOUND = big_number_1.bn(2).pow(254).idiv(ONE_20);\n// 18 decimal constants\nconst x0 = big_number_1.bn(\"128000000000000000000\"); // 2ˆ7\nconst a0 = big_number_1.bn(\"38877084059945950922200000000000000000000000000000000000\"); // eˆ(x0) (no decimals)\nconst x1 = big_number_1.bn(\"64000000000000000000\"); // 2ˆ6\nconst a1 = big_number_1.bn(\"6235149080811616882910000000\"); // eˆ(x1) (no decimals)\n// 20 decimal constants\nconst x2 = big_number_1.bn(\"3200000000000000000000\"); // 2ˆ5\nconst a2 = big_number_1.bn(\"7896296018268069516100000000000000\"); // eˆ(x2)\nconst x3 = big_number_1.bn(\"1600000000000000000000\"); // 2ˆ4\nconst a3 = big_number_1.bn(\"888611052050787263676000000\"); // eˆ(x3)\nconst x4 = big_number_1.bn(\"800000000000000000000\"); // 2ˆ3\nconst a4 = big_number_1.bn(\"298095798704172827474000\"); // eˆ(x4)\nconst x5 = big_number_1.bn(\"400000000000000000000\"); // 2ˆ2\nconst a5 = big_number_1.bn(\"5459815003314423907810\"); // eˆ(x5)\nconst x6 = big_number_1.bn(\"200000000000000000000\"); // 2ˆ1\nconst a6 = big_number_1.bn(\"738905609893065022723\"); // eˆ(x6)\nconst x7 = big_number_1.bn(\"100000000000000000000\"); // 2ˆ0\nconst a7 = big_number_1.bn(\"271828182845904523536\"); // eˆ(x7)\nconst x8 = big_number_1.bn(\"50000000000000000000\"); // 2ˆ(-1)\nconst a8 = big_number_1.bn(\"164872127070012814685\"); // eˆ(x8)\nconst x9 = big_number_1.bn(\"25000000000000000000\"); // 2ˆ(-2)\nconst a9 = big_number_1.bn(\"128402541668774148407\"); // eˆ(x9)\nconst x10 = big_number_1.bn(\"12500000000000000000\"); // 2ˆ(-3)\nconst a10 = big_number_1.bn(\"113314845306682631683\"); // eˆ(x10)\nconst x11 = big_number_1.bn(\"6250000000000000000\"); // 2ˆ(-4)\nconst a11 = big_number_1.bn(\"106449445891785942956\"); // eˆ(x11)\nconst pow = (x, y) => {\n    if (y.isZero()) {\n        // We solve the 0^0 indetermination by making it equal one.\n        return ONE_18;\n    }\n    if (x.isZero()) {\n        return big_number_1.bn(0);\n    }\n    // Instead of computing x^y directly, we instead rely on the properties of logarithms and exponentiation to\n    // arrive at that result. In particular, exp(ln(x)) = x, and ln(x^y) = y * ln(x). This means\n    // x^y = exp(y * ln(x)).\n    // The ln function takes a signed value, so we need to make sure x fits in the signed 256 bit range.\n    if (x.gte(big_number_1.bn(2).pow(255))) {\n        throw new Error(\"X_OUT_OF_BOUNDS\");\n    }\n    // We will compute y * ln(x) in a single step. Depending on the value of x, we can either use ln or ln_36. In\n    // both cases, we leave the division by ONE_18 (due to fixed point multiplication) to the end.\n    // This prevents y * ln(x) from overflowing, and at the same time guarantees y fits in the signed 256 bit range.\n    if (y.gte(MILD_EXPONENT_BOUND)) {\n        throw new Error(\"Y_OUT_OF_BOUNDS\");\n    }\n    let logx_times_y;\n    if (LN_36_LOWER_BOUND.lt(x) && x.lt(LN_36_UPPER_BOUND)) {\n        let ln_36_x = _ln_36(x);\n        // ln_36_x has 36 decimal places, so multiplying by y_int256 isn't as straightforward, since we can't just\n        // bring y_int256 to 36 decimal places, as it might overflow. Instead, we perform two 18 decimal\n        // multiplications and add the results: one with the first 18 decimals of ln_36_x, and one with the\n        // (downscaled) last 18 decimals.\n        logx_times_y = ln_36_x\n            .idiv(ONE_18)\n            .times(y)\n            .plus(ln_36_x.mod(ONE_18).times(y).idiv(ONE_18));\n    }\n    else {\n        logx_times_y = _ln(x).times(y);\n    }\n    logx_times_y = logx_times_y.idiv(ONE_18);\n    // Finally, we compute exp(y * ln(x)) to arrive at x^y\n    if (logx_times_y.lt(MIN_NATURAL_EXPONENT) ||\n        logx_times_y.gt(MAX_NATURAL_EXPONENT)) {\n        throw new Error(\"PRODUCT_OUT_OF_BOUNDS\");\n    }\n    return exports.exp(logx_times_y);\n};\nexports.pow = pow;\nconst exp = (x) => {\n    if (x.lt(MIN_NATURAL_EXPONENT) || x.gt(MAX_NATURAL_EXPONENT)) {\n        throw new Error(\"INVALID_EXPONENT\");\n    }\n    if (x.lt(0)) {\n        // We only handle positive exponents: e^(-x) is computed as 1 / e^x. We can safely make x positive since it\n        // fits in the signed 256 bit range (as it is larger than MIN_NATURAL_EXPONENT).\n        // Fixed point division requires multiplying by ONE_18.\n        return ONE_18.times(ONE_18).idiv(exports.exp(x.negated()));\n    }\n    // First, we use the fact that e^(x+y) = e^x * e^y to decompose x into a sum of powers of two, which we call x_n,\n    // where x_n == 2^(7 - n), and e^x_n = a_n has been precomputed. We choose the first x_n, x0, to equal 2^7\n    // because all larger powers are larger than MAX_NATURAL_EXPONENT, and therefore not present in the\n    // decomposition.\n    // At the end of this process we will have the product of all e^x_n = a_n that apply, and the remainder of this\n    // decomposition, which will be lower than the smallest x_n.\n    // exp(x) = k_0 * a_0 * k_1 * a_1 * ... + k_n * a_n * exp(remainder), where each k_n equals either 0 or 1.\n    // We mutate x by subtracting x_n, making it the remainder of the decomposition.\n    // The first two a_n (e^(2^7) and e^(2^6)) are too large if stored as 18 decimal numbers, and could cause\n    // intermediate overflows. Instead we store them as plain integers, with 0 decimals.\n    // Additionally, x0 + x1 is larger than MAX_NATURAL_EXPONENT, which means they will not both be present in the\n    // decomposition.\n    // For each x_n, we test if that term is present in the decomposition (if x is larger than it), and if so deduct\n    // it and compute the accumulated product.\n    let firstAN;\n    if (x.gte(x0)) {\n        x = x.minus(x0);\n        firstAN = a0;\n    }\n    else if (x.gte(x1)) {\n        x = x.minus(x1);\n        firstAN = a1;\n    }\n    else {\n        firstAN = big_number_1.bn(1); // One with no decimal places\n    }\n    // We now transform x into a 20 decimal fixed point number, to have enhanced precision when computing the\n    // smaller terms.\n    x = x.times(100);\n    // `product` is the accumulated product of all a_n (except a0 and a1), which starts at 20 decimal fixed point\n    // one. Recall that fixed point multiplication requires dividing by ONE_20.\n    let product = ONE_20;\n    if (x.gte(x2)) {\n        x = x.minus(x2);\n        product = product.times(a2).idiv(ONE_20);\n    }\n    if (x.gte(x3)) {\n        x = x.minus(x3);\n        product = product.times(a3).idiv(ONE_20);\n    }\n    if (x.gte(x4)) {\n        x = x.minus(x4);\n        product = product.times(a4).idiv(ONE_20);\n    }\n    if (x.gte(x5)) {\n        x = x.minus(x5);\n        product = product.times(a5).idiv(ONE_20);\n    }\n    if (x.gte(x6)) {\n        x = x.minus(x6);\n        product = product.times(a6).idiv(ONE_20);\n    }\n    if (x.gte(x7)) {\n        x = x.minus(x7);\n        product = product.times(a7).idiv(ONE_20);\n    }\n    if (x.gte(x8)) {\n        x = x.minus(x8);\n        product = product.times(a8).idiv(ONE_20);\n    }\n    if (x.gte(x9)) {\n        x = x.minus(x9);\n        product = product.times(a9).idiv(ONE_20);\n    }\n    // x10 and x11 are unnecessary here since we have high enough precision already.\n    // Now we need to compute e^x, where x is small (in particular, it is smaller than x9). We use the Taylor series\n    // expansion for e^x: 1 + x + (x^2 / 2!) + (x^3 / 3!) + ... + (x^n / n!).\n    let seriesSum = ONE_20; // The initial one in the sum, with 20 decimal places.\n    let term; // Each term in the sum, where the nth term is (x^n / n!).\n    // The first term is simply x.\n    term = x;\n    seriesSum = seriesSum.plus(term);\n    // Each term (x^n / n!) equals the previous one times x, divided by n. Since x is a fixed point number,\n    // multiplying by it requires dividing by ONE_20, but dividing by the non-fixed point n values does not.\n    term = term.times(x).idiv(ONE_20).idiv(2);\n    seriesSum = seriesSum.plus(term);\n    term = term.times(x).idiv(ONE_20).idiv(3);\n    seriesSum = seriesSum.plus(term);\n    term = term.times(x).idiv(ONE_20).idiv(4);\n    seriesSum = seriesSum.plus(term);\n    term = term.times(x).idiv(ONE_20).idiv(5);\n    seriesSum = seriesSum.plus(term);\n    term = term.times(x).idiv(ONE_20).idiv(6);\n    seriesSum = seriesSum.plus(term);\n    term = term.times(x).idiv(ONE_20).idiv(7);\n    seriesSum = seriesSum.plus(term);\n    term = term.times(x).idiv(ONE_20).idiv(8);\n    seriesSum = seriesSum.plus(term);\n    term = term.times(x).idiv(ONE_20).idiv(9);\n    seriesSum = seriesSum.plus(term);\n    term = term.times(x).idiv(ONE_20).idiv(10);\n    seriesSum = seriesSum.plus(term);\n    term = term.times(x).idiv(ONE_20).idiv(11);\n    seriesSum = seriesSum.plus(term);\n    term = term.times(x).idiv(ONE_20).idiv(12);\n    seriesSum = seriesSum.plus(term);\n    // 12 Taylor terms are sufficient for 18 decimal precision.\n    // We now have the first a_n (with no decimals), and the product of all other a_n present, and the Taylor\n    // approximation of the exponentiation of the remainder (both with 20 decimals). All that remains is to multiply\n    // all three (one 20 decimal fixed point multiplication, dividing by ONE_20, and one integer multiplication),\n    // and then drop two digits to return an 18 decimal value.\n    return product.times(seriesSum).idiv(ONE_20).times(firstAN).idiv(100);\n};\nexports.exp = exp;\nconst log = (arg, base) => {\n    // This performs a simple base change: log(arg, base) = ln(arg) / ln(base).\n    // Both logBase and logArg are computed as 36 decimal fixed point numbers, either by using ln_36, or by\n    // upscaling.\n    let logBase;\n    if (LN_36_LOWER_BOUND.lt(base) && base.lt(LN_36_UPPER_BOUND)) {\n        logBase = _ln_36(base);\n    }\n    else {\n        logBase = _ln(base).times(ONE_18);\n    }\n    let logArg;\n    if (LN_36_LOWER_BOUND.lt(arg) && arg.lt(LN_36_UPPER_BOUND)) {\n        logArg = _ln_36(arg);\n    }\n    else {\n        logArg = _ln(arg).times(ONE_18);\n    }\n    // When dividing, we multiply by ONE_18 to arrive at a result with 18 decimal places\n    return logArg.times(ONE_18).idiv(logBase);\n};\nexports.log = log;\nconst ln = (a) => {\n    // The real natural logarithm is not defined for negative numbers or zero.\n    if (a.lte(0)) {\n        throw new Error(\"OUT_OF_BOUNDS\");\n    }\n    if (LN_36_LOWER_BOUND.lt(a) && a.lt(LN_36_UPPER_BOUND)) {\n        return _ln_36(a).idiv(ONE_18);\n    }\n    else {\n        return _ln(a);\n    }\n};\nexports.ln = ln;\nconst _ln = (a) => {\n    if (a.lt(ONE_18)) {\n        // Since ln(a^k) = k * ln(a), we can compute ln(a) as ln(a) = ln((1/a)^(-1)) = - ln((1/a))\n        // If a is less than one, 1/a will be greater than one, and this if statement will not be entered in the recursive call\n        // Fixed point division requires multiplying by ONE_18\n        return _ln(ONE_18.times(ONE_18).idiv(a)).negated();\n    }\n    // First, we use the fact that ln^(a * b) = ln(a) + ln(b) to decompose ln(a) into a sum of powers of two, which\n    // we call x_n, where x_n == 2^(7 - n), which are the natural logarithm of precomputed quantities a_n (that is,\n    // ln(a_n) = x_n). We choose the first x_n, x0, to equal 2^7 because the exponential of all larger powers cannot\n    // be represented as 18 fixed point decimal numbers in 256 bits, and are therefore larger than a.\n    // At the end of this process we will have the sum of all x_n = ln(a_n) that apply, and the remainder of this\n    // decomposition, which will be lower than the smallest a_n.\n    // ln(a) = k_0 * x_0 + k_1 * x_1 + ... + k_n * x_n + ln(remainder), where each k_n equals either 0 or 1\n    // We mutate a by subtracting a_n, making it the remainder of the decomposition\n    // For reasons related to how `exp` works, the first two a_n (e^(2^7) and e^(2^6)) are not stored as fixed point\n    // numbers with 18 decimals, but instead as plain integers with 0 decimals, so we need to multiply them by\n    // ONE_18 to convert them to fixed point.\n    // For each a_n, we test if that term is present in the decomposition (if a is larger than it), and if so divide\n    // by it and compute the accumulated sum.\n    let sum = big_number_1.bn(0);\n    if (a.gte(a0.times(ONE_18))) {\n        a = a.idiv(a0); // Integer, not fixed point division\n        sum = sum.plus(x0);\n    }\n    if (a.gte(a1.times(ONE_18))) {\n        a = a.idiv(a1); // Integer, not fixed point division\n        sum = sum.plus(x1);\n    }\n    // All other a_n and x_n are stored as 20 digit fixed point numbers, so we convert the sum and a to this format.\n    sum = sum.times(100);\n    a = a.times(100);\n    // Because further a_n are  20 digit fixed point numbers, we multiply by ONE_20 when dividing by them.\n    if (a.gte(a2)) {\n        a = a.times(ONE_20).idiv(a2);\n        sum = sum.plus(x2);\n    }\n    if (a.gte(a3)) {\n        a = a.times(ONE_20).idiv(a3);\n        sum = sum.plus(x3);\n    }\n    if (a.gte(a4)) {\n        a = a.times(ONE_20).idiv(a4);\n        sum = sum.plus(x4);\n    }\n    if (a.gte(a5)) {\n        a = a.times(ONE_20).idiv(a5);\n        sum = sum.plus(x5);\n    }\n    if (a.gte(a6)) {\n        a = a.times(ONE_20).idiv(a6);\n        sum = sum.plus(x6);\n    }\n    if (a.gte(a7)) {\n        a = a.times(ONE_20).idiv(a7);\n        sum = sum.plus(x7);\n    }\n    if (a.gte(a8)) {\n        a = a.times(ONE_20).idiv(a8);\n        sum = sum.plus(x8);\n    }\n    if (a.gte(a9)) {\n        a = a.times(ONE_20).idiv(a9);\n        sum = sum.plus(x9);\n    }\n    if (a.gte(a10)) {\n        a = a.times(ONE_20).idiv(a10);\n        sum = sum.plus(x10);\n    }\n    if (a.gte(a11)) {\n        a = a.times(ONE_20).idiv(a11);\n        sum = sum.plus(x11);\n    }\n    // a is now a small number (smaller than a_11, which roughly equals 1.06). This means we can use a Taylor series\n    // that converges rapidly for values of `a` close to one - the same one used in ln_36.\n    // Let z = (a - 1) / (a + 1).\n    // ln(a) = 2 * (z + z^3 / 3 + z^5 / 5 + z^7 / 7 + ... + z^(2 * n + 1) / (2 * n + 1))\n    // Recall that 20 digit fixed point division requires multiplying by ONE_20, and multiplication requires\n    // division by ONE_20.\n    const z = a.minus(ONE_20).times(ONE_20).idiv(a.plus(ONE_20));\n    const z_squared = z.times(z).idiv(ONE_20);\n    // num is the numerator of the series: the z^(2 * n + 1) term\n    let num = z;\n    // seriesSum holds the accumulated sum of each term in the series, starting with the initial z\n    let seriesSum = num;\n    // In each step, the numerator is multiplied by z^2\n    num = num.times(z_squared).idiv(ONE_20);\n    seriesSum = seriesSum.plus(num.idiv(3));\n    num = num.times(z_squared).idiv(ONE_20);\n    seriesSum = seriesSum.plus(num.idiv(5));\n    num = num.times(z_squared).idiv(ONE_20);\n    seriesSum = seriesSum.plus(num.idiv(7));\n    num = num.times(z_squared).idiv(ONE_20);\n    seriesSum = seriesSum.plus(num.idiv(9));\n    num = num.times(z_squared).idiv(ONE_20);\n    seriesSum = seriesSum.plus(num.idiv(11));\n    // 6 Taylor terms are sufficient for 36 decimal precision.\n    // Finally, we multiply by 2 (non fixed point) to compute ln(remainder)\n    seriesSum = seriesSum.times(2);\n    // We now have the sum of all x_n present, and the Taylor approximation of the logarithm of the remainder (both\n    // with 20 decimals). All that remains is to sum these two, and then drop two digits to return a 18 decimal\n    // value.\n    return sum.plus(seriesSum).idiv(100);\n};\nconst _ln_36 = (x) => {\n    // Since ln(1) = 0, a value of x close to one will yield a very small result, which makes using 36 digits worthwhile\n    // First, we transform x to a 36 digit fixed point value\n    x = x.times(ONE_18);\n    // We will use the following Taylor expansion, which converges very rapidly. Let z = (x - 1) / (x + 1)\n    // ln(x) = 2 * (z + z^3 / 3 + z^5 / 5 + z^7 / 7 + ... + z^(2 * n + 1) / (2 * n + 1))\n    // Recall that 36 digit fixed point division requires multiplying by ONE_36, and multiplication requires division by ONE_36\n    const z = x.minus(ONE_36).times(ONE_36).idiv(x.plus(ONE_36));\n    const z_squared = z.times(z).idiv(ONE_36);\n    // num is the numerator of the series: the z^(2 * n + 1) term\n    let num = z;\n    // seriesSum holds the accumulated sum of each term in the series, starting with the initial z\n    let seriesSum = num;\n    // In each step, the numerator is multiplied by z^2\n    num = num.times(z_squared).idiv(ONE_36);\n    seriesSum = seriesSum.plus(num.idiv(3));\n    num = num.times(z_squared).idiv(ONE_36);\n    seriesSum = seriesSum.plus(num.idiv(5));\n    num = num.times(z_squared).idiv(ONE_36);\n    seriesSum = seriesSum.plus(num.idiv(7));\n    num = num.times(z_squared).idiv(ONE_36);\n    seriesSum = seriesSum.plus(num.idiv(9));\n    num = num.times(z_squared).idiv(ONE_36);\n    seriesSum = seriesSum.plus(num.idiv(11));\n    num = num.times(z_squared).idiv(ONE_36);\n    seriesSum = seriesSum.plus(num.idiv(13));\n    num = num.times(z_squared).idiv(ONE_36);\n    seriesSum = seriesSum.plus(num.idiv(15));\n    // 8 Taylor terms are sufficient for 36 decimal precision\n    // All that remains is multiplying by 2 (non fixed point)\n    return seriesSum.times(2);\n};\n","\"use strict\";\n// Ported from Solidity:\n// https://github.com/balancer-labs/balancer-core-v2/blob/70843e6a61ad11208c1cfabf5cfe15be216ca8d3/pkg/solidity-utils/contracts/math/FixedPoint.sol\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.complement = exports.powUp = exports.powDown = exports.divUp = exports.divDown = exports.mulUp = exports.mulDown = exports.sub = exports.add = exports.MIN_POW_BASE_FREE_EXPONENT = exports.MAX_POW_RELATIVE_ERROR = exports.ONE = exports.ZERO = void 0;\nconst big_number_1 = require(\"../big-number\");\nconst logExp = require(\"./log-exp\");\nexports.ZERO = big_number_1.bn(0);\nexports.ONE = big_number_1.bn(\"1000000000000000000\"); // 10^18\nexports.MAX_POW_RELATIVE_ERROR = big_number_1.bn(10000); // 10^(-14)\n// Minimum base for the power function when the exponent is 'free' (larger than ONE)\nexports.MIN_POW_BASE_FREE_EXPONENT = big_number_1.bn(\"700000000000000000\"); // 0.7e18\nconst add = (a, b) => {\n    // Fixed Point addition is the same as regular checked addition\n    return a.plus(b);\n};\nexports.add = add;\nconst sub = (a, b) => {\n    // Fixed Point subtraction is the same as regular checked subtraction\n    if (b.gt(a)) {\n        throw new Error(\"SUB_OVERFLOW\");\n    }\n    return a.minus(b);\n};\nexports.sub = sub;\nconst mulDown = (a, b) => {\n    return a.times(b).idiv(exports.ONE);\n};\nexports.mulDown = mulDown;\nconst mulUp = (a, b) => {\n    const product = a.times(b);\n    if (product.isZero()) {\n        return product;\n    }\n    else {\n        // The traditional divUp formula is:\n        // divUp(x, y) := (x + y - 1) / y\n        // To avoid intermediate overflow in the addition, we distribute the division and get:\n        // divUp(x, y) := (x - 1) / y + 1\n        // Note that this requires x != 0, which we already tested for\n        return product.minus(big_number_1.bn(1)).idiv(exports.ONE).plus(big_number_1.bn(1));\n    }\n};\nexports.mulUp = mulUp;\nconst divDown = (a, b) => {\n    if (b.isZero()) {\n        throw new Error(\"ZERO_DIVISION\");\n    }\n    if (a.isZero()) {\n        return a;\n    }\n    else {\n        return a.times(exports.ONE).idiv(b);\n    }\n};\nexports.divDown = divDown;\nconst divUp = (a, b) => {\n    if (b.isZero()) {\n        throw new Error(\"ZERO_DIVISION\");\n    }\n    if (a.isZero()) {\n        return a;\n    }\n    else {\n        // The traditional divUp formula is:\n        // divUp(x, y) := (x + y - 1) / y\n        // To avoid intermediate overflow in the addition, we distribute the division and get:\n        // divUp(x, y) := (x - 1) / y + 1\n        // Note that this requires x != 0, which we already tested for.\n        return a.times(exports.ONE).minus(big_number_1.bn(1)).idiv(b).plus(big_number_1.bn(1));\n    }\n};\nexports.divUp = divUp;\nconst powDown = (x, y) => {\n    const raw = logExp.pow(x, y);\n    const maxError = exports.add(exports.mulUp(raw, exports.MAX_POW_RELATIVE_ERROR), big_number_1.bn(1));\n    if (raw.lt(maxError)) {\n        return big_number_1.bn(0);\n    }\n    else {\n        return exports.sub(raw, maxError);\n    }\n};\nexports.powDown = powDown;\nconst powUp = (x, y) => {\n    const raw = logExp.pow(x, y);\n    const maxError = exports.add(exports.mulUp(raw, exports.MAX_POW_RELATIVE_ERROR), big_number_1.bn(1));\n    return exports.add(raw, maxError);\n};\nexports.powUp = powUp;\nconst complement = (x) => {\n    return x.lt(exports.ONE) ? exports.ONE.minus(x) : big_number_1.bn(0);\n};\nexports.complement = complement;\n","\"use strict\";\n// Ported from Solidity:\n// https://github.com/balancer-labs/balancer-core-v2/blob/70843e6a61ad11208c1cfabf5cfe15be216ca8d3/pkg/pool-stable/contracts/StableMath.sol\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports._calcDueTokenProtocolSwapFeeAmount = exports._calcTokensOutGivenExactBptIn = exports._calcTokenOutGivenExactBptIn = exports._calcBptInGivenExactTokensOut = exports._calcTokenInGivenExactBptOut = exports._calcBptOutGivenExactTokensIn = exports._calcInGivenOut = exports._calcOutGivenIn = exports._calculateInvariant = exports.MAX_STABLE_TOKENS = exports.AMP_PRECISION = exports.MAX_AMP = exports.MIN_AMP = void 0;\nconst big_number_1 = require(\"../../utils/big-number\");\nconst fp = require(\"../../utils/math/fixed-point\");\nconst math = require(\"../../utils/math/math\");\nexports.MIN_AMP = big_number_1.bn(1);\nexports.MAX_AMP = big_number_1.bn(5000);\nexports.AMP_PRECISION = big_number_1.bn(1000);\nexports.MAX_STABLE_TOKENS = 5;\n// Computes the invariant given the current balances, using the Newton-Raphson approximation.\n// The amplification parameter equals: A n^(n-1)\nconst _calculateInvariant = (amplificationParameter, balances, roundUp) => {\n    /**********************************************************************************************\n    // invariant                                                                                 //\n    // D = invariant                                                  D^(n+1)                    //\n    // A = amplification coefficient      A  n^n S + D = A D n^n + -----------                   //\n    // S = sum of balances                                             n^n P                     //\n    // P = product of balances                                                                   //\n    // n = number of tokens                                                                      //\n    **********************************************************************************************/\n    // We support rounding up or down.\n    let sum = math.ZERO;\n    let numTokens = big_number_1.bn(balances.length);\n    for (let i = 0; i < balances.length; i++) {\n        sum = fp.add(sum, balances[i]);\n    }\n    if (sum.isZero()) {\n        return math.ZERO;\n    }\n    let prevInvariant = math.ZERO;\n    let invariant = sum;\n    let ampTimesTotal = math.mul(amplificationParameter, numTokens);\n    for (let i = 0; i < 255; i++) {\n        let P_D = math.mul(numTokens, balances[0]);\n        for (let j = 1; j < balances.length; j++) {\n            P_D = math.div(math.mul(math.mul(P_D, balances[j]), numTokens), invariant, roundUp);\n        }\n        prevInvariant = invariant;\n        invariant = math.div(fp.add(math.mul(math.mul(numTokens, invariant), invariant), math.div(math.mul(math.mul(ampTimesTotal, sum), P_D), exports.AMP_PRECISION, roundUp)), fp.add(math.mul(fp.add(numTokens, math.ONE), invariant), math.div(math.mul(fp.sub(ampTimesTotal, exports.AMP_PRECISION), P_D), exports.AMP_PRECISION, !roundUp)), roundUp);\n        if (invariant.gt(prevInvariant)) {\n            if (fp.sub(invariant, prevInvariant).lte(math.ONE)) {\n                return invariant;\n            }\n        }\n        else if (fp.sub(prevInvariant, invariant).lte(math.ONE)) {\n            return invariant;\n        }\n    }\n    throw new Error(\"STABLE_GET_BALANCE_DIDNT_CONVERGE\");\n};\nexports._calculateInvariant = _calculateInvariant;\n// Computes how many tokens can be taken out of a pool if `tokenAmountIn` are sent, given the current balances.\n// The amplification parameter equals: A n^(n-1)\nconst _calcOutGivenIn = (amplificationParameter, balances, tokenIndexIn, tokenIndexOut, tokenAmountIn, swapFeePercentage) => {\n    /**************************************************************************************************************\n    // outGivenIn token x for y - polynomial equation to solve                                                   //\n    // ay = amount out to calculate                                                                              //\n    // by = balance token out                                                                                    //\n    // y = by - ay (finalBalanceOut)                                                                             //\n    // D = invariant                                               D                     D^(n+1)                 //\n    // A = amplification coefficient               y^2 + ( S - ----------  - D) * y -  ------------- = 0         //\n    // n = number of tokens                                    (A * n^n)               A * n^2n * P              //\n    // S = sum of final balances but y                                                                           //\n    // P = product of final balances but y                                                                       //\n    **************************************************************************************************************/\n    // Subtract the fee from the amount in if requested\n    if (swapFeePercentage) {\n        tokenAmountIn = fp.sub(tokenAmountIn, fp.mulUp(tokenAmountIn, swapFeePercentage));\n    }\n    // Amount out, so we round down overall.\n    // Given that we need to have a greater final balance out, the invariant needs to be rounded up\n    const invariant = exports._calculateInvariant(amplificationParameter, balances, true);\n    balances[tokenIndexIn] = fp.add(balances[tokenIndexIn], tokenAmountIn);\n    const finalBalanceOut = _getTokenBalanceGivenInvariantAndAllOtherBalances(amplificationParameter, balances, invariant, tokenIndexOut);\n    balances[tokenIndexIn] = fp.sub(balances[tokenIndexIn], tokenAmountIn);\n    return fp.sub(fp.sub(balances[tokenIndexOut], finalBalanceOut), math.ONE);\n};\nexports._calcOutGivenIn = _calcOutGivenIn;\n// Computes how many tokens must be sent to a pool if `tokenAmountOut` are sent given the\n// current balances, using the Newton-Raphson approximation.\n// The amplification parameter equals: A n^(n-1)\nconst _calcInGivenOut = (amplificationParameter, balances, tokenIndexIn, tokenIndexOut, tokenAmountOut, swapFeePercentage) => {\n    /**************************************************************************************************************\n    // inGivenOut token x for y - polynomial equation to solve                                                   //\n    // ax = amount in to calculate                                                                               //\n    // bx = balance token in                                                                                     //\n    // x = bx + ax (finalBalanceIn)                                                                              //\n    // D = invariant                                                D                     D^(n+1)                //\n    // A = amplification coefficient               x^2 + ( S - ----------  - D) * x -  ------------- = 0         //\n    // n = number of tokens                                     (A * n^n)               A * n^2n * P             //\n    // S = sum of final balances but x                                                                           //\n    // P = product of final balances but x                                                                       //\n    **************************************************************************************************************/\n    // Amount in, so we round up overall.\n    // Given that we need to have a greater final balance in, the invariant needs to be rounded up\n    const invariant = exports._calculateInvariant(amplificationParameter, balances, true);\n    balances[tokenIndexOut] = fp.sub(balances[tokenIndexOut], tokenAmountOut);\n    const finalBalanceIn = _getTokenBalanceGivenInvariantAndAllOtherBalances(amplificationParameter, balances, invariant, tokenIndexIn);\n    balances[tokenIndexOut] = fp.add(balances[tokenIndexOut], tokenAmountOut);\n    let amountIn = fp.add(fp.sub(finalBalanceIn, balances[tokenIndexIn]), math.ONE);\n    // Add the fee to the amount in if requested\n    if (swapFeePercentage) {\n        amountIn = fp.divUp(amountIn, fp.complement(swapFeePercentage));\n    }\n    return amountIn;\n};\nexports._calcInGivenOut = _calcInGivenOut;\nconst _calcBptOutGivenExactTokensIn = (amp, balances, amountsIn, bptTotalSupply, swapFeePercentage) => {\n    // BPT out, so we round down overall.\n    // First loop calculates the sum of all token balances, which will be used to calculate\n    // the current weights of each token, relative to this sum\n    let sumBalances = math.ZERO;\n    for (let i = 0; i < balances.length; i++) {\n        sumBalances = fp.add(sumBalances, balances[i]);\n    }\n    // Calculate the weighted balance ratio without considering fees\n    const balanceRatiosWithFee = new Array(amountsIn.length);\n    // The weighted sum of token balance ratios without fee\n    let invariantRatioWithFees = math.ZERO;\n    for (let i = 0; i < balances.length; i++) {\n        const currentWeight = fp.divDown(balances[i], sumBalances);\n        balanceRatiosWithFee[i] = fp.divDown(fp.add(balances[i], amountsIn[i]), balances[i]);\n        invariantRatioWithFees = fp.add(invariantRatioWithFees, fp.mulDown(balanceRatiosWithFee[i], currentWeight));\n    }\n    // Second loop calculates new amounts in, taking into account the fee on the percentage excess\n    const newBalances = new Array(balances.length);\n    for (let i = 0; i < balances.length; i++) {\n        let amountInWithoutFee;\n        // Check if the balance ratio is greater than the ideal ratio to charge fees or not\n        if (balanceRatiosWithFee[i].gt(invariantRatioWithFees)) {\n            const nonTaxableAmount = fp.mulDown(balances[i], fp.sub(invariantRatioWithFees, fp.ONE));\n            const taxableAmount = fp.sub(amountsIn[i], nonTaxableAmount);\n            amountInWithoutFee = fp.add(nonTaxableAmount, fp.mulDown(taxableAmount, fp.sub(fp.ONE, swapFeePercentage)));\n        }\n        else {\n            amountInWithoutFee = amountsIn[i];\n        }\n        newBalances[i] = fp.add(balances[i], amountInWithoutFee);\n    }\n    // Get current and new invariants, taking swap fees into account\n    const currentInvariant = exports._calculateInvariant(amp, balances, true);\n    const newInvariant = exports._calculateInvariant(amp, newBalances, false);\n    const invariantRatio = fp.divDown(newInvariant, currentInvariant);\n    // If the invariant didn't increase for any reason, we simply don't mint BPT\n    if (invariantRatio.gt(fp.ONE)) {\n        return fp.mulDown(bptTotalSupply, fp.sub(invariantRatio, fp.ONE));\n    }\n    else {\n        return math.ZERO;\n    }\n};\nexports._calcBptOutGivenExactTokensIn = _calcBptOutGivenExactTokensIn;\nconst _calcTokenInGivenExactBptOut = (amp, balances, tokenIndex, bptAmountOut, bptTotalSupply, swapFeePercentage) => {\n    // Token in, so we round up overall.\n    // Get the current invariant\n    const currentInvariant = exports._calculateInvariant(amp, balances, true);\n    // Calculate new invariant\n    const newInvariant = fp.mulUp(fp.divUp(fp.add(bptTotalSupply, bptAmountOut), bptTotalSupply), currentInvariant);\n    // Calculate amount in without fee.\n    const newBalanceTokenIndex = _getTokenBalanceGivenInvariantAndAllOtherBalances(amp, balances, newInvariant, tokenIndex);\n    const amountInWithoutFee = fp.sub(newBalanceTokenIndex, balances[tokenIndex]);\n    // First calculate the sum of all token balances, which will be used to calculate\n    // the current weight of each token\n    let sumBalances = math.ZERO;\n    for (let i = 0; i < balances.length; i++) {\n        sumBalances = fp.add(sumBalances, balances[i]);\n    }\n    // We can now compute how much extra balance is being deposited and used in virtual swaps, and charge swap fees\n    // accordingly.\n    const currentWeight = fp.divDown(balances[tokenIndex], sumBalances);\n    const taxablePercentage = fp.complement(currentWeight);\n    const taxableAmount = fp.mulUp(amountInWithoutFee, taxablePercentage);\n    const nonTaxableAmount = fp.sub(amountInWithoutFee, taxableAmount);\n    return fp.add(nonTaxableAmount, fp.divUp(taxableAmount, fp.sub(fp.ONE, swapFeePercentage)));\n};\nexports._calcTokenInGivenExactBptOut = _calcTokenInGivenExactBptOut;\n/*\n  Flow of calculations:\n  amountsTokenOut -> amountsOutProportional ->\n  amountOutPercentageExcess -> amountOutBeforeFee -> newInvariant -> amountBPTIn\n*/\nconst _calcBptInGivenExactTokensOut = (amp, balances, amountsOut, bptTotalSupply, swapFeePercentage) => {\n    // BPT in, so we round up overall.\n    // First loop calculates the sum of all token balances, which will be used to calculate\n    // the current weights of each token relative to this sum\n    let sumBalances = math.ZERO;\n    for (let i = 0; i < balances.length; i++) {\n        sumBalances = fp.add(sumBalances, balances[i]);\n    }\n    // Calculate the weighted balance ratio without considering fees\n    const balanceRatiosWithoutFee = new Array(amountsOut.length);\n    let invariantRatioWithoutFees = math.ZERO;\n    for (let i = 0; i < balances.length; i++) {\n        const currentWeight = fp.divUp(balances[i], sumBalances);\n        balanceRatiosWithoutFee[i] = fp.divUp(fp.sub(balances[i], amountsOut[i]), balances[i]);\n        invariantRatioWithoutFees = fp.add(invariantRatioWithoutFees, fp.mulUp(balanceRatiosWithoutFee[i], currentWeight));\n    }\n    // Second loop calculates new amounts in, taking into account the fee on the percentage excess\n    const newBalances = new Array(balances.length);\n    for (let i = 0; i < balances.length; i++) {\n        // Swap fees are typically charged on 'token in', but there is no 'token in' here, so we apply it to\n        // 'token out'. This results in slightly larger price impact.\n        let amountOutWithFee;\n        if (invariantRatioWithoutFees.gt(balanceRatiosWithoutFee[i])) {\n            const nonTaxableAmount = fp.mulDown(balances[i], fp.complement(invariantRatioWithoutFees));\n            const taxableAmount = fp.sub(amountsOut[i], nonTaxableAmount);\n            amountOutWithFee = fp.add(nonTaxableAmount, fp.divUp(taxableAmount, fp.sub(fp.ONE, swapFeePercentage)));\n        }\n        else {\n            amountOutWithFee = amountsOut[i];\n        }\n        newBalances[i] = fp.sub(balances[i], amountOutWithFee);\n    }\n    // Get current and new invariants, taking into account swap fees\n    const currentInvariant = exports._calculateInvariant(amp, balances, true);\n    const newInvariant = exports._calculateInvariant(amp, newBalances, false);\n    const invariantRatio = fp.divDown(newInvariant, currentInvariant);\n    // return amountBPTIn\n    return fp.mulUp(bptTotalSupply, fp.complement(invariantRatio));\n};\nexports._calcBptInGivenExactTokensOut = _calcBptInGivenExactTokensOut;\nconst _calcTokenOutGivenExactBptIn = (amp, balances, tokenIndex, bptAmountIn, bptTotalSupply, swapFeePercentage) => {\n    // Token out, so we round down overall.\n    // Get the current and new invariants. Since we need a bigger new invariant, we round the current one up.\n    const currentInvariant = exports._calculateInvariant(amp, balances, true);\n    const newInvariant = fp.mulUp(fp.divUp(fp.sub(bptTotalSupply, bptAmountIn), bptTotalSupply), currentInvariant);\n    // Calculate amount out without fee\n    const newBalanceTokenIndex = _getTokenBalanceGivenInvariantAndAllOtherBalances(amp, balances, newInvariant, tokenIndex);\n    const amountOutWithoutFee = fp.sub(balances[tokenIndex], newBalanceTokenIndex);\n    // First calculate the sum of all token balances, which will be used to calculate\n    // the current weight of each token\n    let sumBalances = math.ZERO;\n    for (let i = 0; i < balances.length; i++) {\n        sumBalances = fp.add(sumBalances, balances[i]);\n    }\n    // We can now compute how much excess balance is being withdrawn as a result of the virtual swaps, which result\n    // in swap fees.\n    const currentWeight = fp.divDown(balances[tokenIndex], sumBalances);\n    const taxablePercentage = fp.complement(currentWeight);\n    // Swap fees are typically charged on 'token in', but there is no 'token in' here, so we apply it\n    // to 'token out'. This results in slightly larger price impact. Fees are rounded up.\n    const taxableAmount = fp.mulUp(amountOutWithoutFee, taxablePercentage);\n    const nonTaxableAmount = fp.sub(amountOutWithoutFee, taxableAmount);\n    return fp.add(nonTaxableAmount, fp.mulDown(taxableAmount, fp.sub(fp.ONE, swapFeePercentage)));\n};\nexports._calcTokenOutGivenExactBptIn = _calcTokenOutGivenExactBptIn;\nconst _calcTokensOutGivenExactBptIn = (balances, bptAmountIn, bptTotalSupply) => {\n    /**********************************************************************************************\n    // exactBPTInForTokensOut                                                                    //\n    // (per token)                                                                               //\n    // aO = tokenAmountOut             /        bptIn         \\                                  //\n    // b = tokenBalance      a0 = b * | ---------------------  |                                 //\n    // bptIn = bptAmountIn             \\     bptTotalSupply    /                                 //\n    // bpt = bptTotalSupply                                                                      //\n    **********************************************************************************************/\n    // Since we're computing an amount out, we round down overall. This means rounding down on both the\n    // multiplication and division.\n    const bptRatio = fp.divDown(bptAmountIn, bptTotalSupply);\n    const amountsOut = new Array(balances.length);\n    for (let i = 0; i < balances.length; i++) {\n        amountsOut[i] = fp.mulDown(balances[i], bptRatio);\n    }\n    return amountsOut;\n};\nexports._calcTokensOutGivenExactBptIn = _calcTokensOutGivenExactBptIn;\n// The amplification parameter equals: A n^(n-1)\nconst _calcDueTokenProtocolSwapFeeAmount = (amplificationParameter, balances, lastInvariant, tokenIndex, protocolSwapFeePercentage) => {\n    /**************************************************************************************************************\n    // oneTokenSwapFee - polynomial equation to solve                                                            //\n    // af = fee amount to calculate in one token                                                                 //\n    // bf = balance of fee token                                                                                 //\n    // f = bf - af (finalBalanceFeeToken)                                                                        //\n    // D = old invariant                                            D                     D^(n+1)                //\n    // A = amplification coefficient               f^2 + ( S - ----------  - D) * f -  ------------- = 0         //\n    // n = number of tokens                                    (A * n^n)               A * n^2n * P              //\n    // S = sum of final balances but f                                                                           //\n    // P = product of final balances but f                                                                       //\n    **************************************************************************************************************/\n    // Protocol swap fee amount, so we round down overall.\n    const finalBalanceFeeToken = _getTokenBalanceGivenInvariantAndAllOtherBalances(amplificationParameter, balances, lastInvariant, tokenIndex);\n    if (balances[tokenIndex].lte(finalBalanceFeeToken)) {\n        // This shouldn't happen outside of rounding errors, but have this safeguard nonetheless to prevent the Pool\n        // from entering a locked state in which joins and exits revert while computing accumulated swap fees.\n        return math.ZERO;\n    }\n    // Result is rounded down\n    const accumulatedTokenSwapFees = fp.sub(balances[tokenIndex], finalBalanceFeeToken);\n    return fp.divDown(fp.mulDown(accumulatedTokenSwapFees, protocolSwapFeePercentage), fp.ONE);\n};\nexports._calcDueTokenProtocolSwapFeeAmount = _calcDueTokenProtocolSwapFeeAmount;\n// This function calculates the balance of a given token (tokenIndex)\n// given all the other balances and the invariant\nconst _getTokenBalanceGivenInvariantAndAllOtherBalances = (amplificationParameter, balances, invariant, tokenIndex) => {\n    // Rounds result up overall\n    const numTokens = big_number_1.bn(balances.length);\n    const ampTimesTotal = math.mul(amplificationParameter, numTokens);\n    let sum = balances[0];\n    let P_D = math.mul(numTokens, balances[0]);\n    for (let j = 1; j < balances.length; j++) {\n        P_D = math.divDown(math.mul(math.mul(P_D, balances[j]), numTokens), invariant);\n        sum = fp.add(sum, balances[j]);\n    }\n    sum = fp.sub(sum, balances[tokenIndex]);\n    const inv2 = math.mul(invariant, invariant);\n    // We remove the balance fromm c by multiplying it\n    const c = math.mul(math.mul(math.divUp(inv2, math.mul(ampTimesTotal, P_D)), exports.AMP_PRECISION), balances[tokenIndex]);\n    const b = fp.add(sum, math.mul(math.divDown(invariant, ampTimesTotal), exports.AMP_PRECISION));\n    // We iterate to find the balance\n    let prevTokenBalance = math.ZERO;\n    // We multiply the first iteration outside the loop with the invariant to set the value of the\n    // initial approximation.\n    let tokenBalance = math.divUp(fp.add(inv2, c), fp.add(invariant, b));\n    for (let i = 0; i < 255; i++) {\n        prevTokenBalance = tokenBalance;\n        tokenBalance = math.divUp(fp.add(math.mul(tokenBalance, tokenBalance), c), fp.sub(fp.add(math.mul(tokenBalance, math.TWO), b), invariant));\n        if (tokenBalance.gt(prevTokenBalance)) {\n            if (fp.sub(tokenBalance, prevTokenBalance).lte(math.ONE)) {\n                return tokenBalance;\n            }\n        }\n        else if (fp.sub(prevTokenBalance, tokenBalance).lte(math.ONE)) {\n            return tokenBalance;\n        }\n    }\n    throw new Error(\"STABLE_GET_BALANCE_DIDNT_CONVERGE\");\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst index_1 = require(\"../../subgraph/index\");\nconst big_number_1 = require(\"../../utils/big-number\");\nconst common_1 = require(\"../../utils/common\");\nconst base_1 = require(\"../base\");\nconst math = require(\"./math\");\nclass StablePool extends base_1.default {\n    // ---------------------- Constructor ----------------------\n    constructor(params) {\n        super(params);\n        if (params.tokens.length > math.MAX_STABLE_TOKENS) {\n            throw new Error(\"MAX_STABLE_TOKENS\");\n        }\n        this._tokens = common_1.shallowCopyAll(params.tokens);\n        if (big_number_1.bn(params.amplificationParameter).lt(math.MIN_AMP)) {\n            throw new Error(\"MIN_AMP\");\n        }\n        if (big_number_1.bn(params.amplificationParameter).gt(math.MAX_AMP)) {\n            throw new Error(\"MAX_AMP\");\n        }\n        this._amplificationParameter = big_number_1.bn(params.amplificationParameter)\n            .times(math.AMP_PRECISION)\n            .toString();\n    }\n    // ---------------------- Getters ----------------------\n    get tokens() {\n        // Shallow-copy to disallow direct changes\n        return common_1.shallowCopyAll(this._tokens);\n    }\n    get amplificationParameter() {\n        return big_number_1.bn(this._amplificationParameter).idiv(math.AMP_PRECISION).toString();\n    }\n    // ---------------------- Subgraph initializer ----------------------\n    static async initFromRealPool(poolId, query = false, blockNumber, testnet) {\n        const pool = await index_1.getPool(poolId, blockNumber, testnet);\n        if (!pool) {\n            throw new Error(\"Could not fetch pool data\");\n        }\n        if (pool.poolType !== \"Stable\") {\n            throw new Error(\"Pool must be stable\");\n        }\n        const id = pool.id;\n        const address = pool.address;\n        const bptTotalSupply = pool.totalShares;\n        const swapFeePercentage = pool.swapFee;\n        const amplificationParameter = pool.amp;\n        const tokens = [];\n        for (const token of pool.tokens) {\n            tokens.push({\n                address: token.address,\n                symbol: token.symbol,\n                balance: token.balance,\n                decimals: token.decimals,\n            });\n        }\n        return new StablePool({\n            id,\n            address,\n            tokens,\n            bptTotalSupply,\n            swapFeePercentage,\n            amplificationParameter,\n            query,\n        });\n    }\n    // ---------------------- Swap actions ----------------------\n    swapGivenIn(tokenInSymbol, tokenOutSymbol, amountIn) {\n        const tokenIndexIn = this._tokens.findIndex((t) => t.symbol === tokenInSymbol);\n        const tokenIndexOut = this._tokens.findIndex((t) => t.symbol === tokenOutSymbol);\n        const tokenIn = this._tokens[tokenIndexIn];\n        const tokenOut = this._tokens[tokenIndexOut];\n        const scaledAmountOut = math._calcOutGivenIn(big_number_1.bn(this._amplificationParameter), this._tokens.map((t) => this._upScale(t.balance, t.decimals)), tokenIndexIn, tokenIndexOut, this._upScale(amountIn, tokenIn.decimals), this._upScale(this._swapFeePercentage, 18));\n        const amountOut = this._downScaleDown(scaledAmountOut, tokenOut.decimals);\n        // In-place balance updates\n        if (!this._query) {\n            tokenIn.balance = big_number_1.bn(tokenIn.balance).plus(amountIn).toString();\n            tokenOut.balance = big_number_1.bn(tokenOut.balance).minus(amountOut).toString();\n        }\n        return amountOut.toString();\n    }\n    swapGivenOut(tokenInSymbol, tokenOutSymbol, amountOut) {\n        const tokenIndexIn = this._tokens.findIndex((t) => t.symbol === tokenInSymbol);\n        const tokenIndexOut = this._tokens.findIndex((t) => t.symbol === tokenOutSymbol);\n        const tokenIn = this._tokens[tokenIndexIn];\n        const tokenOut = this._tokens[tokenIndexOut];\n        const scaledAmountIn = math._calcInGivenOut(big_number_1.bn(this._amplificationParameter), this._tokens.map((t) => this._upScale(t.balance, t.decimals)), tokenIndexIn, tokenIndexOut, this._upScale(amountOut, tokenOut.decimals), this._upScale(this._swapFeePercentage, 18));\n        const amountIn = this._downScaleUp(scaledAmountIn, tokenIn.decimals);\n        // In-place balance updates\n        if (!this._query) {\n            tokenIn.balance = big_number_1.bn(tokenIn.balance).plus(amountIn).toString();\n            tokenOut.balance = big_number_1.bn(tokenOut.balance).minus(amountOut).toString();\n        }\n        return amountIn.toString();\n    }\n    // ---------------------- LP actions ----------------------\n    joinExactTokensInForBptOut(amountsIn) {\n        if (Object.keys(amountsIn).length !== this._tokens.length) {\n            throw new Error(\"Invalid input\");\n        }\n        const scaledBptOut = math._calcBptOutGivenExactTokensIn(big_number_1.bn(this._amplificationParameter), this._tokens.map((t) => this._upScale(t.balance, t.decimals)), this._tokens.map((t) => this._upScale(amountsIn[t.symbol], t.decimals)), this._upScale(this._bptTotalSupply, 18), this._upScale(this._swapFeePercentage, 18));\n        const bptOut = this._downScaleDown(scaledBptOut, 18);\n        // In-place balance updates\n        if (!this._query) {\n            for (let i = 0; i < this._tokens.length; i++) {\n                const token = this._tokens[i];\n                token.balance = big_number_1.bn(token.balance)\n                    .plus(amountsIn[token.symbol])\n                    .toString();\n            }\n            this._bptTotalSupply = big_number_1.bn(this._bptTotalSupply).plus(bptOut).toString();\n        }\n        return bptOut.toString();\n    }\n    joinTokenInForExactBptOut(tokenInSymbol, bptOut) {\n        const tokenIndex = this._tokens.findIndex((t) => t.symbol === tokenInSymbol);\n        const tokenIn = this._tokens[tokenIndex];\n        if (!tokenIn) {\n            throw new Error(\"Invalid input\");\n        }\n        const scaledAmountIn = math._calcTokenInGivenExactBptOut(big_number_1.bn(this._amplificationParameter), this._tokens.map((t) => this._upScale(t.balance, t.decimals)), tokenIndex, this._upScale(bptOut, 18), this._upScale(this._bptTotalSupply, 18), this._upScale(this._swapFeePercentage, 18));\n        const amountIn = this._downScaleUp(scaledAmountIn, tokenIn.decimals);\n        // In-place balance updates\n        if (!this._query) {\n            tokenIn.balance = big_number_1.bn(tokenIn.balance).plus(amountIn).toString();\n            this._bptTotalSupply = big_number_1.bn(this._bptTotalSupply).plus(bptOut).toString();\n        }\n        return amountIn.toString();\n    }\n    exitExactBptInForTokenOut(tokenOutSymbol, bptIn) {\n        const tokenIndex = this._tokens.findIndex((t) => t.symbol === tokenOutSymbol);\n        const tokenOut = this._tokens[tokenIndex];\n        if (!tokenOut) {\n            throw new Error(\"Invalid input\");\n        }\n        const scaledAmountOut = math._calcTokenOutGivenExactBptIn(big_number_1.bn(this._amplificationParameter), this._tokens.map((t) => this._upScale(t.balance, t.decimals)), tokenIndex, this._upScale(bptIn, 18), this._upScale(this._bptTotalSupply, 18), this._upScale(this._swapFeePercentage, 18));\n        const amountOut = this._downScaleDown(scaledAmountOut, tokenOut.decimals);\n        // In-place balance updates\n        if (!this._query) {\n            tokenOut.balance = big_number_1.bn(tokenOut.balance).minus(amountOut).toString();\n            this._bptTotalSupply = big_number_1.bn(this._bptTotalSupply).minus(bptIn).toString();\n        }\n        return amountOut.toString();\n    }\n    exitExactBptInForTokensOut(bptIn) {\n        // Exactly match the EVM version\n        if (big_number_1.bn(bptIn).gt(this._bptTotalSupply)) {\n            throw new Error(\"BPT in exceeds total supply\");\n        }\n        const scaledAmountsOut = math._calcTokensOutGivenExactBptIn(this._tokens.map((t) => this._upScale(t.balance, t.decimals)), this._upScale(bptIn, 18), this._upScale(this._bptTotalSupply, 18));\n        const amountsOut = scaledAmountsOut.map((amount, i) => this._downScaleDown(amount, this._tokens[i].decimals));\n        // In-place balance updates\n        if (!this._query) {\n            for (let i = 0; i < this._tokens.length; i++) {\n                const token = this._tokens[i];\n                token.balance = big_number_1.bn(token.balance).minus(amountsOut[i]).toString();\n            }\n            this._bptTotalSupply = big_number_1.bn(this._bptTotalSupply).minus(bptIn).toString();\n        }\n        return amountsOut.map((a) => a.toString());\n    }\n    exitBptInForExactTokensOut(amountsOut) {\n        if (Object.keys(amountsOut).length !== this._tokens.length) {\n            throw new Error(\"Invalid input\");\n        }\n        const scaledBptIn = math._calcBptInGivenExactTokensOut(big_number_1.bn(this._amplificationParameter), this._tokens.map((t) => this._upScale(t.balance, t.decimals)), this._tokens.map((t) => this._upScale(amountsOut[t.symbol], t.decimals)), this._upScale(this._bptTotalSupply, 18), this._upScale(this._swapFeePercentage, 18));\n        const bptIn = this._downScaleDown(scaledBptIn, 18);\n        // In-place balance updates\n        if (!this._query) {\n            for (let i = 0; i < this._tokens.length; i++) {\n                const token = this._tokens[i];\n                token.balance = big_number_1.bn(token.balance)\n                    .minus(amountsOut[token.symbol])\n                    .toString();\n            }\n            this._bptTotalSupply = big_number_1.bn(this._bptTotalSupply).minus(bptIn).toString();\n        }\n        return bptIn.toString();\n    }\n}\nexports.default = StablePool;\n","\"use strict\";\n// Ported from Solidity:\n// https://github.com/balancer-labs/balancer-core-v2/blob/70843e6a61ad11208c1cfabf5cfe15be216ca8d3/pkg/pool-weighted/contracts/WeightedMath.sol\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports._calcBptInGivenExactTokenOut = exports._calcBptOutGivenExactTokenIn = exports._calcDueTokenProtocolSwapFeeAmount = exports._calcTokensOutGivenExactBptIn = exports._calcTokenOutGivenExactBptIn = exports._calcBptInGivenExactTokensOut = exports._calcTokenInGivenExactBptOut = exports._calcBptOutGivenExactTokensIn = exports._calcInGivenOut = exports._calcOutGivenIn = exports._calculateInvariant = void 0;\nconst big_number_1 = require(\"../../utils/big-number\");\nconst fp = require(\"../../utils/math/fixed-point\");\n// Swap limits: amounts swapped may not be larger than this percentage of total balance\nconst MAX_IN_RATIO = big_number_1.bn(\"300000000000000000\"); // 0.3e18\nconst MAX_OUT_RATIO = big_number_1.bn(\"300000000000000000\"); // 0.3e18\n// Invariant growth limit: non-proportional joins cannot cause the invariant to increase by more than this ratio\nconst MAX_INVARIANT_RATIO = big_number_1.bn(\"3000000000000000000\"); // 3e18\n// Invariant shrink limit: non-proportional exits cannot cause the invariant to decrease by less than this ratio\nconst MIN_INVARIANT_RATIO = big_number_1.bn(\"700000000000000000\"); // 0.7e18\nconst _calculateInvariant = (normalizedWeights, balances) => {\n    /*****************************************************************************************\n    // invariant               _____                                                        //\n    // wi = weight index i      | |      wi                                                 //\n    // bi = balance index i     | |  bi ^   = i                                             //\n    // i = invariant                                                                        //\n    *****************************************************************************************/\n    let invariant = fp.ONE;\n    for (let i = 0; i < normalizedWeights.length; i++) {\n        invariant = fp.mulDown(invariant, fp.powDown(balances[i], normalizedWeights[i]));\n    }\n    if (invariant.lte(fp.ZERO)) {\n        throw new Error(\"ZERO_INVARIANT\");\n    }\n    return invariant;\n};\nexports._calculateInvariant = _calculateInvariant;\n// Computes how many tokens can be taken out of a pool if `amountIn` is sent, given the\n// current balances and weights.\nconst _calcOutGivenIn = (balanceIn, weightIn, balanceOut, weightOut, amountIn, swapFeePercentage) => {\n    /*****************************************************************************************\n    // outGivenIn                                                                           //\n    // ao = amountOut                                                                       //\n    // bo = balanceOut                                                                      //\n    // bi = balanceIn              /      /            bi             \\    (wi / wo) \\      //\n    // ai = amountIn    ao = bo * |  1 - | --------------------------  | ^            |     //\n    // wi = weightIn               \\      \\       ( bi + ai )         /              /      //\n    // wo = weightOut                                                                       //\n    *****************************************************************************************/\n    // Subtract the fee from the amount in if requested\n    if (swapFeePercentage) {\n        amountIn = fp.sub(amountIn, fp.mulUp(amountIn, swapFeePercentage));\n    }\n    // Amount out, so we round down overall\n    // The multiplication rounds down, and the subtrahend (power) rounds up (so the base rounds up too)\n    // Because bi / (bi + ai) <= 1, the exponent rounds down\n    // Cannot exceed maximum in ratio\n    if (amountIn.gt(fp.mulDown(balanceIn, MAX_IN_RATIO))) {\n        throw new Error(\"MAX_IN_RATIO\");\n    }\n    const denominator = fp.add(balanceIn, amountIn);\n    const base = fp.divUp(balanceIn, denominator);\n    const exponent = fp.divDown(weightIn, weightOut);\n    const power = fp.powUp(base, exponent);\n    return fp.mulDown(balanceOut, fp.complement(power));\n};\nexports._calcOutGivenIn = _calcOutGivenIn;\n// Computes how many tokens must be sent to a pool in order to take `amountOut`, given the\n// current balances and weights.\nconst _calcInGivenOut = (balanceIn, weightIn, balanceOut, weightOut, amountOut, swapFeePercentage) => {\n    /*****************************************************************************************\n    // inGivenOut                                                                           //\n    // ao = amountOut                                                                       //\n    // bo = balanceOut                                                                      //\n    // bi = balanceIn              /  /            bo             \\    (wo / wi)      \\     //\n    // ai = amountIn    ai = bi * |  | --------------------------  | ^            - 1  |    //\n    // wi = weightIn               \\  \\       ( bo - ao )         /                   /     //\n    // wo = weightOut                                                                       //\n    *****************************************************************************************/\n    // Amount in, so we round up overall\n    // The multiplication rounds up, and the power rounds up (so the base rounds up too)\n    // Because bo / (bo - ao) >= 1, the exponent rounds up\n    // Cannot exceed maximum out ratio\n    if (amountOut.gt(fp.mulDown(balanceOut, MAX_OUT_RATIO))) {\n        throw new Error(\"MAX_OUT_RATIO\");\n    }\n    const base = fp.divUp(balanceOut, fp.sub(balanceOut, amountOut));\n    const exponent = fp.divUp(weightOut, weightIn);\n    const power = fp.powUp(base, exponent);\n    const ratio = fp.sub(power, fp.ONE);\n    let amountIn = fp.mulUp(balanceIn, ratio);\n    // Add the fee to the amount in if requested\n    if (swapFeePercentage) {\n        amountIn = fp.divUp(amountIn, fp.complement(swapFeePercentage));\n    }\n    return amountIn;\n};\nexports._calcInGivenOut = _calcInGivenOut;\nconst _calcBptOutGivenExactTokensIn = (balances, normalizedWeights, amountsIn, bptTotalSupply, swapFee) => {\n    // BPT out, so we round down overall\n    const balanceRatiosWithFee = new Array(amountsIn.length);\n    let invariantRatioWithFees = fp.ZERO;\n    for (let i = 0; i < balances.length; i++) {\n        balanceRatiosWithFee[i] = fp.divDown(fp.add(balances[i], amountsIn[i]), balances[i]);\n        invariantRatioWithFees = fp.add(invariantRatioWithFees, fp.mulDown(balanceRatiosWithFee[i], normalizedWeights[i]));\n    }\n    let invariantRatio = fp.ONE;\n    for (let i = 0; i < balances.length; i++) {\n        let amountInWithoutFee;\n        if (balanceRatiosWithFee[i].gt(invariantRatioWithFees)) {\n            const nonTaxableAmount = fp.mulDown(balances[i], fp.sub(invariantRatioWithFees, fp.ONE));\n            const taxableAmount = fp.sub(amountsIn[i], nonTaxableAmount);\n            amountInWithoutFee = fp.add(nonTaxableAmount, fp.mulDown(taxableAmount, fp.sub(fp.ONE, swapFee)));\n        }\n        else {\n            amountInWithoutFee = amountsIn[i];\n        }\n        const balanceRatio = fp.divDown(fp.add(balances[i], amountInWithoutFee), balances[i]);\n        invariantRatio = fp.mulDown(invariantRatio, fp.powDown(balanceRatio, normalizedWeights[i]));\n    }\n    if (invariantRatio.gte(fp.ONE)) {\n        return fp.mulDown(bptTotalSupply, fp.sub(invariantRatio, fp.ONE));\n    }\n    else {\n        return fp.ZERO;\n    }\n};\nexports._calcBptOutGivenExactTokensIn = _calcBptOutGivenExactTokensIn;\nconst _calcTokenInGivenExactBptOut = (balance, normalizedWeight, bptAmountOut, bptTotalSupply, swapFee) => {\n    /*****************************************************************************************\n    // tokenInForExactBptOut                                                                //\n    // a = amountIn                                                                         //\n    // b = balance                      /  /     bpt + bptOut     \\    (1 / w)      \\       //\n    // bptOut = bptAmountOut   a = b * |  | ---------------------- | ^          - 1  |      //\n    // bpt = bptTotalSupply             \\  \\         bpt          /                 /       //\n    // w = normalizedWeight                                                                 //\n    *****************************************************************************************/\n    // Token in, so we round up overall\n    // Calculate the factor by which the invariant will increase after minting `bptAmountOut`\n    const invariantRatio = fp.divUp(fp.add(bptTotalSupply, bptAmountOut), bptTotalSupply);\n    if (invariantRatio.gt(MAX_INVARIANT_RATIO)) {\n        throw new Error(\"MAX_OUT_BPT_FOR_TOKEN_IN\");\n    }\n    // Calculate by how much the token balance has to increase to cause `invariantRatio`\n    const balanceRatio = fp.powUp(invariantRatio, fp.divUp(fp.ONE, normalizedWeight));\n    const amountInWithoutFee = fp.mulUp(balance, fp.sub(balanceRatio, fp.ONE));\n    // We can now compute how much extra balance is being deposited and used in virtual swaps, and charge swap fees accordingly\n    const taxablePercentage = fp.complement(normalizedWeight);\n    const taxableAmount = fp.mulUp(amountInWithoutFee, taxablePercentage);\n    const nonTaxableAmount = fp.sub(amountInWithoutFee, taxableAmount);\n    return fp.add(nonTaxableAmount, fp.divUp(taxableAmount, fp.complement(swapFee)));\n};\nexports._calcTokenInGivenExactBptOut = _calcTokenInGivenExactBptOut;\nconst _calcBptInGivenExactTokensOut = (balances, normalizedWeights, amountsOut, bptTotalSupply, swapFee) => {\n    // BPT in, so we round up overall\n    const balanceRatiosWithoutFee = new Array(amountsOut.length);\n    let invariantRatioWithoutFees = fp.ZERO;\n    for (let i = 0; i < balances.length; i++) {\n        balanceRatiosWithoutFee[i] = fp.divUp(fp.sub(balances[i], amountsOut[i]), balances[i]);\n        invariantRatioWithoutFees = fp.add(invariantRatioWithoutFees, fp.mulUp(balanceRatiosWithoutFee[i], normalizedWeights[i]));\n    }\n    let invariantRatio = fp.ONE;\n    for (let i = 0; i < balances.length; i++) {\n        // Swap fees are typically charged on 'tokenIn', but there is no 'tokenIn' here, so we apply it to\n        // 'tokenOut' - this results in slightly larger price impact\n        let amountOutWithFee;\n        if (invariantRatioWithoutFees.gt(balanceRatiosWithoutFee[i])) {\n            const nonTaxableAmount = fp.mulDown(balances[i], fp.complement(invariantRatioWithoutFees));\n            const taxableAmount = fp.sub(amountsOut[i], nonTaxableAmount);\n            amountOutWithFee = fp.add(nonTaxableAmount, fp.divUp(taxableAmount, fp.complement(swapFee)));\n        }\n        else {\n            amountOutWithFee = amountsOut[i];\n        }\n        const balanceRatio = fp.divDown(fp.sub(balances[i], amountOutWithFee), balances[i]);\n        invariantRatio = fp.mulDown(invariantRatio, fp.powDown(balanceRatio, normalizedWeights[i]));\n    }\n    return fp.mulUp(bptTotalSupply, fp.complement(invariantRatio));\n};\nexports._calcBptInGivenExactTokensOut = _calcBptInGivenExactTokensOut;\nconst _calcTokenOutGivenExactBptIn = (balance, normalizedWeight, bptAmountIn, bptTotalSupply, swapFee) => {\n    /*****************************************************************************************\n    // exactBptInForTokenOut                                                                //\n    // a = amountOut                                                                        //\n    // b = balance                     /      /    bpt - bptIn    \\    (1 / w)  \\           //\n    // bptIn = bptAmountIn    a = b * |  1 - | ------------------- | ^           |          //\n    // bpt = bptTotalSupply            \\      \\        bpt        /             /           //\n    // w = weight                                                                           //\n    *****************************************************************************************/\n    // Token out, so we round down overall\n    // The multiplication rounds down, but the power rounds up (so the base rounds up)\n    // Because (bpt - bptIn) / bpt <= 1, the exponent rounds down\n    // Calculate the factor by which the invariant will decrease after burning `bptAmountIn`\n    const invariantRatio = fp.divUp(fp.sub(bptTotalSupply, bptAmountIn), bptTotalSupply);\n    if (invariantRatio.lt(MIN_INVARIANT_RATIO)) {\n        throw new Error(\"MIN_BPT_IN_FOR_TOKEN_OUT\");\n    }\n    // Calculate by how much the token balance has to increase to cause `invariantRatio`\n    const balanceRatio = fp.powUp(invariantRatio, fp.divDown(fp.ONE, normalizedWeight));\n    // Because of rounding up, `balanceRatio` can be greater than one, so we use its complement\n    const amountOutWithoutFee = fp.mulDown(balance, fp.complement(balanceRatio));\n    // We can now compute how much excess balance is being withdrawn as a result of the virtual swaps,\n    // which result in swap fees\n    const taxablePercentage = fp.complement(normalizedWeight);\n    // Swap fees are typically charged on 'tokenIn', but there is no 'tokenIn' here, so we apply it\n    // to 'tokenOut' - this results in slightly larger price impact (fees are rounded up)\n    const taxableAmount = fp.mulUp(amountOutWithoutFee, taxablePercentage);\n    const nonTaxableAmount = fp.sub(amountOutWithoutFee, taxableAmount);\n    return fp.add(nonTaxableAmount, fp.mulDown(taxableAmount, fp.complement(swapFee)));\n};\nexports._calcTokenOutGivenExactBptIn = _calcTokenOutGivenExactBptIn;\nconst _calcTokensOutGivenExactBptIn = (balances, bptAmountIn, bptTotalSupply) => {\n    /*****************************************************************************************\n    // exactBptInForTokensOut                                                               //\n    // (formula per token)                                                                  //\n    // ao = amountOut                  /   bptIn   \\                                        //\n    // b = balance           ao = b * | ----------- |                                       //\n    // bptIn = bptAmountIn             \\    bpt    /                                        //\n    // bpt = bptTotalSupply                                                                 //\n    *****************************************************************************************/\n    // Token out, so we round down overall\n    // This means rounding down on both multiplication and division\n    const bptRatio = fp.divDown(bptAmountIn, bptTotalSupply);\n    const amountsOut = new Array(balances.length);\n    for (let i = 0; i < balances.length; i++) {\n        amountsOut[i] = fp.mulDown(balances[i], bptRatio);\n    }\n    return amountsOut;\n};\nexports._calcTokensOutGivenExactBptIn = _calcTokensOutGivenExactBptIn;\nconst _calcDueTokenProtocolSwapFeeAmount = (balance, normalizedWeight, previousInvariant, currentInvariant, protocolSwapFeePercentage) => {\n    /*********************************************************************************\n    /*  protocolSwapFeePercentage * balanceToken * ( 1 - (previousInvariant / currentInvariant) ^ (1 / weightToken))\n    *********************************************************************************/\n    if (currentInvariant.lte(previousInvariant)) {\n        // This shouldn't happen outside of rounding errors, but have this safeguard nonetheless to prevent the Pool\n        // from entering a locked state in which joins and exits revert while computing accumulated swap fees.\n        return fp.ZERO;\n    }\n    // We round down to prevent issues in the Pool's accounting, even if it means paying slightly less in protocol\n    // fees to the Vault.\n    // Fee percentage and balance multiplications round down, while the subtrahend (power) rounds up (as does the\n    // base). Because previousInvariant / currentInvariant <= 1, the exponent rounds down.\n    let base = fp.divUp(previousInvariant, currentInvariant);\n    const exponent = fp.divDown(fp.ONE, normalizedWeight);\n    // Because the exponent is larger than one, the base of the power function has a lower bound. We cap to this\n    // value to avoid numeric issues, which means in the extreme case (where the invariant growth is larger than\n    // 1 / min exponent) the Pool will pay less in protocol fees than it should.\n    base = base.gte(fp.MIN_POW_BASE_FREE_EXPONENT)\n        ? base\n        : fp.MIN_POW_BASE_FREE_EXPONENT;\n    const power = fp.powUp(base, exponent);\n    const tokenAccruedFees = fp.mulDown(balance, fp.complement(power));\n    return fp.mulDown(tokenAccruedFees, protocolSwapFeePercentage);\n};\nexports._calcDueTokenProtocolSwapFeeAmount = _calcDueTokenProtocolSwapFeeAmount;\n// Convenience method needed by the SOR package (adapted from _calcBptOutGivenExactTokensIn)\nconst _calcBptOutGivenExactTokenIn = (balance, normalizedWeight, amountIn, bptTotalSupply, swapFee) => {\n    // BPT out, so we round down overall\n    const tokenBalanceRatioWithoutFee = fp.divDown(fp.add(balance, amountIn), balance);\n    const weightedBalanceRatio = fp.mulDown(tokenBalanceRatioWithoutFee, normalizedWeight);\n    let invariantRatio = fp.ONE;\n    // Percentage of the amount supplied that will be swapped for other tokens in the pool\n    let tokenBalancePercentageExcess;\n    // Some tokens might have amounts supplied in excess of a 'balanced' join: these are identified if\n    // the token's balance ratio sans fee is larger than the weighted balance ratio, and swap fees charged\n    // on the amount to swap\n    if (weightedBalanceRatio.gte(tokenBalanceRatioWithoutFee)) {\n        tokenBalancePercentageExcess = fp.ZERO;\n    }\n    else {\n        tokenBalancePercentageExcess = fp.divUp(fp.sub(tokenBalanceRatioWithoutFee, weightedBalanceRatio), fp.sub(tokenBalanceRatioWithoutFee, fp.ONE));\n    }\n    const swapFeeExcess = fp.mulUp(swapFee, tokenBalancePercentageExcess);\n    const amountInAfterFee = fp.mulDown(amountIn, fp.complement(swapFeeExcess));\n    const tokenBalanceRatio = fp.add(fp.ONE, fp.divDown(amountInAfterFee, balance));\n    invariantRatio = fp.mulDown(invariantRatio, fp.powDown(tokenBalanceRatio, normalizedWeight));\n    return fp.mulDown(bptTotalSupply, fp.sub(invariantRatio, fp.ONE));\n};\nexports._calcBptOutGivenExactTokenIn = _calcBptOutGivenExactTokenIn;\n// Convenience method needed by the SOR package (adapted from _calcBptInGivenExactTokensOut)\nfunction _calcBptInGivenExactTokenOut(balance, normalizedWeight, amountOut, bptTotalSupply, swapFee) {\n    // BPT in, so we round up overall\n    const tokenBalanceRatioWithoutFee = fp.divUp(fp.sub(balance, amountOut), balance);\n    const weightedBalanceRatio = fp.mulUp(tokenBalanceRatioWithoutFee, normalizedWeight);\n    let invariantRatio = fp.ONE;\n    // Percentage of the amount supplied that will be swapped for other tokens in the pool\n    let tokenBalancePercentageExcess;\n    // For each ratioSansFee, compare with the total weighted ratio (weightedBalanceRatio) and\n    // decrease the fee from what goes above it\n    if (weightedBalanceRatio.lte(tokenBalanceRatioWithoutFee)) {\n        tokenBalancePercentageExcess = fp.ZERO;\n    }\n    else {\n        tokenBalancePercentageExcess = fp.divUp(fp.sub(weightedBalanceRatio, tokenBalanceRatioWithoutFee), fp.complement(tokenBalanceRatioWithoutFee));\n    }\n    const swapFeeExcess = fp.mulUp(swapFee, tokenBalancePercentageExcess);\n    const amountOutBeforeFee = fp.divUp(amountOut, fp.complement(swapFeeExcess));\n    const tokenBalanceRatio = fp.complement(fp.divUp(amountOutBeforeFee, balance));\n    invariantRatio = fp.mulDown(invariantRatio, fp.powDown(tokenBalanceRatio, normalizedWeight));\n    return fp.mulUp(bptTotalSupply, fp.complement(invariantRatio));\n}\nexports._calcBptInGivenExactTokenOut = _calcBptInGivenExactTokenOut;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst index_1 = require(\"../../subgraph/index\");\nconst big_number_1 = require(\"../../utils/big-number\");\nconst common_1 = require(\"../../utils/common\");\nconst base_1 = require(\"../base\");\nconst math = require(\"./math\");\nclass WeightedPool extends base_1.default {\n    // ---------------------- Constructor ----------------------\n    constructor(params) {\n        super(params);\n        this.MIN_TOKENS = 2;\n        this.MAX_TOKENS = 8;\n        // A minimum normalized weight imposes a maximum weight ratio\n        // We need this due to limitations in the implementation of the power function, as these ratios are often exponents\n        this.MIN_WEIGHT = big_number_1.bn(\"0.01\"); // 0.01e18\n        if (params.tokens.length < this.MIN_TOKENS) {\n            throw new Error(\"MIN_TOKENS\");\n        }\n        if (params.tokens.length > this.MAX_TOKENS) {\n            throw new Error(\"MAX_TOKENS\");\n        }\n        this._tokens = common_1.shallowCopyAll(params.tokens);\n        let normalizedSum = big_number_1.bn(0);\n        for (let i = 0; i < params.tokens.length; i++) {\n            if (big_number_1.bn(params.tokens[i].weight).lt(this.MIN_WEIGHT)) {\n                throw new Error(\"MIN_WEIGHT\");\n            }\n            normalizedSum = normalizedSum.plus(params.tokens[i].weight);\n        }\n        if (!normalizedSum.eq(1)) {\n            throw new Error(\"NORMALIZED_WEIGHT_INVARIANT\");\n        }\n    }\n    // ---------------------- Getters ----------------------\n    get tokens() {\n        // Shallow-copy to disallow direct changes\n        return common_1.shallowCopyAll(this._tokens);\n    }\n    // ---------------------- Subgraph initializer ----------------------\n    static async initFromRealPool(poolId, query = false, blockNumber, testnet) {\n        const pool = await index_1.getPool(poolId, blockNumber, testnet);\n        if (!pool) {\n            throw new Error(\"Could not fetch pool data\");\n        }\n        if (pool.poolType !== \"Weighted\") {\n            throw new Error(\"Pool must be weighted\");\n        }\n        const id = pool.id;\n        const address = pool.address;\n        const bptTotalSupply = pool.totalShares;\n        const swapFeePercentage = pool.swapFee;\n        const tokens = [];\n        for (const token of pool.tokens) {\n            tokens.push({\n                address: token.address,\n                symbol: token.symbol,\n                balance: token.balance,\n                decimals: token.decimals,\n                weight: token.weight,\n            });\n        }\n        return new WeightedPool({\n            id,\n            address,\n            tokens,\n            bptTotalSupply,\n            swapFeePercentage,\n            query,\n        });\n    }\n    // ---------------------- Misc ----------------------\n    getInvariant() {\n        const invariant = math._calculateInvariant(this._tokens.map((t) => this._upScale(t.weight, 18)), this._tokens.map((t) => this._upScale(t.balance, t.decimals)));\n        return invariant.toString();\n    }\n    // ---------------------- Swap actions ----------------------\n    swapGivenIn(tokenInSymbol, tokenOutSymbol, amountIn) {\n        const tokenIn = this._tokens.find((t) => t.symbol === tokenInSymbol);\n        const tokenOut = this._tokens.find((t) => t.symbol === tokenOutSymbol);\n        const scaledAmountOut = math._calcOutGivenIn(this._upScale(tokenIn.balance, tokenIn.decimals), this._upScale(tokenIn.weight, 18), this._upScale(tokenOut.balance, tokenOut.decimals), this._upScale(tokenOut.weight, 18), this._upScale(amountIn, tokenIn.decimals), this._upScale(this._swapFeePercentage, 18));\n        const amountOut = this._downScaleDown(scaledAmountOut, tokenOut.decimals);\n        // In-place balance updates\n        if (!this._query) {\n            tokenIn.balance = big_number_1.bn(tokenIn.balance).plus(amountIn).toString();\n            tokenOut.balance = big_number_1.bn(tokenOut.balance).minus(amountOut).toString();\n        }\n        return amountOut.toString();\n    }\n    swapGivenOut(tokenInSymbol, tokenOutSymbol, amountOut) {\n        const tokenIn = this._tokens.find((t) => t.symbol === tokenInSymbol);\n        const tokenOut = this._tokens.find((t) => t.symbol === tokenOutSymbol);\n        const scaledAmountIn = math._calcInGivenOut(this._upScale(tokenIn.balance, tokenIn.decimals), this._upScale(tokenIn.weight, 18), this._upScale(tokenOut.balance, tokenOut.decimals), this._upScale(tokenOut.weight, 18), this._upScale(amountOut, tokenOut.decimals), this._upScale(this._swapFeePercentage, 18));\n        const amountIn = this._downScaleUp(scaledAmountIn, tokenIn.decimals);\n        // In-place balance updates\n        if (!this._query) {\n            tokenIn.balance = big_number_1.bn(tokenIn.balance).plus(amountIn).toString();\n            tokenOut.balance = big_number_1.bn(tokenOut.balance).minus(amountOut).toString();\n        }\n        return amountIn.toString();\n    }\n    // ---------------------- LP actions ----------------------\n    joinExactTokensInForBptOut(amountsIn) {\n        if (Object.keys(amountsIn).length !== this._tokens.length) {\n            throw new Error(\"Invalid input\");\n        }\n        const scaledBptOut = math._calcBptOutGivenExactTokensIn(this._tokens.map((t) => this._upScale(t.balance, t.decimals)), this._tokens.map((t) => this._upScale(t.weight, 18)), this._tokens.map((t) => this._upScale(amountsIn[t.symbol], t.decimals)), this._upScale(this._bptTotalSupply, 18), this._upScale(this._swapFeePercentage, 18));\n        const bptOut = this._downScaleDown(scaledBptOut, 18);\n        // In-place balance updates\n        if (!this._query) {\n            for (let i = 0; i < this._tokens.length; i++) {\n                const token = this._tokens[i];\n                token.balance = big_number_1.bn(token.balance)\n                    .plus(amountsIn[token.symbol])\n                    .toString();\n            }\n            this._bptTotalSupply = big_number_1.bn(this._bptTotalSupply).plus(bptOut).toString();\n        }\n        return bptOut.toString();\n    }\n    joinTokenInForExactBptOut(tokenInSymbol, bptOut) {\n        const tokenIn = this._tokens.find((t) => t.symbol === tokenInSymbol);\n        if (!tokenIn) {\n            throw new Error(\"Invalid input\");\n        }\n        const scaledAmountIn = math._calcTokenInGivenExactBptOut(this._upScale(tokenIn.balance, tokenIn.decimals), this._upScale(tokenIn.weight, 18), this._upScale(bptOut, 18), this._upScale(this._bptTotalSupply, 18), this._upScale(this._swapFeePercentage, 18));\n        const amountIn = this._downScaleUp(scaledAmountIn, tokenIn.decimals);\n        // In-place balance updates\n        if (!this._query) {\n            tokenIn.balance = big_number_1.bn(tokenIn.balance).plus(amountIn).toString();\n            this._bptTotalSupply = big_number_1.bn(this._bptTotalSupply).plus(bptOut).toString();\n        }\n        return amountIn.toString();\n    }\n    exitExactBptInForTokenOut(tokenOutSymbol, bptIn) {\n        const tokenOut = this._tokens.find((t) => t.symbol === tokenOutSymbol);\n        if (!tokenOut) {\n            throw new Error(\"Invalid input\");\n        }\n        const scaledAmountOut = math._calcTokenOutGivenExactBptIn(this._upScale(tokenOut.balance, tokenOut.decimals), this._upScale(tokenOut.weight, 18), this._upScale(bptIn, 18), this._upScale(this._bptTotalSupply, 18), this._upScale(this._swapFeePercentage, 18));\n        const amountOut = this._downScaleDown(scaledAmountOut, tokenOut.decimals);\n        // In-place balance updates\n        if (!this._query) {\n            tokenOut.balance = big_number_1.bn(tokenOut.balance).minus(amountOut).toString();\n            this._bptTotalSupply = big_number_1.bn(this._bptTotalSupply).minus(bptIn).toString();\n        }\n        return amountOut.toString();\n    }\n    exitExactBptInForTokensOut(bptIn) {\n        // Exactly match the EVM version\n        if (big_number_1.bn(bptIn).gt(this._bptTotalSupply)) {\n            throw new Error(\"BPT in exceeds total supply\");\n        }\n        const scaledAmountsOut = math._calcTokensOutGivenExactBptIn(this._tokens.map((t) => this._upScale(t.balance, t.decimals)), this._upScale(bptIn, 18), this._upScale(this._bptTotalSupply, 18));\n        const amountsOut = scaledAmountsOut.map((amount, i) => this._downScaleDown(amount, this._tokens[i].decimals));\n        // In-place balance updates\n        if (!this._query) {\n            for (let i = 0; i < this._tokens.length; i++) {\n                const token = this._tokens[i];\n                token.balance = big_number_1.bn(token.balance).minus(amountsOut[i]).toString();\n            }\n            this._bptTotalSupply = big_number_1.bn(this._bptTotalSupply).minus(bptIn).toString();\n        }\n        return amountsOut.map((a) => a.toString());\n    }\n    exitBptInForExactTokensOut(amountsOut) {\n        if (Object.keys(amountsOut).length !== this._tokens.length) {\n            throw new Error(\"Invalid input\");\n        }\n        const scaledBptIn = math._calcBptInGivenExactTokensOut(this._tokens.map((t) => this._upScale(t.balance, t.decimals)), this._tokens.map((t) => this._upScale(t.weight, 18)), this._tokens.map((t) => this._upScale(amountsOut[t.symbol], t.decimals)), this._upScale(this._bptTotalSupply, 18), this._upScale(this._swapFeePercentage, 18));\n        const bptIn = this._downScaleUp(scaledBptIn, 18);\n        // In-place balance updates\n        if (!this._query) {\n            for (let i = 0; i < this._tokens.length; i++) {\n                const token = this._tokens[i];\n                token.balance = big_number_1.bn(token.balance)\n                    .minus(amountsOut[token.symbol])\n                    .toString();\n            }\n            this._bptTotalSupply = big_number_1.bn(this._bptTotalSupply).minus(bptIn).toString();\n        }\n        return bptIn.toString();\n    }\n}\nexports.default = WeightedPool;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.WeightedMath = exports.WeightedPool = exports.StableMath = exports.StablePool = void 0;\nconst stable_1 = require(\"./pools/stable\");\nexports.StablePool = stable_1.default;\nconst StableMath = require(\"./pools/stable/math\");\nexports.StableMath = StableMath;\nconst weighted_1 = require(\"./pools/weighted\");\nexports.WeightedPool = weighted_1.default;\nconst WeightedMath = require(\"./pools/weighted/math\");\nexports.WeightedMath = WeightedMath;\n","import { stableBPTForTokensZeroPriceImpact as _bptForTokensZeroPriceImpact } from '@balancer-labs/sdk';\r\nimport { BigNumber, BigNumberish } from '@ethersproject/bignumber';\r\nimport { formatUnits, parseUnits } from '@ethersproject/units';\r\nimport * as SDK from '@georgeroman/balancer-v2-pools';\r\nimport OldBigNumber from 'bignumber.js';\r\n\r\nimport { bnum, selectByAddress, isSameAddress } from '@/lib/utils';\r\n\r\nimport Calculator from './calculator.sevice';\r\nimport { PiOptions } from './calculator.sevice';\r\nimport { tokensListExclBpt } from '@/composables/usePool';\r\n\r\n/**\r\n * The stableMathEvm works with all values scaled to 18 decimals,\r\n * all inputs should be scaled appropriately.\r\n */\r\nexport default class Stable {\r\n  calc: Calculator;\r\n  AMP_PRECISION = bnum(1000);\r\n\r\n  constructor(calculator) {\r\n    this.calc = calculator;\r\n  }\r\n\r\n  public exactTokensInForBPTOut(tokenAmounts: string[]): OldBigNumber {\r\n    try {\r\n      const amp = bnum(this.calc.pool.value?.onchain?.amp?.toString() || '0');\r\n      const ampAdjusted = this.adjustAmp(amp);\r\n      const amounts = this.calc.pool.value.tokens\r\n        .filter(({ address }) => address !== this.calc.pool.value.address)\r\n        .map(({ priceRate }, i) => this.scaleInput(tokenAmounts[i], priceRate));\r\n\r\n      const bptOut = SDK.StableMath._calcBptOutGivenExactTokensIn(\r\n        ampAdjusted,\r\n        this.scaledBalances,\r\n        amounts,\r\n        this.scaledPoolTotalSupply,\r\n        bnum(this.calc.poolSwapFee.toString())\r\n      );\r\n\r\n      return this.scaleOutput(\r\n        bptOut.toString(),\r\n        this.calc.poolDecimals,\r\n        '1',\r\n        OldBigNumber.ROUND_DOWN // If OUT given IN, round down\r\n      );\r\n    } catch (error) {\r\n      console.error(error);\r\n      return this.scaleOutput(\r\n        '0',\r\n        this.calc.poolDecimals,\r\n        '1',\r\n        OldBigNumber.ROUND_DOWN // If OUT given IN, round down\r\n      );\r\n    }\r\n  }\r\n\r\n  public bptInForExactTokensOut(tokenAmounts: string[]): OldBigNumber {\r\n    const amp = bnum(this.calc.pool.value?.onchain?.amp?.toString() || '0');\r\n    const ampAdjusted = this.adjustAmp(amp);\r\n\r\n    const amounts = this.calc.pool.value.tokens\r\n      .filter(token => token.address !== this.calc.pool.value.address)\r\n      .map(({ priceRate }, i) => this.scaleInput(tokenAmounts[i], priceRate));\r\n\r\n    const bptIn = SDK.StableMath._calcBptInGivenExactTokensOut(\r\n      ampAdjusted,\r\n      this.scaledBalances,\r\n      amounts,\r\n      this.scaledPoolTotalSupply,\r\n      bnum(this.calc.poolSwapFee.toString())\r\n    );\r\n\r\n    return this.scaleOutput(\r\n      bptIn.toString(),\r\n      this.calc.poolDecimals,\r\n      '1',\r\n      OldBigNumber.ROUND_UP // If IN given OUT, round up\r\n    );\r\n  }\r\n\r\n  public bptInForExactTokenOut(\r\n    amount: string,\r\n    tokenIndex: number\r\n  ): OldBigNumber {\r\n    const amp = bnum(this.calc.pool.value?.onchain?.amp?.toString() || '0');\r\n    const ampAdjusted = this.adjustAmp(amp);\r\n    const amounts = this.calc.pool.value.tokens.map(({ priceRate }, i) => {\r\n      if (i === tokenIndex) return this.scaleInput(amount, priceRate);\r\n      return bnum('0');\r\n    });\r\n\r\n    const bptIn = SDK.StableMath._calcBptInGivenExactTokensOut(\r\n      ampAdjusted,\r\n      this.scaledBalances,\r\n      amounts,\r\n      this.scaledPoolTotalSupply,\r\n      bnum(this.calc.poolSwapFee.toString())\r\n    );\r\n\r\n    return this.scaleOutput(\r\n      bptIn.toString(),\r\n      this.calc.poolDecimals,\r\n      '1',\r\n      OldBigNumber.ROUND_UP // If IN given OUT, round up\r\n    );\r\n  }\r\n\r\n  public exactBPTInForTokenOut(\r\n    bptAmount: string,\r\n    tokenIndex: number\r\n  ): OldBigNumber {\r\n    // Make sure to get correct address.\r\n    // tokenIndex does not account for pre-minted BPT\r\n    // So you must get the address from an address list that also excludes\r\n    // pre-minted BPT.\r\n    const tokenOutAddress = tokensListExclBpt(this.calc.pool.value)[tokenIndex];\r\n    const tokenOutDecimals =\r\n      selectByAddress(this.calc.poolTokens, tokenOutAddress)?.decimals || 18;\r\n    const tokenOutPriceRate =\r\n      this.calc.pool.value.tokens.find(t =>\r\n        isSameAddress(t.address, tokenOutAddress)\r\n      )?.priceRate || '1';\r\n\r\n    if (bnum(bptAmount).eq(0))\r\n      return this.scaleOutput(\r\n        '0',\r\n        tokenOutDecimals,\r\n        tokenOutPriceRate,\r\n        OldBigNumber.ROUND_DOWN // If OUT given IN, round down\r\n      );\r\n\r\n    const amp = bnum(this.calc.pool.value?.onchain?.amp?.toString() || '0');\r\n    const ampAdjusted = this.adjustAmp(amp);\r\n    const normalizedAmountIn = formatUnits(bptAmount, this.calc.poolDecimals);\r\n    const bptAmountIn = this.scaleInput(normalizedAmountIn);\r\n\r\n    const tokenAmountOut = SDK.StableMath._calcTokenOutGivenExactBptIn(\r\n      ampAdjusted,\r\n      this.scaledBalances,\r\n      tokenIndex,\r\n      bptAmountIn,\r\n      this.scaledPoolTotalSupply,\r\n      bnum(this.calc.poolSwapFee.toString())\r\n    );\r\n\r\n    return this.scaleOutput(\r\n      tokenAmountOut.toString(),\r\n      tokenOutDecimals,\r\n      tokenOutPriceRate,\r\n      OldBigNumber.ROUND_DOWN // If OUT given IN, round down\r\n    );\r\n  }\r\n\r\n  public priceImpact(tokenAmounts: string[], opts: PiOptions): OldBigNumber {\r\n    let bptAmount: OldBigNumber | BigNumberish;\r\n    let bptZeroPriceImpact: OldBigNumber;\r\n\r\n    if (this.calc.action === 'join') {\r\n      bptAmount = this.exactTokensInForBPTOut(tokenAmounts);\r\n      if (bptAmount.isLessThan(0)) return bnum(0);\r\n      bptZeroPriceImpact = this.bptForTokensZeroPriceImpact(tokenAmounts);\r\n\r\n      return bnum(1).minus(bptAmount.div(bptZeroPriceImpact));\r\n    } else {\r\n      // Single asset exit\r\n      if (opts.exactOut) {\r\n        bptAmount = this.bptInForExactTokensOut(tokenAmounts);\r\n        bptZeroPriceImpact = this.bptForTokensZeroPriceImpact(tokenAmounts);\r\n      } else {\r\n        bptAmount = parseUnits(\r\n          this.calc.bptBalance,\r\n          this.calc.poolDecimals\r\n        ).toString();\r\n        tokenAmounts = tokensListExclBpt(this.calc.pool.value).map((_, i) => {\r\n          if (i !== opts.tokenIndex) return '0';\r\n          const tokenAmount = this.exactBPTInForTokenOut(\r\n            bptAmount.toString(),\r\n            opts.tokenIndex\r\n          ).toString();\r\n          return formatUnits(\r\n            tokenAmount,\r\n            this.calc.poolTokenDecimals[opts.tokenIndex]\r\n          ).toString();\r\n        });\r\n        bptZeroPriceImpact = this.bptForTokensZeroPriceImpact(tokenAmounts);\r\n      }\r\n\r\n      return bnum(bptAmount).div(bptZeroPriceImpact).minus(1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * PRIVATE FUNCTIONS\r\n   */\r\n  private bptForTokensZeroPriceImpact(tokenAmounts: string[]): OldBigNumber {\r\n    const amp = bnum(this.calc.pool.value?.onchain?.amp?.toString() || '0');\r\n    const ampAdjusted = BigNumber.from(this.adjustAmp(amp).toString());\r\n    // These amounts need to take priceRate into consideration\r\n    const denormAmounts = this.calc.pool.value.tokens\r\n      .filter(({ address }) => address !== this.calc.pool.value.address)\r\n      .map(({ priceRate }, i) =>\r\n        BigNumber.from(\r\n          this.scaleInput(\r\n            tokenAmounts[i],\r\n            priceRate,\r\n            this.calc.poolTokenDecimals[i]\r\n          ).toString()\r\n        )\r\n      );\r\n    // _bptForTokensZeroPriceImpact is the only stable pool function\r\n    // that requires balances be scaled by the token decimals and not 18\r\n    // scaledBalances already use priceRate\r\n    const balances = this.scaledBalances.map((balance, i) => {\r\n      const normalizedBalance = formatUnits(balance.toFixed(), 18);\r\n      const denormBalance = parseUnits(\r\n        Number(normalizedBalance).toFixed(this.calc.poolTokenDecimals[i]),\r\n        this.calc.poolTokenDecimals[i]\r\n      );\r\n      return denormBalance;\r\n    });\r\n\r\n    const bptZeroImpact = _bptForTokensZeroPriceImpact(\r\n      balances,\r\n      this.calc.poolTokenDecimals,\r\n      denormAmounts,\r\n      this.calc.poolTotalSupply,\r\n      ampAdjusted\r\n    );\r\n\r\n    return bnum(bptZeroImpact.toString());\r\n  }\r\n\r\n  private get scaledBalances(): OldBigNumber[] {\r\n    return this.calc.poolTokenBalances.map((balance, i) => {\r\n      const normalizedBalance = formatUnits(\r\n        balance,\r\n        this.calc.poolTokenDecimals[i]\r\n      );\r\n      const scaledBalance = this.scaleInput(\r\n        normalizedBalance,\r\n        this.calc.pool.value.tokens[i].priceRate\r\n      );\r\n      return bnum(scaledBalance.toString());\r\n    });\r\n  }\r\n\r\n  private get scaledPoolTotalSupply(): OldBigNumber {\r\n    const normalizedSupply = formatUnits(\r\n      this.calc.poolTotalSupply,\r\n      this.calc.poolDecimals\r\n    );\r\n    const scaledSupply = parseUnits(normalizedSupply, 18);\r\n    return bnum(scaledSupply.toString());\r\n  }\r\n\r\n  private scaleInput(\r\n    normalizedAmount: string,\r\n    priceRate: string | null = null,\r\n    decimals = 18\r\n  ): OldBigNumber {\r\n    if (priceRate === null) priceRate = '1';\r\n\r\n    const denormAmount = bnum(parseUnits(normalizedAmount, decimals).toString())\r\n      .times(priceRate)\r\n      .toFixed(0, OldBigNumber.ROUND_UP);\r\n\r\n    return bnum(denormAmount.toString());\r\n  }\r\n\r\n  private scaleOutput(\r\n    amount: string,\r\n    decimals: number,\r\n    priceRate: string | null,\r\n    rounding: OldBigNumber.RoundingMode\r\n  ): OldBigNumber {\r\n    if (priceRate === null) priceRate = '1';\r\n\r\n    const amountAfterPriceRate = bnum(amount).div(priceRate).toString();\r\n\r\n    const normalizedAmount = bnum(amountAfterPriceRate)\r\n      .div(parseUnits('1', 18).toString())\r\n      .toFixed(decimals, rounding);\r\n    const scaledAmount = parseUnits(normalizedAmount, decimals);\r\n\r\n    return bnum(scaledAmount.toString());\r\n  }\r\n\r\n  // Solidity maths uses precison method for amp that must be replicated\r\n  private adjustAmp(amp: OldBigNumber): OldBigNumber {\r\n    return amp.times(this.AMP_PRECISION);\r\n  }\r\n}\r\n","import { phantomStableBPTForTokensZeroPriceImpact as _bptForTokensZeroPriceImpact } from '@balancer-labs/sdk';\r\nimport { BigNumber, BigNumberish } from '@ethersproject/bignumber';\r\nimport { formatUnits, parseUnits } from '@ethersproject/units';\r\nimport OldBigNumber from 'bignumber.js';\r\n\r\nimport { bnum } from '@/lib/utils';\r\n\r\nimport Calculator from './calculator.sevice';\r\nimport { PiOptions } from './calculator.sevice';\r\n\r\nexport default class StablePhantom {\r\n  calc: Calculator;\r\n  AMP_PRECISION = bnum(1000);\r\n\r\n  constructor(calculator) {\r\n    this.calc = calculator;\r\n  }\r\n\r\n  public priceImpact(tokenAmounts: string[], opts: PiOptions): OldBigNumber {\r\n    if (!opts.queryBPT)\r\n      throw new Error('Need query BPT to calc StablePhantom Price Impact');\r\n\r\n    console.log('Query BPT:', opts.queryBPT);\r\n    let bptAmount: OldBigNumber | BigNumberish;\r\n    let bptZeroPriceImpact: OldBigNumber;\r\n\r\n    if (this.calc.action === 'join') {\r\n      bptAmount = bnum(opts.queryBPT);\r\n      if (bptAmount.isLessThan(0)) return bnum(0);\r\n      bptZeroPriceImpact = this.bptForTokensZeroPriceImpact(tokenAmounts);\r\n\r\n      return bnum(1).minus(bptAmount.div(bptZeroPriceImpact));\r\n    } else {\r\n      // Single asset exit\r\n      if (opts.exactOut) {\r\n        bptAmount = bnum(opts.queryBPT);\r\n        bptZeroPriceImpact = this.bptForTokensZeroPriceImpact(tokenAmounts);\r\n      } else {\r\n        // Single asset max out case\r\n        bptAmount = parseUnits(\r\n          this.calc.bptBalance,\r\n          this.calc.poolDecimals\r\n        ).toString();\r\n        bptZeroPriceImpact = this.bptForTokensZeroPriceImpact(tokenAmounts);\r\n      }\r\n\r\n      return bnum(bptAmount).div(bptZeroPriceImpact).minus(1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * PRIVATE FUNCTIONS\r\n   */\r\n  private bptForTokensZeroPriceImpact(tokenAmounts: string[]): OldBigNumber {\r\n    const amp = bnum(this.calc.pool.value?.onchain?.amp?.toString() || '0');\r\n    const ampAdjusted = BigNumber.from(this.adjustAmp(amp).toString());\r\n    const denormAmounts = this.calc.denormAmounts(\r\n      tokenAmounts,\r\n      this.calc.poolTokenDecimals\r\n    );\r\n    // This function should use pool balances (i.e. without rate conversion)\r\n    const bptZeroImpact = _bptForTokensZeroPriceImpact(\r\n      this.calc.poolTokenBalances,\r\n      this.calc.poolTokenDecimals,\r\n      denormAmounts,\r\n      this.calc.poolTotalSupply,\r\n      ampAdjusted,\r\n      this.calc.poolSwapFee,\r\n      this.priceRates\r\n    );\r\n\r\n    console.log('bptZeroImpact', bptZeroImpact.toString());\r\n\r\n    return bnum(bptZeroImpact.toString());\r\n  }\r\n\r\n  private get scaledBalances(): BigNumber[] {\r\n    return this.calc.poolTokenBalances.map((balance, i) => {\r\n      const normalizedBalance = formatUnits(\r\n        balance,\r\n        this.calc.poolTokenDecimals[i]\r\n      );\r\n      const scaledBalance = this.scaleInput(\r\n        normalizedBalance,\r\n        this.calc.pool.value.tokens[i].priceRate\r\n      );\r\n      return scaledBalance;\r\n    });\r\n  }\r\n\r\n  private scaleInput(\r\n    normalizedAmount: string,\r\n    priceRate: string | null = null\r\n  ): BigNumber {\r\n    if (priceRate === null) priceRate = '1';\r\n\r\n    const denormAmount = bnum(parseUnits(normalizedAmount, 18).toString())\r\n      .times(priceRate)\r\n      .toFixed(0, OldBigNumber.ROUND_UP);\r\n\r\n    return BigNumber.from(denormAmount);\r\n  }\r\n\r\n  // Solidity maths uses precison method for amp that must be replicated\r\n  private adjustAmp(amp: OldBigNumber): OldBigNumber {\r\n    return amp.times(this.AMP_PRECISION);\r\n  }\r\n\r\n  private get priceRates(): BigNumberish[] {\r\n    const tokenRates = this.calc.pool.value?.onchain?.tokenRates;\r\n    if (!tokenRates) return [];\r\n    return tokenRates.map(rate => parseUnits(rate, 18));\r\n  }\r\n}\r\n","import { weightedBPTForTokensZeroPriceImpact as _bptForTokensZeroPriceImpact } from '@balancer-labs/sdk';\r\nimport { formatUnits, parseUnits } from '@ethersproject/units';\r\nimport * as SDK from '@georgeroman/balancer-v2-pools';\r\nimport OldBigNumber from 'bignumber.js';\r\n\r\nimport { bnum } from '@/lib/utils';\r\n\r\nimport Calculator from './calculator.sevice';\r\nimport { PiOptions } from './calculator.sevice';\r\nimport { tokensListExclBpt } from '@/composables/usePool';\r\n\r\nexport default class Weighted {\r\n  calc: Calculator;\r\n\r\n  constructor(calculator) {\r\n    this.calc = calculator;\r\n  }\r\n\r\n  public exactTokensInForBPTOut(tokenAmounts: string[]): OldBigNumber {\r\n    const balances = this.calc.poolTokenBalances.map(b => bnum(b.toString()));\r\n    const weights = this.calc.poolTokenWeights.map(w => bnum(w.toString()));\r\n    const denormAmounts = this.calc.denormAmounts(\r\n      tokenAmounts,\r\n      this.calc.poolTokenDecimals\r\n    );\r\n    const amounts = denormAmounts.map(a => bnum(a.toString()));\r\n\r\n    return SDK.WeightedMath._calcBptOutGivenExactTokensIn(\r\n      balances,\r\n      weights,\r\n      amounts,\r\n      bnum(this.calc.poolTotalSupply.toString()),\r\n      bnum(this.calc.poolSwapFee.toString())\r\n    );\r\n  }\r\n\r\n  public bptInForExactTokensOut(tokenAmounts: string[]): OldBigNumber {\r\n    const balances = this.calc.poolTokenBalances.map(b => bnum(b.toString()));\r\n    const weights = this.calc.poolTokenWeights.map(w => bnum(w.toString()));\r\n    const denormAmounts = this.calc.denormAmounts(\r\n      tokenAmounts,\r\n      this.calc.poolTokenDecimals\r\n    );\r\n    const amounts = denormAmounts.map(a => bnum(a.toString()));\r\n\r\n    return SDK.WeightedMath._calcBptInGivenExactTokensOut(\r\n      balances,\r\n      weights,\r\n      amounts,\r\n      bnum(this.calc.poolTotalSupply.toString()),\r\n      bnum(this.calc.poolSwapFee.toString())\r\n    );\r\n  }\r\n\r\n  public bptInForExactTokenOut(\r\n    amount: string,\r\n    tokenIndex: number\r\n  ): OldBigNumber {\r\n    const tokenBalance = bnum(\r\n      this.calc.poolTokenBalances[tokenIndex].toString()\r\n    );\r\n    const tokenNormalizedWeight = bnum(\r\n      this.calc.poolTokenWeights[tokenIndex].toString()\r\n    );\r\n    const tokenAmountOut = bnum(\r\n      parseUnits(amount, this.calc.poolTokenDecimals[tokenIndex]).toString()\r\n    );\r\n    const bptTotalSupply = bnum(this.calc.poolTotalSupply.toString());\r\n    const swapFee = bnum(this.calc.poolSwapFee.toString());\r\n\r\n    return SDK.WeightedMath._calcBptInGivenExactTokenOut(\r\n      tokenBalance,\r\n      tokenNormalizedWeight,\r\n      tokenAmountOut,\r\n      bptTotalSupply,\r\n      swapFee\r\n    );\r\n  }\r\n\r\n  public exactBPTInForTokenOut(\r\n    bptAmount: string,\r\n    tokenIndex: number\r\n  ): OldBigNumber {\r\n    const tokenBalance = bnum(\r\n      this.calc.poolTokenBalances[tokenIndex].toString()\r\n    );\r\n    const tokenNormalizedWeight = bnum(\r\n      this.calc.poolTokenWeights[tokenIndex].toString()\r\n    );\r\n\r\n    return SDK.WeightedMath._calcTokenOutGivenExactBptIn(\r\n      tokenBalance,\r\n      tokenNormalizedWeight,\r\n      bnum(bptAmount),\r\n      bnum(this.calc.poolTotalSupply.toString()),\r\n      bnum(this.calc.poolSwapFee.toString())\r\n    );\r\n  }\r\n\r\n  public priceImpact(tokenAmounts: string[], opts: PiOptions): OldBigNumber {\r\n    let bptAmount, bptZeroPriceImpact;\r\n\r\n    if (this.calc.action === 'join') {\r\n      bptAmount = this.exactTokensInForBPTOut(tokenAmounts);\r\n      if (bptAmount < 0) return bnum(0);\r\n      bptZeroPriceImpact = this.bptForTokensZeroPriceImpact(tokenAmounts);\r\n\r\n      return bnum(1).minus(bptAmount.div(bptZeroPriceImpact));\r\n    } else {\r\n      // Single asset exit\r\n      if (opts.exactOut) {\r\n        bptAmount = this.bptInForExactTokensOut(tokenAmounts);\r\n        bptZeroPriceImpact = this.bptForTokensZeroPriceImpact(tokenAmounts);\r\n      } else {\r\n        bptAmount =\r\n          opts.queryBPT ||\r\n          parseUnits(this.calc.bptBalance, this.calc.poolDecimals).toString();\r\n        tokenAmounts = tokensListExclBpt(this.calc.pool.value).map((_, i) => {\r\n          if (i !== opts.tokenIndex) return '0';\r\n          const tokenAmount = this.exactBPTInForTokenOut(\r\n            bptAmount,\r\n            opts.tokenIndex\r\n          ).toString();\r\n          return formatUnits(\r\n            tokenAmount,\r\n            this.calc.poolTokenDecimals[opts.tokenIndex]\r\n          ).toString();\r\n        });\r\n        bptZeroPriceImpact = this.bptForTokensZeroPriceImpact(tokenAmounts);\r\n      }\r\n\r\n      return bnum(bptAmount).div(bptZeroPriceImpact).minus(1);\r\n    }\r\n  }\r\n\r\n  public bptForTokensZeroPriceImpact(tokenAmounts: string[]): OldBigNumber {\r\n    const denormAmounts = this.calc.denormAmounts(\r\n      tokenAmounts,\r\n      this.calc.poolTokenDecimals\r\n    );\r\n\r\n    return bnum(\r\n      _bptForTokensZeroPriceImpact(\r\n        this.calc.poolTokenBalances,\r\n        this.calc.poolTokenDecimals,\r\n        this.calc.poolTokenWeights,\r\n        denormAmounts,\r\n        this.calc.poolTotalSupply\r\n      ).toString()\r\n    );\r\n  }\r\n}\r\n","import { getAddress } from '@ethersproject/address';\r\nimport { BigNumber, BigNumberish } from '@ethersproject/bignumber';\r\nimport { formatUnits, parseUnits } from '@ethersproject/units';\r\nimport OldBigNumber from 'bignumber.js';\r\nimport { Ref, ref } from 'vue';\r\n\r\nimport {\r\n  isComposableStableLike,\r\n  isDeep,\r\n  isStable,\r\n  isStableLike,\r\n  tokensListExclBpt,\r\n} from '@/composables/usePool';\r\nimport { bnum, isSameAddress } from '@/lib/utils';\r\nimport { configService } from '@/services/config/config.service';\r\nimport { OnchainTokenDataMap, Pool } from '@/services/pool/types';\r\nimport { BalanceMap } from '@/services/token/concerns/balances.concern';\r\nimport { TokenInfoMap } from '@/types/TokenList';\r\n\r\nimport Stable from './stable';\r\nimport StablePhantom from './stable-phantom';\r\nimport Weighted from './weighted';\r\n\r\ninterface Amounts {\r\n  send: string[];\r\n  receive: string[];\r\n  fixedToken: number;\r\n}\r\n\r\nexport interface PiOptions {\r\n  exactOut?: boolean;\r\n  tokenIndex?: number | null;\r\n  queryBPT?: string;\r\n}\r\n\r\ntype PoolAction = 'join' | 'exit';\r\n\r\nexport default class CalculatorService {\r\n  types = ['send', 'receive'];\r\n  weighted: Weighted;\r\n  stable: Stable;\r\n  stablePhantom: StablePhantom;\r\n\r\n  constructor(\r\n    public pool: Ref<Pool>,\r\n    public allTokens: Ref<TokenInfoMap>,\r\n    public balances: Ref<BalanceMap>,\r\n    public action: PoolAction,\r\n    public useNativeAsset: Ref<boolean> = ref(false),\r\n    weightedClass = Weighted,\r\n    stableClass = Stable,\r\n    stablePhantomClass = StablePhantom,\r\n    public readonly config = configService\r\n  ) {\r\n    this.weighted = new weightedClass(this);\r\n    this.stable = new stableClass(this);\r\n    this.stablePhantom = new stablePhantomClass(this);\r\n  }\r\n\r\n  public priceImpact(\r\n    tokenAmounts: string[],\r\n    opts: PiOptions = { exactOut: false, tokenIndex: 0 }\r\n  ): OldBigNumber {\r\n    if (this.isStableLikePool) {\r\n      if (isDeep(this.pool.value)) {\r\n        return this.stablePhantom.priceImpact(tokenAmounts, opts);\r\n      } else {\r\n        return this.stable.priceImpact(tokenAmounts, opts);\r\n      }\r\n    }\r\n    return this.weighted.priceImpact(tokenAmounts, opts);\r\n  }\r\n\r\n  public exactTokensInForBPTOut(tokenAmounts: string[]): OldBigNumber {\r\n    if (this.isStableLikePool) {\r\n      return this.stable.exactTokensInForBPTOut(tokenAmounts);\r\n    }\r\n    return this.weighted.exactTokensInForBPTOut(tokenAmounts);\r\n  }\r\n\r\n  public exactBPTInForTokenOut(\r\n    bptAmount: string,\r\n    tokenIndex: number\r\n  ): OldBigNumber {\r\n    if (this.isStableLikePool) {\r\n      return this.stable.exactBPTInForTokenOut(bptAmount, tokenIndex);\r\n    }\r\n    return this.weighted.exactBPTInForTokenOut(bptAmount, tokenIndex);\r\n  }\r\n\r\n  public bptInForExactTokenOut(\r\n    amount: string,\r\n    tokenIndex: number\r\n  ): OldBigNumber {\r\n    if (this.isStableLikePool) {\r\n      return this.stable.bptInForExactTokenOut(amount, tokenIndex);\r\n    }\r\n    return this.weighted.bptInForExactTokenOut(amount, tokenIndex);\r\n  }\r\n\r\n  public propMax(): Amounts {\r\n    let maxAmounts: Amounts = {\r\n      send: [],\r\n      receive: [],\r\n      fixedToken: 0,\r\n    };\r\n    const type = this.action === 'join' ? 'send' : 'receive';\r\n\r\n    this.tokenAddresses.forEach((token, tokenIndex) => {\r\n      let hasBalance = true;\r\n      let balance;\r\n      if (token === this.config.network.nativeAsset.address) {\r\n        balance = bnum(this.balances.value[getAddress(token)])\r\n          .minus(this.config.network.nativeAsset.minTransactionBuffer)\r\n          .toString();\r\n      } else {\r\n        balance = this.balances.value[getAddress(token)] || '0';\r\n      }\r\n      const amounts = this.propAmountsGiven(balance, tokenIndex, type);\r\n\r\n      amounts.send.forEach((amount, amountIndex) => {\r\n        const greaterThanBalance = bnum(amount).gt(\r\n          this.balances.value[this.tokenOf(type, amountIndex)]\r\n        );\r\n        if (greaterThanBalance) hasBalance = false;\r\n      });\r\n\r\n      if (hasBalance) {\r\n        const currentMaxAmount = parseFloat(maxAmounts.send[tokenIndex] || '0');\r\n        const thisAmount = parseFloat(amounts.send[tokenIndex]);\r\n        if (thisAmount > currentMaxAmount) {\r\n          maxAmounts = amounts;\r\n          maxAmounts.fixedToken = tokenIndex;\r\n        }\r\n      }\r\n    });\r\n\r\n    return maxAmounts;\r\n  }\r\n\r\n  /**\r\n   * Calculates proportional amounts in/out given a fixed amount out/in based on\r\n   * the balances and totalSupply of the pool.\r\n   *\r\n   * @param {string} fixedAmount - The fixed amount in/out.\r\n   * @param {number} index - The pool token index for the fixedAmount.\r\n   * @param {string} type - If receive fixedAmount is tokenIn expecting bptOut, if\r\n   * send fixedAmount is bptIn expecting tokensOut.\r\n   */\r\n  public propAmountsGiven(\r\n    fixedAmount: string,\r\n    index: number,\r\n    type: 'send' | 'receive',\r\n    fixedRatioOverride?: {\r\n      bps: number;\r\n      value: string;\r\n      buffer: number;\r\n    }\r\n  ): Amounts {\r\n    if (fixedAmount.trim() === '')\r\n      return { send: [], receive: [], fixedToken: 0 };\r\n\r\n    const types = ['send', 'receive'];\r\n    const fixedTokenAddress = this.tokenOf(type, index);\r\n    const fixedToken = this.allTokens.value[fixedTokenAddress];\r\n    const fixedDenormAmount = parseUnits(fixedAmount, fixedToken?.decimals);\r\n    const fixedRatio = this.ratioOf(type, index);\r\n    const amounts = {\r\n      send: this.sendTokens.map(() => ''),\r\n      receive: this.receiveTokens.map(() => ''),\r\n      fixedToken: index,\r\n    };\r\n\r\n    amounts[type][index] = fixedAmount;\r\n\r\n    [this.sendRatios, this.receiveRatios].forEach((ratios, ratioType) => {\r\n      ratios.forEach((ratio, i) => {\r\n        if (i !== index || type !== types[ratioType]) {\r\n          const tokenAddress = this.tokenOf(types[ratioType], i);\r\n          const token = this.allTokens.value[tokenAddress];\r\n          let amount;\r\n          if (fixedRatioOverride) {\r\n            amount = fixedDenormAmount\r\n              .sub(fixedRatioOverride.buffer)\r\n              .mul(fixedRatioOverride.bps)\r\n              .div(10000)\r\n              .mul(ratio)\r\n              .div(fixedRatioOverride.value);\r\n          } else {\r\n            amount = fixedDenormAmount.mul(ratio).div(fixedRatio);\r\n          }\r\n          amounts[types[ratioType]][i] = formatUnits(amount, token?.decimals);\r\n        }\r\n      });\r\n    });\r\n\r\n    return amounts;\r\n  }\r\n\r\n  public denormAmounts(amounts: string[], decimals: number[]): BigNumber[] {\r\n    return amounts.map((a, i) => parseUnits(a, decimals[i]));\r\n  }\r\n\r\n  public tokenOf(type: string, index: number) {\r\n    return getAddress(this[`${type}Tokens`][index]);\r\n  }\r\n\r\n  public ratioOf(type: string, index: number) {\r\n    return this[`${type}Ratios`][index];\r\n  }\r\n\r\n  public get tokenAddresses(): string[] {\r\n    const tokensList = tokensListExclBpt(this.pool.value);\r\n    if (this.useNativeAsset.value) {\r\n      return tokensList.map(address => {\r\n        if (isSameAddress(address, this.config.network.addresses.weth))\r\n          return this.config.network.nativeAsset.address;\r\n        return address;\r\n      });\r\n    }\r\n    return tokensList;\r\n  }\r\n\r\n  public get poolTokens(): OnchainTokenDataMap {\r\n    if (!this.pool.value?.onchain?.tokens) return {};\r\n    return this.pool.value.onchain.tokens;\r\n  }\r\n\r\n  public get poolTokenBalances(): BigNumber[] {\r\n    if (!this.pool.value?.onchain?.tokens) return [];\r\n\r\n    const normalizedBalances = Object.values(this.poolTokens).map(\r\n      t => t.balance\r\n    );\r\n    return normalizedBalances.map((balance, i) =>\r\n      parseUnits(balance, this.poolTokenDecimals[i])\r\n    );\r\n  }\r\n\r\n  public get poolTokenDecimals(): number[] {\r\n    return Object.values(this.poolTokens).map(t => t.decimals);\r\n  }\r\n\r\n  public get poolTokenWeights(): BigNumber[] {\r\n    const normalizedWeights = Object.values(this.poolTokens).map(t => t.weight);\r\n    return normalizedWeights.map(weight => parseUnits(weight.toString(), 18));\r\n  }\r\n\r\n  public get poolTotalSupply(): BigNumber {\r\n    return parseUnits(\r\n      this.pool.value?.onchain?.totalSupply || '0',\r\n      this.poolDecimals\r\n    );\r\n  }\r\n\r\n  public get poolSwapFee(): BigNumber {\r\n    return parseUnits(this.pool.value?.onchain?.swapFee || '0', 18);\r\n  }\r\n\r\n  public get poolDecimals(): number {\r\n    return this.pool.value?.onchain?.decimals || 18;\r\n  }\r\n\r\n  public get bptBalance(): string {\r\n    return this.balances.value[getAddress(this.pool.value.address)];\r\n  }\r\n\r\n  public get isStablePool(): boolean {\r\n    return isStable(this.pool.value.poolType);\r\n  }\r\n\r\n  public get isStableLikePool(): boolean {\r\n    return isStableLike(this.pool.value.poolType);\r\n  }\r\n\r\n  public get isComposableStableLikePool(): boolean {\r\n    return isComposableStableLike(this.pool.value.poolType);\r\n  }\r\n\r\n  public get sendTokens(): string[] {\r\n    if (this.action === 'join') return this.tokenAddresses;\r\n    return [this.pool.value.address];\r\n  }\r\n\r\n  public get receiveTokens(): string[] {\r\n    if (this.action === 'join') return [this.pool.value.address];\r\n    return this.tokenAddresses;\r\n  }\r\n\r\n  public get sendRatios(): BigNumberish[] {\r\n    if (this.action === 'join') return this.poolTokenBalances;\r\n    return [this.poolTotalSupply];\r\n  }\r\n\r\n  public get receiveRatios(): BigNumberish[] {\r\n    if (this.action === 'join') return [this.poolTotalSupply];\r\n    return this.poolTokenBalances;\r\n  }\r\n}\r\n","import { StablePoolEncoder } from '@balancer-labs/sdk';\r\nimport { BigNumberish } from '@ethersproject/bignumber';\r\n\r\nexport type JoinStablePoolInit = {\r\n  kind: 'Init';\r\n  amountsIn: BigNumberish[];\r\n};\r\n\r\nexport type JoinStablePoolExactTokensInForBPTOut = {\r\n  kind: 'ExactTokensInForBPTOut';\r\n  amountsIn: BigNumberish[];\r\n  minimumBPT: BigNumberish;\r\n};\r\n\r\nexport type JoinStablePoolTokenInForExactBPTOut = {\r\n  kind: 'TokenInForExactBPTOut';\r\n  bptAmountOut: BigNumberish;\r\n  enterTokenIndex: number;\r\n};\r\n\r\nexport function encodeJoinStablePool(\r\n  joinData:\r\n    | JoinStablePoolInit\r\n    | JoinStablePoolExactTokensInForBPTOut\r\n    | JoinStablePoolTokenInForExactBPTOut\r\n): string {\r\n  if (joinData.kind == 'Init') {\r\n    return StablePoolEncoder.joinInit(joinData.amountsIn);\r\n  } else if (joinData.kind == 'ExactTokensInForBPTOut') {\r\n    return StablePoolEncoder.joinExactTokensInForBPTOut(\r\n      joinData.amountsIn,\r\n      joinData.minimumBPT\r\n    );\r\n  } else {\r\n    return StablePoolEncoder.joinTokenInForExactBPTOut(\r\n      joinData.bptAmountOut,\r\n      joinData.enterTokenIndex\r\n    );\r\n  }\r\n}\r\n\r\nexport type ExitStablePoolExactBPTInForOneTokenOut = {\r\n  kind: 'ExactBPTInForOneTokenOut';\r\n  bptAmountIn: BigNumberish;\r\n  exitTokenIndex: number;\r\n};\r\n\r\nexport type ExitStablePoolExactBPTInForTokensOut = {\r\n  kind: 'ExactBPTInForTokensOut';\r\n  bptAmountIn: BigNumberish;\r\n};\r\n\r\nexport type ExitStablePoolBPTInForExactTokensOut = {\r\n  kind: 'BPTInForExactTokensOut';\r\n  amountsOut: BigNumberish[];\r\n  maxBPTAmountIn: BigNumberish;\r\n};\r\n\r\nexport function encodeExitStablePool(\r\n  exitData:\r\n    | ExitStablePoolExactBPTInForOneTokenOut\r\n    | ExitStablePoolExactBPTInForTokensOut\r\n    | ExitStablePoolBPTInForExactTokensOut\r\n): string {\r\n  if (exitData.kind == 'ExactBPTInForOneTokenOut') {\r\n    return StablePoolEncoder.exitExactBPTInForOneTokenOut(\r\n      exitData.bptAmountIn,\r\n      exitData.exitTokenIndex\r\n    );\r\n  } else if (exitData.kind == 'ExactBPTInForTokensOut') {\r\n    return StablePoolEncoder.exitExactBPTInForTokensOut(exitData.bptAmountIn);\r\n  } else {\r\n    return StablePoolEncoder.exitBPTInForExactTokensOut(\r\n      exitData.amountsOut,\r\n      exitData.maxBPTAmountIn\r\n    );\r\n  }\r\n}\r\n","import { WeightedPoolEncoder } from '@balancer-labs/sdk';\r\nimport { BigNumberish } from '@ethersproject/bignumber';\r\n\r\nexport type JoinWeightedPoolInit = {\r\n  kind: 'Init';\r\n  amountsIn: BigNumberish[];\r\n};\r\n\r\nexport type JoinWeightedPoolExactTokensInForBPTOut = {\r\n  kind: 'ExactTokensInForBPTOut';\r\n  amountsIn: BigNumberish[];\r\n  minimumBPT: BigNumberish;\r\n};\r\n\r\nexport type JoinWeightedPoolTokenInForExactBPTOut = {\r\n  kind: 'TokenInForExactBPTOut';\r\n  bptAmountOut: BigNumberish;\r\n  enterTokenIndex: number;\r\n};\r\n\r\nexport type JoinWeightedPoolAllTokensInForExactBPTOut = {\r\n  kind: 'AllTokensInForExactBPTOut';\r\n  bptAmountOut: BigNumberish;\r\n};\r\n\r\nexport type JoinData =\r\n  | JoinWeightedPoolInit\r\n  | JoinWeightedPoolExactTokensInForBPTOut\r\n  | JoinWeightedPoolTokenInForExactBPTOut\r\n  | JoinWeightedPoolAllTokensInForExactBPTOut;\r\n\r\nexport type ExitData =\r\n  | ExitWeightedPoolExactBPTInForOneTokenOut\r\n  | ExitWeightedPoolExactBPTInForTokensOut\r\n  | ExitWeightedPoolBPTInForExactTokensOut;\r\n\r\nexport function encodeJoinWeightedPool(joinData: JoinData): string {\r\n  if (joinData.kind == 'Init') {\r\n    return WeightedPoolEncoder.joinInit(joinData.amountsIn);\r\n  } else if (joinData.kind == 'ExactTokensInForBPTOut') {\r\n    return WeightedPoolEncoder.joinExactTokensInForBPTOut(\r\n      joinData.amountsIn,\r\n      joinData.minimumBPT\r\n    );\r\n  } else if (joinData.kind == 'AllTokensInForExactBPTOut') {\r\n    return WeightedPoolEncoder.joinAllTokensInForExactBPTOut(\r\n      joinData.bptAmountOut\r\n    );\r\n  } else {\r\n    return WeightedPoolEncoder.joinTokenInForExactBPTOut(\r\n      joinData.bptAmountOut,\r\n      joinData.enterTokenIndex\r\n    );\r\n  }\r\n}\r\n\r\nexport type ExitWeightedPoolExactBPTInForOneTokenOut = {\r\n  kind: 'ExactBPTInForOneTokenOut';\r\n  bptAmountIn: BigNumberish;\r\n  exitTokenIndex: number;\r\n};\r\n\r\nexport type ExitWeightedPoolExactBPTInForTokensOut = {\r\n  kind: 'ExactBPTInForTokensOut';\r\n  bptAmountIn: BigNumberish;\r\n};\r\n\r\nexport type ExitWeightedPoolBPTInForExactTokensOut = {\r\n  kind: 'BPTInForExactTokensOut';\r\n  amountsOut: BigNumberish[];\r\n  maxBPTAmountIn: BigNumberish;\r\n};\r\n\r\nexport function encodeExitWeightedPool(exitData: ExitData): string {\r\n  if (exitData.kind == 'ExactBPTInForOneTokenOut') {\r\n    return WeightedPoolEncoder.exitExactBPTInForOneTokenOut(\r\n      exitData.bptAmountIn,\r\n      exitData.exitTokenIndex\r\n    );\r\n  } else if (exitData.kind == 'ExactBPTInForTokensOut') {\r\n    return WeightedPoolEncoder.exitExactBPTInForTokensOut(exitData.bptAmountIn);\r\n  } else {\r\n    return WeightedPoolEncoder.exitBPTInForExactTokensOut(\r\n      exitData.amountsOut,\r\n      exitData.maxBPTAmountIn\r\n    );\r\n  }\r\n}\r\n","import { ComposableStablePoolEncoder } from '@balancer-labs/sdk';\r\nimport { BigNumberish } from '@ethersproject/bignumber';\r\n\r\nexport type JoinStablePoolInit = {\r\n  kind: 'Init';\r\n  amountsIn: BigNumberish[];\r\n};\r\n\r\nexport type JoinStablePoolExactTokensInForBPTOut = {\r\n  kind: 'ExactTokensInForBPTOut';\r\n  amountsIn: BigNumberish[];\r\n  minimumBPT: BigNumberish;\r\n};\r\n\r\nexport type JoinStablePoolTokenInForExactBPTOut = {\r\n  kind: 'TokenInForExactBPTOut';\r\n  bptAmountOut: BigNumberish;\r\n  enterTokenIndex: number;\r\n};\r\n\r\nexport function encodeJoinComposableStablePool(\r\n  joinData:\r\n    | JoinStablePoolInit\r\n    | JoinStablePoolExactTokensInForBPTOut\r\n    | JoinStablePoolTokenInForExactBPTOut\r\n): string {\r\n  if (joinData.kind == 'Init') {\r\n    return ComposableStablePoolEncoder.joinInit(joinData.amountsIn);\r\n  } else if (joinData.kind == 'ExactTokensInForBPTOut') {\r\n    return ComposableStablePoolEncoder.joinExactTokensInForBPTOut(\r\n      joinData.amountsIn,\r\n      joinData.minimumBPT\r\n    );\r\n  } else {\r\n    return ComposableStablePoolEncoder.joinTokenInForExactBPTOut(\r\n      joinData.bptAmountOut,\r\n      joinData.enterTokenIndex\r\n    );\r\n  }\r\n}\r\n\r\nexport type ExitStablePoolExactBPTInForOneTokenOut = {\r\n  kind: 'ExactBPTInForOneTokenOut';\r\n  bptAmountIn: BigNumberish;\r\n  exitTokenIndex: number;\r\n};\r\n\r\nexport type ExitStablePoolBPTInForExactTokensOut = {\r\n  kind: 'BPTInForExactTokensOut';\r\n  amountsOut: BigNumberish[];\r\n  maxBPTAmountIn: BigNumberish;\r\n};\r\n\r\nexport function encodeExitComposableStablePool(\r\n  exitData:\r\n    | ExitStablePoolExactBPTInForOneTokenOut\r\n    | ExitStablePoolBPTInForExactTokensOut\r\n): string {\r\n  if (exitData.kind == 'ExactBPTInForOneTokenOut') {\r\n    return ComposableStablePoolEncoder.exitExactBPTInForOneTokenOut(\r\n      exitData.bptAmountIn,\r\n      exitData.exitTokenIndex\r\n    );\r\n  }\r\n\r\n  return ComposableStablePoolEncoder.exitBPTInForExactTokensOut(\r\n    exitData.amountsOut,\r\n    exitData.maxBPTAmountIn\r\n  );\r\n}\r\n","import { BigNumber, BigNumberish } from '@ethersproject/bignumber';\r\nimport { AddressZero } from '@ethersproject/constants';\r\nimport { parseUnits } from '@ethersproject/units';\r\nimport { Ref } from 'vue';\r\n\r\nimport {\r\n  preMintedBptIndex,\r\n  isComposableStable,\r\n  isStableLike,\r\n  tokensListExclBpt,\r\n} from '@/composables/usePool';\r\nimport { includesAddress, isSameAddress } from '@/lib/utils';\r\nimport { encodeExitStablePool } from '@/lib/utils/balancer/stablePoolEncoding';\r\nimport { encodeExitWeightedPool } from '@/lib/utils/balancer/weightedPoolEncoding';\r\nimport ConfigService from '@/services/config/config.service';\r\nimport { Pool } from '@/services/pool/types';\r\n\r\nimport PoolExchange from '../exchange.service';\r\nimport { encodeExitComposableStablePool } from '@/lib/utils/balancer/composableStablePoolEncoding';\r\n\r\nexport default class ExitParams {\r\n  private pool: Ref<Pool>;\r\n  private config: ConfigService;\r\n  private isStableLike: boolean;\r\n  private dataEncodeFn: (data: any) => string;\r\n  private toInternalBalance = false;\r\n\r\n  constructor(exchange: PoolExchange) {\r\n    this.pool = exchange.pool;\r\n    this.config = exchange.config;\r\n    this.isStableLike = isStableLike(exchange.pool.value.poolType);\r\n    this.dataEncodeFn = this.isStableLike\r\n      ? isComposableStable(exchange.pool.value.poolType)\r\n        ? encodeExitComposableStablePool\r\n        : encodeExitStablePool\r\n      : encodeExitWeightedPool;\r\n  }\r\n\r\n  public serialize(\r\n    account: string,\r\n    amountsOut: string[],\r\n    tokensOut: string[],\r\n    bptIn: string,\r\n    exitTokenIndex: number | null,\r\n    exactOut: boolean\r\n  ): any[] {\r\n    const parsedAmountsOut = this.parseAmounts(amountsOut);\r\n    const parsedBptIn = parseUnits(\r\n      bptIn,\r\n      this.pool.value?.onchain?.decimals || 18\r\n    );\r\n\r\n    const assets = this.parseTokensOut(tokensOut);\r\n    const txData = this.txData(\r\n      parsedAmountsOut,\r\n      parsedBptIn,\r\n      exitTokenIndex,\r\n      exactOut\r\n    );\r\n\r\n    const minAmountsOut = parsedAmountsOut.map(amount =>\r\n      // This is a hack to get around rounding issues for MetaStable pools\r\n      // TODO: do this more elegantly\r\n      amount.gt(0) ? amount.sub(1) : amount\r\n    );\r\n    const poolTokenItselfIndex = preMintedBptIndex(this.pool.value);\r\n\r\n    if (\r\n      isComposableStable(this.pool.value.poolType) &&\r\n      poolTokenItselfIndex !== undefined\r\n    ) {\r\n      minAmountsOut.splice(\r\n        poolTokenItselfIndex,\r\n        0,\r\n        parseUnits('0', this.pool.value.onchain?.decimals || 18)\r\n      );\r\n    }\r\n\r\n    return [\r\n      this.pool.value.id,\r\n      account,\r\n      account,\r\n      {\r\n        assets,\r\n        minAmountsOut,\r\n        userData: txData,\r\n        toInternalBalance: this.toInternalBalance,\r\n      },\r\n    ];\r\n  }\r\n\r\n  private parseAmounts(amounts: string[]): BigNumber[] {\r\n    const tokensList = tokensListExclBpt(this.pool.value);\r\n\r\n    try {\r\n      return amounts.map((amount, i) => {\r\n        const token = tokensList[i];\r\n        return parseUnits(\r\n          amount,\r\n          this.pool.value?.onchain?.tokens?.[token]?.decimals\r\n        );\r\n      });\r\n    } catch (error) {\r\n      console.error('Failed to parse amountsOut', error);\r\n      throw new Error('Failed to parse amounts out.');\r\n    }\r\n  }\r\n\r\n  private parseTokensOut(tokensOut: string[]): string[] {\r\n    const nativeAsset = this.config.network.nativeAsset;\r\n    const preMintedBptIdx = preMintedBptIndex(this.pool.value);\r\n    const newTokensOut = tokensOut.map(address =>\r\n      isSameAddress(address, nativeAsset.address) ? AddressZero : address\r\n    );\r\n\r\n    if (\r\n      isComposableStable(this.pool.value.poolType) &&\r\n      preMintedBptIdx !== undefined &&\r\n      !includesAddress(newTokensOut, this.pool.value.address)\r\n    ) {\r\n      newTokensOut.splice(preMintedBptIdx, 0, this.pool.value.address);\r\n    }\r\n\r\n    return newTokensOut;\r\n  }\r\n\r\n  private txData(\r\n    amountsOut: BigNumberish[],\r\n    bptIn: BigNumberish,\r\n    exitTokenIndex: number | null,\r\n    exactOut: boolean\r\n  ): string {\r\n    const isSingleAssetOut = exitTokenIndex !== null;\r\n\r\n    if (isSingleAssetOut) {\r\n      return this.dataEncodeFn({\r\n        kind: 'ExactBPTInForOneTokenOut',\r\n        bptAmountIn: bptIn,\r\n        exitTokenIndex,\r\n      });\r\n    } else if (exactOut) {\r\n      return this.dataEncodeFn({\r\n        amountsOut,\r\n        maxBPTAmountIn: bptIn,\r\n      });\r\n    } else {\r\n      // Proportional exit\r\n      if (isComposableStable(this.pool.value.poolType)) {\r\n        return this.dataEncodeFn({\r\n          amountsOut,\r\n          maxBPTAmountIn: bptIn,\r\n        });\r\n      }\r\n      return this.dataEncodeFn({\r\n        kind: 'ExactBPTInForTokensOut',\r\n        bptAmountIn: bptIn,\r\n      });\r\n    }\r\n  }\r\n}\r\n","import { BigNumberish } from '@ethersproject/bignumber';\r\nimport { AddressZero } from '@ethersproject/constants';\r\nimport { parseUnits } from '@ethersproject/units';\r\nimport { Ref } from 'vue';\r\n\r\nimport {\r\n  preMintedBptIndex,\r\n  isComposableStable,\r\n  isManaged,\r\n  isStableLike,\r\n} from '@/composables/usePool';\r\nimport { includesAddress, isSameAddress } from '@/lib/utils';\r\nimport { encodeJoinStablePool } from '@/lib/utils/balancer/stablePoolEncoding';\r\nimport { encodeJoinWeightedPool } from '@/lib/utils/balancer/weightedPoolEncoding';\r\nimport ConfigService from '@/services/config/config.service';\r\nimport { Pool } from '@/services/pool/types';\r\n\r\nimport PoolExchange from '../exchange.service';\r\nimport { encodeJoinComposableStablePool } from '@/lib/utils/balancer/composableStablePoolEncoding';\r\n\r\nexport default class JoinParams {\r\n  private pool: Ref<Pool>;\r\n  private config: ConfigService;\r\n  private isStableLikePool: boolean;\r\n  private isManagedPool: boolean;\r\n  private isSwapEnabled: boolean;\r\n  private dataEncodeFn: (data: any) => string;\r\n  private fromInternalBalance = false;\r\n\r\n  constructor(exchange: PoolExchange) {\r\n    this.pool = exchange.pool;\r\n    this.config = exchange.config;\r\n    this.isStableLikePool = isStableLike(this.pool.value.poolType);\r\n    this.isManagedPool = isManaged(this.pool.value.poolType);\r\n    this.isSwapEnabled =\r\n      this.isManagedPool && !!this.pool.value?.onchain?.swapEnabled;\r\n    this.dataEncodeFn = this.isStableLikePool\r\n      ? isComposableStable(exchange.pool.value.poolType)\r\n        ? encodeJoinComposableStablePool\r\n        : encodeJoinStablePool\r\n      : encodeJoinWeightedPool;\r\n  }\r\n\r\n  public serialize(\r\n    account: string,\r\n    amountsIn: string[],\r\n    tokensIn: string[],\r\n    bptOut: string\r\n  ): any[] {\r\n    const parsedAmountsIn = this.parseAmounts(amountsIn, tokensIn);\r\n    const parsedBptOut = parseUnits(\r\n      bptOut,\r\n      this.pool.value?.onchain?.decimals || 18\r\n    );\r\n\r\n    const txData = this.txData(parsedAmountsIn, parsedBptOut);\r\n    const assets = this.parseTokensIn(tokensIn);\r\n\r\n    const poolTokenItselfIndex = preMintedBptIndex(this.pool.value);\r\n    const maxAmountsIn = [...parsedAmountsIn];\r\n\r\n    if (\r\n      isComposableStable(this.pool.value.poolType) &&\r\n      poolTokenItselfIndex !== undefined\r\n    ) {\r\n      maxAmountsIn.splice(\r\n        poolTokenItselfIndex,\r\n        0,\r\n        parseUnits('0', this.pool.value.onchain?.decimals || 18)\r\n      );\r\n    }\r\n\r\n    return [\r\n      this.pool.value.id,\r\n      account,\r\n      account,\r\n      {\r\n        assets,\r\n        maxAmountsIn,\r\n        userData: txData,\r\n        fromInternalBalance: this.fromInternalBalance,\r\n      },\r\n    ];\r\n  }\r\n\r\n  public value(amountsIn: string[], tokensIn: string[]): BigNumberish {\r\n    let value = '0';\r\n    const nativeAsset = this.config.network.nativeAsset;\r\n\r\n    amountsIn.forEach((amount, i) => {\r\n      if (tokensIn[i] === nativeAsset.address) {\r\n        value = amount;\r\n      }\r\n    });\r\n\r\n    return parseUnits(value, nativeAsset.decimals);\r\n  }\r\n\r\n  private parseAmounts(amounts: string[], tokensIn: string[]): BigNumberish[] {\r\n    const nativeAsset = this.config.network.nativeAsset;\r\n\r\n    const parsedAmounts = amounts.map((amount, i) => {\r\n      const token = tokensIn[i];\r\n      // In WETH pools, tokenIn can include ETH so we need to check for this\r\n      // and return the correct decimals.\r\n      const decimals = isSameAddress(nativeAsset.address, token)\r\n        ? nativeAsset.decimals\r\n        : this.pool.value?.onchain?.tokens?.[token]?.decimals || 18;\r\n\r\n      return parseUnits(amount, decimals);\r\n    });\r\n\r\n    return parsedAmounts;\r\n  }\r\n\r\n  private parseTokensIn(tokensIn: string[]): string[] {\r\n    const nativeAsset = this.config.network.nativeAsset;\r\n    const poolTokenItselfIndex = preMintedBptIndex(this.pool.value);\r\n    const newTokensIn = tokensIn.map(address =>\r\n      isSameAddress(address, nativeAsset.address) ? AddressZero : address\r\n    );\r\n\r\n    if (\r\n      isComposableStable(this.pool.value.poolType) &&\r\n      poolTokenItselfIndex !== undefined &&\r\n      !includesAddress(newTokensIn, this.pool.value.address)\r\n    ) {\r\n      newTokensIn.splice(poolTokenItselfIndex, 0, this.pool.value.address);\r\n    }\r\n    return newTokensIn;\r\n  }\r\n\r\n  private txData(amountsIn: BigNumberish[], minimumBPT: BigNumberish): string {\r\n    if ((this.pool.value?.onchain?.totalSupply || '0') === '0') {\r\n      return this.dataEncodeFn({ kind: 'Init', amountsIn });\r\n    } else {\r\n      // Managed Pools can only be joined proportionally if swapping is halted\r\n      // This code assumes the UI has disabled non-proportional \"exact in for BPT out\"\r\n      // joins in this case\r\n      if (this.isManagedPool && !this.isSwapEnabled) {\r\n        return this.dataEncodeFn({\r\n          kind: 'AllTokensInForExactBPTOut',\r\n          bptAmountOut: minimumBPT,\r\n        });\r\n      } else {\r\n        return this.dataEncodeFn({\r\n          kind: 'ExactTokensInForBPTOut',\r\n          amountsIn,\r\n          minimumBPT,\r\n        });\r\n      }\r\n    }\r\n  }\r\n}\r\n","import {\r\n  BalancerHelpers__factory,\r\n  Vault__factory,\r\n} from '@balancer-labs/typechain';\r\nimport { TransactionResponse } from '@ethersproject/abstract-provider';\r\nimport { JsonRpcSigner } from '@ethersproject/providers';\r\nimport { Ref } from 'vue';\r\n\r\nimport ConfigService, { configService } from '@/services/config/config.service';\r\nimport { Pool } from '@/services/pool/types';\r\n\r\nimport ExitParams from './serializers/ExitParams';\r\nimport JoinParams from './serializers/JoinParams';\r\nimport { TransactionBuilder } from '@/services/web3/transactions/transaction.builder';\r\nimport { BigNumber } from 'ethers';\r\n\r\nexport default class ExchangeService {\r\n  pool: Ref<Pool>;\r\n  vaultAddress: string;\r\n  helpersAddress: string;\r\n\r\n  constructor(\r\n    pool: Ref<Pool>,\r\n    public readonly config: ConfigService = configService\r\n  ) {\r\n    this.pool = pool;\r\n    this.vaultAddress = this.config.network.addresses.vault;\r\n    this.helpersAddress = this.config.network.addresses.balancerHelpers;\r\n  }\r\n\r\n  public async queryJoin(\r\n    signer: JsonRpcSigner,\r\n    amountsIn: string[],\r\n    tokensIn: string[],\r\n    bptOut = '0'\r\n  ): Promise<{ bptOut: BigNumber; amountsIn: BigNumber[] }> {\r\n    const account = await signer.getAddress();\r\n\r\n    const params = this.joinParams.serialize(\r\n      account,\r\n      amountsIn,\r\n      tokensIn,\r\n      bptOut\r\n    );\r\n\r\n    const txBuilder = new TransactionBuilder(signer);\r\n    return await txBuilder.contract.callStatic({\r\n      contractAddress: this.helpersAddress,\r\n      abi: BalancerHelpers__factory.abi,\r\n      action: 'queryJoin',\r\n      params,\r\n    });\r\n  }\r\n\r\n  public async join(\r\n    signer: JsonRpcSigner,\r\n    amountsIn: string[],\r\n    tokensIn: string[],\r\n    bptOut = '0'\r\n  ): Promise<TransactionResponse> {\r\n    const account = await signer.getAddress();\r\n\r\n    const params = this.joinParams.serialize(\r\n      account,\r\n      amountsIn,\r\n      tokensIn,\r\n      bptOut\r\n    );\r\n    const value = this.joinParams.value(amountsIn, tokensIn);\r\n\r\n    const txBuilder = new TransactionBuilder(signer);\r\n    return await txBuilder.contract.sendTransaction({\r\n      contractAddress: this.vaultAddress,\r\n      abi: Vault__factory.abi,\r\n      action: 'joinPool',\r\n      params,\r\n      options: { value },\r\n    });\r\n  }\r\n\r\n  public async queryExit(\r\n    signer: JsonRpcSigner,\r\n    amountsOut: string[],\r\n    tokensOut: string[],\r\n    bptIn: string,\r\n    exitTokenIndex: number | null,\r\n    exactOut: boolean\r\n  ): Promise<{ bptIn: BigNumber; amountsOut: BigNumber[] }> {\r\n    const account = await signer.getAddress();\r\n\r\n    const params = this.exitParams.serialize(\r\n      account,\r\n      amountsOut,\r\n      tokensOut,\r\n      bptIn,\r\n      exitTokenIndex,\r\n      exactOut\r\n    );\r\n\r\n    const txBuilder = new TransactionBuilder(signer);\r\n    return await txBuilder.contract.callStatic({\r\n      contractAddress: this.helpersAddress,\r\n      abi: BalancerHelpers__factory.abi,\r\n      action: 'queryExit',\r\n      params,\r\n    });\r\n  }\r\n\r\n  public async exit(\r\n    signer: JsonRpcSigner,\r\n    amountsOut: string[],\r\n    tokensOut: string[],\r\n    bptIn: string,\r\n    exitTokenIndex: number | null,\r\n    exactOut: boolean\r\n  ): Promise<TransactionResponse> {\r\n    const account = await signer.getAddress();\r\n\r\n    const params = this.exitParams.serialize(\r\n      account,\r\n      amountsOut,\r\n      tokensOut,\r\n      bptIn,\r\n      exitTokenIndex,\r\n      exactOut\r\n    );\r\n\r\n    const txBuilder = new TransactionBuilder(signer);\r\n    return await txBuilder.contract.sendTransaction({\r\n      contractAddress: this.vaultAddress,\r\n      abi: Vault__factory.abi,\r\n      action: 'exitPool',\r\n      params,\r\n    });\r\n  }\r\n\r\n  private get joinParams() {\r\n    return new JoinParams(this);\r\n  }\r\n\r\n  private get exitParams() {\r\n    return new ExitParams(this);\r\n  }\r\n}\r\n"],"names":["usePromiseSequence","promises","ref","processing","processAll","i","subgraph","graphql_request_1","require$$0","getPool","poolId","blockNumber","testnet","data","query","result","exports","bignumber_js_1","bn","value","scale","decimalPlaces","scaleAll","values","x","shallowCopy","obj","shallowCopyAll","objs","big_number_1","add","a","b","sub","max","min","mul","div","roundUp","divDown","divUp","base","math","require$$1","BasePool","params","swapFeePercentage","amount","decimals","ONE_18","ONE_20","ONE_36","MAX_NATURAL_EXPONENT","MIN_NATURAL_EXPONENT","LN_36_LOWER_BOUND","LN_36_UPPER_BOUND","MILD_EXPONENT_BOUND","x0","a0","x1","a1","x2","a2","x3","a3","x4","a4","x5","a5","x6","a6","x7","a7","x8","a8","x9","a9","x10","a10","x11","a11","pow","y","logx_times_y","ln_36_x","_ln_36","_ln","exp","firstAN","product","seriesSum","term","log","arg","logBase","logArg","ln","sum","z","z_squared","num","logExp","mulDown","mulUp","powDown","raw","maxError","powUp","complement","fp","require$$2","_calculateInvariant","amplificationParameter","balances","numTokens","prevInvariant","invariant","ampTimesTotal","P_D","j","_calcOutGivenIn","tokenIndexIn","tokenIndexOut","tokenAmountIn","finalBalanceOut","_getTokenBalanceGivenInvariantAndAllOtherBalances","_calcInGivenOut","tokenAmountOut","finalBalanceIn","amountIn","_calcBptOutGivenExactTokensIn","amp","amountsIn","bptTotalSupply","sumBalances","balanceRatiosWithFee","invariantRatioWithFees","currentWeight","newBalances","amountInWithoutFee","nonTaxableAmount","taxableAmount","currentInvariant","newInvariant","invariantRatio","_calcTokenInGivenExactBptOut","tokenIndex","bptAmountOut","newBalanceTokenIndex","taxablePercentage","_calcBptInGivenExactTokensOut","amountsOut","balanceRatiosWithoutFee","invariantRatioWithoutFees","amountOutWithFee","_calcTokenOutGivenExactBptIn","bptAmountIn","amountOutWithoutFee","_calcTokensOutGivenExactBptIn","bptRatio","_calcDueTokenProtocolSwapFeeAmount","lastInvariant","protocolSwapFeePercentage","finalBalanceFeeToken","accumulatedTokenSwapFees","inv2","c","prevTokenBalance","tokenBalance","stable","index_1","common_1","base_1","require$$3","require$$4","StablePool","pool","id","address","tokens","token","tokenInSymbol","tokenOutSymbol","t","tokenIn","tokenOut","scaledAmountOut","amountOut","scaledAmountIn","scaledBptOut","bptOut","bptIn","scaledBptIn","MAX_IN_RATIO","MAX_OUT_RATIO","MAX_INVARIANT_RATIO","MIN_INVARIANT_RATIO","normalizedWeights","balanceIn","weightIn","balanceOut","weightOut","denominator","exponent","power","ratio","swapFee","balanceRatio","balance","normalizedWeight","previousInvariant","tokenAccruedFees","_calcBptOutGivenExactTokenIn","tokenBalanceRatioWithoutFee","weightedBalanceRatio","tokenBalancePercentageExcess","swapFeeExcess","amountInAfterFee","tokenBalanceRatio","_calcBptInGivenExactTokenOut","amountOutBeforeFee","weighted","WeightedPool","normalizedSum","src","WeightedMath_1","StableMath_1","stable_1","StableMath","weighted_1","WeightedMath","Stable","calculator","__publicField","bnum","tokenAmounts","_c","_b","_a","ampAdjusted","amounts","priceRate","SDK.StableMath","OldBigNumber","error","bptAmount","tokenOutAddress","tokensListExclBpt","tokenOutDecimals","selectByAddress","tokenOutPriceRate","isSameAddress","_e","_d","normalizedAmountIn","formatUnits","opts","bptZeroPriceImpact","parseUnits","_","tokenAmount","BigNumber","denormAmounts","normalizedBalance","bptZeroImpact","_bptForTokensZeroPriceImpact","scaledBalance","normalizedSupply","scaledSupply","normalizedAmount","denormAmount","rounding","amountAfterPriceRate","scaledAmount","StablePhantom","tokenRates","rate","Weighted","weights","w","SDK.WeightedMath","tokenNormalizedWeight","CalculatorService","allTokens","action","useNativeAsset","weightedClass","stableClass","stablePhantomClass","config","configService","isDeep","maxAmounts","type","hasBalance","getAddress","amountIndex","currentMaxAmount","fixedAmount","index","fixedRatioOverride","types","fixedTokenAddress","fixedToken","fixedDenormAmount","fixedRatio","ratios","ratioType","tokenAddress","tokensList","weight","isStable","isStableLike","isComposableStableLike","encodeJoinStablePool","joinData","StablePoolEncoder","encodeExitStablePool","exitData","encodeJoinWeightedPool","WeightedPoolEncoder","encodeExitWeightedPool","encodeJoinComposableStablePool","ComposableStablePoolEncoder","encodeExitComposableStablePool","ExitParams","exchange","isComposableStable","account","tokensOut","exitTokenIndex","exactOut","parsedAmountsOut","parsedBptIn","assets","txData","minAmountsOut","poolTokenItselfIndex","preMintedBptIndex","nativeAsset","preMintedBptIdx","newTokensOut","AddressZero","includesAddress","JoinParams","isManaged","tokensIn","parsedAmountsIn","parsedBptOut","maxAmountsIn","newTokensIn","minimumBPT","ExchangeService","signer","TransactionBuilder","BalancerHelpers__factory","Vault__factory"],"mappings":"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","x_google_ignoreList":[1,2,3,4,5,6,7,8,9,10,11,12]}